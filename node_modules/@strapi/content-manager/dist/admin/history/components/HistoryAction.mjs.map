{"version":3,"file":"HistoryAction.mjs","sources":["../../../../admin/src/history/components/HistoryAction.tsx"],"sourcesContent":["import { useQueryParams, useTracking } from '@strapi/admin/strapi-admin';\nimport { ClockCounterClockwise } from '@strapi/icons';\nimport { stringify } from 'qs';\nimport { useIntl } from 'react-intl';\nimport { useNavigate, useLocation } from 'react-router-dom';\n\nimport type { DocumentActionComponent } from '../../content-manager';\n\nconst HistoryAction: DocumentActionComponent = ({ model, document }) => {\n  const { formatMessage } = useIntl();\n  const [{ query }] = useQueryParams<{ plugins?: Record<string, unknown> }>();\n  const navigate = useNavigate();\n  const { trackUsage } = useTracking();\n  const { pathname } = useLocation();\n  const pluginsQueryParams = stringify({ plugins: query.plugins }, { encode: false });\n\n  if (!window.strapi.features.isEnabled('cms-content-history')) {\n    return null;\n  }\n\n  const handleOnClick = () => {\n    const destination = { pathname: 'history', search: pluginsQueryParams };\n    trackUsage('willNavigate', {\n      from: pathname,\n      to: `${pathname}/${destination.pathname}`,\n    });\n    navigate(destination);\n  };\n\n  return {\n    icon: <ClockCounterClockwise />,\n    label: formatMessage({\n      id: 'content-manager.history.document-action',\n      defaultMessage: 'Content History',\n    }),\n    onClick: handleOnClick,\n    disabled:\n      /**\n       * The user is creating a new document.\n       * It hasn't been saved yet, so there's no history to go to\n       */\n      !document ||\n      /**\n       * The document has been created but the current dimension has never been saved.\n       * For example, the user is creating a new locale in an existing document,\n       * so there's no history for the document in that locale\n       */\n      !document.id ||\n      /**\n       * History is only available for content types created by the user.\n       * These have the `api::` prefix, as opposed to the ones created by Strapi or plugins,\n       * which start with `admin::` or `plugin::`\n       */\n      !model.startsWith('api::'),\n    position: 'header',\n  };\n};\n\nHistoryAction.type = 'history';\nHistoryAction.position = 'header';\n\nexport { HistoryAction };\n"],"names":["HistoryAction","model","document","formatMessage","useIntl","query","useQueryParams","navigate","useNavigate","trackUsage","useTracking","pathname","useLocation","pluginsQueryParams","stringify","plugins","encode","window","strapi","features","isEnabled","handleOnClick","destination","search","from","to","icon","_jsx","ClockCounterClockwise","label","id","defaultMessage","onClick","disabled","startsWith","position","type"],"mappings":";;;;;;;AAQA,MAAMA,gBAAyC,CAAC,EAAEC,KAAK,EAAEC,QAAQ,EAAE,GAAA;IACjE,MAAM,EAAEC,aAAa,EAAE,GAAGC,OAAAA,EAAAA;AAC1B,IAAA,MAAM,CAAC,EAAEC,KAAK,EAAE,CAAC,GAAGC,cAAAA,EAAAA;AACpB,IAAA,MAAMC,QAAWC,GAAAA,WAAAA,EAAAA;IACjB,MAAM,EAAEC,UAAU,EAAE,GAAGC,WAAAA,EAAAA;IACvB,MAAM,EAAEC,QAAQ,EAAE,GAAGC,WAAAA,EAAAA;AACrB,IAAA,MAAMC,qBAAqBC,SAAU,CAAA;AAAEC,QAAAA,OAAAA,EAASV,MAAMU;KAAW,EAAA;QAAEC,MAAQ,EAAA;AAAM,KAAA,CAAA;IAEjF,IAAI,CAACC,OAAOC,MAAM,CAACC,QAAQ,CAACC,SAAS,CAAC,qBAAwB,CAAA,EAAA;QAC5D,OAAO,IAAA;AACT;AAEA,IAAA,MAAMC,aAAgB,GAAA,IAAA;AACpB,QAAA,MAAMC,WAAc,GAAA;YAAEX,QAAU,EAAA,SAAA;YAAWY,MAAQV,EAAAA;AAAmB,SAAA;AACtEJ,QAAAA,UAAAA,CAAW,cAAgB,EAAA;YACzBe,IAAMb,EAAAA,QAAAA;YACNc,EAAI,EAAA,CAAC,EAAEd,QAAS,CAAA,CAAC,EAAEW,WAAYX,CAAAA,QAAQ,CAAC;AAC1C,SAAA,CAAA;QACAJ,QAASe,CAAAA,WAAAA,CAAAA;AACX,KAAA;IAEA,OAAO;AACLI,QAAAA,IAAAA,gBAAMC,GAACC,CAAAA,qBAAAA,EAAAA,EAAAA,CAAAA;AACPC,QAAAA,KAAAA,EAAO1B,aAAc,CAAA;YACnB2B,EAAI,EAAA,yCAAA;YACJC,cAAgB,EAAA;AAClB,SAAA,CAAA;QACAC,OAASX,EAAAA,aAAAA;QACTY,QACE;;;AAGC,UACD,CAAC/B,QACD;;;;UAKA,CAACA,QAAS4B,CAAAA,EAAE;;;;UAMZ,CAAC7B,KAAMiC,CAAAA,UAAU,CAAC,OAAA,CAAA;QACpBC,QAAU,EAAA;AACZ,KAAA;AACF;AAEAnC,aAAAA,CAAcoC,IAAI,GAAG,SAAA;AACrBpC,aAAAA,CAAcmC,QAAQ,GAAG,QAAA;;;;"}