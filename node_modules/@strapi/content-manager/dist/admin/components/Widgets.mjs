import { jsx, jsxs } from 'react/jsx-runtime';
import * as React from 'react';
import { Widget, useTracking } from '@strapi/admin/strapi-admin';
import { Typography, Flex, Table, Tbody, Tr, Td, Box, IconButton, Portal } from '@strapi/design-system';
import { Pencil } from '@strapi/icons';
import { useIntl } from 'react-intl';
import { useNavigate, Link } from 'react-router-dom';
import { styled } from 'styled-components';
import { DocumentStatus } from '../pages/EditView/components/DocumentStatus.mjs';
import { useGetRecentDocumentsQuery, useGetCountDocumentsQuery } from '../services/homepage.mjs';
import { RelativeTime } from './RelativeTime.mjs';

const CellTypography = styled(Typography).attrs({
    maxWidth: '14.4rem',
    display: 'block'
})`
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
`;
const RecentDocumentsTable = ({ documents })=>{
    const { formatMessage } = useIntl();
    const { trackUsage } = useTracking();
    const navigate = useNavigate();
    const getEditViewLink = (document)=>{
        const isSingleType = document.kind === 'singleType';
        const kindPath = isSingleType ? 'single-types' : 'collection-types';
        const queryParams = document.locale ? `?plugins[i18n][locale]=${document.locale}` : '';
        return `/content-manager/${kindPath}/${document.contentTypeUid}${isSingleType ? '' : '/' + document.documentId}${queryParams}`;
    };
    const handleRowClick = (document)=>()=>{
            trackUsage('willEditEntryFromHome');
            const link = getEditViewLink(document);
            navigate(link);
        };
    return /*#__PURE__*/ jsx(Table, {
        colCount: 5,
        rowCount: documents?.length ?? 0,
        children: /*#__PURE__*/ jsx(Tbody, {
            children: documents?.map((document)=>/*#__PURE__*/ jsxs(Tr, {
                    onClick: handleRowClick(document),
                    cursor: "pointer",
                    children: [
                        /*#__PURE__*/ jsx(Td, {
                            children: /*#__PURE__*/ jsx(CellTypography, {
                                title: document.title,
                                variant: "omega",
                                textColor: "neutral800",
                                children: document.title
                            })
                        }),
                        /*#__PURE__*/ jsx(Td, {
                            children: /*#__PURE__*/ jsx(CellTypography, {
                                variant: "omega",
                                textColor: "neutral600",
                                children: document.kind === 'singleType' ? formatMessage({
                                    id: 'content-manager.widget.last-edited.single-type',
                                    defaultMessage: 'Single-Type'
                                }) : formatMessage({
                                    id: document.contentTypeDisplayName,
                                    defaultMessage: document.contentTypeDisplayName
                                })
                            })
                        }),
                        /*#__PURE__*/ jsx(Td, {
                            children: /*#__PURE__*/ jsx(Box, {
                                display: "inline-block",
                                children: document.status ? /*#__PURE__*/ jsx(DocumentStatus, {
                                    status: document.status
                                }) : /*#__PURE__*/ jsx(Typography, {
                                    textColor: "neutral600",
                                    "aria-hidden": true,
                                    children: "-"
                                })
                            })
                        }),
                        /*#__PURE__*/ jsx(Td, {
                            children: /*#__PURE__*/ jsx(Typography, {
                                textColor: "neutral600",
                                children: /*#__PURE__*/ jsx(RelativeTime, {
                                    timestamp: new Date(document.updatedAt)
                                })
                            })
                        }),
                        /*#__PURE__*/ jsx(Td, {
                            onClick: (e)=>e.stopPropagation(),
                            children: /*#__PURE__*/ jsx(Box, {
                                display: "inline-block",
                                children: /*#__PURE__*/ jsx(IconButton, {
                                    tag: Link,
                                    to: getEditViewLink(document),
                                    onClick: ()=>trackUsage('willEditEntryFromHome'),
                                    label: formatMessage({
                                        id: 'content-manager.actions.edit.label',
                                        defaultMessage: 'Edit'
                                    }),
                                    variant: "ghost",
                                    children: /*#__PURE__*/ jsx(Pencil, {})
                                })
                            })
                        })
                    ]
                }, document.documentId))
        })
    });
};
/* -------------------------------------------------------------------------------------------------
 * LastEditedWidget
 * -----------------------------------------------------------------------------------------------*/ const LastEditedWidget = ()=>{
    const { formatMessage } = useIntl();
    const { data, isLoading, error } = useGetRecentDocumentsQuery({
        action: 'update'
    });
    if (isLoading) {
        return /*#__PURE__*/ jsx(Widget.Loading, {});
    }
    if (error || !data) {
        return /*#__PURE__*/ jsx(Widget.Error, {});
    }
    if (data.length === 0) {
        return /*#__PURE__*/ jsx(Widget.NoData, {
            children: formatMessage({
                id: 'content-manager.widget.last-edited.no-data',
                defaultMessage: 'No edited entries'
            })
        });
    }
    return /*#__PURE__*/ jsx(RecentDocumentsTable, {
        documents: data
    });
};
/* -------------------------------------------------------------------------------------------------
 * LastPublishedWidget
 * -----------------------------------------------------------------------------------------------*/ const LastPublishedWidget = ()=>{
    const { formatMessage } = useIntl();
    const { data, isLoading, error } = useGetRecentDocumentsQuery({
        action: 'publish'
    });
    if (isLoading) {
        return /*#__PURE__*/ jsx(Widget.Loading, {});
    }
    if (error || !data) {
        return /*#__PURE__*/ jsx(Widget.Error, {});
    }
    if (data.length === 0) {
        return /*#__PURE__*/ jsx(Widget.NoData, {
            children: formatMessage({
                id: 'content-manager.widget.last-published.no-data',
                defaultMessage: 'No published entries'
            })
        });
    }
    return /*#__PURE__*/ jsx(RecentDocumentsTable, {
        documents: data
    });
};
/* -------------------------------------------------------------------------------------------------
 * ChartEntriesWidget
 * -----------------------------------------------------------------------------------------------*/ const RADIUS = 80;
const STROKE = 10;
const CIRCUMFERENCE = 2 * Math.PI * (RADIUS - STROKE / 2);
const ArcChart = styled.circle`
  stroke: ${({ theme, $arcColor })=>theme.colors[$arcColor]};
`;
const TextChart = styled.tspan`
  text-transform: lowercase;
  fill: ${({ theme, $textColor })=>theme.colors[$textColor]};
`;
const KeyChartItem = styled(Flex)`
  width: 100%;

  ${({ theme })=>theme.breakpoints.small} {
    width: auto;
  }
`;
const DonutChartSVG = ({ data })=>{
    const { locale } = useIntl();
    const { formatMessage } = useIntl();
    const total = data.reduce((acc, curr)=>acc + curr.count, 0);
    const [tooltip, setTooltip] = React.useState({
        visible: false,
        x: 0,
        y: 0,
        value: null
    });
    let cumulativePercent = 0;
    const handleMouseOver = (e, value)=>{
        setTooltip({
            visible: true,
            x: e.clientX,
            y: e.clientY,
            value
        });
    };
    const handleMouseOut = ()=>{
        setTooltip((t)=>({
                ...t,
                visible: false
            }));
    };
    const handleFocus = (e, value)=>{
        setTooltip({
            visible: true,
            x: e.currentTarget.getBoundingClientRect().width / 2 + e.currentTarget.getBoundingClientRect().left,
            y: e.currentTarget.getBoundingClientRect().height + e.currentTarget.getBoundingClientRect().top,
            value
        });
    };
    return /*#__PURE__*/ jsxs(Flex, {
        direction: "column",
        gap: 6,
        margin: "auto",
        children: [
            /*#__PURE__*/ jsxs("svg", {
                width: RADIUS * 2,
                height: RADIUS * 2,
                viewBox: `0 0 ${RADIUS * 2} ${RADIUS * 2}`,
                style: {
                    position: 'relative',
                    zIndex: 1
                },
                children: [
                    /*#__PURE__*/ jsx("g", {
                        transform: `rotate(-90 ${RADIUS} ${RADIUS})`,
                        children: data.map((value)=>{
                            const percent = value.count / total * 100;
                            const arcLength = percent / 100 * CIRCUMFERENCE;
                            const dashArray = `${arcLength} ${CIRCUMFERENCE - arcLength}`;
                            const dashOffset = CIRCUMFERENCE * (1 - cumulativePercent / 100);
                            const el = /*#__PURE__*/ jsx(ArcChart, {
                                cx: RADIUS,
                                cy: RADIUS,
                                r: RADIUS - STROKE / 2,
                                fill: "none",
                                strokeWidth: STROKE,
                                strokeDasharray: dashArray,
                                strokeDashoffset: dashOffset,
                                style: {
                                    transition: 'stroke-dashoffset 0.3s',
                                    cursor: 'pointer'
                                },
                                tabIndex: 0,
                                "aria-describedby": tooltip.visible ? 'chart-tooltip' : undefined,
                                onFocus: (e)=>handleFocus(e, value),
                                onBlur: handleMouseOut,
                                onMouseMove: (e)=>handleMouseOver(e, value),
                                onMouseLeave: handleMouseOut,
                                $arcColor: value.color
                            }, value.label);
                            cumulativePercent += percent;
                            return el;
                        })
                    }),
                    /*#__PURE__*/ jsxs("text", {
                        x: RADIUS,
                        y: RADIUS,
                        textAnchor: "middle",
                        fontSize: "2.4rem",
                        fontWeight: "bold",
                        children: [
                            /*#__PURE__*/ jsx(TextChart, {
                                x: RADIUS,
                                dy: "0",
                                $textColor: "neutral800",
                                children: new Intl.NumberFormat(locale, {
                                    notation: 'compact',
                                    maximumFractionDigits: 1
                                }).format(total)
                            }),
                            /*#__PURE__*/ jsx(TextChart, {
                                x: RADIUS,
                                dy: "1.4em",
                                fontSize: "1.4rem",
                                fontWeight: "normal",
                                $textColor: "neutral600",
                                children: formatMessage({
                                    id: 'content-manager.widget.chart-entries.title',
                                    defaultMessage: 'entries'
                                })
                            })
                        ]
                    })
                ]
            }),
            tooltip.visible && tooltip.value && /*#__PURE__*/ jsx(Portal, {
                style: {
                    position: 'fixed',
                    left: 16,
                    top: 16,
                    zIndex: 2,
                    transform: `translate(${tooltip.x}px, ${tooltip.y}px)`
                },
                "data-testid": "entries-chart-tooltip",
                children: /*#__PURE__*/ jsx(Box, {
                    background: "neutral900",
                    padding: 2,
                    borderRadius: 1,
                    textAlign: "center",
                    role: "tooltip",
                    "aria-live": "polite",
                    children: /*#__PURE__*/ jsx(Typography, {
                        textColor: "neutral0",
                        children: formatMessage({
                            id: 'content-manager.widget.chart-entries.tooltip',
                            defaultMessage: '{count} items'
                        }, {
                            count: tooltip.value.count,
                            label: tooltip.value.label
                        })
                    })
                })
            }),
            /*#__PURE__*/ jsx(Flex, {
                gap: 4,
                wrap: "wrap",
                children: data.map((value)=>value.count > 0 && /*#__PURE__*/ jsxs(KeyChartItem, {
                        gap: 1,
                        children: [
                            /*#__PURE__*/ jsx(Box, {
                                background: value.color,
                                padding: 2,
                                borderRadius: 1
                            }),
                            /*#__PURE__*/ jsx(Typography, {
                                variant: "pi",
                                children: value.label
                            })
                        ]
                    }, value.label))
            })
        ]
    });
};
const ChartEntriesWidget = ()=>{
    const { formatMessage } = useIntl();
    const { data: countDocuments, isLoading, error } = useGetCountDocumentsQuery();
    if (isLoading) {
        return /*#__PURE__*/ jsx(Widget.Loading, {});
    }
    if (error) {
        return /*#__PURE__*/ jsx(Widget.Error, {});
    }
    const { draft, published, modified } = countDocuments ?? {
        draft: 0,
        published: 0,
        modified: 0
    };
    const total = draft + published + modified;
    if (!total) {
        return /*#__PURE__*/ jsx(Widget.NoData, {
            children: formatMessage({
                id: 'content-manager.widget.last-published.no-data',
                defaultMessage: 'No published entries'
            })
        });
    }
    return /*#__PURE__*/ jsx(Flex, {
        minHeight: "100%",
        children: /*#__PURE__*/ jsx(DonutChartSVG, {
            data: [
                {
                    label: formatMessage({
                        id: 'content-manager.containers.List.draft',
                        defaultMessage: 'Draft'
                    }),
                    count: draft,
                    color: 'secondary500'
                },
                {
                    label: formatMessage({
                        id: 'content-manager.containers.List.modified',
                        defaultMessage: 'Modified'
                    }),
                    count: modified,
                    color: 'alternative500'
                },
                {
                    label: formatMessage({
                        id: 'content-manager.containers.List.published',
                        defaultMessage: 'Published'
                    }),
                    count: published,
                    color: 'success500'
                }
            ]
        })
    });
};

export { ChartEntriesWidget, LastEditedWidget, LastPublishedWidget };
//# sourceMappingURL=Widgets.mjs.map
