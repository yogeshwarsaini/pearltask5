{"version":3,"file":"CellContent.js","sources":["../../../../../../admin/src/pages/ListView/components/TableCells/CellContent.tsx"],"sourcesContent":["import { Tooltip, Typography } from '@strapi/design-system';\nimport isEmpty from 'lodash/isEmpty';\n\nimport { CellValue } from './CellValue';\nimport { SingleComponent, RepeatableComponent } from './Components';\nimport { MediaSingle, MediaMultiple } from './Media';\nimport { RelationMultiple, RelationSingle } from './Relations';\n\nimport type { ListFieldLayout } from '../../../../hooks/useDocumentLayout';\nimport type { Schema, Data } from '@strapi/types';\n\ninterface CellContentProps extends Omit<ListFieldLayout, 'cellFormatter'> {\n  content: Schema.Attribute.Value<Schema.Attribute.AnyAttribute>;\n  rowId: Data.ID;\n}\n\nconst CellContent = ({ content, mainField, attribute, rowId, name }: CellContentProps) => {\n  if (!hasContent(content, mainField, attribute)) {\n    return (\n      <Typography\n        textColor=\"neutral800\"\n        paddingLeft={attribute.type === ('relation' || 'component') ? '1.6rem' : 0}\n        paddingRight={attribute.type === ('relation' || 'component') ? '1.6rem' : 0}\n      >\n        -\n      </Typography>\n    );\n  }\n\n  switch (attribute.type) {\n    case 'media':\n      if (!attribute.multiple) {\n        return <MediaSingle {...content} />;\n      }\n\n      return <MediaMultiple content={content} />;\n\n    case 'relation': {\n      if (isSingleRelation(attribute.relation)) {\n        return <RelationSingle mainField={mainField} content={content} />;\n      }\n\n      return <RelationMultiple rowId={rowId} mainField={mainField} content={content} name={name} />;\n    }\n\n    case 'component':\n      if (attribute.repeatable) {\n        return <RepeatableComponent mainField={mainField} content={content} />;\n      }\n\n      return <SingleComponent mainField={mainField} content={content} />;\n\n    case 'string':\n      return (\n        <Tooltip description={content}>\n          <Typography maxWidth=\"30rem\" ellipsis textColor=\"neutral800\">\n            <CellValue type={attribute.type} value={content} />\n          </Typography>\n        </Tooltip>\n      );\n\n    default:\n      return (\n        <Typography maxWidth=\"30rem\" ellipsis textColor=\"neutral800\">\n          <CellValue type={attribute.type} value={content} />\n        </Typography>\n      );\n  }\n};\n\nconst hasContent = (\n  content: CellContentProps['content'],\n  mainField: CellContentProps['mainField'],\n  attribute: CellContentProps['attribute']\n) => {\n  if (attribute.type === 'component') {\n    // Repeatable fields show the ID as fallback, in case the mainField\n    // doesn't have any content\n    if (attribute.repeatable || !mainField) {\n      return content?.length > 0;\n    }\n\n    const value = content?.[mainField.name];\n\n    // relations, media ... show the id as fallback\n    if (mainField.name === 'id' && ![undefined, null].includes(value)) {\n      return true;\n    }\n\n    return !isEmpty(value);\n  }\n\n  if (attribute.type === 'relation') {\n    if (isSingleRelation(attribute.relation)) {\n      return !isEmpty(content);\n    }\n\n    if (Array.isArray(content)) {\n      return content.length > 0;\n    }\n\n    return content?.count > 0;\n  }\n\n  /*\n      Biginteger fields need to be treated as strings, as `isNumber`\n      doesn't deal with them.\n  */\n  if (['integer', 'decimal', 'float', 'number'].includes(attribute.type)) {\n    return typeof content === 'number';\n  }\n\n  if (attribute.type === 'boolean') {\n    return content !== null;\n  }\n\n  return !isEmpty(content);\n};\n\nconst isSingleRelation = (\n  type: Extract<CellContentProps['attribute'], { type: 'relation' }>['relation']\n) => ['oneToOne', 'manyToOne', 'oneToOneMorph'].includes(type);\n\nexport { CellContent };\nexport type { CellContentProps };\n"],"names":["CellContent","content","mainField","attribute","rowId","name","hasContent","_jsx","Typography","textColor","paddingLeft","type","paddingRight","multiple","MediaSingle","MediaMultiple","isSingleRelation","relation","RelationSingle","RelationMultiple","repeatable","RepeatableComponent","SingleComponent","Tooltip","description","maxWidth","ellipsis","CellValue","value","length","undefined","includes","isEmpty","Array","isArray","count"],"mappings":";;;;;;;;;;AAgBA,MAAMA,WAAc,GAAA,CAAC,EAAEC,OAAO,EAAEC,SAAS,EAAEC,SAAS,EAAEC,KAAK,EAAEC,IAAI,EAAoB,GAAA;AACnF,IAAA,IAAI,CAACC,UAAAA,CAAWL,OAASC,EAAAA,SAAAA,EAAWC,SAAY,CAAA,EAAA;AAC9C,QAAA,qBACEI,cAACC,CAAAA,uBAAAA,EAAAA;YACCC,SAAU,EAAA,YAAA;AACVC,YAAAA,WAAAA,EAAaP,UAAUQ,IAAI,MAAM,UAAwB,IAAK,QAAW,GAAA,CAAA;AACzEC,YAAAA,YAAAA,EAAcT,UAAUQ,IAAI,MAAM,UAAwB,IAAK,QAAW,GAAA,CAAA;AAC3E,YAAA,QAAA,EAAA;;AAIL;AAEA,IAAA,OAAQR,UAAUQ,IAAI;QACpB,KAAK,OAAA;YACH,IAAI,CAACR,SAAUU,CAAAA,QAAQ,EAAE;AACvB,gBAAA,qBAAON,cAACO,CAAAA,iBAAAA,EAAAA;AAAa,oBAAA,GAAGb;;AAC1B;AAEA,YAAA,qBAAOM,cAACQ,CAAAA,mBAAAA,EAAAA;gBAAcd,OAASA,EAAAA;;QAEjC,KAAK,UAAA;AAAY,YAAA;gBACf,IAAIe,gBAAAA,CAAiBb,SAAUc,CAAAA,QAAQ,CAAG,EAAA;AACxC,oBAAA,qBAAOV,cAACW,CAAAA,wBAAAA,EAAAA;wBAAehB,SAAWA,EAAAA,SAAAA;wBAAWD,OAASA,EAAAA;;AACxD;AAEA,gBAAA,qBAAOM,cAACY,CAAAA,0BAAAA,EAAAA;oBAAiBf,KAAOA,EAAAA,KAAAA;oBAAOF,SAAWA,EAAAA,SAAAA;oBAAWD,OAASA,EAAAA,OAAAA;oBAASI,IAAMA,EAAAA;;AACvF;QAEA,KAAK,WAAA;YACH,IAAIF,SAAAA,CAAUiB,UAAU,EAAE;AACxB,gBAAA,qBAAOb,cAACc,CAAAA,8BAAAA,EAAAA;oBAAoBnB,SAAWA,EAAAA,SAAAA;oBAAWD,OAASA,EAAAA;;AAC7D;AAEA,YAAA,qBAAOM,cAACe,CAAAA,0BAAAA,EAAAA;gBAAgBpB,SAAWA,EAAAA,SAAAA;gBAAWD,OAASA,EAAAA;;QAEzD,KAAK,QAAA;AACH,YAAA,qBACEM,cAACgB,CAAAA,oBAAAA,EAAAA;gBAAQC,WAAavB,EAAAA,OAAAA;AACpB,gBAAA,QAAA,gBAAAM,cAACC,CAAAA,uBAAAA,EAAAA;oBAAWiB,QAAS,EAAA,OAAA;oBAAQC,QAAQ,EAAA,IAAA;oBAACjB,SAAU,EAAA,YAAA;AAC9C,oBAAA,QAAA,gBAAAF,cAACoB,CAAAA,mBAAAA,EAAAA;AAAUhB,wBAAAA,IAAAA,EAAMR,UAAUQ,IAAI;wBAAEiB,KAAO3B,EAAAA;;;;AAKhD,QAAA;AACE,YAAA,qBACEM,cAACC,CAAAA,uBAAAA,EAAAA;gBAAWiB,QAAS,EAAA,OAAA;gBAAQC,QAAQ,EAAA,IAAA;gBAACjB,SAAU,EAAA,YAAA;AAC9C,gBAAA,QAAA,gBAAAF,cAACoB,CAAAA,mBAAAA,EAAAA;AAAUhB,oBAAAA,IAAAA,EAAMR,UAAUQ,IAAI;oBAAEiB,KAAO3B,EAAAA;;;AAGhD;AACF;AAEA,MAAMK,UAAAA,GAAa,CACjBL,OAAAA,EACAC,SACAC,EAAAA,SAAAA,GAAAA;IAEA,IAAIA,SAAAA,CAAUQ,IAAI,KAAK,WAAa,EAAA;;;AAGlC,QAAA,IAAIR,SAAUiB,CAAAA,UAAU,IAAI,CAAClB,SAAW,EAAA;AACtC,YAAA,OAAOD,SAAS4B,MAAS,GAAA,CAAA;AAC3B;AAEA,QAAA,MAAMD,KAAQ3B,GAAAA,OAAAA,GAAUC,SAAAA,CAAUG,IAAI,CAAC;;AAGvC,QAAA,IAAIH,SAAUG,CAAAA,IAAI,KAAK,IAAA,IAAQ,CAAC;AAACyB,YAAAA,SAAAA;AAAW,YAAA;SAAK,CAACC,QAAQ,CAACH,KAAQ,CAAA,EAAA;YACjE,OAAO,IAAA;AACT;AAEA,QAAA,OAAO,CAACI,OAAQJ,CAAAA,KAAAA,CAAAA;AAClB;IAEA,IAAIzB,SAAAA,CAAUQ,IAAI,KAAK,UAAY,EAAA;QACjC,IAAIK,gBAAAA,CAAiBb,SAAUc,CAAAA,QAAQ,CAAG,EAAA;AACxC,YAAA,OAAO,CAACe,OAAQ/B,CAAAA,OAAAA,CAAAA;AAClB;QAEA,IAAIgC,KAAAA,CAAMC,OAAO,CAACjC,OAAU,CAAA,EAAA;YAC1B,OAAOA,OAAAA,CAAQ4B,MAAM,GAAG,CAAA;AAC1B;AAEA,QAAA,OAAO5B,SAASkC,KAAQ,GAAA,CAAA;AAC1B;AAEA;;;AAGA,KACA,IAAI;AAAC,QAAA,SAAA;AAAW,QAAA,SAAA;AAAW,QAAA,OAAA;AAAS,QAAA;AAAS,KAAA,CAACJ,QAAQ,CAAC5B,SAAUQ,CAAAA,IAAI,CAAG,EAAA;AACtE,QAAA,OAAO,OAAOV,OAAY,KAAA,QAAA;AAC5B;IAEA,IAAIE,SAAAA,CAAUQ,IAAI,KAAK,SAAW,EAAA;AAChC,QAAA,OAAOV,OAAY,KAAA,IAAA;AACrB;AAEA,IAAA,OAAO,CAAC+B,OAAQ/B,CAAAA,OAAAA,CAAAA;AAClB,CAAA;AAEA,MAAMe,gBAAAA,GAAmB,CACvBL,IACG,GAAA;AAAC,QAAA,UAAA;AAAY,QAAA,WAAA;AAAa,QAAA;AAAgB,KAAA,CAACoB,QAAQ,CAACpB,IAAAA,CAAAA;;;;"}