{"version":3,"file":"Actions.js","sources":["../../../../../../admin/src/pages/ListView/components/BulkActions/Actions.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {\n  useStrapiApp,\n  DescriptionComponentRenderer,\n  useTable,\n  useQueryParams,\n} from '@strapi/admin/strapi-admin';\nimport { Box, ButtonProps, Flex, Typography } from '@strapi/design-system';\nimport { WarningCircle } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\nimport { useDocumentRBAC } from '../../../../features/DocumentRBAC';\nimport { useDoc } from '../../../../hooks/useDocument';\nimport { useDocumentActions } from '../../../../hooks/useDocumentActions';\nimport { buildValidParams } from '../../../../utils/api';\nimport { getTranslation } from '../../../../utils/translations';\nimport {\n  DialogOptions,\n  DocumentActionButton,\n  ModalOptions,\n  NotificationOptions,\n} from '../../../EditView/components/DocumentActions';\n\nimport { PublishAction } from './PublishAction';\n\nimport type { BulkActionComponent, ContentManagerPlugin } from '../../../../content-manager';\n\ninterface BulkActionDescription {\n  dialog?: DialogOptions | NotificationOptions | ModalOptions;\n  disabled?: boolean;\n  icon?: React.ReactNode;\n  label: string;\n  onClick?: (event: React.SyntheticEvent) => void;\n  /**\n   * @default 'default'\n   */\n  type?: 'icon' | 'default';\n  /**\n   * @default 'secondary'\n   */\n  variant?: ButtonProps['variant'];\n}\n\n/* -------------------------------------------------------------------------------------------------\n * BulkActionsRenderer\n * -----------------------------------------------------------------------------------------------*/\n\nconst BulkActionsRenderer = () => {\n  const plugins = useStrapiApp('BulkActionsRenderer', (state) => state.plugins);\n\n  const { model, collectionType } = useDoc();\n  const { selectedRows } = useTable('BulkActionsRenderer', (state) => state);\n\n  return (\n    <Flex gap={2}>\n      <DescriptionComponentRenderer\n        props={{\n          model,\n          collectionType,\n          documents: selectedRows,\n        }}\n        descriptions={(\n          plugins['content-manager'].apis as ContentManagerPlugin['config']['apis']\n        ).getBulkActions()}\n      >\n        {(actions) => actions.map((action) => <DocumentActionButton key={action.id} {...action} />)}\n      </DescriptionComponentRenderer>\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * DefaultBulkActions\n * -----------------------------------------------------------------------------------------------*/\n\nconst DeleteAction: BulkActionComponent = ({ documents, model }) => {\n  const { formatMessage } = useIntl();\n  const { schema: contentType } = useDoc();\n  const selectRow = useTable('DeleteAction', (state) => state.selectRow);\n  const hasI18nEnabled = Boolean(contentType?.pluginOptions?.i18n);\n  const [{ query }] = useQueryParams<{ plugins?: { i18n?: { locale?: string } } }>();\n  const params = React.useMemo(() => buildValidParams(query), [query]);\n  const hasDeletePermission = useDocumentRBAC('deleteAction', (state) => state.canDelete);\n  const { deleteMany: bulkDeleteAction, isLoading } = useDocumentActions();\n  const documentIds = documents.map(({ documentId }) => documentId);\n\n  const handleConfirmBulkDelete = async () => {\n    const res = await bulkDeleteAction({\n      documentIds,\n      model,\n      params,\n    });\n    if (!('error' in res)) {\n      selectRow([]);\n    }\n  };\n\n  if (!hasDeletePermission) return null;\n\n  return {\n    variant: 'danger-light',\n    label: formatMessage({ id: 'global.delete', defaultMessage: 'Delete' }),\n    dialog: {\n      type: 'dialog',\n      title: formatMessage({\n        id: 'app.components.ConfirmDialog.title',\n        defaultMessage: 'Confirmation',\n      }),\n      loading: isLoading,\n      content: (\n        <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\n          <Flex justifyContent=\"center\">\n            <WarningCircle width=\"24px\" height=\"24px\" fill=\"danger600\" />\n          </Flex>\n          <Typography id=\"confirm-description\" textAlign=\"center\">\n            {formatMessage({\n              id: 'popUpWarning.bodyMessage.contentType.delete.all',\n              defaultMessage: 'Are you sure you want to delete these entries?',\n            })}\n          </Typography>\n          {hasI18nEnabled && (\n            <Box textAlign=\"center\" padding={3}>\n              <Typography textColor=\"danger500\">\n                {formatMessage(\n                  {\n                    id: getTranslation('Settings.list.actions.deleteAdditionalInfos'),\n                    defaultMessage:\n                      'This will delete the active locale versions <em>(from Internationalization)</em>',\n                  },\n                  {\n                    em: Emphasis,\n                  }\n                )}\n              </Typography>\n            </Box>\n          )}\n        </Flex>\n      ),\n      onConfirm: handleConfirmBulkDelete,\n    },\n  };\n};\n\nDeleteAction.type = 'delete';\n\nconst UnpublishAction: BulkActionComponent = ({ documents, model }) => {\n  const { formatMessage } = useIntl();\n  const { schema } = useDoc();\n  const selectRow = useTable('UnpublishAction', (state) => state.selectRow);\n  const hasPublishPermission = useDocumentRBAC('unpublishAction', (state) => state.canPublish);\n  const hasI18nEnabled = Boolean(schema?.pluginOptions?.i18n);\n  const hasDraftAndPublishEnabled = Boolean(schema?.options?.draftAndPublish);\n  const { unpublishMany: bulkUnpublishAction, isLoading } = useDocumentActions();\n  const documentIds = documents.map(({ documentId }) => documentId);\n  const [{ query }] = useQueryParams();\n  const params = React.useMemo(() => buildValidParams(query), [query]);\n\n  const handleConfirmBulkUnpublish = async () => {\n    const data = await bulkUnpublishAction({ documentIds, model, params });\n    if (!('error' in data)) {\n      selectRow([]);\n    }\n  };\n\n  const showUnpublishButton =\n    hasDraftAndPublishEnabled &&\n    hasPublishPermission &&\n    documents.some((entry) => entry.status === 'published' || entry.status === 'modified');\n\n  if (!showUnpublishButton) return null;\n\n  return {\n    variant: 'tertiary',\n    label: formatMessage({ id: 'app.utils.unpublish', defaultMessage: 'Unpublish' }),\n    dialog: {\n      type: 'dialog',\n      title: formatMessage({\n        id: 'app.components.ConfirmDialog.title',\n        defaultMessage: 'Confirmation',\n      }),\n      loading: isLoading,\n      content: (\n        <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\n          <Flex justifyContent=\"center\">\n            <WarningCircle width=\"24px\" height=\"24px\" fill=\"danger600\" />\n          </Flex>\n          <Typography id=\"confirm-description\" textAlign=\"center\">\n            {formatMessage({\n              id: 'popUpWarning.bodyMessage.contentType.unpublish.all',\n              defaultMessage: 'Are you sure you want to unpublish these entries?',\n            })}\n          </Typography>\n          {hasI18nEnabled && (\n            <Box textAlign=\"center\" padding={3}>\n              <Typography textColor=\"danger500\">\n                {formatMessage(\n                  {\n                    id: getTranslation('Settings.list.actions.unpublishAdditionalInfos'),\n                    defaultMessage:\n                      'This will unpublish the active locale versions <em>(from Internationalization)</em>',\n                  },\n                  {\n                    em: Emphasis,\n                  }\n                )}\n              </Typography>\n            </Box>\n          )}\n        </Flex>\n      ),\n      confirmButton: formatMessage({\n        id: 'app.utils.unpublish',\n        defaultMessage: 'Unpublish',\n      }),\n      onConfirm: handleConfirmBulkUnpublish,\n    },\n  };\n};\n\nUnpublishAction.type = 'unpublish';\n\nconst Emphasis = (chunks: React.ReactNode) => (\n  <Typography fontWeight=\"semiBold\" textColor=\"danger500\">\n    {chunks}\n  </Typography>\n);\n\nconst DEFAULT_BULK_ACTIONS: BulkActionComponent[] = [PublishAction, UnpublishAction, DeleteAction];\n\nexport { DEFAULT_BULK_ACTIONS, BulkActionsRenderer, Emphasis };\nexport type { BulkActionDescription };\n"],"names":["BulkActionsRenderer","plugins","useStrapiApp","state","model","collectionType","useDoc","selectedRows","useTable","_jsx","Flex","gap","DescriptionComponentRenderer","props","documents","descriptions","apis","getBulkActions","actions","map","action","DocumentActionButton","id","DeleteAction","formatMessage","useIntl","schema","contentType","selectRow","hasI18nEnabled","Boolean","pluginOptions","i18n","query","useQueryParams","params","React","useMemo","buildValidParams","hasDeletePermission","useDocumentRBAC","canDelete","deleteMany","bulkDeleteAction","isLoading","useDocumentActions","documentIds","documentId","handleConfirmBulkDelete","res","variant","label","defaultMessage","dialog","type","title","loading","content","_jsxs","direction","alignItems","justifyContent","WarningCircle","width","height","fill","Typography","textAlign","Box","padding","textColor","getTranslation","em","Emphasis","onConfirm","UnpublishAction","hasPublishPermission","canPublish","hasDraftAndPublishEnabled","options","draftAndPublish","unpublishMany","bulkUnpublishAction","handleConfirmBulkUnpublish","data","showUnpublishButton","some","entry","status","confirmButton","chunks","fontWeight","DEFAULT_BULK_ACTIONS","PublishAction"],"mappings":"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"}