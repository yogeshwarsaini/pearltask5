{"version":3,"file":"ConfirmBulkActionDialog.js","sources":["../../../../../../admin/src/pages/ListView/components/BulkActions/ConfirmBulkActionDialog.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {\n  useTable,\n  useNotification,\n  useAPIErrorHandler,\n  useQueryParams,\n} from '@strapi/admin/strapi-admin';\nimport { Button, Flex, Dialog, Typography } from '@strapi/design-system';\nimport { Check, WarningCircle } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\nimport { useDoc } from '../../../../hooks/useDocument';\nimport { useGetManyDraftRelationCountQuery } from '../../../../services/documents';\nimport { getTranslation } from '../../../../utils/translations';\n\nimport { Emphasis } from './Actions';\n\ninterface ConfirmBulkActionDialogProps {\n  endAction: React.ReactNode;\n  onToggleDialog: () => void;\n  isOpen?: boolean;\n  dialogBody: React.ReactNode;\n}\n\nconst ConfirmBulkActionDialog = ({\n  onToggleDialog,\n  isOpen = false,\n  dialogBody,\n  endAction,\n}: ConfirmBulkActionDialogProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Dialog.Root open={isOpen}>\n      <Dialog.Content>\n        <Dialog.Header>\n          {formatMessage({\n            id: 'app.components.ConfirmDialog.title',\n            defaultMessage: 'Confirmation',\n          })}\n        </Dialog.Header>\n        <Dialog.Body>\n          <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\n            <Flex justifyContent=\"center\">\n              <WarningCircle width=\"24px\" height=\"24px\" fill=\"danger600\" />\n            </Flex>\n            {dialogBody}\n          </Flex>\n        </Dialog.Body>\n        <Dialog.Footer>\n          <Dialog.Cancel>\n            <Button width={'50%'} onClick={onToggleDialog} variant=\"tertiary\">\n              {formatMessage({\n                id: 'app.components.Button.cancel',\n                defaultMessage: 'Cancel',\n              })}\n            </Button>\n          </Dialog.Cancel>\n          {endAction}\n        </Dialog.Footer>\n      </Dialog.Content>\n    </Dialog.Root>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * BoldChunk\n * -----------------------------------------------------------------------------------------------*/\n\nconst BoldChunk = (chunks: React.ReactNode) => <Typography fontWeight=\"bold\">{chunks}</Typography>;\n\n/* -------------------------------------------------------------------------------------------------\n * ConfirmDialogPublishAll\n * -----------------------------------------------------------------------------------------------*/\n\ninterface ConfirmDialogPublishAllProps\n  extends Pick<ConfirmBulkActionDialogProps, 'isOpen' | 'onToggleDialog'> {\n  isConfirmButtonLoading?: boolean;\n  onConfirm: () => void;\n}\n\nconst ConfirmDialogPublishAll = ({\n  isOpen,\n  onToggleDialog,\n  isConfirmButtonLoading = false,\n  onConfirm,\n}: ConfirmDialogPublishAllProps) => {\n  const { formatMessage } = useIntl();\n  const selectedEntries = useTable('ConfirmDialogPublishAll', (state) => state.selectedRows);\n  const { toggleNotification } = useNotification();\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler(getTranslation);\n  const { model, schema } = useDoc();\n  const [{ query }] = useQueryParams<{\n    plugins?: {\n      i18n?: {\n        locale?: string;\n      };\n    };\n  }>();\n\n  // TODO skipping this for now as there is a bug with the draft relation count that will be worked on separately\n  // see RFC \"Count draft relations\" in Notion\n  const enableDraftRelationsCount = false;\n\n  const {\n    data: countDraftRelations = 0,\n    isLoading,\n    error,\n  } = useGetManyDraftRelationCountQuery(\n    {\n      model,\n      documentIds: selectedEntries.map((entry) => entry.documentId),\n      locale: query?.plugins?.i18n?.locale,\n    },\n    {\n      skip: !enableDraftRelationsCount || selectedEntries.length === 0,\n    }\n  );\n\n  React.useEffect(() => {\n    if (error) {\n      toggleNotification({ type: 'danger', message: formatAPIError(error) });\n    }\n  }, [error, formatAPIError, toggleNotification]);\n\n  if (error) {\n    return null;\n  }\n\n  return (\n    <ConfirmBulkActionDialog\n      isOpen={isOpen && !isLoading}\n      onToggleDialog={onToggleDialog}\n      dialogBody={\n        <>\n          <Typography id=\"confirm-description\" textAlign=\"center\">\n            {countDraftRelations > 0 &&\n              formatMessage(\n                {\n                  id: getTranslation(`popUpwarning.warning.bulk-has-draft-relations.message`),\n                  defaultMessage:\n                    '<b>{count} {count, plural, one { relation } other { relations } } out of {entities} { entities, plural, one { entry } other { entries } } {count, plural, one { is } other { are } }</b> not published yet and might lead to unexpected behavior. ',\n                },\n                {\n                  b: BoldChunk,\n                  count: countDraftRelations,\n                  entities: selectedEntries.length,\n                }\n              )}\n            {formatMessage({\n              id: getTranslation('popUpWarning.bodyMessage.contentType.publish.all'),\n              defaultMessage: 'Are you sure you want to publish these entries?',\n            })}\n          </Typography>\n          {schema?.pluginOptions &&\n            'i18n' in schema.pluginOptions &&\n            schema?.pluginOptions.i18n && (\n              <Typography textColor=\"danger500\" textAlign=\"center\">\n                {formatMessage(\n                  {\n                    id: getTranslation('Settings.list.actions.publishAdditionalInfos'),\n                    defaultMessage:\n                      'This will publish the active locale versions <em>(from Internationalization)</em>',\n                  },\n                  {\n                    em: Emphasis,\n                  }\n                )}\n              </Typography>\n            )}\n        </>\n      }\n      endAction={\n        <Button\n          width={'50%'}\n          onClick={onConfirm}\n          variant=\"secondary\"\n          startIcon={<Check />}\n          loading={isConfirmButtonLoading}\n        >\n          {formatMessage({\n            id: 'app.utils.publish',\n            defaultMessage: 'Publish',\n          })}\n        </Button>\n      }\n    />\n  );\n};\n\nexport { ConfirmDialogPublishAll, ConfirmBulkActionDialog };\nexport type { ConfirmDialogPublishAllProps, ConfirmBulkActionDialogProps };\n"],"names":["ConfirmBulkActionDialog","onToggleDialog","isOpen","dialogBody","endAction","formatMessage","useIntl","_jsx","Dialog","Root","open","_jsxs","Content","Header","id","defaultMessage","Body","Flex","direction","alignItems","gap","justifyContent","WarningCircle","width","height","fill","Footer","Cancel","Button","onClick","variant","BoldChunk","chunks","Typography","fontWeight","ConfirmDialogPublishAll","isConfirmButtonLoading","onConfirm","selectedEntries","useTable","state","selectedRows","toggleNotification","useNotification","_unstableFormatAPIError","formatAPIError","useAPIErrorHandler","getTranslation","model","schema","useDoc","query","useQueryParams","enableDraftRelationsCount","data","countDraftRelations","isLoading","error","useGetManyDraftRelationCountQuery","documentIds","map","entry","documentId","locale","plugins","i18n","skip","React","useEffect","type","message","_Fragment","textAlign","b","count","entities","length","pluginOptions","textColor","em","Emphasis","startIcon","Check","loading"],"mappings":"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"}