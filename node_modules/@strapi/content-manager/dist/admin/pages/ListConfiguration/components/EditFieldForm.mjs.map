{"version":3,"file":"EditFieldForm.mjs","sources":["../../../../../admin/src/pages/ListConfiguration/components/EditFieldForm.tsx"],"sourcesContent":["import { Form, useField, InputRenderer, useNotification } from '@strapi/admin/strapi-admin';\nimport { Button, Flex, FlexComponent, Grid, Modal } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\nimport * as yup from 'yup';\n\nimport { FieldTypeIcon } from '../../../components/FieldTypeIcon';\nimport { capitalise } from '../../../utils/strings';\nimport { getTranslation } from '../../../utils/translations';\n\nimport type { ListFieldLayout } from '../../../hooks/useDocumentLayout';\nimport type { FormData } from '../ListConfigurationPage';\n\ninterface EditFieldFormProps extends Pick<ListFieldLayout, 'attribute'> {\n  name: string;\n  onClose: () => void;\n}\n\nconst FIELD_SCHEMA = yup.object().shape({\n  label: yup.string().required(),\n  sortable: yup.boolean(),\n});\n\nconst EditFieldForm = ({ attribute, name, onClose }: EditFieldFormProps) => {\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n\n  const { value, onChange } = useField<FormData['layout'][number]>(name);\n\n  if (!value) {\n    // This is very unlikely to happen, but it ensures the form is not opened without a value.\n    console.error(\n      \"You've opened a field to edit without it being part of the form, this is likely a bug with Strapi. Please open an issue.\"\n    );\n\n    toggleNotification({\n      message: formatMessage({\n        id: 'content-manager.containers.list-settings.modal-form.error',\n        defaultMessage: 'An error occurred while trying to open the form.',\n      }),\n      type: 'danger',\n    });\n\n    return null;\n  }\n\n  let shouldDisplaySortToggle = !['media', 'relation'].includes(attribute.type);\n\n  if ('relation' in attribute && ['oneWay', 'oneToOne', 'manyToOne'].includes(attribute.relation)) {\n    shouldDisplaySortToggle = true;\n  }\n\n  return (\n    <Modal.Content>\n      <Form\n        method=\"PUT\"\n        initialValues={value}\n        validationSchema={FIELD_SCHEMA}\n        onSubmit={(data) => {\n          onChange(name, data);\n          onClose();\n        }}\n      >\n        <Modal.Header>\n          <HeaderContainer>\n            {/* @ts-expect-error attribute.type === custom does not work here */}\n            <FieldTypeIcon type={attribute.type} />\n            <Modal.Title>\n              {formatMessage(\n                {\n                  id: getTranslation('containers.list-settings.modal-form.label'),\n                  defaultMessage: 'Edit {fieldName}',\n                },\n                { fieldName: capitalise(value.label) }\n              )}\n            </Modal.Title>\n          </HeaderContainer>\n        </Modal.Header>\n        <Modal.Body>\n          <Grid.Root gap={4}>\n            {[\n              {\n                name: 'label',\n                label: formatMessage({\n                  id: getTranslation('form.Input.label'),\n                  defaultMessage: 'Label',\n                }),\n                hint: formatMessage({\n                  id: getTranslation('form.Input.label.inputDescription'),\n                  defaultMessage: \"This value overrides the label displayed in the table's head\",\n                }),\n                size: 6,\n                type: 'string' as const,\n              },\n              {\n                label: formatMessage({\n                  id: getTranslation('form.Input.sort.field'),\n                  defaultMessage: 'Enable sort on this field',\n                }),\n                name: 'sortable',\n                size: 6,\n                type: 'boolean' as const,\n              },\n            ]\n              .filter(\n                (field) =>\n                  field.name !== 'sortable' ||\n                  (field.name === 'sortable' && shouldDisplaySortToggle)\n              )\n              .map(({ size, ...field }) => (\n                <Grid.Item\n                  key={field.name}\n                  s={12}\n                  col={size}\n                  direction=\"column\"\n                  alignItems=\"stretch\"\n                >\n                  <InputRenderer {...field} />\n                </Grid.Item>\n              ))}\n          </Grid.Root>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button onClick={onClose} variant=\"tertiary\">\n            {formatMessage({ id: 'app.components.Button.cancel', defaultMessage: 'Cancel' })}\n          </Button>\n          <Button type=\"submit\">\n            {formatMessage({ id: 'global.finish', defaultMessage: 'Finish' })}\n          </Button>\n        </Modal.Footer>\n      </Form>\n    </Modal.Content>\n  );\n};\n\nconst HeaderContainer = styled<FlexComponent>(Flex)`\n  svg {\n    width: 3.2rem;\n    margin-right: ${({ theme }) => theme.spaces[3]};\n  }\n`;\n\nexport { EditFieldForm };\nexport type { EditFieldFormProps };\n"],"names":["FIELD_SCHEMA","yup","object","shape","label","string","required","sortable","boolean","EditFieldForm","attribute","name","onClose","formatMessage","useIntl","toggleNotification","useNotification","value","onChange","useField","console","error","message","id","defaultMessage","type","shouldDisplaySortToggle","includes","relation","_jsx","Modal","Content","_jsxs","Form","method","initialValues","validationSchema","onSubmit","data","Header","HeaderContainer","FieldTypeIcon","Title","getTranslation","fieldName","capitalise","Body","Grid","Root","gap","hint","size","filter","field","map","Item","s","col","direction","alignItems","InputRenderer","Footer","Button","onClick","variant","styled","Flex","theme","spaces"],"mappings":"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"}