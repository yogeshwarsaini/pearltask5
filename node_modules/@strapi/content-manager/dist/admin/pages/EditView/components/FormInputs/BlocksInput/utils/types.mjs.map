{"version":3,"file":"types.mjs","sources":["../../../../../../../../admin/src/pages/EditView/components/FormInputs/BlocksInput/utils/types.ts"],"sourcesContent":["import type { Schema } from '@strapi/types';\nimport type { Element, Node } from 'slate';\n\ntype Block<T extends Element['type']> = Extract<Node, { type: T }>;\n\n// Wrap Object.entries to get the correct types\nconst getEntries = <T extends object>(object: T) =>\n  Object.entries(object) as [keyof T, T[keyof T]][];\n\n// Wrap Object.keys to get the correct types\nconst getKeys = <T extends object>(object: T) => Object.keys(object) as (keyof T)[];\n\nconst isLinkNode = (element: Element): element is Schema.Attribute.LinkInlineNode => {\n  return element.type === 'link';\n};\n\nconst isListNode = (element: Element): element is Schema.Attribute.ListBlockNode => {\n  return element.type === 'list';\n};\n\nexport { type Block, getEntries, getKeys, isLinkNode, isListNode };\n"],"names":["getEntries","object","Object","entries","getKeys","keys","isLinkNode","element","type","isListNode"],"mappings":"AAKA;AACA,MAAMA,UAAa,GAAA,CAAmBC,MACpCC,GAAAA,MAAAA,CAAOC,OAAO,CAACF,MAAAA;AAEjB;AACA,MAAMG,OAAU,GAAA,CAAmBH,MAAcC,GAAAA,MAAAA,CAAOG,IAAI,CAACJ,MAAAA;AAE7D,MAAMK,aAAa,CAACC,OAAAA,GAAAA;IAClB,OAAOA,OAAAA,CAAQC,IAAI,KAAK,MAAA;AAC1B;AAEA,MAAMC,aAAa,CAACF,OAAAA,GAAAA;IAClB,OAAOA,OAAAA,CAAQC,IAAI,KAAK,MAAA;AAC1B;;;;"}