{"version":3,"file":"Header.js","sources":["../../../../../admin/src/pages/EditView/components/Header.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {\n  DescriptionComponentRenderer,\n  useForm,\n  BackButton,\n  useNotification,\n  useStrapiApp,\n  useQueryParams,\n} from '@strapi/admin/strapi-admin';\nimport {\n  Box,\n  Flex,\n  SingleSelect,\n  SingleSelectOption,\n  Typography,\n  IconButton,\n  Dialog,\n} from '@strapi/design-system';\nimport { ListPlus, Pencil, Trash, WarningCircle } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { useMatch, useNavigate, useParams } from 'react-router-dom';\n\nimport { RelativeTime } from '../../../components/RelativeTime';\nimport {\n  CREATED_AT_ATTRIBUTE_NAME,\n  CREATED_BY_ATTRIBUTE_NAME,\n  PUBLISHED_AT_ATTRIBUTE_NAME,\n  PUBLISHED_BY_ATTRIBUTE_NAME,\n  UPDATED_AT_ATTRIBUTE_NAME,\n  UPDATED_BY_ATTRIBUTE_NAME,\n} from '../../../constants/attributes';\nimport { COLLECTION_TYPES, SINGLE_TYPES } from '../../../constants/collections';\nimport { useDocumentRBAC } from '../../../features/DocumentRBAC';\nimport { useDoc } from '../../../hooks/useDocument';\nimport { useDocumentActions } from '../../../hooks/useDocumentActions';\nimport { CLONE_PATH, LIST_PATH } from '../../../router';\nimport { getDisplayName } from '../../../utils/users';\n\nimport { DocumentActionsMenu } from './DocumentActions';\nimport { DocumentStatus } from './DocumentStatus';\n\nimport type { ContentManagerPlugin, DocumentActionComponent } from '../../../content-manager';\n\n/* -------------------------------------------------------------------------------------------------\n * Header\n * -----------------------------------------------------------------------------------------------*/\n\ninterface HeaderProps {\n  isCreating?: boolean;\n  status?: 'draft' | 'published' | 'modified';\n  title?: string;\n}\n\nconst Header = ({ isCreating, status, title: documentTitle = 'Untitled' }: HeaderProps) => {\n  const { formatMessage } = useIntl();\n  const isCloning = useMatch(CLONE_PATH) !== null;\n  const params = useParams<{ collectionType: string; slug: string }>();\n\n  const title = isCreating\n    ? formatMessage({\n        id: 'content-manager.containers.edit.title.new',\n        defaultMessage: 'Create an entry',\n      })\n    : documentTitle;\n\n  return (\n    <Flex direction=\"column\" alignItems=\"flex-start\" paddingTop={6} paddingBottom={4} gap={2}>\n      <BackButton\n        fallback={\n          params.collectionType === SINGLE_TYPES\n            ? undefined\n            : `../${COLLECTION_TYPES}/${params.slug}`\n        }\n      />\n      <Flex width=\"100%\" justifyContent=\"space-between\" gap=\"80px\" alignItems=\"flex-start\">\n        <Typography variant=\"alpha\" tag=\"h1\">\n          {title}\n        </Typography>\n        <HeaderToolbar />\n      </Flex>\n      {status ? (\n        <Box marginTop={1}>\n          <DocumentStatus status={isCloning ? 'draft' : status} />\n        </Box>\n      ) : null}\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * HeaderToolbar\n * -----------------------------------------------------------------------------------------------*/\n\ninterface DialogOptions {\n  type: 'dialog';\n  title: string;\n  content?: React.ReactNode;\n  footer?: React.ReactNode;\n}\n\ninterface HeaderActionDescription {\n  disabled?: boolean;\n  label: string;\n  icon?: React.ReactNode;\n  type?: 'icon' | 'default';\n  onClick?: (event: React.SyntheticEvent) => Promise<boolean | void> | boolean | void;\n  dialog?: DialogOptions;\n  options?: Array<{\n    disabled?: boolean;\n    label: string;\n    startIcon?: React.ReactNode;\n    textValue?: string;\n    value: string;\n  }>;\n  onSelect?: (value: string) => void;\n  value?: string;\n  customizeContent?: (value: string) => React.ReactNode;\n}\n\n/**\n * @description Contains the document actions that have `position: header`, if there are\n * none we still render the menu because we render the information about the document there.\n */\nconst HeaderToolbar = () => {\n  const { formatMessage } = useIntl();\n  const isCloning = useMatch(CLONE_PATH) !== null;\n  const [\n    {\n      query: { status = 'draft' },\n    },\n  ] = useQueryParams<{ status: 'draft' | 'published' }>();\n  const { model, id, document, meta, collectionType } = useDoc();\n  const plugins = useStrapiApp('HeaderToolbar', (state) => state.plugins);\n\n  return (\n    <Flex gap={2}>\n      <DescriptionComponentRenderer\n        props={{\n          activeTab: status,\n          model,\n          documentId: id,\n          document: isCloning ? undefined : document,\n          meta: isCloning ? undefined : meta,\n          collectionType,\n        }}\n        descriptions={(\n          plugins['content-manager'].apis as ContentManagerPlugin['config']['apis']\n        ).getHeaderActions()}\n      >\n        {(actions) => {\n          if (actions.length > 0) {\n            return <HeaderActions actions={actions} />;\n          } else {\n            return null;\n          }\n        }}\n      </DescriptionComponentRenderer>\n      <DescriptionComponentRenderer\n        props={{\n          activeTab: status,\n          model,\n          documentId: id,\n          document: isCloning ? undefined : document,\n          meta: isCloning ? undefined : meta,\n          collectionType,\n        }}\n        descriptions={(\n          plugins['content-manager'].apis as ContentManagerPlugin['config']['apis']\n        ).getDocumentActions('header')}\n      >\n        {(actions) => {\n          const headerActions = actions.filter((action) => {\n            const positions = Array.isArray(action.position) ? action.position : [action.position];\n            return positions.includes('header');\n          });\n\n          return (\n            <DocumentActionsMenu\n              actions={headerActions}\n              label={formatMessage({\n                id: 'content-manager.containers.edit.header.more-actions',\n                defaultMessage: 'More actions',\n              })}\n            >\n              <Information activeTab={status} />\n            </DocumentActionsMenu>\n          );\n        }}\n      </DescriptionComponentRenderer>\n    </Flex>\n  );\n};\n\ninterface InformationProps {\n  activeTab: 'draft' | 'published';\n}\n\nconst Information = ({ activeTab }: InformationProps) => {\n  const { formatMessage } = useIntl();\n  const { document, meta } = useDoc();\n\n  if (!document || !document.id) {\n    return null;\n  }\n\n  /**\n   * Because in the backend separate entries are made for draft and published\n   * documents, the creator fields are different for each of them. For example,\n   * you could make your draft in January and then publish it for the first time\n   * in Feb. This would make the createdAt value for the published entry in Feb\n   * but really we want to show the document as a whole. The draft entry will also\n   * never have the publishedAt values.\n   *\n   * So, we decipher which document to show the creator for based on the activeTab.\n   */\n\n  const createAndUpdateDocument =\n    activeTab === 'draft'\n      ? document\n      : meta?.availableStatus.find((status) => status.publishedAt === null);\n\n  const publishDocument =\n    activeTab === 'published'\n      ? document\n      : meta?.availableStatus.find((status) => status.publishedAt !== null);\n\n  const creator = createAndUpdateDocument?.[CREATED_BY_ATTRIBUTE_NAME]\n    ? getDisplayName(createAndUpdateDocument[CREATED_BY_ATTRIBUTE_NAME])\n    : null;\n\n  const updator = createAndUpdateDocument?.[UPDATED_BY_ATTRIBUTE_NAME]\n    ? getDisplayName(createAndUpdateDocument[UPDATED_BY_ATTRIBUTE_NAME])\n    : null;\n\n  const information: Array<{ isDisplayed?: boolean; label: string; value: React.ReactNode }> = [\n    {\n      isDisplayed: !!publishDocument?.[PUBLISHED_AT_ATTRIBUTE_NAME],\n      label: formatMessage({\n        id: 'content-manager.containers.edit.information.last-published.label',\n        defaultMessage: 'Published',\n      }),\n      value: formatMessage(\n        {\n          id: 'content-manager.containers.edit.information.last-published.value',\n          defaultMessage: `{time}{isAnonymous, select, true {} other { by {author}}}`,\n        },\n        {\n          time: (\n            <RelativeTime timestamp={new Date(publishDocument?.[PUBLISHED_AT_ATTRIBUTE_NAME])} />\n          ),\n          isAnonymous: !publishDocument?.[PUBLISHED_BY_ATTRIBUTE_NAME],\n          author: publishDocument?.[PUBLISHED_BY_ATTRIBUTE_NAME]\n            ? getDisplayName(publishDocument?.[PUBLISHED_BY_ATTRIBUTE_NAME])\n            : null,\n        }\n      ),\n    },\n    {\n      isDisplayed: !!createAndUpdateDocument?.[UPDATED_AT_ATTRIBUTE_NAME],\n      label: formatMessage({\n        id: 'content-manager.containers.edit.information.last-draft.label',\n        defaultMessage: 'Updated',\n      }),\n      value: formatMessage(\n        {\n          id: 'content-manager.containers.edit.information.last-draft.value',\n          defaultMessage: `{time}{isAnonymous, select, true {} other { by {author}}}`,\n        },\n        {\n          time: (\n            <RelativeTime\n              timestamp={new Date(createAndUpdateDocument?.[UPDATED_AT_ATTRIBUTE_NAME])}\n            />\n          ),\n          isAnonymous: !updator,\n          author: updator,\n        }\n      ),\n    },\n    {\n      isDisplayed: !!createAndUpdateDocument?.[CREATED_AT_ATTRIBUTE_NAME],\n      label: formatMessage({\n        id: 'content-manager.containers.edit.information.document.label',\n        defaultMessage: 'Created',\n      }),\n      value: formatMessage(\n        {\n          id: 'content-manager.containers.edit.information.document.value',\n          defaultMessage: `{time}{isAnonymous, select, true {} other { by {author}}}`,\n        },\n        {\n          time: (\n            <RelativeTime\n              timestamp={new Date(createAndUpdateDocument?.[CREATED_AT_ATTRIBUTE_NAME])}\n            />\n          ),\n          isAnonymous: !creator,\n          author: creator,\n        }\n      ),\n    },\n  ].filter((info) => info.isDisplayed);\n\n  return (\n    <Flex\n      borderWidth=\"1px 0 0 0\"\n      borderStyle=\"solid\"\n      borderColor=\"neutral150\"\n      direction=\"column\"\n      marginTop={2}\n      tag=\"dl\"\n      padding={5}\n      gap={3}\n      alignItems=\"flex-start\"\n      /**\n       * The menu content has a padding of 4px, but we want our divider (the border top applied) to\n       * be flush with the menu content. So we need to adjust the margin & width to account for the padding.\n       */\n      marginLeft=\"-0.4rem\"\n      marginRight=\"-0.4rem\"\n      width=\"calc(100% + 8px)\"\n    >\n      {information.map((info) => (\n        <Flex gap={1} direction=\"column\" alignItems=\"flex-start\" key={info.label}>\n          <Typography tag=\"dt\" variant=\"pi\" fontWeight=\"bold\">\n            {info.label}\n          </Typography>\n          <Typography tag=\"dd\" variant=\"pi\" textColor=\"neutral600\">\n            {info.value}\n          </Typography>\n        </Flex>\n      ))}\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * HeaderActions\n * -----------------------------------------------------------------------------------------------*/\n\ninterface HeaderActionsProps {\n  actions: Array<HeaderActionDescription & { id: string }>;\n}\n\nconst HeaderActions = ({ actions }: HeaderActionsProps) => {\n  const [dialogId, setDialogId] = React.useState<string | null>(null);\n\n  const handleClick =\n    (action: HeaderActionDescription & { id: string }) => async (e: React.MouseEvent) => {\n      if (!('options' in action)) {\n        const { onClick = () => false, dialog, id } = action;\n\n        const muteDialog = await onClick(e);\n\n        if (dialog && !muteDialog) {\n          e.preventDefault();\n          setDialogId(id);\n        }\n      }\n    };\n\n  const handleClose = () => {\n    setDialogId(null);\n  };\n\n  return (\n    <Flex gap={1}>\n      {actions.map((action) => {\n        if (action.options) {\n          return (\n            <SingleSelect\n              key={action.id}\n              size=\"S\"\n              // @ts-expect-error – the DS will handle numbers, but we're not allowing the API.\n              onChange={action.onSelect}\n              aria-label={action.label}\n              {...action}\n            >\n              {action.options.map(({ label, ...option }) => (\n                <SingleSelectOption key={option.value} {...option}>\n                  {label}\n                </SingleSelectOption>\n              ))}\n            </SingleSelect>\n          );\n        } else {\n          if (action.type === 'icon') {\n            return (\n              <React.Fragment key={action.id}>\n                <IconButton\n                  disabled={action.disabled}\n                  label={action.label}\n                  size=\"S\"\n                  onClick={handleClick(action)}\n                >\n                  {action.icon}\n                </IconButton>\n                {action.dialog ? (\n                  <HeaderActionDialog\n                    {...action.dialog}\n                    isOpen={dialogId === action.id}\n                    onClose={handleClose}\n                  />\n                ) : null}\n              </React.Fragment>\n            );\n          }\n        }\n      })}\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * HeaderActionDialog\n * -----------------------------------------------------------------------------------------------*/\ninterface HeaderActionDialogProps {\n  onClose: () => void;\n  onCancel?: () => Promise<void>;\n  title: string;\n  content?: React.ReactNode | ((props: { onClose: () => void }) => React.ReactNode);\n  isOpen: boolean;\n}\n\nconst HeaderActionDialog = ({\n  onClose,\n  onCancel,\n  title,\n  content: Content,\n  isOpen,\n}: HeaderActionDialogProps) => {\n  const handleClose = async () => {\n    if (onCancel) {\n      await onCancel();\n    }\n\n    onClose();\n  };\n\n  return (\n    <Dialog.Root open={isOpen} onOpenChange={handleClose}>\n      <Dialog.Content>\n        <Dialog.Header>{title}</Dialog.Header>\n        {typeof Content === 'function' ? <Content onClose={handleClose} /> : Content}\n      </Dialog.Content>\n    </Dialog.Root>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * DocumentActionComponents\n * -----------------------------------------------------------------------------------------------*/\n\nconst ConfigureTheViewAction: DocumentActionComponent = ({ collectionType, model }) => {\n  const navigate = useNavigate();\n  const { formatMessage } = useIntl();\n\n  return {\n    label: formatMessage({\n      id: 'app.links.configure-view',\n      defaultMessage: 'Configure the view',\n    }),\n    icon: <ListPlus />,\n    onClick: () => {\n      navigate(`../${collectionType}/${model}/configurations/edit`);\n    },\n    position: 'header',\n  };\n};\n\nConfigureTheViewAction.type = 'configure-the-view';\nConfigureTheViewAction.position = 'header';\n\nconst EditTheModelAction: DocumentActionComponent = ({ model }) => {\n  const navigate = useNavigate();\n  const { formatMessage } = useIntl();\n\n  return {\n    label: formatMessage({\n      id: 'content-manager.link-to-ctb',\n      defaultMessage: 'Edit the model',\n    }),\n    icon: <Pencil />,\n    onClick: () => {\n      navigate(`/plugins/content-type-builder/content-types/${model}`);\n    },\n    position: 'header',\n  };\n};\n\nEditTheModelAction.type = 'edit-the-model';\nEditTheModelAction.position = 'header';\n\nconst DeleteAction: DocumentActionComponent = ({ documentId, model, collectionType, document }) => {\n  const navigate = useNavigate();\n  const { formatMessage } = useIntl();\n  const listViewPathMatch = useMatch(LIST_PATH);\n  const canDelete = useDocumentRBAC('DeleteAction', (state) => state.canDelete);\n  const { delete: deleteAction, isLoading } = useDocumentActions();\n  const { toggleNotification } = useNotification();\n  const setSubmitting = useForm('DeleteAction', (state) => state.setSubmitting);\n  const isLocalized = document?.locale != null;\n\n  return {\n    disabled: !canDelete || !document,\n    label: formatMessage(\n      {\n        id: 'content-manager.actions.delete.label',\n        defaultMessage: 'Delete entry{isLocalized, select, true { (all locales)} other {}}',\n      },\n      { isLocalized }\n    ),\n    icon: <Trash />,\n    dialog: {\n      type: 'dialog',\n      title: formatMessage({\n        id: 'app.components.ConfirmDialog.title',\n        defaultMessage: 'Confirmation',\n      }),\n      content: (\n        <Flex direction=\"column\" gap={2}>\n          <WarningCircle width=\"24px\" height=\"24px\" fill=\"danger600\" />\n          <Typography tag=\"p\" variant=\"omega\" textAlign=\"center\">\n            {formatMessage({\n              id: 'content-manager.actions.delete.dialog.body',\n              defaultMessage: 'Are you sure?',\n            })}\n          </Typography>\n        </Flex>\n      ),\n      loading: isLoading,\n      onConfirm: async () => {\n        /**\n         * If we have a match, we're in the list view\n         * and therefore not in a form and shouldn't be\n         * trying to set the submitting value.\n         */\n        if (!listViewPathMatch) {\n          setSubmitting(true);\n        }\n        try {\n          if (!documentId && collectionType !== SINGLE_TYPES) {\n            console.error(\n              \"You're trying to delete a document without an id, this is likely a bug with Strapi. Please open an issue.\"\n            );\n\n            toggleNotification({\n              message: formatMessage({\n                id: 'content-manager.actions.delete.error',\n                defaultMessage: 'An error occurred while trying to delete the document.',\n              }),\n              type: 'danger',\n            });\n\n            return;\n          }\n\n          const res = await deleteAction({\n            documentId,\n            model,\n            collectionType,\n            params: {\n              locale: '*',\n            },\n          });\n\n          if (!('error' in res)) {\n            navigate({ pathname: `../${collectionType}/${model}` }, { replace: true });\n          }\n        } finally {\n          if (!listViewPathMatch) {\n            setSubmitting(false);\n          }\n        }\n      },\n    },\n    variant: 'danger',\n    position: ['header', 'table-row'],\n  };\n};\n\nDeleteAction.type = 'delete';\nDeleteAction.position = ['header', 'table-row'];\n\nconst DEFAULT_HEADER_ACTIONS = [EditTheModelAction, ConfigureTheViewAction, DeleteAction];\n\nexport { Header, DEFAULT_HEADER_ACTIONS };\nexport type { HeaderProps, HeaderActionDescription };\n"],"names":["Header","isCreating","status","title","documentTitle","formatMessage","useIntl","isCloning","useMatch","CLONE_PATH","params","useParams","id","defaultMessage","_jsxs","Flex","direction","alignItems","paddingTop","paddingBottom","gap","_jsx","BackButton","fallback","collectionType","SINGLE_TYPES","undefined","COLLECTION_TYPES","slug","width","justifyContent","Typography","variant","tag","HeaderToolbar","Box","marginTop","DocumentStatus","query","useQueryParams","model","document","meta","useDoc","plugins","useStrapiApp","state","DescriptionComponentRenderer","props","activeTab","documentId","descriptions","apis","getHeaderActions","actions","length","HeaderActions","getDocumentActions","headerActions","filter","action","positions","Array","isArray","position","includes","DocumentActionsMenu","label","Information","createAndUpdateDocument","availableStatus","find","publishedAt","publishDocument","creator","CREATED_BY_ATTRIBUTE_NAME","getDisplayName","updator","UPDATED_BY_ATTRIBUTE_NAME","information","isDisplayed","PUBLISHED_AT_ATTRIBUTE_NAME","value","time","RelativeTime","timestamp","Date","isAnonymous","PUBLISHED_BY_ATTRIBUTE_NAME","author","UPDATED_AT_ATTRIBUTE_NAME","CREATED_AT_ATTRIBUTE_NAME","info","borderWidth","borderStyle","borderColor","padding","marginLeft","marginRight","map","fontWeight","textColor","dialogId","setDialogId","React","useState","handleClick","e","onClick","dialog","muteDialog","preventDefault","handleClose","options","SingleSelect","size","onChange","onSelect","aria-label","option","SingleSelectOption","type","Fragment","IconButton","disabled","icon","HeaderActionDialog","isOpen","onClose","onCancel","content","Content","Dialog","Root","open","onOpenChange","ConfigureTheViewAction","navigate","useNavigate","ListPlus","EditTheModelAction","Pencil","DeleteAction","listViewPathMatch","LIST_PATH","canDelete","useDocumentRBAC","delete","deleteAction","isLoading","useDocumentActions","toggleNotification","useNotification","setSubmitting","useForm","isLocalized","locale","Trash","WarningCircle","height","fill","textAlign","loading","onConfirm","console","error","message","res","pathname","replace","DEFAULT_HEADER_ACTIONS"],"mappings":"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"}