{"version":3,"file":"utils.js","sources":["../../../../../../../../admin/src/pages/EditView/components/FormInputs/Wysiwyg/utils/utils.ts"],"sourcesContent":["import { MutableRefObject } from 'react';\n\nimport CodeMirror from 'codemirror5';\n\nexport const replaceText = (markdownName: string, textToChange: string) => {\n  let editedText;\n\n  switch (markdownName) {\n    case 'Strikethrough':\n      editedText = `~~${textToChange}~~`;\n      break;\n    case 'Bold':\n      editedText = `**${textToChange}**`;\n      break;\n    case 'Italic':\n      editedText = `_${textToChange}_`;\n      break;\n    case 'Underline':\n      editedText = `<u>${textToChange}</u>`;\n      break;\n    case 'Code':\n      editedText = `\\`\\`\\`\\n${textToChange}\\n\\`\\`\\``;\n      break;\n    case 'Link':\n      editedText = `[${textToChange}](link)`;\n      break;\n    case 'Quote':\n      editedText = `>${textToChange}`;\n      break;\n    default:\n      editedText = textToChange;\n  }\n\n  return editedText;\n};\n\nexport const insertText = (markdownName: string) => {\n  let editedText;\n  // object to calculate text that will be selected after insert of markdown\n  const selection = { start: markdownName.length, end: 0 };\n\n  switch (markdownName) {\n    case 'Strikethrough':\n      editedText = `~~${markdownName}~~`;\n      selection.end = 2;\n      break;\n    case 'Bold':\n      editedText = `**${markdownName}**`;\n      selection.end = 2;\n      break;\n    case 'Italic':\n      editedText = `_${markdownName}_`;\n      selection.end = 1;\n      break;\n    case 'alt':\n      editedText = `[${markdownName}]()`;\n      selection.end = 3;\n      break;\n    case 'Underline':\n      editedText = `<u>${markdownName}</u>`;\n      selection.end = 4;\n      break;\n    case 'Code':\n      editedText = `\\`\\`\\`\\n${markdownName}\\n\\`\\`\\``;\n      selection.end = 3;\n      break;\n    case 'Link':\n      editedText = `[${markdownName}](link)`;\n      selection.end = 7;\n      break;\n    case 'Quote':\n      editedText = `>${markdownName}`;\n      selection.end = 0;\n      break;\n    default:\n      editedText = '';\n  }\n\n  return { editedText, selection };\n};\n\nexport const insertListOrTitle = (markdown: string) => {\n  let textToInsert;\n\n  switch (markdown) {\n    case 'BulletList':\n      textToInsert = '- ';\n      break;\n    case 'NumberList':\n      textToInsert = '1. ';\n      break;\n    case 'h1':\n      textToInsert = '# ';\n      break;\n    case 'h2':\n      textToInsert = '## ';\n      break;\n    case 'h3':\n      textToInsert = '### ';\n      break;\n    case 'h4':\n      textToInsert = '#### ';\n      break;\n    case 'h5':\n      textToInsert = '##### ';\n      break;\n    case 'h6':\n      textToInsert = '###### ';\n      break;\n    default:\n      return '';\n  }\n\n  return textToInsert;\n};\n\n// EDITOR ACTIONS FUNCTIONS\n\nexport const markdownHandler = (\n  editor: MutableRefObject<CodeMirror.EditorFromTextArea>,\n  markdownType: string\n) => {\n  const textToEdit = editor.current.getSelection();\n  let textToInsert;\n\n  if (textToEdit) {\n    const editedText = replaceText(markdownType, textToEdit);\n    editor.current.replaceSelection(editedText);\n    editor.current.focus();\n  } else {\n    textToInsert = insertText(markdownType);\n    editor.current.replaceSelection(textToInsert.editedText);\n    editor.current.focus();\n    // set selection-focus to text to replace with content\n    const { line, ch } = editor.current.getCursor();\n    const endSelection = ch - textToInsert.selection.end;\n    const startSelection = ch - textToInsert.selection.end - textToInsert.selection.start;\n    editor.current.setSelection({ line, ch: startSelection }, { line, ch: endSelection });\n  }\n};\n\nexport const listHandler = (\n  editor: MutableRefObject<CodeMirror.EditorFromTextArea>,\n  listType: string\n) => {\n  const doc = editor.current.getDoc();\n  const insertion = listType === 'BulletList' ? '- ' : '1. ';\n\n  if (doc.somethingSelected()) {\n    const selections = doc.listSelections();\n    let remove: boolean | null = null;\n\n    editor.current.operation(function () {\n      selections.forEach(function (selection) {\n        const pos = [selection.head.line, selection.anchor.line].sort();\n\n        // Remove if the first text starts with it\n        if (remove == null) {\n          remove = doc.getLine(pos[0]).startsWith(insertion);\n        }\n\n        for (let i = pos[0]; i <= pos[1]; i++) {\n          if (remove) {\n            // Don't remove if we don't start with it\n            if (doc.getLine(i).startsWith(insertion)) {\n              doc.replaceRange('', { line: i, ch: 0 }, { line: i, ch: insertion.length });\n            }\n          } else {\n            const lineInsertion = listType === 'BulletList' ? '- ' : `${i + 1}. `;\n            doc.replaceRange(lineInsertion, { line: i, ch: 0 });\n          }\n        }\n      });\n    });\n  } else {\n    const { line: currentLine } = doc.getCursor();\n    const listToInsert = insertListOrTitle(listType);\n    const lineContent = editor.current.getLine(currentLine);\n\n    const textToInsert = listToInsert + lineContent;\n    editor.current.setSelection(\n      { line: currentLine, ch: 0 },\n      { line: currentLine, ch: lineContent.length }\n    );\n    editor.current.replaceSelection(textToInsert);\n  }\n\n  editor.current.focus();\n};\n\nexport const titleHandler = (\n  editor: MutableRefObject<CodeMirror.EditorFromTextArea>,\n  titleType: string\n) => {\n  const { line: currentLine } = editor.current.getCursor();\n  const titleToInsert = insertListOrTitle(titleType);\n  const lineContent = editor.current.getLine(currentLine);\n\n  // replace hashtags followed by a space in case user want to change the type of title\n  const lineWithNoTitle = lineContent.replace(/#{1,6}\\s/g, '').trim();\n\n  const textToInsert = titleToInsert + lineWithNoTitle;\n  editor.current.setSelection(\n    { line: currentLine, ch: 0 },\n    { line: currentLine, ch: lineContent.length }\n  );\n  editor.current.replaceSelection(textToInsert);\n\n  setTimeout(() => {\n    const newLastLineLength = editor.current.getLine(currentLine).length;\n    editor.current.focus();\n    editor.current.setCursor({ line: currentLine, ch: newLastLineLength });\n  }, 0);\n};\n\nexport const insertFile = (\n  editor: MutableRefObject<CodeMirror.EditorFromTextArea>,\n  files: any[]\n) => {\n  let { line } = editor.current.getCursor();\n  const { ch } = editor.current.getCursor();\n\n  files.forEach((file, i) => {\n    let contentLength = editor.current.getLine(line).length;\n    editor.current.setCursor({ line, ch: contentLength });\n    // create a new line after first image markdown inserted\n    // or if there is content in current line\n\n    if (i > 0 || (i === 0 && ch !== 0)) {\n      contentLength = editor.current.getLine(line).length;\n      editor.current.setCursor({ line, ch: contentLength });\n      line++;\n      editor.current.replaceSelection('\\n');\n    }\n\n    if (file.mime.includes('image')) {\n      editor.current.replaceSelection(`![${file.alt}](${file.url})`);\n    } else {\n      editor.current.replaceSelection(`[${file.alt}](${file.url})`);\n    }\n  });\n\n  setTimeout(() => editor.current.focus(), 0);\n};\n\n// NEXT FUNCTIONS FOR QUOTE OR CODE MARKDOWN\n\nconst insertWithTextToEdit = (\n  editor: MutableRefObject<CodeMirror.EditorFromTextArea>,\n  markdownType: string,\n  line: number,\n  contentLength: number,\n  textToEdit: string\n) => {\n  const textToInsert = replaceText(markdownType, textToEdit);\n\n  // remove content after current line\n  const contentToMove = editor.current.getRange(\n    { line: line + 1, ch: 0 },\n    { line: Infinity, ch: Infinity }\n  );\n  editor.current.replaceRange('', { line: line + 1, ch: 0 }, { line: Infinity, ch: Infinity });\n\n  // remove word that was selected\n  // set cursor end of line + move to next line\n  // add text to insert\n  editor.current.replaceSelection('');\n  editor.current.setCursor({ line, ch: contentLength });\n  editor.current.replaceSelection('\\n');\n  editor.current.replaceSelection(textToInsert);\n\n  if (markdownType === 'Code') {\n    const { line: newLine } = editor.current.getCursor();\n    editor.current.setCursor({ line: newLine - 1, ch: textToEdit.length });\n  }\n\n  // add content we had to remove earlier\n  editor.current.replaceRange(\n    contentToMove,\n    { line: line + 4, ch: 0 },\n    { line: Infinity, ch: Infinity }\n  );\n\n  editor.current.focus();\n};\n\nconst insertWithoutTextToEdit = (\n  editor: MutableRefObject<CodeMirror.EditorFromTextArea>,\n  markdownType: string,\n  line: number,\n  contentLength: number\n) => {\n  const textToInsert = insertText(markdownType);\n\n  // remove content after current line\n  const contentToMove = editor.current.getRange(\n    { line: line + 1, ch: 0 },\n    { line: Infinity, ch: Infinity }\n  );\n  editor.current.replaceRange('', { line: line + 1, ch: 0 }, { line: Infinity, ch: Infinity });\n\n  // replace cursor to next line\n  editor.current.setCursor({ line, ch: contentLength });\n  editor.current.replaceSelection('\\n');\n  editor.current.replaceSelection(textToInsert.editedText);\n\n  // set selection on \"Code\" or \"Quote\" word\n\n  if (markdownType === 'Code') {\n    line += 2;\n\n    editor.current.setSelection({ line, ch: 0 }, { line, ch: 4 });\n  } else {\n    line += 1;\n\n    const { ch } = editor.current.getCursor();\n    const endSelection = ch - textToInsert.selection.end;\n    const startSelection = ch - textToInsert.selection.end - textToInsert.selection.start;\n    editor.current.setSelection({ line, ch: startSelection }, { line, ch: endSelection });\n  }\n\n  // add content we had to remove earlier\n  editor.current.replaceRange(\n    contentToMove,\n    { line: line + 2, ch: 0 },\n    { line: Infinity, ch: Infinity }\n  );\n  editor.current.focus();\n};\n\nexport const quoteAndCodeHandler = (\n  editor: MutableRefObject<CodeMirror.EditorFromTextArea>,\n  markdownType: string\n) => {\n  const textToEdit = editor.current.getSelection();\n  const { line } = editor.current.getCursor();\n  const contentLength = editor.current.getLine(line).length;\n\n  if (textToEdit) {\n    insertWithTextToEdit(editor, markdownType, line, contentLength, textToEdit);\n  } else {\n    insertWithoutTextToEdit(editor, markdownType, line, contentLength);\n  }\n};\n"],"names":["replaceText","markdownName","textToChange","editedText","insertText","selection","start","length","end","insertListOrTitle","markdown","textToInsert","markdownHandler","editor","markdownType","textToEdit","current","getSelection","replaceSelection","focus","line","ch","getCursor","endSelection","startSelection","setSelection","listHandler","listType","doc","getDoc","insertion","somethingSelected","selections","listSelections","remove","operation","forEach","pos","head","anchor","sort","getLine","startsWith","i","replaceRange","lineInsertion","currentLine","listToInsert","lineContent","titleHandler","titleType","titleToInsert","lineWithNoTitle","replace","trim","setTimeout","newLastLineLength","setCursor","insertFile","files","file","contentLength","mime","includes","alt","url","insertWithTextToEdit","contentToMove","getRange","Infinity","newLine","insertWithoutTextToEdit","quoteAndCodeHandler"],"mappings":"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"}