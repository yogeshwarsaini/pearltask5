{"version":3,"file":"BlocksToolbar.mjs","sources":["../../../../../../../admin/src/pages/EditView/components/FormInputs/BlocksInput/BlocksToolbar.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport * as Toolbar from '@radix-ui/react-toolbar';\nimport {\n  Flex,\n  Tooltip,\n  SingleSelect,\n  SingleSelectOption,\n  Box,\n  FlexComponent,\n  BoxComponent,\n  Menu,\n} from '@strapi/design-system';\nimport { Link } from '@strapi/icons';\nimport { MessageDescriptor, useIntl } from 'react-intl';\nimport { Editor, Transforms, Element as SlateElement, Node, type Ancestor } from 'slate';\nimport { ReactEditor } from 'slate-react';\nimport { css, styled } from 'styled-components';\n\nimport { EditorToolbarObserver, type ObservedComponent } from '../../EditorToolbarObserver';\n\nimport {\n  type BlocksStore,\n  type SelectorBlockKey,\n  isSelectorBlockKey,\n  useBlocksEditorContext,\n} from './BlocksEditor';\nimport { insertLink } from './utils/links';\nimport { type Block, getEntries, getKeys } from './utils/types';\n\nconst ToolbarWrapper = styled<FlexComponent>(Flex)`\n  &[aria-disabled='true'] {\n    cursor: not-allowed;\n    background: ${({ theme }) => theme.colors.neutral150};\n  }\n`;\n\nconst ToolbarSeparator = styled(Toolbar.Separator)`\n  background: ${({ theme }) => theme.colors.neutral150};\n  width: 1px;\n  height: 2.4rem;\n  margin-left: 0.8rem;\n  margin-right: 0.8rem;\n`;\n\nconst FlexButton = styled<FlexComponent<'button'>>(Flex)`\n  // Inherit the not-allowed cursor from ToolbarWrapper when disabled\n  &[aria-disabled] {\n    cursor: not-allowed;\n  }\n\n  &[aria-disabled='false'] {\n    cursor: pointer;\n\n    // Only apply hover styles if the button is enabled\n    &:hover {\n      background: ${({ theme }) => theme.colors.primary100};\n    }\n  }\n`;\n\nconst SelectWrapper = styled<BoxComponent>(Box)`\n  // Styling changes to SingleSelect component don't work, so adding wrapper to target SingleSelect\n  div[role='combobox'] {\n    border: none;\n    cursor: pointer;\n    min-height: unset;\n    padding-top: 6px;\n    padding-bottom: 6px;\n\n    &[aria-disabled='false']:hover {\n      cursor: pointer;\n      background: ${({ theme }) => theme.colors.primary100};\n    }\n\n    &[aria-disabled] {\n      background: transparent;\n      cursor: inherit;\n\n      // Select text and icons should also have disabled color\n      span {\n        color: ${({ theme }) => theme.colors.neutral600};\n      }\n    }\n  }\n`;\n\n/**\n * Handles the modal component that may be returned by a block when converting it\n */\nfunction useConversionModal() {\n  const [modalElement, setModalComponent] = React.useState<React.JSX.Element | null>(null);\n\n  const handleConversionResult = (renderModal: void | (() => React.JSX.Element) | undefined) => {\n    // Not all blocks return a modal\n    if (renderModal) {\n      // Use cloneElement to apply a key because to create a new instance of the component\n      // Without the new key, the state is kept from previous times that option was picked\n      setModalComponent(React.cloneElement(renderModal(), { key: Date.now() }));\n    }\n  };\n\n  return { modalElement, handleConversionResult };\n}\n\ninterface ToolbarButtonProps {\n  icon: React.ComponentType<React.SVGProps<SVGSVGElement>>;\n  name: string;\n  label: MessageDescriptor;\n  isActive: boolean;\n  disabled: boolean;\n  handleClick: () => void;\n}\n\nconst ToolbarButton = ({\n  icon: Icon,\n  name,\n  label,\n  isActive,\n  disabled,\n  handleClick,\n}: ToolbarButtonProps) => {\n  const { editor } = useBlocksEditorContext('ToolbarButton');\n  const { formatMessage } = useIntl();\n  const labelMessage = formatMessage(label);\n\n  const enabledColor = isActive ? 'primary600' : 'neutral600';\n\n  return (\n    <Tooltip label={labelMessage}>\n      <Toolbar.ToggleItem\n        value={name}\n        data-state={isActive ? 'on' : 'off'}\n        onMouseDown={(e) => {\n          e.preventDefault();\n          handleClick();\n          ReactEditor.focus(editor);\n        }}\n        aria-disabled={disabled}\n        disabled={disabled}\n        aria-label={labelMessage}\n        asChild\n      >\n        <FlexButton\n          tag=\"button\"\n          background={isActive ? 'primary100' : ''}\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          width={7}\n          height={7}\n          hasRadius\n        >\n          <Icon fill={disabled ? 'neutral300' : enabledColor} />\n        </FlexButton>\n      </Toolbar.ToggleItem>\n    </Tooltip>\n  );\n};\n\nconst BlocksDropdown = () => {\n  const { editor, blocks, disabled } = useBlocksEditorContext('BlocksDropdown');\n  const { formatMessage } = useIntl();\n  const { modalElement, handleConversionResult } = useConversionModal();\n\n  const blockKeysToInclude: SelectorBlockKey[] = getEntries(blocks).reduce<\n    ReturnType<typeof getEntries>\n  >((currentKeys, entry) => {\n    const [key, block] = entry;\n\n    return block.isInBlocksSelector ? [...currentKeys, key] : currentKeys;\n  }, []);\n\n  const [blockSelected, setBlockSelected] = React.useState<SelectorBlockKey>('paragraph');\n\n  const handleSelect = (optionKey: unknown) => {\n    if (!isSelectorBlockKey(optionKey)) {\n      return;\n    }\n\n    const editorIsEmpty =\n      editor.children.length === 1 && Editor.isEmpty(editor, editor.children[0]);\n\n    if (!editor.selection && !editorIsEmpty) {\n      // When there is no selection, create an empty block at the end of the editor\n      // so that it can be converted to the selected block\n      Transforms.insertNodes(\n        editor,\n        {\n          type: 'quote',\n          children: [{ type: 'text', text: '' }],\n        },\n        {\n          select: true,\n          // Since there's no selection, Slate will automatically insert the node at the end\n        }\n      );\n    } else if (!editor.selection && editorIsEmpty) {\n      // When there is no selection and the editor is empty,\n      // select the empty paragraph from Slate's initialValue so it gets converted\n      Transforms.select(editor, Editor.start(editor, [0, 0]));\n    }\n\n    // If selection is already a list block, toggle its format\n    const currentListEntry = Editor.above(editor, {\n      match: (node) => !Editor.isEditor(node) && node.type === 'list',\n    });\n\n    if (currentListEntry && ['list-ordered', 'list-unordered'].includes(optionKey)) {\n      const [currentList, currentListPath] = currentListEntry;\n      const format = optionKey === 'list-ordered' ? 'ordered' : 'unordered';\n\n      if (!Editor.isEditor(currentList) && isListNode(currentList)) {\n        // Format is different, toggle list format\n        if (currentList.format !== format) {\n          Transforms.setNodes(editor, { format }, { at: currentListPath });\n        }\n      }\n      return;\n    }\n\n    // Let the block handle the Slate conversion logic\n    const maybeRenderModal = blocks[optionKey].handleConvert?.(editor);\n    handleConversionResult(maybeRenderModal);\n\n    setBlockSelected(optionKey);\n\n    ReactEditor.focus(editor);\n  };\n\n  /**\n   * Prevent the select from focusing itself so ReactEditor.focus(editor) can focus the editor instead.\n   *\n   * The editor first loses focus to a blur event when clicking the select button. However,\n   * refocusing the editor is not enough since the select's default behavior is to refocus itself\n   * after an option is selected.\n   *\n   */\n  const preventSelectFocus = (e: Event) => e.preventDefault();\n\n  // Listen to the selection change and update the selected block in the dropdown\n  React.useEffect(() => {\n    if (editor.selection) {\n      let selectedNode: Ancestor;\n\n      // If selection anchor is a list-item, get its parent\n      const currentListEntry = Editor.above(editor, {\n        match: (node) => !Editor.isEditor(node) && node.type === 'list',\n        at: editor.selection.anchor,\n      });\n\n      if (currentListEntry) {\n        const [currentList] = currentListEntry;\n        selectedNode = currentList;\n      } else {\n        // Get the parent node of the anchor other than list-item\n        const [anchorNode] = Editor.parent(editor, editor.selection.anchor, {\n          edge: 'start',\n          depth: 2,\n        });\n\n        // @ts-expect-error slate's delete behaviour creates an exceptional type\n        if (anchorNode.type === 'list-item') {\n          // When the last node in the selection is a list item,\n          // slate's default delete operation leaves an empty list-item instead of converting it into a paragraph.\n          // Issue: https://github.com/ianstormtaylor/slate/issues/2500\n\n          Transforms.setNodes(editor, { type: 'paragraph' });\n          // @ts-expect-error convert explicitly type to paragraph\n          selectedNode = { ...anchorNode, type: 'paragraph' };\n        } else {\n          selectedNode = anchorNode;\n        }\n      }\n\n      // Find the block key that matches the anchor node\n      const anchorBlockKey = getKeys(blocks).find(\n        (blockKey) => !Editor.isEditor(selectedNode) && blocks[blockKey].matchNode(selectedNode)\n      );\n\n      // Change the value selected in the dropdown if it doesn't match the anchor block key\n      if (anchorBlockKey && anchorBlockKey !== blockSelected) {\n        setBlockSelected(anchorBlockKey as SelectorBlockKey);\n      }\n    }\n  }, [editor.selection, editor, blocks, blockSelected]);\n\n  const Icon = blocks[blockSelected].icon;\n\n  return (\n    <>\n      <SelectWrapper>\n        <SingleSelect\n          startIcon={<Icon />}\n          onChange={handleSelect}\n          placeholder={formatMessage(blocks[blockSelected].label)}\n          value={blockSelected}\n          onCloseAutoFocus={preventSelectFocus}\n          aria-label={formatMessage({\n            id: 'components.Blocks.blocks.selectBlock',\n            defaultMessage: 'Select a block',\n          })}\n          disabled={disabled}\n        >\n          {blockKeysToInclude.map((key) => (\n            <BlockOption\n              key={key}\n              value={key}\n              label={blocks[key].label}\n              icon={blocks[key].icon}\n              blockSelected={blockSelected}\n            />\n          ))}\n        </SingleSelect>\n      </SelectWrapper>\n      {modalElement}\n    </>\n  );\n};\n\ninterface BlockOptionProps {\n  value: string;\n  icon: React.ComponentType<React.SVGProps<SVGElement>>;\n  label: MessageDescriptor;\n  blockSelected: string;\n}\n\nconst BlockOption = ({ value, icon: Icon, label, blockSelected }: BlockOptionProps) => {\n  const { formatMessage } = useIntl();\n\n  const isSelected = value === blockSelected;\n\n  return (\n    <SingleSelectOption\n      startIcon={<Icon fill={isSelected ? 'primary600' : 'neutral500'} />}\n      value={value}\n    >\n      {formatMessage(label)}\n    </SingleSelectOption>\n  );\n};\n\nconst isListNode = (node: unknown): node is Block<'list'> => {\n  return Node.isNode(node) && !Editor.isEditor(node) && node.type === 'list';\n};\n\ninterface ListButtonProps {\n  block: BlocksStore['list-ordered'] | BlocksStore['list-unordered'];\n  format: Block<'list'>['format'];\n  location?: 'toolbar' | 'menu';\n}\n\nconst ListButton = ({ block, format, location = 'toolbar' }: ListButtonProps) => {\n  const { formatMessage } = useIntl();\n  const { editor, disabled, blocks } = useBlocksEditorContext('ListButton');\n\n  const isListActive = () => {\n    if (!editor.selection) return false;\n\n    // Get the parent list at selection anchor node\n    const currentListEntry = Editor.above(editor, {\n      match: (node) => !Editor.isEditor(node) && node.type === 'list',\n      at: editor.selection.anchor,\n    });\n\n    if (currentListEntry) {\n      const [currentList] = currentListEntry;\n      if (!Editor.isEditor(currentList) && isListNode(currentList) && currentList.format === format)\n        return true;\n    }\n\n    return false;\n  };\n\n  /**\n   * @TODO: Currently, applying list while multiple blocks are selected is not supported.\n   * We should implement this feature in the future.\n   */\n  const isListDisabled = () => {\n    // Always disabled when the whole editor is disabled\n    if (disabled) {\n      return true;\n    }\n\n    // Always enabled when there's no selection\n    if (!editor.selection) {\n      return false;\n    }\n\n    // Get the block node closest to the anchor and focus\n    const anchorNodeEntry = Editor.above(editor, {\n      at: editor.selection.anchor,\n      match: (node) => !Editor.isEditor(node) && node.type !== 'text',\n    });\n    const focusNodeEntry = Editor.above(editor, {\n      at: editor.selection.focus,\n      match: (node) => !Editor.isEditor(node) && node.type !== 'text',\n    });\n\n    if (!anchorNodeEntry || !focusNodeEntry) {\n      return false;\n    }\n\n    // Disabled if the anchor and focus are not in the same block\n    return anchorNodeEntry[0] !== focusNodeEntry[0];\n  };\n\n  const toggleList = (format: Block<'list'>['format']) => {\n    let currentListEntry;\n    if (editor.selection) {\n      currentListEntry = Editor.above(editor, {\n        match: (node) => !Editor.isEditor(node) && node.type === 'list',\n      });\n    } else {\n      // If no selection, toggle last inserted node\n      const [_, lastNodePath] = Editor.last(editor, []);\n      currentListEntry = Editor.above(editor, {\n        match: (node) => !Editor.isEditor(node) && node.type === 'list',\n        at: lastNodePath,\n      });\n    }\n\n    if (!currentListEntry) {\n      // If selection is not a list then convert it to list\n      blocks[`list-${format}`].handleConvert!(editor);\n      return;\n    }\n\n    // If selection is already a list then toggle format\n    const [currentList, currentListPath] = currentListEntry;\n\n    if (!Editor.isEditor(currentList) && isListNode(currentList)) {\n      if (currentList.format !== format) {\n        // Format is different, toggle list format\n        Transforms.setNodes(editor, { format }, { at: currentListPath });\n      } else {\n        // Format is same, convert selected list-item to paragraph\n        blocks['paragraph'].handleConvert!(editor);\n      }\n    }\n  };\n\n  if (location === 'menu') {\n    const Icon = block.icon;\n\n    return (\n      <StyledMenuItem\n        startIcon={<Icon />}\n        onSelect={() => toggleList(format)}\n        isActive={isListActive()}\n        disabled={isListDisabled()}\n      >\n        {formatMessage(block.label)}\n      </StyledMenuItem>\n    );\n  }\n\n  return (\n    <ToolbarButton\n      icon={block.icon}\n      name={format}\n      label={block.label}\n      isActive={isListActive()}\n      disabled={isListDisabled()}\n      handleClick={() => toggleList(format)}\n    />\n  );\n};\n\nconst LinkButton = ({\n  disabled,\n  location = 'toolbar',\n}: {\n  disabled: boolean;\n  location?: 'toolbar' | 'menu';\n}) => {\n  const { editor } = useBlocksEditorContext('LinkButton');\n  const { formatMessage } = useIntl();\n\n  const isLinkActive = () => {\n    const { selection } = editor;\n\n    if (!selection) return false;\n\n    const [match] = Array.from(\n      Editor.nodes(editor, {\n        at: Editor.unhangRange(editor, selection),\n        match: (node) => SlateElement.isElement(node) && node.type === 'link',\n      })\n    );\n\n    return Boolean(match);\n  };\n\n  const isLinkDisabled = () => {\n    // Always disabled when the whole editor is disabled\n    if (disabled) {\n      return true;\n    }\n\n    // Always enabled when there's no selection\n    if (!editor.selection) {\n      return false;\n    }\n\n    // Get the block node closest to the anchor and focus\n    const anchorNodeEntry = Editor.above(editor, {\n      at: editor.selection.anchor,\n      match: (node) => !Editor.isEditor(node) && node.type !== 'text',\n    });\n    const focusNodeEntry = Editor.above(editor, {\n      at: editor.selection.focus,\n      match: (node) => !Editor.isEditor(node) && node.type !== 'text',\n    });\n\n    if (!anchorNodeEntry || !focusNodeEntry) {\n      return false;\n    }\n\n    // Disabled if the anchor and focus are not in the same block\n    return anchorNodeEntry[0] !== focusNodeEntry[0];\n  };\n\n  const addLink = () => {\n    editor.shouldSaveLinkPath = true;\n    // We insert an empty anchor, so we split the DOM to have a element we can use as reference for the popover\n    insertLink(editor, { url: '' });\n  };\n\n  const label = {\n    id: 'components.Blocks.link',\n    defaultMessage: 'Link',\n  } as MessageDescriptor;\n\n  if (location === 'menu') {\n    return (\n      <StyledMenuItem\n        startIcon={<Link />}\n        onSelect={addLink}\n        isActive={isLinkActive()}\n        disabled={isLinkDisabled()}\n      >\n        {formatMessage(label)}\n      </StyledMenuItem>\n    );\n  }\n\n  return (\n    <ToolbarButton\n      icon={Link}\n      name=\"link\"\n      label={label}\n      isActive={isLinkActive()}\n      handleClick={addLink}\n      disabled={isLinkDisabled()}\n    />\n  );\n};\n\nconst StyledMenuItem = styled(Menu.Item)<{ isActive: boolean }>`\n  ${(props) =>\n    props.isActive &&\n    css`\n      color: ${({ theme }) => theme.colors.primary600};\n      font-weight: 600;\n    `}\n\n  svg {\n    fill: ${({ theme, isActive }) =>\n      isActive ? theme.colors.primary600 : theme.colors.neutral500};\n  }\n`;\n\nconst BlocksToolbar = () => {\n  const { editor, blocks, modifiers, disabled } = useBlocksEditorContext('BlocksToolbar');\n  const { formatMessage } = useIntl();\n\n  /**\n   * The modifier buttons are disabled when an image is selected.\n   */\n  const checkButtonDisabled = () => {\n    // Always disabled when the whole editor is disabled\n    if (disabled) {\n      return true;\n    }\n\n    if (!editor.selection) {\n      return false;\n    }\n\n    const selectedNode = editor.children[editor.selection.anchor.path[0]];\n    if (!selectedNode) return true;\n\n    if (['image', 'code'].includes(selectedNode.type)) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const isButtonDisabled = checkButtonDisabled();\n\n  /**\n   * Observed components are ones that may or may not be visible in the toolbar, depending on the\n   * available space. They provide two render props:\n   * - renderInToolbar: for when we try to render the component in the toolbar (may be hidden)\n   * - renderInMenu: for when the component didn't fit in the toolbar and is relegated\n   *   to the \"more\" menu\n   */\n  const observedComponents: ObservedComponent[] = [\n    ...Object.entries(modifiers).map(([name, modifier]) => {\n      const Icon = modifier.icon;\n      const isActive = modifier.checkIsActive(editor);\n      const handleSelect = () => modifier.handleToggle(editor);\n\n      return {\n        toolbar: (\n          <ToolbarButton\n            key={name}\n            name={name}\n            icon={modifier.icon}\n            label={modifier.label}\n            isActive={modifier.checkIsActive(editor)}\n            handleClick={handleSelect}\n            disabled={isButtonDisabled}\n          />\n        ),\n        menu: (\n          <StyledMenuItem startIcon={<Icon />} onSelect={handleSelect} isActive={isActive}>\n            {formatMessage(modifier.label)}\n          </StyledMenuItem>\n        ),\n        key: `modifier.${name}`,\n      };\n    }),\n    {\n      toolbar: <LinkButton disabled={isButtonDisabled} location=\"toolbar\" />,\n      menu: <LinkButton disabled={isButtonDisabled} location=\"menu\" />,\n      key: 'block.link',\n    },\n    {\n      // List buttons can only be rendered together when in the toolbar\n      toolbar: (\n        <Flex direction=\"row\">\n          <ToolbarSeparator style={{ marginLeft: '0.4rem' }} />\n          <Toolbar.ToggleGroup type=\"single\" asChild>\n            <Flex gap={1}>\n              <ListButton block={blocks['list-unordered']} format=\"unordered\" location=\"toolbar\" />\n              <ListButton block={blocks['list-ordered']} format=\"ordered\" location=\"toolbar\" />\n            </Flex>\n          </Toolbar.ToggleGroup>\n        </Flex>\n      ),\n      menu: (\n        <>\n          <Menu.Separator />\n          <ListButton block={blocks['list-unordered']} format=\"unordered\" location=\"menu\" />\n          <ListButton block={blocks['list-ordered']} format=\"ordered\" location=\"menu\" />\n        </>\n      ),\n      key: 'block.list',\n    },\n  ];\n\n  return (\n    <Toolbar.Root aria-disabled={disabled} asChild>\n      <ToolbarWrapper padding={2} width=\"100%\">\n        <BlocksDropdown />\n        <ToolbarSeparator />\n        <Toolbar.ToggleGroup type=\"multiple\" asChild>\n          <Flex direction=\"row\" gap={1} grow={1} overflow=\"hidden\">\n            <EditorToolbarObserver observedComponents={observedComponents} />\n          </Flex>\n        </Toolbar.ToggleGroup>\n      </ToolbarWrapper>\n    </Toolbar.Root>\n  );\n};\n\nexport { BlocksToolbar, useConversionModal };\n"],"names":["ToolbarWrapper","styled","Flex","theme","colors","neutral150","ToolbarSeparator","Toolbar","Separator","FlexButton","primary100","SelectWrapper","Box","neutral600","useConversionModal","modalElement","setModalComponent","React","useState","handleConversionResult","renderModal","cloneElement","key","Date","now","ToolbarButton","icon","Icon","name","label","isActive","disabled","handleClick","editor","useBlocksEditorContext","formatMessage","useIntl","labelMessage","enabledColor","_jsx","Tooltip","ToggleItem","value","data-state","onMouseDown","e","preventDefault","ReactEditor","focus","aria-disabled","aria-label","asChild","tag","background","alignItems","justifyContent","width","height","hasRadius","fill","BlocksDropdown","blocks","blockKeysToInclude","getEntries","reduce","currentKeys","entry","block","isInBlocksSelector","blockSelected","setBlockSelected","handleSelect","optionKey","isSelectorBlockKey","editorIsEmpty","children","length","Editor","isEmpty","selection","Transforms","insertNodes","type","text","select","start","currentListEntry","above","match","node","isEditor","includes","currentList","currentListPath","format","isListNode","setNodes","at","maybeRenderModal","handleConvert","preventSelectFocus","useEffect","selectedNode","anchor","anchorNode","parent","edge","depth","anchorBlockKey","getKeys","find","blockKey","matchNode","_jsxs","_Fragment","SingleSelect","startIcon","onChange","placeholder","onCloseAutoFocus","id","defaultMessage","map","BlockOption","isSelected","SingleSelectOption","Node","isNode","ListButton","location","isListActive","isListDisabled","anchorNodeEntry","focusNodeEntry","toggleList","_","lastNodePath","last","StyledMenuItem","onSelect","LinkButton","isLinkActive","Array","from","nodes","unhangRange","SlateElement","isElement","Boolean","isLinkDisabled","addLink","shouldSaveLinkPath","insertLink","url","Link","Menu","Item","props","css","primary600","neutral500","BlocksToolbar","modifiers","checkButtonDisabled","path","isButtonDisabled","observedComponents","Object","entries","modifier","checkIsActive","handleToggle","toolbar","menu","direction","style","marginLeft","ToggleGroup","gap","Root","padding","grow","overflow","EditorToolbarObserver"],"mappings":"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"}