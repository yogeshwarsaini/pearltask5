{"version":3,"file":"enterKey.js","sources":["../../../../../../../../admin/src/pages/EditView/components/FormInputs/BlocksInput/utils/enterKey.ts"],"sourcesContent":["import { type Text, Editor, Node, Transforms } from 'slate';\n\nconst isText = (node: unknown): node is Text => {\n  return Node.isNode(node) && !Editor.isEditor(node) && node.type === 'text';\n};\n\n/**\n * Inserts a line break the first time the user presses enter, and exits the node the second time.\n */\nconst pressEnterTwiceToExit = (editor: Editor) => {\n  /**\n   * To determine if we should break out of the node, check 2 things:\n   * 1. If the cursor is at the end of the node\n   * 2. If the last line of the node is empty\n   */\n  const nodeEntry = Editor.above(editor, {\n    match: (node) => !Editor.isEditor(node) && !['link', 'text'].includes(node.type),\n  });\n  if (!nodeEntry || !editor.selection) {\n    return;\n  }\n  const [node, nodePath] = nodeEntry;\n  const isNodeEnd = Editor.isEnd(editor, editor.selection.anchor, nodePath);\n  const lastTextNode = node.children.at(-1);\n  const isEmptyLine = isText(lastTextNode) && lastTextNode.text.endsWith('\\n');\n\n  if (isNodeEnd && isEmptyLine) {\n    // Remove the last line break\n    Transforms.delete(editor, { distance: 1, unit: 'character', reverse: true });\n    // Break out of the node by creating a new paragraph\n    Transforms.insertNodes(editor, {\n      type: 'paragraph',\n      children: [{ type: 'text', text: '' }],\n    });\n    return;\n  }\n\n  // Otherwise insert a new line within the node\n  Transforms.insertText(editor, '\\n');\n\n  // If there's nothing after the cursor, disable modifiers\n  if (isNodeEnd) {\n    ['bold', 'italic', 'underline', 'strikethrough', 'code'].forEach((modifier) => {\n      Editor.removeMark(editor, modifier);\n    });\n  }\n};\n\nexport { pressEnterTwiceToExit };\n"],"names":["isText","node","Node","isNode","Editor","isEditor","type","pressEnterTwiceToExit","editor","nodeEntry","above","match","includes","selection","nodePath","isNodeEnd","isEnd","anchor","lastTextNode","children","at","isEmptyLine","text","endsWith","Transforms","delete","distance","unit","reverse","insertNodes","insertText","forEach","modifier","removeMark"],"mappings":";;;;AAEA,MAAMA,SAAS,CAACC,IAAAA,GAAAA;IACd,OAAOC,UAAAA,CAAKC,MAAM,CAACF,IAAS,CAAA,IAAA,CAACG,YAAOC,CAAAA,QAAQ,CAACJ,IAAAA,CAAAA,IAASA,IAAKK,CAAAA,IAAI,KAAK,MAAA;AACtE,CAAA;AAEA;;IAGA,MAAMC,wBAAwB,CAACC,MAAAA,GAAAA;AAC7B;;;;AAIC,MACD,MAAMC,SAAAA,GAAYL,YAAOM,CAAAA,KAAK,CAACF,MAAQ,EAAA;AACrCG,QAAAA,KAAAA,EAAO,CAACV,IAAS,GAAA,CAACG,aAAOC,QAAQ,CAACJ,SAAS,CAAC;AAAC,gBAAA,MAAA;AAAQ,gBAAA;aAAO,CAACW,QAAQ,CAACX,IAAAA,CAAKK,IAAI;AACjF,KAAA,CAAA;AACA,IAAA,IAAI,CAACG,SAAAA,IAAa,CAACD,MAAAA,CAAOK,SAAS,EAAE;AACnC,QAAA;AACF;IACA,MAAM,CAACZ,IAAMa,EAAAA,QAAAA,CAAS,GAAGL,SAAAA;IACzB,MAAMM,SAAAA,GAAYX,aAAOY,KAAK,CAACR,QAAQA,MAAOK,CAAAA,SAAS,CAACI,MAAM,EAAEH,QAAAA,CAAAA;AAChE,IAAA,MAAMI,eAAejB,IAAKkB,CAAAA,QAAQ,CAACC,EAAE,CAAC,CAAC,CAAA,CAAA;AACvC,IAAA,MAAMC,cAAcrB,MAAOkB,CAAAA,YAAAA,CAAAA,IAAiBA,aAAaI,IAAI,CAACC,QAAQ,CAAC,IAAA,CAAA;AAEvE,IAAA,IAAIR,aAAaM,WAAa,EAAA;;QAE5BG,gBAAWC,CAAAA,MAAM,CAACjB,MAAQ,EAAA;YAAEkB,QAAU,EAAA,CAAA;YAAGC,IAAM,EAAA,WAAA;YAAaC,OAAS,EAAA;AAAK,SAAA,CAAA;;QAE1EJ,gBAAWK,CAAAA,WAAW,CAACrB,MAAQ,EAAA;YAC7BF,IAAM,EAAA,WAAA;YACNa,QAAU,EAAA;AAAC,gBAAA;oBAAEb,IAAM,EAAA,MAAA;oBAAQgB,IAAM,EAAA;AAAG;AAAE;AACxC,SAAA,CAAA;AACA,QAAA;AACF;;IAGAE,gBAAWM,CAAAA,UAAU,CAACtB,MAAQ,EAAA,IAAA,CAAA;;AAG9B,IAAA,IAAIO,SAAW,EAAA;AACb,QAAA;AAAC,YAAA,MAAA;AAAQ,YAAA,QAAA;AAAU,YAAA,WAAA;AAAa,YAAA,eAAA;AAAiB,YAAA;SAAO,CAACgB,OAAO,CAAC,CAACC,QAAAA,GAAAA;YAChE5B,YAAO6B,CAAAA,UAAU,CAACzB,MAAQwB,EAAAA,QAAAA,CAAAA;AAC5B,SAAA,CAAA;AACF;AACF;;;;"}