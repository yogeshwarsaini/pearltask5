{"version":3,"file":"Panels.js","sources":["../../../../../admin/src/pages/EditView/components/Panels.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {\n  useQueryParams,\n  useStrapiApp,\n  DescriptionComponentRenderer,\n} from '@strapi/admin/strapi-admin';\nimport { Flex, Typography } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\nimport { useMatch } from 'react-router-dom';\n\nimport { InjectionZone } from '../../../components/InjectionZone';\nimport { useDoc } from '../../../hooks/useDocument';\nimport { CLONE_PATH } from '../../../router';\n\nimport { DocumentActions } from './DocumentActions';\n\nimport type {\n  ContentManagerPlugin,\n  DocumentActionProps,\n  PanelComponent,\n  PanelComponentProps,\n} from '../../../content-manager';\n\ninterface PanelDescription {\n  title: string;\n  content: React.ReactNode;\n}\n\n/* -------------------------------------------------------------------------------------------------\n * Panels\n * -----------------------------------------------------------------------------------------------*/\n\nconst Panels = () => {\n  const isCloning = useMatch(CLONE_PATH) !== null;\n  const [\n    {\n      query: { status },\n    },\n  ] = useQueryParams<{ status: 'draft' | 'published' }>({\n    status: 'draft',\n  });\n  const { model, id, document, meta, collectionType } = useDoc();\n  const plugins = useStrapiApp('Panels', (state) => state.plugins);\n\n  const props = {\n    activeTab: status,\n    model,\n    documentId: id,\n    document: isCloning ? undefined : document,\n    meta: isCloning ? undefined : meta,\n    collectionType,\n  } satisfies PanelComponentProps;\n\n  return (\n    <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\n      <DescriptionComponentRenderer\n        props={props}\n        descriptions={(\n          plugins['content-manager'].apis as ContentManagerPlugin['config']['apis']\n        ).getEditViewSidePanels()}\n      >\n        {(panels) =>\n          panels.map(({ content, id, ...description }) => (\n            <Panel key={id} {...description}>\n              {content}\n            </Panel>\n          ))\n        }\n      </DescriptionComponentRenderer>\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Default Action Panels (CE)\n * -----------------------------------------------------------------------------------------------*/\n\nconst ActionsPanel: PanelComponent = () => {\n  const { formatMessage } = useIntl();\n\n  return {\n    title: formatMessage({\n      id: 'content-manager.containers.edit.panels.default.title',\n      defaultMessage: 'Entry',\n    }),\n    content: <ActionsPanelContent />,\n  };\n};\n\nActionsPanel.type = 'actions';\n\nconst ActionsPanelContent = () => {\n  const isCloning = useMatch(CLONE_PATH) !== null;\n  const [\n    {\n      query: { status = 'draft' },\n    },\n  ] = useQueryParams<{ status: 'draft' | 'published' }>();\n  const { model, id, document, meta, collectionType } = useDoc();\n  const plugins = useStrapiApp('ActionsPanel', (state) => state.plugins);\n\n  const props = {\n    activeTab: status,\n    model,\n    documentId: id,\n    document: isCloning ? undefined : document,\n    meta: isCloning ? undefined : meta,\n    collectionType,\n  } satisfies DocumentActionProps;\n\n  return (\n    <Flex direction=\"column\" gap={2} width=\"100%\">\n      <DescriptionComponentRenderer\n        props={props}\n        descriptions={(\n          plugins['content-manager'].apis as ContentManagerPlugin['config']['apis']\n        ).getDocumentActions('panel')}\n      >\n        {(actions) => <DocumentActions actions={actions} />}\n      </DescriptionComponentRenderer>\n      <InjectionZone area=\"editView.right-links\" slug={model} />\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Panel\n * -----------------------------------------------------------------------------------------------*/\n\ninterface PanelProps extends Pick<PanelDescription, 'title'> {\n  children: React.ReactNode;\n}\n\nconst Panel = React.forwardRef<any, PanelProps>(({ children, title }, ref) => {\n  return (\n    <Flex\n      ref={ref}\n      tag=\"aside\"\n      aria-labelledby=\"additional-information\"\n      background=\"neutral0\"\n      borderColor=\"neutral150\"\n      hasRadius\n      paddingBottom={4}\n      paddingLeft={4}\n      paddingRight={4}\n      paddingTop={4}\n      shadow=\"tableShadow\"\n      gap={3}\n      direction=\"column\"\n      justifyContent=\"stretch\"\n      alignItems=\"flex-start\"\n    >\n      <Typography tag=\"h2\" variant=\"sigma\" textTransform=\"uppercase\" textColor=\"neutral600\">\n        {title}\n      </Typography>\n      {children}\n    </Flex>\n  );\n});\n\nexport { Panels, ActionsPanel };\nexport type { PanelDescription };\n"],"names":["Panels","isCloning","useMatch","CLONE_PATH","query","status","useQueryParams","model","id","document","meta","collectionType","useDoc","plugins","useStrapiApp","state","props","activeTab","documentId","undefined","_jsx","Flex","direction","alignItems","gap","DescriptionComponentRenderer","descriptions","apis","getEditViewSidePanels","panels","map","content","description","Panel","ActionsPanel","formatMessage","useIntl","title","defaultMessage","ActionsPanelContent","type","_jsxs","width","getDocumentActions","actions","DocumentActions","InjectionZone","area","slug","React","forwardRef","children","ref","tag","aria-labelledby","background","borderColor","hasRadius","paddingBottom","paddingLeft","paddingRight","paddingTop","shadow","justifyContent","Typography","variant","textTransform","textColor"],"mappings":"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"}