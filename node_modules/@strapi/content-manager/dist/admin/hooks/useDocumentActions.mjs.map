{"version":3,"file":"useDocumentActions.mjs","sources":["../../../admin/src/hooks/useDocumentActions.ts"],"sourcesContent":["import * as React from 'react';\n\nimport { SerializedError } from '@reduxjs/toolkit';\nimport {\n  useNotification,\n  useTracking,\n  type TrackingEvent,\n  useAPIErrorHandler,\n  useGuidedTour,\n} from '@strapi/admin/strapi-admin';\nimport { useIntl, type MessageDescriptor } from 'react-intl';\nimport { useNavigate } from 'react-router-dom';\n\nimport { useRelationModal } from '../pages/EditView/components/FormInputs/Relations/RelationModal';\nimport { usePreviewContext } from '../preview/pages/Preview';\nimport {\n  useAutoCloneDocumentMutation,\n  useCloneDocumentMutation,\n  useCreateDocumentMutation,\n  useDeleteDocumentMutation,\n  useDeleteManyDocumentsMutation,\n  useDiscardDocumentMutation,\n  useLazyGetDocumentQuery,\n  usePublishDocumentMutation,\n  usePublishManyDocumentsMutation,\n  useUnpublishDocumentMutation,\n  useUnpublishManyDocumentsMutation,\n  useUpdateDocumentMutation,\n} from '../services/documents';\nimport { BaseQueryError } from '../utils/api';\nimport { getTranslation } from '../utils/translations';\n\nimport type { Document } from './useDocument';\nimport type {\n  AutoClone,\n  Clone,\n  Create,\n  Delete,\n  BulkDelete,\n  Discard,\n  FindOne,\n  Publish,\n  BulkPublish,\n  Update,\n  Unpublish,\n  BulkUnpublish,\n} from '../../../shared/contracts/collection-types';\n\nconst DEFAULT_UNEXPECTED_ERROR_MSG = {\n  id: 'notification.error',\n  defaultMessage: 'An error occurred, please try again',\n} satisfies MessageDescriptor;\n\ntype OperationResponse<TResponse extends { data: any; meta?: any; error?: any }> =\n  | Pick<TResponse, 'data'>\n  | Pick<TResponse, 'data' | 'meta'>\n  | { error: BaseQueryError | SerializedError };\n\ntype BulkOperationResponse<TResponse extends { data: any; error?: any }> =\n  | Pick<TResponse, 'data'>\n  | { error: BaseQueryError | SerializedError };\n\ntype UseDocumentActions = (\n  fromPreview?: boolean,\n  fromRelationModal?: boolean\n) => {\n  /**\n   * @description Attempts to clone a document based on the provided sourceId.\n   * This will return a list of the fields as an error if it's unable to clone.\n   * You most likely want to use the `clone` action instead.\n   */\n  isLoading: boolean;\n  autoClone: (args: {\n    model: string;\n    sourceId: string;\n    locale?: string;\n  }) => Promise<OperationResponse<AutoClone.Response>>;\n  clone: (\n    args: {\n      model: string;\n      documentId: string;\n      params?: object;\n    },\n    document: Omit<Document, 'id'>,\n    trackerProperty?: Extract<\n      TrackingEvent,\n      { name: 'willCreateEntry' | 'didCreateEntry' | 'didNotCreateEntry' }\n    >['properties']\n  ) => Promise<OperationResponse<Clone.Response>>;\n  create: (\n    args: {\n      model: string;\n      params?: object;\n    },\n    document: Omit<Document, 'id'>,\n    trackerProperty?: Extract<\n      TrackingEvent,\n      { name: 'willCreateEntry' | 'didCreateEntry' | 'didNotCreateEntry' }\n    >['properties']\n  ) => Promise<OperationResponse<Create.Response>>;\n  delete: (\n    args: {\n      collectionType: string;\n      model: string;\n      documentId?: string;\n      params?: object;\n    },\n    trackerProperty?: Extract<\n      TrackingEvent,\n      { name: 'willDeleteEntry' | 'didDeleteEntry' | 'didNotDeleteEntry' }\n    >['properties']\n  ) => Promise<OperationResponse<Delete.Response>>;\n  deleteMany: (args: {\n    model: string;\n    documentIds: string[];\n    params?: object;\n  }) => Promise<BulkOperationResponse<BulkDelete.Response>>;\n  discard: (args: {\n    collectionType: string;\n    model: string;\n    documentId?: string;\n    params?: object;\n  }) => Promise<OperationResponse<Discard.Response>>;\n  getDocument: (args: {\n    collectionType: string;\n    model: string;\n    documentId?: string;\n    params?: object;\n  }) => Promise<FindOne.Response | undefined>;\n  publish: (\n    args: {\n      collectionType: string;\n      model: string;\n      documentId?: string;\n      params?: object;\n    },\n    document: Partial<Document>\n  ) => Promise<OperationResponse<Publish.Response>>;\n  publishMany: (args: {\n    model: string;\n    documentIds: string[];\n    params?: object;\n  }) => Promise<BulkOperationResponse<BulkPublish.Response>>;\n  update: (\n    args: {\n      collectionType: string;\n      model: string;\n      documentId?: string;\n      params?: object;\n    },\n    document: Partial<Document>,\n    trackerProperty?: Extract<\n      TrackingEvent,\n      { name: 'willEditEntry' | 'didEditEntry' | 'didNotEditEntry' }\n    >['properties']\n  ) => Promise<OperationResponse<Update.Response>>;\n  unpublish: (\n    args: {\n      collectionType: string;\n      model: string;\n      documentId?: string;\n      params?: object;\n    },\n    discardDraft?: boolean\n  ) => Promise<OperationResponse<Unpublish.Response>>;\n  unpublishMany: (args: {\n    model: string;\n    documentIds: string[];\n    params?: object;\n  }) => Promise<BulkOperationResponse<BulkUnpublish.Response>>;\n};\n\ntype IUseDocumentActs = ReturnType<UseDocumentActions>;\n\n/**\n * @alpha\n * @public\n * @description Contains all the operations that can be performed on a single document.\n * Designed to be able to be used anywhere within a Strapi app. The hooks will handle\n * notifications should the operation fail, however the response is always returned incase\n * the user needs to handle side-effects.\n * @example\n * ```tsx\n * import { Form } from '@strapi/admin/admin';\n *\n * const { id, model, collectionType } = useParams<{ id: string; model: string; collectionType: string }>();\n * const { update } = useDocumentActions();\n *\n * const handleSubmit = async (data) => {\n *  await update({ collectionType, model, documentId: id }, data);\n * }\n *\n * return <Form method=\"PUT\" onSubmit={handleSubmit} />\n * ```\n *\n * @see {@link https://contributor.strapi.io/docs/core/content-manager/hooks/use-document-operations} for more information\n */\nconst useDocumentActions: UseDocumentActions = () => {\n  const { toggleNotification } = useNotification();\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\n  const navigate = useNavigate();\n  const setCurrentStep = useGuidedTour('useDocumentActions', (state) => state.setCurrentStep);\n\n  // Get metadata from context providers for tracking purposes\n  const previewContext = usePreviewContext('useDocumentActions', () => true, false);\n  const relationContext = useRelationModal('useDocumentActions', () => true, false);\n  const fromPreview = previewContext != undefined;\n  const fromRelationModal = relationContext != undefined;\n\n  const [deleteDocument, { isLoading: isDeleting }] = useDeleteDocumentMutation();\n  const _delete: IUseDocumentActs['delete'] = React.useCallback(\n    async ({ collectionType, model, documentId, params }, trackerProperty) => {\n      try {\n        trackUsage('willDeleteEntry', trackerProperty);\n\n        const res = await deleteDocument({\n          collectionType,\n          model,\n          documentId,\n          params,\n        });\n\n        if ('error' in res) {\n          toggleNotification({\n            type: 'danger',\n            message: formatAPIError(res.error),\n          });\n\n          return { error: res.error };\n        }\n\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({\n            id: getTranslation('success.record.delete'),\n            defaultMessage: 'Deleted document',\n          }),\n        });\n\n        trackUsage('didDeleteEntry', trackerProperty);\n\n        return res.data;\n      } catch (err) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\n        });\n\n        trackUsage('didNotDeleteEntry', { error: err, ...trackerProperty });\n\n        throw err;\n      }\n    },\n    [trackUsage, deleteDocument, toggleNotification, formatMessage, formatAPIError]\n  );\n\n  const [deleteManyDocuments, { isLoading: isDeletingMany }] = useDeleteManyDocumentsMutation();\n\n  const deleteMany: IUseDocumentActs['deleteMany'] = React.useCallback(\n    async ({ model, documentIds, params }) => {\n      try {\n        trackUsage('willBulkDeleteEntries');\n\n        const res = await deleteManyDocuments({\n          model,\n          documentIds,\n          params,\n        });\n\n        if ('error' in res) {\n          toggleNotification({\n            type: 'danger',\n            message: formatAPIError(res.error),\n          });\n\n          return { error: res.error };\n        }\n\n        toggleNotification({\n          type: 'success',\n          title: formatMessage({\n            id: getTranslation('success.records.delete'),\n            defaultMessage: 'Successfully deleted.',\n          }),\n          message: '',\n        });\n\n        trackUsage('didBulkDeleteEntries');\n\n        return res.data;\n      } catch (err) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\n        });\n\n        trackUsage('didNotBulkDeleteEntries');\n\n        throw err;\n      }\n    },\n    [trackUsage, deleteManyDocuments, toggleNotification, formatMessage, formatAPIError]\n  );\n\n  const [discardDocument, { isLoading: isDiscardingDocument }] = useDiscardDocumentMutation();\n  const discard: IUseDocumentActs['discard'] = React.useCallback(\n    async ({ collectionType, model, documentId, params }) => {\n      try {\n        const res = await discardDocument({\n          collectionType,\n          model,\n          documentId,\n          params,\n        });\n\n        if ('error' in res) {\n          toggleNotification({\n            type: 'danger',\n            message: formatAPIError(res.error),\n          });\n\n          return { error: res.error };\n        }\n\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({\n            id: 'content-manager.success.record.discard',\n            defaultMessage: 'Changes discarded',\n          }),\n        });\n\n        return res.data;\n      } catch (err) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\n        });\n\n        throw err;\n      }\n    },\n    [discardDocument, formatAPIError, formatMessage, toggleNotification]\n  );\n\n  const [publishDocument, { isLoading: isPublishing }] = usePublishDocumentMutation();\n  const publish: IUseDocumentActs['publish'] = React.useCallback(\n    async ({ collectionType, model, documentId, params }, data) => {\n      try {\n        trackUsage('willPublishEntry', { documentId });\n\n        const res = await publishDocument({\n          collectionType,\n          model,\n          documentId,\n          data,\n          params,\n        });\n\n        if ('error' in res) {\n          toggleNotification({ type: 'danger', message: formatAPIError(res.error) });\n          return { error: res.error };\n        }\n\n        trackUsage('didPublishEntry', { documentId, fromPreview, fromRelationModal });\n\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({\n            id: getTranslation('success.record.publish'),\n            defaultMessage: 'Published document',\n          }),\n        });\n\n        return res.data;\n      } catch (err) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\n        });\n\n        throw err;\n      }\n    },\n    [\n      trackUsage,\n      publishDocument,\n      fromPreview,\n      fromRelationModal,\n      toggleNotification,\n      formatMessage,\n      formatAPIError,\n    ]\n  );\n\n  const [publishManyDocuments, { isLoading: isPublishingMany }] = usePublishManyDocumentsMutation();\n  const publishMany: IUseDocumentActs['publishMany'] = React.useCallback(\n    async ({ model, documentIds, params }) => {\n      try {\n        // TODO Confirm tracking events for bulk publish?\n\n        const res = await publishManyDocuments({\n          model,\n          documentIds,\n          params,\n        });\n        if ('error' in res) {\n          toggleNotification({ type: 'danger', message: formatAPIError(res.error) });\n          return { error: res.error };\n        }\n\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({\n            id: getTranslation('success.record.publish'),\n            defaultMessage: 'Published document',\n          }),\n        });\n\n        return res.data;\n      } catch (err) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\n        });\n        throw err;\n      }\n    },\n    [\n      // trackUsage,\n      publishManyDocuments,\n      toggleNotification,\n      formatMessage,\n      formatAPIError,\n    ]\n  );\n\n  const [updateDocument, { isLoading: isUpdating }] = useUpdateDocumentMutation();\n  const update: IUseDocumentActs['update'] = React.useCallback(\n    async ({ collectionType, model, documentId, params }, data, trackerProperty) => {\n      try {\n        trackUsage('willEditEntry', trackerProperty);\n\n        const res = await updateDocument({\n          collectionType,\n          model,\n          documentId,\n          data,\n          params,\n        });\n\n        if ('error' in res) {\n          toggleNotification({ type: 'danger', message: formatAPIError(res.error) });\n\n          trackUsage('didNotEditEntry', { error: res.error, ...trackerProperty });\n\n          return { error: res.error };\n        }\n\n        trackUsage('didEditEntry', {\n          ...trackerProperty,\n          documentId: res.data.data.documentId,\n          fromPreview,\n          fromRelationModal,\n        });\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({\n            id: getTranslation('success.record.save'),\n            defaultMessage: 'Saved document',\n          }),\n        });\n\n        return res.data;\n      } catch (err) {\n        trackUsage('didNotEditEntry', { error: err, ...trackerProperty });\n\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\n        });\n\n        throw err;\n      }\n    },\n    [\n      trackUsage,\n      updateDocument,\n      fromPreview,\n      fromRelationModal,\n      toggleNotification,\n      formatMessage,\n      formatAPIError,\n    ]\n  );\n\n  const [unpublishDocument] = useUnpublishDocumentMutation();\n  const unpublish: IUseDocumentActs['unpublish'] = React.useCallback(\n    async ({ collectionType, model, documentId, params }, discardDraft = false) => {\n      try {\n        trackUsage('willUnpublishEntry');\n\n        const res = await unpublishDocument({\n          collectionType,\n          model,\n          documentId,\n          params,\n          data: {\n            discardDraft,\n          },\n        });\n\n        if ('error' in res) {\n          toggleNotification({ type: 'danger', message: formatAPIError(res.error) });\n\n          return { error: res.error };\n        }\n\n        trackUsage('didUnpublishEntry');\n\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({\n            id: getTranslation('success.record.unpublish'),\n            defaultMessage: 'Unpublished document',\n          }),\n        });\n\n        return res.data;\n      } catch (err) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\n        });\n\n        throw err;\n      }\n    },\n    [trackUsage, unpublishDocument, toggleNotification, formatMessage, formatAPIError]\n  );\n\n  const [unpublishManyDocuments, { isLoading: isUnpublishingMany }] =\n    useUnpublishManyDocumentsMutation();\n  const unpublishMany: IUseDocumentActs['unpublishMany'] = React.useCallback(\n    async ({ model, documentIds, params }) => {\n      try {\n        trackUsage('willBulkUnpublishEntries');\n\n        const res = await unpublishManyDocuments({\n          model,\n          documentIds,\n          params,\n        });\n\n        if ('error' in res) {\n          toggleNotification({ type: 'danger', message: formatAPIError(res.error) });\n\n          return { error: res.error };\n        }\n\n        trackUsage('didBulkUnpublishEntries');\n\n        toggleNotification({\n          type: 'success',\n          title: formatMessage({\n            id: getTranslation('success.records.unpublish'),\n            defaultMessage: 'Successfully unpublished.',\n          }),\n          message: '',\n        });\n\n        return res.data;\n      } catch (err) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\n        });\n\n        trackUsage('didNotBulkUnpublishEntries');\n\n        throw err;\n      }\n    },\n    [trackUsage, unpublishManyDocuments, toggleNotification, formatMessage, formatAPIError]\n  );\n\n  const [createDocument] = useCreateDocumentMutation();\n  const create: IUseDocumentActs['create'] = React.useCallback(\n    async ({ model, params }, data, trackerProperty) => {\n      try {\n        const res = await createDocument({\n          model,\n          data,\n          params,\n        });\n\n        if ('error' in res) {\n          toggleNotification({ type: 'danger', message: formatAPIError(res.error) });\n\n          trackUsage('didNotCreateEntry', { error: res.error, ...trackerProperty });\n\n          return { error: res.error };\n        }\n        trackUsage('didCreateEntry', {\n          ...trackerProperty,\n          documentId: res.data.data.documentId,\n          fromPreview,\n          fromRelationModal,\n        });\n\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({\n            id: getTranslation('success.record.save'),\n            defaultMessage: 'Saved document',\n          }),\n        });\n\n        setCurrentStep('contentManager.success');\n\n        return res.data;\n      } catch (err) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\n        });\n\n        trackUsage('didNotCreateEntry', { error: err, ...trackerProperty });\n\n        throw err;\n      }\n    },\n    [\n      createDocument,\n      formatAPIError,\n      formatMessage,\n      fromPreview,\n      fromRelationModal,\n      setCurrentStep,\n      toggleNotification,\n      trackUsage,\n    ]\n  );\n\n  const [autoCloneDocument] = useAutoCloneDocumentMutation();\n  const autoClone: IUseDocumentActs['autoClone'] = React.useCallback(\n    async ({ model, sourceId, locale }) => {\n      try {\n        const res = await autoCloneDocument({\n          model,\n          sourceId,\n          params: locale ? { locale } : undefined,\n        });\n\n        if ('error' in res) {\n          return { error: res.error };\n        }\n\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({\n            id: getTranslation('success.record.clone'),\n            defaultMessage: 'Cloned document',\n          }),\n        });\n\n        return res.data;\n      } catch (err) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\n        });\n\n        throw err;\n      }\n    },\n    [autoCloneDocument, formatMessage, toggleNotification]\n  );\n\n  const [cloneDocument] = useCloneDocumentMutation();\n  const clone: IUseDocumentActs['clone'] = React.useCallback(\n    async ({ model, documentId, params }, body, trackerProperty) => {\n      try {\n        // Omit id and documentId so they are not copied to the clone\n        const { id: _id, documentId: _documentId, ...restBody } = body;\n\n        /**\n         * If we're cloning we want to post directly to this endpoint\n         * so that the relations even if they're not listed in the EditView\n         * are correctly attached to the entry.\n         */\n        const res = await cloneDocument({\n          model,\n          sourceId: documentId,\n          data: restBody,\n          params,\n        });\n\n        if ('error' in res) {\n          toggleNotification({ type: 'danger', message: formatAPIError(res.error) });\n\n          trackUsage('didNotCreateEntry', { error: res.error, ...trackerProperty });\n\n          return { error: res.error };\n        }\n\n        trackUsage('didCreateEntry', trackerProperty);\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({\n            id: getTranslation('success.record.clone'),\n            defaultMessage: 'Cloned document',\n          }),\n        });\n\n        // Redirect to normal edit view\n        navigate(`../../${res.data.data.documentId}`, { relative: 'path' });\n\n        return res.data;\n      } catch (err) {\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage(DEFAULT_UNEXPECTED_ERROR_MSG),\n        });\n\n        trackUsage('didNotCreateEntry', { error: err, ...trackerProperty });\n\n        throw err;\n      }\n    },\n    [cloneDocument, trackUsage, toggleNotification, formatMessage, formatAPIError, navigate]\n  );\n\n  const [getDoc] = useLazyGetDocumentQuery();\n  const getDocument: IUseDocumentActs['getDocument'] = React.useCallback(\n    async (args) => {\n      const { data } = await getDoc(args);\n\n      return data;\n    },\n    [getDoc]\n  );\n\n  return {\n    isLoading:\n      isPublishing ||\n      isUpdating ||\n      isDiscardingDocument ||\n      isDeleting ||\n      isDeletingMany ||\n      isUnpublishingMany ||\n      isPublishingMany,\n    autoClone,\n    clone,\n    create,\n    delete: _delete,\n    deleteMany,\n    discard,\n    getDocument,\n    publish,\n    publishMany,\n    unpublish,\n    unpublishMany,\n    update,\n  } satisfies IUseDocumentActs;\n};\n\nexport { useDocumentActions };\nexport type { UseDocumentActions, OperationResponse };\n"],"names":["DEFAULT_UNEXPECTED_ERROR_MSG","id","defaultMessage","useDocumentActions","toggleNotification","useNotification","formatMessage","useIntl","trackUsage","useTracking","_unstableFormatAPIError","formatAPIError","useAPIErrorHandler","navigate","useNavigate","setCurrentStep","useGuidedTour","state","previewContext","usePreviewContext","relationContext","useRelationModal","fromPreview","undefined","fromRelationModal","deleteDocument","isLoading","isDeleting","useDeleteDocumentMutation","_delete","React","useCallback","collectionType","model","documentId","params","trackerProperty","res","type","message","error","getTranslation","data","err","deleteManyDocuments","isDeletingMany","useDeleteManyDocumentsMutation","deleteMany","documentIds","title","discardDocument","isDiscardingDocument","useDiscardDocumentMutation","discard","publishDocument","isPublishing","usePublishDocumentMutation","publish","publishManyDocuments","isPublishingMany","usePublishManyDocumentsMutation","publishMany","updateDocument","isUpdating","useUpdateDocumentMutation","update","unpublishDocument","useUnpublishDocumentMutation","unpublish","discardDraft","unpublishManyDocuments","isUnpublishingMany","useUnpublishManyDocumentsMutation","unpublishMany","createDocument","useCreateDocumentMutation","create","autoCloneDocument","useAutoCloneDocumentMutation","autoClone","sourceId","locale","cloneDocument","useCloneDocumentMutation","clone","body","_id","_documentId","restBody","relative","getDoc","useLazyGetDocumentQuery","getDocument","args","delete"],"mappings":"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"}