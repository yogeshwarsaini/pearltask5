{"version":3,"file":"layout.mjs","sources":["../../admin/src/layout.tsx"],"sourcesContent":["/* eslint-disable check-file/filename-naming-convention */\nimport * as React from 'react';\n\nimport { Page, useGuidedTour, Layouts } from '@strapi/admin/strapi-admin';\nimport { useIntl } from 'react-intl';\nimport { Navigate, Outlet, useLocation, useMatch } from 'react-router-dom';\n\nimport { DragLayer, DragLayerProps } from './components/DragLayer';\nimport { CardDragPreview } from './components/DragPreviews/CardDragPreview';\nimport { ComponentDragPreview } from './components/DragPreviews/ComponentDragPreview';\nimport { RelationDragPreview } from './components/DragPreviews/RelationDragPreview';\nimport { LeftMenu } from './components/LeftMenu';\nimport { ItemTypes } from './constants/dragAndDrop';\nimport { useContentManagerInitData } from './hooks/useContentManagerInitData';\nimport { getTranslation } from './utils/translations';\n\n/* -------------------------------------------------------------------------------------------------\n * Layout\n * -----------------------------------------------------------------------------------------------*/\n\nconst Layout = () => {\n  const contentTypeMatch = useMatch('/content-manager/:kind/:uid/*');\n\n  const { isLoading, collectionTypeLinks, models, singleTypeLinks } = useContentManagerInitData();\n  const authorisedModels = [...collectionTypeLinks, ...singleTypeLinks].sort((a, b) =>\n    a.title.localeCompare(b.title)\n  );\n\n  const { pathname } = useLocation();\n  const { formatMessage } = useIntl();\n  const startSection = useGuidedTour('Layout', (state) => state.startSection);\n  const startSectionRef = React.useRef(startSection);\n\n  React.useEffect(() => {\n    if (startSectionRef.current) {\n      startSectionRef.current('contentManager');\n    }\n  }, []);\n\n  if (isLoading) {\n    return (\n      <>\n        <Page.Title>\n          {formatMessage({\n            id: getTranslation('plugin.name'),\n            defaultMessage: 'Content Manager',\n          })}\n        </Page.Title>\n        <Page.Loading />\n      </>\n    );\n  }\n\n  // Array of models that are displayed in the content manager\n  const supportedModelsToDisplay = models.filter(({ isDisplayed }) => isDisplayed);\n\n  // Redirect the user to the 403 page\n  if (\n    authorisedModels.length === 0 &&\n    supportedModelsToDisplay.length > 0 &&\n    pathname !== '/content-manager/403'\n  ) {\n    return <Navigate to=\"/403\" />;\n  }\n\n  // Redirect the user to the create content type page\n  if (supportedModelsToDisplay.length === 0 && pathname !== '/no-content-types') {\n    return <Navigate to=\"/no-content-types\" />;\n  }\n\n  if (!contentTypeMatch && authorisedModels.length > 0) {\n    return (\n      <Navigate\n        to={{\n          pathname: authorisedModels[0].to,\n          search: authorisedModels[0].search ?? '',\n        }}\n        replace\n      />\n    );\n  }\n\n  return (\n    <>\n      <Page.Title>\n        {formatMessage({\n          id: getTranslation('plugin.name'),\n          defaultMessage: 'Content Manager',\n        })}\n      </Page.Title>\n      <Layouts.Root sideNav={<LeftMenu />}>\n        <DragLayer renderItem={renderDraglayerItem} />\n        <Outlet />\n      </Layouts.Root>\n    </>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * renderDraglayerItem\n * -----------------------------------------------------------------------------------------------*/\n\nfunction renderDraglayerItem({ type, item }: Parameters<DragLayerProps['renderItem']>[0]) {\n  if (!type || (type && typeof type !== 'string')) {\n    return null;\n  }\n\n  /**\n   * Because a user may have multiple relations / dynamic zones / repeable fields in the same content type,\n   * we append the fieldName for the item type to make them unique, however, we then want to extract that\n   * first type to apply the correct preview.\n   */\n  const [actualType] = type.split('_');\n\n  switch (actualType) {\n    case ItemTypes.EDIT_FIELD:\n    case ItemTypes.FIELD:\n      return <CardDragPreview label={item.label} />;\n    case ItemTypes.COMPONENT:\n    case ItemTypes.DYNAMIC_ZONE:\n      return <ComponentDragPreview displayedValue={item.displayedValue} />;\n\n    case ItemTypes.RELATION:\n      return <RelationDragPreview {...item} />;\n\n    default:\n      return null;\n  }\n}\n\nexport { Layout };\n"],"names":["Layout","contentTypeMatch","useMatch","isLoading","collectionTypeLinks","models","singleTypeLinks","useContentManagerInitData","authorisedModels","sort","a","b","title","localeCompare","pathname","useLocation","formatMessage","useIntl","startSection","useGuidedTour","state","startSectionRef","React","useRef","useEffect","current","_jsxs","_Fragment","_jsx","Page","Title","id","getTranslation","defaultMessage","Loading","supportedModelsToDisplay","filter","isDisplayed","length","Navigate","to","search","replace","Layouts","Root","sideNav","LeftMenu","DragLayer","renderItem","renderDraglayerItem","Outlet","type","item","actualType","split","ItemTypes","EDIT_FIELD","FIELD","CardDragPreview","label","COMPONENT","DYNAMIC_ZONE","ComponentDragPreview","displayedValue","RELATION","RelationDragPreview"],"mappings":"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"}