{"version":3,"file":"uid.js","sources":["../../../admin/src/services/uid.ts"],"sourcesContent":["/**\n * Related to the InputUID component, not the UIDs of content-types.\n */\n\nimport { GenerateUID, CheckUIDAvailability } from '../../../shared/contracts/uid';\n\nimport { contentManagerApi } from './api';\n\nconst uidApi = contentManagerApi.injectEndpoints({\n  endpoints: (builder) => ({\n    getDefaultUID: builder.query<\n      GenerateUID.Response['data'],\n      GenerateUID.Request['body'] & {\n        params: GenerateUID.Request['query'];\n      }\n    >({\n      query: ({ params, ...data }) => {\n        return {\n          url: '/content-manager/uid/generate',\n          method: 'POST',\n          data,\n          config: {\n            params,\n          },\n        };\n      },\n      transformResponse: (response: GenerateUID.Response) => response.data,\n    }),\n    generateUID: builder.mutation<\n      GenerateUID.Response['data'],\n      GenerateUID.Request['body'] & {\n        params: GenerateUID.Request['query'];\n      }\n    >({\n      query: ({ params, ...data }) => ({\n        url: '/content-manager/uid/generate',\n        method: 'POST',\n        data,\n        config: {\n          params,\n        },\n      }),\n      transformResponse: (response: GenerateUID.Response) => response.data,\n    }),\n    getAvailability: builder.query<\n      CheckUIDAvailability.Response,\n      CheckUIDAvailability.Request['body'] & {\n        params: CheckUIDAvailability.Request['query'];\n      }\n    >({\n      query: ({ params, ...data }) => ({\n        url: '/content-manager/uid/check-availability',\n        method: 'POST',\n        data,\n        config: {\n          params,\n        },\n      }),\n      providesTags: (_res, _error, params) => [\n        { type: 'UidAvailability', id: params.contentTypeUID },\n      ],\n    }),\n  }),\n});\n\nconst { useGenerateUIDMutation, useGetDefaultUIDQuery, useGetAvailabilityQuery } = uidApi;\n\nexport { useGenerateUIDMutation, useGetDefaultUIDQuery, useGetAvailabilityQuery };\n"],"names":["uidApi","contentManagerApi","injectEndpoints","endpoints","builder","getDefaultUID","query","params","data","url","method","config","transformResponse","response","generateUID","mutation","getAvailability","providesTags","_res","_error","type","id","contentTypeUID","useGenerateUIDMutation","useGetDefaultUIDQuery","useGetAvailabilityQuery"],"mappings":";;;;AAQA,MAAMA,MAAAA,GAASC,qBAAkBC,CAAAA,eAAe,CAAC;IAC/CC,SAAW,EAAA,CAACC,WAAa;YACvBC,aAAeD,EAAAA,OAAAA,CAAQE,KAAK,CAK1B;AACAA,gBAAAA,KAAAA,EAAO,CAAC,EAAEC,MAAM,EAAE,GAAGC,IAAM,EAAA,GAAA;oBACzB,OAAO;wBACLC,GAAK,EAAA,+BAAA;wBACLC,MAAQ,EAAA,MAAA;AACRF,wBAAAA,IAAAA;wBACAG,MAAQ,EAAA;AACNJ,4BAAAA;AACF;AACF,qBAAA;AACF,iBAAA;gBACAK,iBAAmB,EAAA,CAACC,QAAmCA,GAAAA,QAAAA,CAASL;AAClE,aAAA,CAAA;YACAM,WAAaV,EAAAA,OAAAA,CAAQW,QAAQ,CAK3B;AACAT,gBAAAA,KAAAA,EAAO,CAAC,EAAEC,MAAM,EAAE,GAAGC,IAAAA,EAAM,IAAM;wBAC/BC,GAAK,EAAA,+BAAA;wBACLC,MAAQ,EAAA,MAAA;AACRF,wBAAAA,IAAAA;wBACAG,MAAQ,EAAA;AACNJ,4BAAAA;AACF;qBACF,CAAA;gBACAK,iBAAmB,EAAA,CAACC,QAAmCA,GAAAA,QAAAA,CAASL;AAClE,aAAA,CAAA;YACAQ,eAAiBZ,EAAAA,OAAAA,CAAQE,KAAK,CAK5B;AACAA,gBAAAA,KAAAA,EAAO,CAAC,EAAEC,MAAM,EAAE,GAAGC,IAAAA,EAAM,IAAM;wBAC/BC,GAAK,EAAA,yCAAA;wBACLC,MAAQ,EAAA,MAAA;AACRF,wBAAAA,IAAAA;wBACAG,MAAQ,EAAA;AACNJ,4BAAAA;AACF;qBACF,CAAA;gBACAU,YAAc,EAAA,CAACC,IAAMC,EAAAA,MAAAA,EAAQZ,MAAW,GAAA;AACtC,wBAAA;4BAAEa,IAAM,EAAA,iBAAA;AAAmBC,4BAAAA,EAAAA,EAAId,OAAOe;AAAe;AACtD;AACH,aAAA;SACF;AACF,CAAA,CAAA;AAEA,MAAM,EAAEC,sBAAsB,EAAEC,qBAAqB,EAAEC,uBAAuB,EAAE,GAAGzB;;;;;;"}