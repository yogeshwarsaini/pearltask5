{"version":3,"file":"model-configuration.js","sources":["../../../../server/src/controllers/validation/model-configuration.ts"],"sourcesContent":["import { yup } from '@strapi/utils';\nimport { getService } from '../../utils';\nimport { isListable, hasEditableAttribute } from '../../services/utils/configuration/attributes';\nimport { isValidDefaultSort } from '../../services/utils/configuration/settings';\n\n/**\n * Creates the validation schema for content-type configurations\n */\nexport default (schema: any, opts = {}) =>\n  yup\n    .object()\n    .shape({\n      settings: createSettingsSchema(schema).default(null).nullable(),\n      metadatas: createMetadasSchema(schema).default(null).nullable(),\n      layouts: createLayoutsSchema(schema, opts).default(null).nullable(),\n      options: yup.object().optional(),\n    })\n    .noUnknown();\n\nconst createSettingsSchema = (schema: any) => {\n  const validAttributes = Object.keys(schema.attributes).filter((key) => isListable(schema, key));\n\n  return yup\n    .object()\n    .shape({\n      bulkable: yup.boolean().required(),\n      filterable: yup.boolean().required(),\n      pageSize: yup.number().integer().min(10).max(100).required(),\n      searchable: yup.boolean().required(),\n      // should be reset when the type changes\n      mainField: yup.string().oneOf(validAttributes.concat('id')).default('id'),\n      // should be reset when the type changes\n      defaultSortBy: yup\n        .string()\n        .test('is-valid-sort-attribute', '${path} is not a valid sort attribute', async (value) =>\n          isValidDefaultSort(schema, value)\n        )\n        .default('id'),\n      defaultSortOrder: yup.string().oneOf(['ASC', 'DESC']).default('ASC'),\n    })\n    .noUnknown();\n};\n\nconst createMetadasSchema = (schema: any) => {\n  return yup.object().shape(\n    Object.keys(schema.attributes).reduce((acc: any, key) => {\n      acc[key] = yup\n        .object()\n        .shape({\n          edit: yup\n            .object()\n            .shape({\n              label: yup.string(),\n              description: yup.string(),\n              placeholder: yup.string(),\n              editable: yup.boolean(),\n              visible: yup.boolean(),\n              mainField: yup.lazy((value) => {\n                if (!value) {\n                  return yup.string();\n                }\n\n                const targetSchema = getService('content-types').findContentType(\n                  schema.attributes[key].targetModel\n                );\n\n                if (!targetSchema) {\n                  return yup.string();\n                }\n\n                const validAttributes = Object.keys(targetSchema.attributes).filter((key) =>\n                  isListable(targetSchema, key)\n                );\n\n                return yup.string().oneOf(validAttributes.concat('id')).default('id');\n              }),\n            })\n            .noUnknown()\n            .required(),\n          list: yup\n            .object()\n            .shape({\n              label: yup.string(),\n              searchable: yup.boolean(),\n              sortable: yup.boolean(),\n            })\n            .noUnknown()\n            .required(),\n        })\n        .noUnknown();\n\n      return acc;\n    }, {})\n  );\n};\n\nconst createArrayTest = ({ allowUndefined = false } = {}) => ({\n  name: 'isArray',\n  message: '${path} is required and must be an array',\n  test: (val: any) => (allowUndefined === true && val === undefined ? true : Array.isArray(val)),\n});\n\nconst createLayoutsSchema = (schema: any, opts = {}) => {\n  const validAttributes = Object.keys(schema.attributes).filter((key) => isListable(schema, key));\n\n  const editAttributes = Object.keys(schema.attributes).filter((key) =>\n    hasEditableAttribute(schema, key)\n  );\n\n  return yup.object().shape({\n    edit: yup\n      .array()\n      .of(\n        yup.array().of(\n          yup\n            .object()\n            .shape({\n              name: yup.string().oneOf(editAttributes).required(),\n              size: yup.number().integer().positive().required(),\n            })\n            .noUnknown()\n        )\n      )\n      .test(createArrayTest(opts)),\n    list: yup.array().of(yup.string().oneOf(validAttributes)).test(createArrayTest(opts)),\n  });\n};\n"],"names":["schema","opts","yup","object","shape","settings","createSettingsSchema","default","nullable","metadatas","createMetadasSchema","layouts","createLayoutsSchema","options","optional","noUnknown","validAttributes","Object","keys","attributes","filter","key","isListable","bulkable","boolean","required","filterable","pageSize","number","integer","min","max","searchable","mainField","string","oneOf","concat","defaultSortBy","test","value","isValidDefaultSort","defaultSortOrder","reduce","acc","edit","label","description","placeholder","editable","visible","lazy","targetSchema","getService","findContentType","targetModel","list","sortable","createArrayTest","allowUndefined","name","message","val","undefined","Array","isArray","editAttributes","hasEditableAttribute","array","of","size","positive"],"mappings":"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"}