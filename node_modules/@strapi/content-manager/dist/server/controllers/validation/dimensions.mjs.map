{"version":3,"file":"dimensions.mjs","sources":["../../../../server/src/controllers/validation/dimensions.ts"],"sourcesContent":["import { errors, yup, validateYupSchema, contentTypes } from '@strapi/utils';\nimport type { UID } from '@strapi/types';\n\ninterface Options {\n  allowMultipleLocales?: boolean;\n}\n\nconst singleLocaleSchema = yup.string().nullable();\n\nconst multipleLocaleSchema = yup.lazy((value) =>\n  Array.isArray(value) ? yup.array().of(singleLocaleSchema.required()) : singleLocaleSchema\n);\n\nconst statusSchema = yup.mixed().oneOf(['draft', 'published'], 'Invalid status');\n\n/**\n * From a request or query object, validates and returns the locale and status of the document.\n * If the status is not provided and Draft & Publish is disabled, it defaults to 'published'.\n */\nexport const getDocumentLocaleAndStatus = async (\n  request: any,\n  model: UID.Schema,\n  opts: Options = { allowMultipleLocales: false }\n) => {\n  const { allowMultipleLocales } = opts;\n  const { locale, status: providedStatus, ...rest } = request || {};\n\n  const defaultStatus = contentTypes.hasDraftAndPublish(strapi.getModel(model))\n    ? undefined\n    : 'published';\n  const status = providedStatus !== undefined ? providedStatus : defaultStatus;\n\n  const schema = yup.object().shape({\n    locale: allowMultipleLocales ? multipleLocaleSchema : singleLocaleSchema,\n    status: statusSchema,\n  });\n\n  try {\n    await validateYupSchema(schema, { strict: true, abortEarly: false })(request);\n\n    return { locale, status, ...rest };\n  } catch (error: any) {\n    throw new errors.ValidationError(`Validation error: ${error.message}`);\n  }\n};\n"],"names":["singleLocaleSchema","yup","string","nullable","multipleLocaleSchema","lazy","value","Array","isArray","array","of","required","statusSchema","mixed","oneOf","getDocumentLocaleAndStatus","request","model","opts","allowMultipleLocales","locale","status","providedStatus","rest","defaultStatus","contentTypes","hasDraftAndPublish","strapi","getModel","undefined","schema","object","shape","validateYupSchema","strict","abortEarly","error","errors","ValidationError","message"],"mappings":";;AAOA,MAAMA,kBAAqBC,GAAAA,GAAAA,CAAIC,MAAM,EAAA,CAAGC,QAAQ,EAAA;AAEhD,MAAMC,uBAAuBH,GAAII,CAAAA,IAAI,CAAC,CAACC,QACrCC,KAAMC,CAAAA,OAAO,CAACF,KAAAA,CAAAA,GAASL,IAAIQ,KAAK,EAAA,CAAGC,EAAE,CAACV,kBAAAA,CAAmBW,QAAQ,EAAMX,CAAAA,GAAAA,kBAAAA,CAAAA;AAGzE,MAAMY,YAAeX,GAAAA,GAAAA,CAAIY,KAAK,EAAA,CAAGC,KAAK,CAAC;AAAC,IAAA,OAAA;AAAS,IAAA;CAAY,EAAE,gBAAA,CAAA;AAE/D;;;AAGC,IACYC,MAAAA,0BAAAA,GAA6B,OACxCC,OAAAA,EACAC,OACAC,IAAgB,GAAA;IAAEC,oBAAsB,EAAA;AAAM,CAAC,GAAA;IAE/C,MAAM,EAAEA,oBAAoB,EAAE,GAAGD,IAAAA;IACjC,MAAM,EAAEE,MAAM,EAAEC,MAAQC,EAAAA,cAAc,EAAE,GAAGC,IAAAA,EAAM,GAAGP,OAAAA,IAAW,EAAC;IAEhE,MAAMQ,aAAAA,GAAgBC,aAAaC,kBAAkB,CAACC,OAAOC,QAAQ,CAACX,UAClEY,SACA,GAAA,WAAA;IACJ,MAAMR,MAAAA,GAASC,cAAmBO,KAAAA,SAAAA,GAAYP,cAAiBE,GAAAA,aAAAA;AAE/D,IAAA,MAAMM,MAAS7B,GAAAA,GAAAA,CAAI8B,MAAM,EAAA,CAAGC,KAAK,CAAC;AAChCZ,QAAAA,MAAAA,EAAQD,uBAAuBf,oBAAuBJ,GAAAA,kBAAAA;QACtDqB,MAAQT,EAAAA;AACV,KAAA,CAAA;IAEA,IAAI;AACF,QAAA,MAAMqB,kBAAkBH,MAAQ,EAAA;YAAEI,MAAQ,EAAA,IAAA;YAAMC,UAAY,EAAA;SAASnB,CAAAA,CAAAA,OAAAA,CAAAA;QAErE,OAAO;AAAEI,YAAAA,MAAAA;AAAQC,YAAAA,MAAAA;AAAQ,YAAA,GAAGE;AAAK,SAAA;AACnC,KAAA,CAAE,OAAOa,KAAY,EAAA;QACnB,MAAM,IAAIC,MAAOC,CAAAA,eAAe,CAAC,CAAC,kBAAkB,EAAEF,KAAAA,CAAMG,OAAO,CAAC,CAAC,CAAA;AACvE;AACF;;;;"}