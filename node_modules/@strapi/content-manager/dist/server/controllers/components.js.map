{"version":3,"file":"components.js","sources":["../../../server/src/controllers/components.ts"],"sourcesContent":["import { getService } from '../utils';\nimport { createModelConfigurationSchema } from './validation';\n\nexport default {\n  findComponents(ctx: any) {\n    const components = getService('components').findAllComponents();\n    const { toDto } = getService('data-mapper');\n\n    ctx.body = { data: components.map(toDto) };\n  },\n\n  async findComponentConfiguration(ctx: any) {\n    const { uid } = ctx.params;\n\n    const componentService = getService('components');\n\n    const component = componentService.findComponent(uid);\n\n    if (!component) {\n      return ctx.notFound('component.notFound');\n    }\n\n    const configuration = await componentService.findConfiguration(component);\n    const componentsConfigurations = await componentService.findComponentsConfigurations(component);\n\n    ctx.body = {\n      data: {\n        component: configuration,\n        components: componentsConfigurations,\n      },\n    };\n  },\n\n  async updateComponentConfiguration(ctx: any) {\n    const { uid } = ctx.params;\n    const { body } = ctx.request;\n\n    const componentService = getService('components');\n\n    const component = componentService.findComponent(uid);\n\n    if (!component) {\n      return ctx.notFound('component.notFound');\n    }\n\n    let input;\n    try {\n      input = await createModelConfigurationSchema(component).validate(body, {\n        abortEarly: false,\n        stripUnknown: true,\n        strict: true,\n      });\n    } catch (error: any) {\n      return ctx.badRequest(null, {\n        name: 'validationError',\n        errors: error.errors,\n      });\n    }\n\n    const newConfiguration = await componentService.updateConfiguration(component, input);\n\n    ctx.body = { data: newConfiguration };\n  },\n};\n"],"names":["findComponents","ctx","components","getService","findAllComponents","toDto","body","data","map","findComponentConfiguration","uid","params","componentService","component","findComponent","notFound","configuration","findConfiguration","componentsConfigurations","findComponentsConfigurations","updateComponentConfiguration","request","input","createModelConfigurationSchema","validate","abortEarly","stripUnknown","strict","error","badRequest","name","errors","newConfiguration","updateConfiguration"],"mappings":";;;;;;AAGA,iBAAe;AACbA,IAAAA,cAAAA,CAAAA,CAAeC,GAAQ,EAAA;QACrB,MAAMC,UAAAA,GAAaC,gBAAW,CAAA,YAAA,CAAA,CAAcC,iBAAiB,EAAA;AAC7D,QAAA,MAAM,EAAEC,KAAK,EAAE,GAAGF,gBAAW,CAAA,aAAA,CAAA;AAE7BF,QAAAA,GAAAA,CAAIK,IAAI,GAAG;YAAEC,IAAML,EAAAA,UAAAA,CAAWM,GAAG,CAACH,KAAAA;AAAO,SAAA;AAC3C,KAAA;AAEA,IAAA,MAAMI,4BAA2BR,GAAQ,EAAA;AACvC,QAAA,MAAM,EAAES,GAAG,EAAE,GAAGT,IAAIU,MAAM;AAE1B,QAAA,MAAMC,mBAAmBT,gBAAW,CAAA,YAAA,CAAA;QAEpC,MAAMU,SAAAA,GAAYD,gBAAiBE,CAAAA,aAAa,CAACJ,GAAAA,CAAAA;AAEjD,QAAA,IAAI,CAACG,SAAW,EAAA;YACd,OAAOZ,GAAAA,CAAIc,QAAQ,CAAC,oBAAA,CAAA;AACtB;AAEA,QAAA,MAAMC,aAAgB,GAAA,MAAMJ,gBAAiBK,CAAAA,iBAAiB,CAACJ,SAAAA,CAAAA;AAC/D,QAAA,MAAMK,wBAA2B,GAAA,MAAMN,gBAAiBO,CAAAA,4BAA4B,CAACN,SAAAA,CAAAA;AAErFZ,QAAAA,GAAAA,CAAIK,IAAI,GAAG;YACTC,IAAM,EAAA;gBACJM,SAAWG,EAAAA,aAAAA;gBACXd,UAAYgB,EAAAA;AACd;AACF,SAAA;AACF,KAAA;AAEA,IAAA,MAAME,8BAA6BnB,GAAQ,EAAA;AACzC,QAAA,MAAM,EAAES,GAAG,EAAE,GAAGT,IAAIU,MAAM;AAC1B,QAAA,MAAM,EAAEL,IAAI,EAAE,GAAGL,IAAIoB,OAAO;AAE5B,QAAA,MAAMT,mBAAmBT,gBAAW,CAAA,YAAA,CAAA;QAEpC,MAAMU,SAAAA,GAAYD,gBAAiBE,CAAAA,aAAa,CAACJ,GAAAA,CAAAA;AAEjD,QAAA,IAAI,CAACG,SAAW,EAAA;YACd,OAAOZ,GAAAA,CAAIc,QAAQ,CAAC,oBAAA,CAAA;AACtB;QAEA,IAAIO,KAAAA;QACJ,IAAI;AACFA,YAAAA,KAAAA,GAAQ,MAAMC,kBAAAA,CAA+BV,SAAWW,CAAAA,CAAAA,QAAQ,CAAClB,IAAM,EAAA;gBACrEmB,UAAY,EAAA,KAAA;gBACZC,YAAc,EAAA,IAAA;gBACdC,MAAQ,EAAA;AACV,aAAA,CAAA;AACF,SAAA,CAAE,OAAOC,KAAY,EAAA;YACnB,OAAO3B,GAAAA,CAAI4B,UAAU,CAAC,IAAM,EAAA;gBAC1BC,IAAM,EAAA,iBAAA;AACNC,gBAAAA,MAAAA,EAAQH,MAAMG;AAChB,aAAA,CAAA;AACF;AAEA,QAAA,MAAMC,gBAAmB,GAAA,MAAMpB,gBAAiBqB,CAAAA,mBAAmB,CAACpB,SAAWS,EAAAA,KAAAA,CAAAA;AAE/ErB,QAAAA,GAAAA,CAAIK,IAAI,GAAG;YAAEC,IAAMyB,EAAAA;AAAiB,SAAA;AACtC;AACF,CAAE;;;;"}