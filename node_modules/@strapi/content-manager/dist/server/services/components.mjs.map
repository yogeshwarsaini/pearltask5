{"version":3,"file":"components.mjs","sources":["../../../server/src/services/components.ts"],"sourcesContent":["import { has, isNil, mapValues } from 'lodash/fp';\n\nimport type { UID, Struct, Core } from '@strapi/types';\nimport type { Configuration } from '../../../shared/contracts/content-types';\nimport type { ConfigurationUpdate } from './configuration';\n\nimport { getService } from '../utils';\nimport storeUtils from './utils/store';\nimport createConfigurationService from './configuration';\n\nconst STORE_KEY_PREFIX = 'components';\n\nconst configurationService = createConfigurationService({\n  storeUtils,\n  isComponent: true,\n  prefix: STORE_KEY_PREFIX,\n  getModels() {\n    const { toContentManagerModel } = getService('data-mapper');\n\n    return mapValues(toContentManagerModel, strapi.components);\n  },\n});\n\nexport default ({ strapi }: { strapi: Core.Strapi }) => ({\n  findAllComponents() {\n    const { toContentManagerModel } = getService('data-mapper');\n\n    return Object.values(strapi.components).map(toContentManagerModel);\n  },\n\n  findComponent(uid: UID.Component) {\n    const { toContentManagerModel } = getService('data-mapper');\n\n    const component = strapi.components[uid];\n\n    return isNil(component) ? component : toContentManagerModel(component);\n  },\n\n  async findConfiguration(component: Struct.ComponentSchema) {\n    const configuration: Configuration = await configurationService.getConfiguration(component.uid);\n\n    return {\n      uid: component.uid,\n      category: component.category,\n      ...configuration,\n    };\n  },\n\n  async updateConfiguration(\n    component: Struct.ComponentSchema,\n    newConfiguration: ConfigurationUpdate\n  ) {\n    await configurationService.setConfiguration(component.uid, newConfiguration);\n\n    return this.findConfiguration(component);\n  },\n\n  async findComponentsConfigurations(model: Struct.ComponentSchema) {\n    const componentsMap: Record<\n      string,\n      Configuration & { category: string; isComponent: boolean }\n    > = {};\n\n    const getComponentConfigurations = async (uid: UID.Component) => {\n      const component = this.findComponent(uid);\n\n      if (has(uid, componentsMap)) {\n        return;\n      }\n\n      const componentConfiguration = await this.findConfiguration(component);\n      const componentsConfigurations = await this.findComponentsConfigurations(component);\n\n      Object.assign(componentsMap, {\n        [uid]: componentConfiguration,\n        ...componentsConfigurations,\n      });\n    };\n\n    for (const key of Object.keys(model.attributes)) {\n      const attribute = model.attributes[key];\n\n      if (attribute.type === 'component') {\n        await getComponentConfigurations(attribute.component);\n      }\n\n      if (attribute.type === 'dynamiczone') {\n        for (const componentUid of attribute.components) {\n          await getComponentConfigurations(componentUid);\n        }\n      }\n    }\n\n    return componentsMap;\n  },\n\n  syncConfigurations() {\n    return configurationService.syncConfigurations();\n  },\n});\n"],"names":["STORE_KEY_PREFIX","configurationService","createConfigurationService","storeUtils","isComponent","prefix","getModels","toContentManagerModel","getService","mapValues","strapi","components","findAllComponents","Object","values","map","findComponent","uid","component","isNil","findConfiguration","configuration","getConfiguration","category","updateConfiguration","newConfiguration","setConfiguration","findComponentsConfigurations","model","componentsMap","getComponentConfigurations","has","componentConfiguration","componentsConfigurations","assign","key","keys","attributes","attribute","type","componentUid","syncConfigurations"],"mappings":"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"}