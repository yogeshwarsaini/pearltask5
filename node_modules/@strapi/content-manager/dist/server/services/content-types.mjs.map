{"version":3,"file":"content-types.mjs","sources":["../../../server/src/services/content-types.ts"],"sourcesContent":["import { isNil, mapValues } from 'lodash/fp';\nimport { contentTypes as contentTypesUtils } from '@strapi/utils';\n\nimport type { UID, Struct, Core } from '@strapi/types';\n\nimport type { ConfigurationUpdate } from './configuration';\n\nimport { getService } from '../utils';\nimport storeUtils from './utils/store';\nimport createConfigurationService from './configuration';\n\nconst configurationService = createConfigurationService({\n  storeUtils,\n  prefix: 'content_types',\n  getModels() {\n    const { toContentManagerModel } = getService('data-mapper');\n\n    return mapValues(toContentManagerModel, strapi.contentTypes);\n  },\n});\n\nconst service = ({ strapi }: { strapi: Core.Strapi }) => ({\n  findAllContentTypes() {\n    const { toContentManagerModel } = getService('data-mapper');\n\n    return Object.values(strapi.contentTypes).map(toContentManagerModel);\n  },\n\n  findContentType(uid: UID.ContentType) {\n    const { toContentManagerModel } = getService('data-mapper');\n\n    const contentType = strapi.contentTypes[uid];\n\n    return isNil(contentType) ? contentType : toContentManagerModel(contentType);\n  },\n\n  findDisplayedContentTypes() {\n    return this.findAllContentTypes().filter(\n      // TODO\n      // @ts-expect-error should be resolved from data-mapper types\n      ({ isDisplayed }: { isDisplayed: boolean }) => isDisplayed === true\n    );\n  },\n\n  findContentTypesByKind(kind: { kind: Struct.ContentTypeKind | undefined }) {\n    if (!kind) {\n      return this.findAllContentTypes();\n    }\n\n    // @ts-expect-error TODO when adding types\n    return this.findAllContentTypes().filter(contentTypesUtils.isKind(kind));\n  },\n\n  async findConfiguration(contentType: Struct.ContentTypeSchema) {\n    const configuration = await configurationService.getConfiguration(contentType.uid);\n\n    return {\n      uid: contentType.uid,\n      ...configuration,\n    };\n  },\n\n  async updateConfiguration(\n    contentType: Struct.ContentTypeSchema,\n    newConfiguration: ConfigurationUpdate\n  ) {\n    await configurationService.setConfiguration(contentType.uid, newConfiguration);\n\n    return this.findConfiguration(contentType);\n  },\n\n  findComponentsConfigurations(contentType: Struct.ContentTypeSchema) {\n    // delegate to componentService\n    return getService('components').findComponentsConfigurations(contentType);\n  },\n\n  syncConfigurations() {\n    return configurationService.syncConfigurations();\n  },\n});\n\nexport default service;\n"],"names":["configurationService","createConfigurationService","storeUtils","prefix","getModels","toContentManagerModel","getService","mapValues","strapi","contentTypes","service","findAllContentTypes","Object","values","map","findContentType","uid","contentType","isNil","findDisplayedContentTypes","filter","isDisplayed","findContentTypesByKind","kind","contentTypesUtils","isKind","findConfiguration","configuration","getConfiguration","updateConfiguration","newConfiguration","setConfiguration","findComponentsConfigurations","syncConfigurations"],"mappings":";;;;;;AAWA,MAAMA,uBAAuBC,0BAA2B,CAAA;AACtDC,IAAAA,UAAAA;IACAC,MAAQ,EAAA,eAAA;AACRC,IAAAA,SAAAA,CAAAA,GAAAA;AACE,QAAA,MAAM,EAAEC,qBAAqB,EAAE,GAAGC,UAAW,CAAA,aAAA,CAAA;QAE7C,OAAOC,SAAAA,CAAUF,qBAAuBG,EAAAA,MAAAA,CAAOC,YAAY,CAAA;AAC7D;AACF,CAAA,CAAA;AAEA,MAAMC,UAAU,CAAC,EAAEF,QAAAA,OAAM,EAA2B,IAAM;AACxDG,QAAAA,mBAAAA,CAAAA,GAAAA;AACE,YAAA,MAAM,EAAEN,qBAAqB,EAAE,GAAGC,UAAW,CAAA,aAAA,CAAA;AAE7C,YAAA,OAAOM,OAAOC,MAAM,CAACL,QAAOC,YAAY,CAAA,CAAEK,GAAG,CAACT,qBAAAA,CAAAA;AAChD,SAAA;AAEAU,QAAAA,eAAAA,CAAAA,CAAgBC,GAAoB,EAAA;AAClC,YAAA,MAAM,EAAEX,qBAAqB,EAAE,GAAGC,UAAW,CAAA,aAAA,CAAA;AAE7C,YAAA,MAAMW,WAAcT,GAAAA,OAAAA,CAAOC,YAAY,CAACO,GAAI,CAAA;YAE5C,OAAOE,KAAAA,CAAMD,WAAeA,CAAAA,GAAAA,WAAAA,GAAcZ,qBAAsBY,CAAAA,WAAAA,CAAAA;AAClE,SAAA;AAEAE,QAAAA,yBAAAA,CAAAA,GAAAA;AACE,YAAA,OAAO,IAAI,CAACR,mBAAmB,EAAGS,CAAAA,MAAM;;AAGtC,YAAA,CAAC,EAAEC,WAAW,EAA4B,GAAKA,WAAgB,KAAA,IAAA,CAAA;AAEnE,SAAA;AAEAC,QAAAA,sBAAAA,CAAAA,CAAuBC,IAAkD,EAAA;AACvE,YAAA,IAAI,CAACA,IAAM,EAAA;gBACT,OAAO,IAAI,CAACZ,mBAAmB,EAAA;AACjC;;YAGA,OAAO,IAAI,CAACA,mBAAmB,EAAA,CAAGS,MAAM,CAACI,YAAAA,CAAkBC,MAAM,CAACF,IAAAA,CAAAA,CAAAA;AACpE,SAAA;AAEA,QAAA,MAAMG,mBAAkBT,WAAqC,EAAA;AAC3D,YAAA,MAAMU,gBAAgB,MAAM3B,oBAAAA,CAAqB4B,gBAAgB,CAACX,YAAYD,GAAG,CAAA;YAEjF,OAAO;AACLA,gBAAAA,GAAAA,EAAKC,YAAYD,GAAG;AACpB,gBAAA,GAAGW;AACL,aAAA;AACF,SAAA;QAEA,MAAME,mBAAAA,CAAAA,CACJZ,WAAqC,EACrCa,gBAAqC,EAAA;AAErC,YAAA,MAAM9B,oBAAqB+B,CAAAA,gBAAgB,CAACd,WAAAA,CAAYD,GAAG,EAAEc,gBAAAA,CAAAA;YAE7D,OAAO,IAAI,CAACJ,iBAAiB,CAACT,WAAAA,CAAAA;AAChC,SAAA;AAEAe,QAAAA,4BAAAA,CAAAA,CAA6Bf,WAAqC,EAAA;;YAEhE,OAAOX,UAAAA,CAAW,YAAc0B,CAAAA,CAAAA,4BAA4B,CAACf,WAAAA,CAAAA;AAC/D,SAAA;AAEAgB,QAAAA,kBAAAA,CAAAA,GAAAA;AACE,YAAA,OAAOjC,qBAAqBiC,kBAAkB,EAAA;AAChD;KACF;;;;"}