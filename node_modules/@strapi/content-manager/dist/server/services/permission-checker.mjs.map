{"version":3,"file":"permission-checker.mjs","sources":["../../../server/src/services/permission-checker.ts"],"sourcesContent":["import { async } from '@strapi/utils';\nimport type { Core, UID, Modules } from '@strapi/types';\n\nconst ACTIONS = {\n  read: 'plugin::content-manager.explorer.read',\n  create: 'plugin::content-manager.explorer.create',\n  update: 'plugin::content-manager.explorer.update',\n  delete: 'plugin::content-manager.explorer.delete',\n  publish: 'plugin::content-manager.explorer.publish',\n  unpublish: 'plugin::content-manager.explorer.publish',\n  discard: 'plugin::content-manager.explorer.update',\n} as const;\n\ntype Entity = Modules.EntityService.Result<UID.ContentType>;\ntype Query = {\n  page?: string;\n  pageSize?: string;\n  sort?: string;\n};\n\nconst createPermissionChecker =\n  (strapi: Core.Strapi) =>\n  ({ userAbility, model }: { userAbility: any; model: string }) => {\n    const permissionsManager = strapi.service('admin::permission').createPermissionsManager({\n      ability: userAbility,\n      model,\n    });\n\n    const { actionProvider } = strapi.service('admin::permission');\n\n    const toSubject = (entity?: Entity) => {\n      return entity ? permissionsManager.toSubject(entity, model) : model;\n    };\n\n    // @ts-expect-error preserve the parameter order\n    // eslint-disable-next-line @typescript-eslint/default-param-last\n    const can = (action: string, entity?: Entity, field: string) => {\n      const subject = toSubject(entity);\n      const aliases = actionProvider.unstable_aliases(action, model) as string[];\n\n      return (\n        // Test the original action to see if it passes\n        userAbility.can(action, subject, field) ||\n        // Else try every known alias if at least one of them succeed, then the user \"can\"\n        aliases.some((alias) => userAbility.can(alias, subject, field))\n      );\n    };\n\n    // @ts-expect-error preserve the parameter order\n    // eslint-disable-next-line @typescript-eslint/default-param-last\n    const cannot = (action: string, entity?: Entity, field: string) => {\n      const subject = toSubject(entity);\n      const aliases = actionProvider.unstable_aliases(action, model) as string[];\n\n      return (\n        // Test both the original action\n        userAbility.cannot(action, subject, field) &&\n        // and every known alias, if all of them fail (cannot), then the user truly \"cannot\"\n        aliases.every((alias) => userAbility.cannot(alias, subject, field))\n      );\n    };\n\n    const sanitizeOutput = (data: Entity, { action = ACTIONS.read }: { action?: string } = {}) => {\n      return permissionsManager.sanitizeOutput(data, { subject: toSubject(data), action });\n    };\n\n    const sanitizeQuery = (query: Query, { action = ACTIONS.read }: { action?: string } = {}) => {\n      return permissionsManager.sanitizeQuery(query, { subject: model, action });\n    };\n\n    const sanitizeInput = (action: string, data: any, entity?: Entity) => {\n      return permissionsManager.sanitizeInput(data, {\n        subject: entity ? toSubject(entity) : model,\n        action,\n      });\n    };\n\n    const validateQuery = (query: Query, { action = ACTIONS.read }: { action?: string } = {}) => {\n      return permissionsManager.validateQuery(query, { subject: model, action });\n    };\n\n    const validateInput = (action: string, data: any, entity?: Entity) => {\n      return permissionsManager.validateInput(data, {\n        subject: entity ? toSubject(entity) : model,\n        action,\n      });\n    };\n\n    const sanitizeCreateInput = (data: any) => sanitizeInput(ACTIONS.create, data);\n    const sanitizeUpdateInput = (entity: Entity) => (data: any) =>\n      sanitizeInput(ACTIONS.update, data, entity);\n\n    const buildPermissionQuery = (query: Query, action: { action?: string } = {}) => {\n      return permissionsManager.addPermissionsQueryTo(query, action);\n    };\n\n    const sanitizedQuery = (query: Query, action: { action?: string } = {}) => {\n      return async.pipe(\n        (q: Query) => sanitizeQuery(q, action),\n        (q: Query) => buildPermissionQuery(q, action)\n      )(query);\n    };\n\n    // Sanitized queries shortcuts\n    Object.keys(ACTIONS).forEach((action) => {\n      // @ts-expect-error TODO\n      sanitizedQuery[action] = (query: Query) => sanitizedQuery(query, ACTIONS[action]);\n    });\n\n    // Permission utils shortcuts\n    Object.keys(ACTIONS).forEach((action) => {\n      // @ts-expect-error TODO\n      can[action] = (...args: any) => can(ACTIONS[action], ...args);\n      // @ts-expect-error TODO\n      cannot[action] = (...args: any) => cannot(ACTIONS[action], ...args);\n    });\n\n    return {\n      // Permission utils\n      can, // check if you have the permission\n      cannot, // check if you don't have the permission\n      // Sanitizers\n      sanitizeOutput,\n      sanitizeQuery,\n      sanitizeCreateInput,\n      sanitizeUpdateInput,\n      // Validators\n      validateQuery,\n      validateInput,\n      // Queries Builder\n      sanitizedQuery,\n    };\n  };\n\nexport default ({ strapi }: { strapi: Core.Strapi }) => ({\n  create: createPermissionChecker(strapi),\n});\n"],"names":["ACTIONS","read","create","update","delete","publish","unpublish","discard","createPermissionChecker","strapi","userAbility","model","permissionsManager","service","createPermissionsManager","ability","actionProvider","toSubject","entity","can","action","field","subject","aliases","unstable_aliases","some","alias","cannot","every","sanitizeOutput","data","sanitizeQuery","query","sanitizeInput","validateQuery","validateInput","sanitizeCreateInput","sanitizeUpdateInput","buildPermissionQuery","addPermissionsQueryTo","sanitizedQuery","async","pipe","q","Object","keys","forEach","args"],"mappings":"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"}