{"version":3,"file":"document-manager.mjs","sources":["../../../server/src/services/document-manager.ts"],"sourcesContent":["import { omit, pipe } from 'lodash/fp';\n\nimport { contentTypes, errors, pagination } from '@strapi/utils';\nimport type { Core, Modules, UID } from '@strapi/types';\n\nimport { buildDeepPopulate, getDeepPopulate, getDeepPopulateDraftCount } from './utils/populate';\nimport { sumDraftCounts } from './utils/draft';\n\ntype DocService = Modules.Documents.ServiceInstance;\ntype DocServiceParams<TAction extends keyof DocService> = Parameters<DocService[TAction]>[0];\nexport type Document = Modules.Documents.Result<UID.ContentType>;\n\nconst { ApplicationError } = errors;\nconst { PUBLISHED_AT_ATTRIBUTE } = contentTypes.constants;\n\nconst omitPublishedAtField = omit(PUBLISHED_AT_ATTRIBUTE);\nconst omitIdField = omit('id');\n\nconst documentManager = ({ strapi }: { strapi: Core.Strapi }) => {\n  return {\n    async findOne(\n      id: string,\n      uid: UID.CollectionType,\n      opts: Omit<DocServiceParams<'findOne'>, 'documentId'> = {}\n    ) {\n      return strapi.documents(uid).findOne({ ...opts, documentId: id });\n    },\n\n    /**\n     * Find multiple (or all) locales for a document\n     */\n    async findLocales(\n      id: string | string[] | undefined,\n      uid: UID.CollectionType,\n      opts: {\n        populate?: Modules.Documents.Params.Pick<any, 'populate'>;\n        locale?: string | string[] | '*';\n        isPublished?: boolean;\n      }\n    ) {\n      // Will look for a specific locale by default\n      const where: any = {};\n\n      // Might not have an id if querying a single type\n      if (id) {\n        where.documentId = id;\n      }\n\n      // Search in array of locales\n      if (Array.isArray(opts.locale)) {\n        where.locale = { $in: opts.locale };\n      } else if (opts.locale && opts.locale !== '*') {\n        // Look for a specific locale, ignore if looking for all locales\n        where.locale = opts.locale;\n      }\n\n      // Published is passed, so we filter on it, otherwise we don't filter\n      if (typeof opts.isPublished === 'boolean') {\n        where.publishedAt = { $notNull: opts.isPublished };\n      }\n\n      return strapi.db.query(uid).findMany({ populate: opts.populate, where });\n    },\n\n    async findMany(opts: DocServiceParams<'findMany'>, uid: UID.CollectionType) {\n      const params = { ...opts, populate: getDeepPopulate(uid) } as typeof opts;\n      return strapi.documents(uid).findMany(params);\n    },\n\n    async findPage(opts: DocServiceParams<'findMany'>, uid: UID.CollectionType) {\n      const params = pagination.withDefaultPagination(opts || {}, {\n        maxLimit: 1000,\n      });\n\n      const [documents, total = 0] = await Promise.all([\n        strapi.documents(uid).findMany(params),\n        strapi.documents(uid).count(params),\n      ]);\n\n      return {\n        results: documents,\n        pagination: pagination.transformPagedPaginationInfo(params, total),\n      };\n    },\n\n    async create(uid: UID.CollectionType, opts: DocServiceParams<'create'> = {} as any) {\n      const populate = opts.populate ?? (await buildDeepPopulate(uid));\n      const params = { ...opts, status: 'draft' as const, populate };\n\n      return strapi.documents(uid).create(params);\n    },\n\n    async update(\n      id: Modules.Documents.ID,\n      uid: UID.CollectionType,\n      opts: Omit<DocServiceParams<'update'>, 'documentId'> = {} as any\n    ) {\n      const publishData = pipe(omitPublishedAtField, omitIdField)(opts.data || {});\n      const populate = opts.populate ?? (await buildDeepPopulate(uid));\n      const params = { ...opts, data: publishData, populate, status: 'draft' };\n\n      return strapi.documents(uid).update({ ...params, documentId: id });\n    },\n\n    async clone(\n      id: Modules.Documents.ID,\n      body: Partial<Modules.Documents.Params.Data.Input<UID.CollectionType>>,\n      uid: UID.CollectionType\n    ) {\n      const populate = await buildDeepPopulate(uid);\n\n      // Extract the locale to pass it as a plain param\n      const locale = body?.locale;\n      const params = {\n        // Ensure id and documentId are not copied to the clone\n        data: omit(['id', 'documentId'], body),\n        locale,\n        populate,\n      };\n\n      return strapi\n        .documents(uid)\n        .clone({ ...params, documentId: id })\n        .then((result) => result?.entries.at(0));\n    },\n\n    /**\n     *  Check if a document exists\n     */\n    async exists(uid: UID.CollectionType, id?: string) {\n      // Collection type\n      if (id) {\n        const count = await strapi.db.query(uid).count({ where: { documentId: id } });\n        return count > 0;\n      }\n\n      // Single type\n      const count = await strapi.db.query(uid).count();\n      return count > 0;\n    },\n\n    async delete(\n      id: Modules.Documents.ID,\n      uid: UID.CollectionType,\n      opts: Omit<DocServiceParams<'delete'>, 'documentId'> = {} as any\n    ) {\n      const populate = await buildDeepPopulate(uid);\n\n      await strapi.documents(uid).delete({\n        ...opts,\n        documentId: id,\n        populate,\n      });\n      return {};\n    },\n\n    // FIXME: handle relations\n    async deleteMany(\n      documentIds: Modules.Documents.ID[],\n      uid: UID.CollectionType,\n      opts: DocServiceParams<'findMany'> & { locale?: string } = {}\n    ) {\n      const deletedEntries = await strapi.db.transaction(async () => {\n        return Promise.all(documentIds.map(async (id) => this.delete(id, uid, opts)));\n      });\n\n      return { count: deletedEntries.length };\n    },\n\n    async publish(\n      id: Modules.Documents.ID,\n      uid: UID.CollectionType,\n      opts: Omit<DocServiceParams<'publish'>, 'documentId'> = {} as any\n    ) {\n      const populate = await buildDeepPopulate(uid);\n      const params = { ...opts, populate };\n\n      return strapi\n        .documents(uid)\n        .publish({ ...params, documentId: id })\n        .then((result) => result?.entries);\n    },\n\n    async publishMany(uid: UID.ContentType, documentIds: string[], locale?: string | string[]) {\n      return strapi.db.transaction(async () => {\n        const results = await Promise.all(\n          documentIds.map((documentId) => this.publish(documentId, uid, { locale }))\n        );\n\n        const publishedEntitiesCount = results.flat().filter(Boolean).length;\n        return publishedEntitiesCount;\n      });\n    },\n\n    async unpublishMany(\n      documentIds: Modules.Documents.ID[],\n      uid: UID.CollectionType,\n      opts: Omit<DocServiceParams<'unpublish'>, 'documentId'> = {} as any\n    ) {\n      const unpublishedEntries = await strapi.db.transaction(async () => {\n        return Promise.all(\n          documentIds.map((id) =>\n            strapi\n              .documents(uid)\n              .unpublish({ ...opts, documentId: id })\n              .then((result) => result?.entries)\n          )\n        );\n      });\n\n      const unpublishedEntitiesCount = unpublishedEntries.flat().filter(Boolean).length;\n\n      // Return the number of unpublished entities\n      return { count: unpublishedEntitiesCount };\n    },\n\n    async unpublish(\n      id: Modules.Documents.ID,\n      uid: UID.CollectionType,\n      opts: Omit<DocServiceParams<'unpublish'>, 'documentId'> = {} as any\n    ) {\n      const populate = await buildDeepPopulate(uid);\n      const params = { ...opts, populate };\n\n      return strapi\n        .documents(uid)\n        .unpublish({ ...params, documentId: id })\n        .then((result) => result?.entries.at(0));\n    },\n\n    async discardDraft(\n      id: Modules.Documents.ID,\n      uid: UID.CollectionType,\n      opts: Omit<DocServiceParams<'discardDraft'>, 'documentId'> = {} as any\n    ) {\n      const populate = await buildDeepPopulate(uid);\n      const params = { ...opts, populate };\n\n      return strapi\n        .documents(uid)\n        .discardDraft({ ...params, documentId: id })\n        .then((result) => result?.entries.at(0));\n    },\n\n    async countDraftRelations(id: string, uid: UID.ContentType, locale: string) {\n      const { populate, hasRelations } = getDeepPopulateDraftCount(uid);\n\n      if (!hasRelations) {\n        return 0;\n      }\n\n      const document = await strapi.documents(uid).findOne({ documentId: id, populate, locale });\n      if (!document) {\n        throw new ApplicationError(\n          `Unable to count draft relations, document with id ${id} and locale ${locale} not found`\n        );\n      }\n\n      return sumDraftCounts(document, uid);\n    },\n\n    async countManyEntriesDraftRelations(\n      documentIds: Modules.Documents.ID[],\n      uid: UID.CollectionType,\n      locale: string | string[]\n    ) {\n      const { populate, hasRelations } = getDeepPopulateDraftCount(uid);\n\n      if (!hasRelations) {\n        return 0;\n      }\n\n      let localeFilter = {};\n      if (locale) {\n        localeFilter = Array.isArray(locale) ? { locale: { $in: locale } } : { locale };\n      }\n\n      const entities = await strapi.db.query(uid).findMany({\n        populate,\n        where: {\n          documentId: { $in: documentIds },\n          ...localeFilter,\n        },\n      });\n\n      const totalNumberDraftRelations: number = entities!.reduce(\n        (count: number, entity: Document) => sumDraftCounts(entity, uid) + count,\n        0\n      );\n\n      return totalNumberDraftRelations;\n    },\n  };\n};\n\nexport type DocumentManagerService = typeof documentManager;\n\nexport default documentManager;\n"],"names":["ApplicationError","errors","PUBLISHED_AT_ATTRIBUTE","contentTypes","constants","omitPublishedAtField","omit","omitIdField","documentManager","strapi","findOne","id","uid","opts","documents","documentId","findLocales","where","Array","isArray","locale","$in","isPublished","publishedAt","$notNull","db","query","findMany","populate","params","getDeepPopulate","findPage","pagination","withDefaultPagination","maxLimit","total","Promise","all","count","results","transformPagedPaginationInfo","create","buildDeepPopulate","status","update","publishData","pipe","data","clone","body","then","result","entries","at","exists","delete","deleteMany","documentIds","deletedEntries","transaction","map","length","publish","publishMany","publishedEntitiesCount","flat","filter","Boolean","unpublishMany","unpublishedEntries","unpublish","unpublishedEntitiesCount","discardDraft","countDraftRelations","hasRelations","getDeepPopulateDraftCount","document","sumDraftCounts","countManyEntriesDraftRelations","localeFilter","entities","totalNumberDraftRelations","reduce","entity"],"mappings":"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"}