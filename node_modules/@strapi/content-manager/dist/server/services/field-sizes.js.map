{"version":3,"file":"field-sizes.js","sources":["../../../server/src/services/field-sizes.ts"],"sourcesContent":["import { errors } from '@strapi/utils';\nimport type { Core, Modules } from '@strapi/types';\n\nconst { ApplicationError } = errors;\n\ntype FieldSize = Modules.CustomFields.CustomFieldServerOptions['inputSize'];\n\nconst needsFullSize: FieldSize = {\n  default: 12,\n  isResizable: false,\n};\n\nconst smallSize: FieldSize = {\n  default: 4,\n  isResizable: true,\n};\n\nconst defaultSize: FieldSize = {\n  default: 6,\n  isResizable: true,\n};\n\nconst fieldSizes: Record<string, FieldSize> = {\n  // Full row and not resizable\n  dynamiczone: needsFullSize,\n  component: needsFullSize,\n  json: needsFullSize,\n  richtext: needsFullSize,\n  blocks: needsFullSize,\n  // Small and resizable\n  checkbox: smallSize,\n  boolean: smallSize,\n  date: smallSize,\n  time: smallSize,\n  biginteger: smallSize,\n  decimal: smallSize,\n  float: smallSize,\n  integer: smallSize,\n  number: smallSize,\n  // Medium and resizable\n  datetime: defaultSize,\n  email: defaultSize,\n  enumeration: defaultSize,\n  media: defaultSize,\n  password: defaultSize,\n  relation: defaultSize,\n  string: defaultSize,\n  text: defaultSize,\n  timestamp: defaultSize,\n  uid: defaultSize,\n};\n\nconst createFieldSizesService = ({ strapi }: { strapi: Core.Strapi }) => {\n  const fieldSizesService = {\n    getAllFieldSizes() {\n      return fieldSizes;\n    },\n\n    hasFieldSize(type: string) {\n      return !!fieldSizes[type];\n    },\n\n    getFieldSize(type?: string) {\n      if (!type) {\n        throw new ApplicationError('The type is required');\n      }\n\n      const fieldSize = fieldSizes[type];\n      if (!fieldSize) {\n        throw new ApplicationError(`Could not find field size for type ${type}`);\n      }\n\n      return fieldSize;\n    },\n\n    setFieldSize(type: string, size: FieldSize) {\n      if (!type) {\n        throw new ApplicationError('The type is required');\n      }\n\n      if (!size) {\n        throw new ApplicationError('The size is required');\n      }\n\n      fieldSizes[type] = size;\n    },\n\n    setCustomFieldInputSizes() {\n      // Find all custom fields already registered\n      const customFields = strapi.get('custom-fields').getAll();\n\n      // If they have a custom field size, register it\n      // TODO types can be inferred when customFields is typed\n      Object.entries(customFields).forEach(([uid, customField]: [string, any]) => {\n        if (customField.inputSize) {\n          fieldSizesService.setFieldSize(uid, customField.inputSize);\n        }\n      });\n    },\n  };\n\n  return fieldSizesService;\n};\n\nexport default createFieldSizesService;\n"],"names":["ApplicationError","errors","needsFullSize","default","isResizable","smallSize","defaultSize","fieldSizes","dynamiczone","component","json","richtext","blocks","checkbox","boolean","date","time","biginteger","decimal","float","integer","number","datetime","email","enumeration","media","password","relation","string","text","timestamp","uid","createFieldSizesService","strapi","fieldSizesService","getAllFieldSizes","hasFieldSize","type","getFieldSize","fieldSize","setFieldSize","size","setCustomFieldInputSizes","customFields","get","getAll","Object","entries","forEach","customField","inputSize"],"mappings":"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"}