{"version":3,"file":"document-metadata.mjs","sources":["../../../server/src/services/document-metadata.ts"],"sourcesContent":["import { groupBy, pick, uniq } from 'lodash/fp';\n\nimport { async, contentTypes } from '@strapi/utils';\nimport type { Core, UID, Modules } from '@strapi/types';\n\nimport type { DocumentMetadata } from '../../../shared/contracts/collection-types';\nimport { getPopulateForValidation } from './utils/populate';\n\nexport interface DocumentVersion {\n  id: string | number;\n  documentId: Modules.Documents.ID;\n  locale?: string;\n  localizations?: DocumentVersion[];\n  updatedAt?: string | null | Date;\n  publishedAt?: string | null | Date;\n}\n\nconst AVAILABLE_STATUS_FIELDS = [\n  'id',\n  'documentId',\n  'locale',\n  'updatedAt',\n  'createdAt',\n  'publishedAt',\n  'createdBy',\n  'updatedBy',\n  'status',\n];\nconst AVAILABLE_LOCALES_FIELDS = [\n  'id',\n  'documentId',\n  'locale',\n  'updatedAt',\n  'createdAt',\n  'publishedAt',\n  'documentId',\n];\n\nconst CONTENT_MANAGER_STATUS = {\n  PUBLISHED: 'published',\n  DRAFT: 'draft',\n  MODIFIED: 'modified',\n};\n\n/**\n * Controls the metadata properties to be returned\n *\n * If `availableLocales` is set to `true` (default), the returned metadata will include\n * the available locales of the document for its current status.\n *\n * If `availableStatus` is set to `true` (default), the returned metadata will include\n * the available status of the document for its current locale.\n */\nexport interface GetMetadataOptions {\n  availableLocales?: boolean;\n  availableStatus?: boolean;\n}\n\n/**\n * Checks if the provided document version has been modified after all other versions.\n */\nconst getIsVersionLatestModification = (\n  version?: DocumentVersion,\n  otherVersion?: DocumentVersion\n): boolean => {\n  if (!version || !version.updatedAt) {\n    return false;\n  }\n\n  const versionUpdatedAt = version?.updatedAt ? new Date(version.updatedAt).getTime() : 0;\n\n  const otherUpdatedAt = otherVersion?.updatedAt ? new Date(otherVersion.updatedAt).getTime() : 0;\n\n  return versionUpdatedAt > otherUpdatedAt;\n};\n\nexport default ({ strapi }: { strapi: Core.Strapi }) => ({\n  /**\n   * Returns available locales of a document for the current status\n   */\n  async getAvailableLocales(\n    uid: UID.ContentType,\n    version: DocumentVersion,\n    allVersions: DocumentVersion[]\n  ) {\n    // Group all versions by locale\n    const versionsByLocale = groupBy('locale', allVersions);\n\n    // Delete the current locale\n    if (version.locale) {\n      delete versionsByLocale[version.locale];\n    }\n\n    // For each locale, get the ones with the same status\n    // There will not be a draft and a version counterpart if the content\n    // type does not have draft and publish\n    const model = strapi.getModel(uid);\n\n    const mappingResult = await async.map(\n      Object.values(versionsByLocale),\n      async (localeVersions: DocumentVersion[]) => {\n        if (!contentTypes.hasDraftAndPublish(model)) {\n          return localeVersions[0];\n        }\n\n        const draftVersion = localeVersions.find((v) => v.publishedAt === null);\n        const otherVersions = localeVersions.filter((v) => v.id !== draftVersion?.id);\n\n        if (!draftVersion) {\n          return;\n        }\n\n        return {\n          ...draftVersion,\n          status: this.getStatus(draftVersion, otherVersions as any),\n        };\n      }\n    );\n\n    return (\n      mappingResult\n        // Filter just in case there is a document with no drafts\n        .filter(Boolean) as unknown as DocumentMetadata['availableLocales']\n    );\n  },\n\n  /**\n   * Returns available status of a document for the current locale\n   */\n  getAvailableStatus(version: DocumentVersion, allVersions: DocumentVersion[]) {\n    // Find the other status of the document\n    const status =\n      version.publishedAt !== null\n        ? CONTENT_MANAGER_STATUS.DRAFT\n        : CONTENT_MANAGER_STATUS.PUBLISHED;\n\n    // Get version that match the current locale and not match the current status\n    const availableStatus = allVersions.find((v) => {\n      const matchLocale = v.locale === version.locale;\n      const matchStatus = status === 'published' ? v.publishedAt !== null : v.publishedAt === null;\n      return matchLocale && matchStatus;\n    });\n\n    if (!availableStatus) return availableStatus;\n\n    // Pick status fields (at fields, status, by fields), use lodash fp\n    return pick(AVAILABLE_STATUS_FIELDS, availableStatus);\n  },\n\n  /**\n   * Get the available status of many documents, useful for batch operations\n   * @param uid\n   * @param documents\n   * @returns\n   */\n  async getManyAvailableStatus(uid: UID.ContentType, documents: DocumentVersion[]) {\n    if (!documents.length) return [];\n\n    // The status and locale of all documents should be the same\n    const status = documents[0].publishedAt !== null ? 'published' : 'draft';\n    const locales = documents.map((d) => d.locale).filter(Boolean);\n\n    const where: Record<string, any> = {\n      documentId: { $in: documents.map((d) => d.documentId).filter(Boolean) },\n      publishedAt: { $null: status === 'published' },\n    };\n\n    // If there is any locale to filter (if i18n is enabled)\n    if (locales.length) {\n      where.locale = { $in: locales };\n    }\n\n    return strapi.query(uid).findMany({\n      where,\n      select: ['id', 'documentId', 'locale', 'updatedAt', 'createdAt', 'publishedAt'],\n    });\n  },\n\n  getStatus(version: DocumentVersion, otherDocumentStatuses?: DocumentMetadata['availableStatus']) {\n    let draftVersion: DocumentVersion | undefined;\n    let publishedVersion: DocumentVersion | undefined;\n\n    if (version.publishedAt) {\n      publishedVersion = version;\n    } else {\n      draftVersion = version;\n    }\n\n    const otherVersion = otherDocumentStatuses?.at(0);\n    if (otherVersion?.publishedAt) {\n      publishedVersion = otherVersion;\n    } else if (otherVersion) {\n      draftVersion = otherVersion;\n    }\n\n    if (!draftVersion) return CONTENT_MANAGER_STATUS.PUBLISHED;\n    if (!publishedVersion) return CONTENT_MANAGER_STATUS.DRAFT;\n\n    /*\n     * The document is modified if the draft version has been updated more\n     * recently than the published version.\n     */\n    const isDraftModified = getIsVersionLatestModification(draftVersion, publishedVersion);\n    return isDraftModified ? CONTENT_MANAGER_STATUS.MODIFIED : CONTENT_MANAGER_STATUS.PUBLISHED;\n  },\n\n  // TODO is it necessary to return metadata on every page of the CM\n  // We could refactor this so the locales are only loaded when they're\n  // needed. e.g. in the bulk locale action modal.\n  async getMetadata(\n    uid: UID.ContentType,\n    version: DocumentVersion,\n    { availableLocales = true, availableStatus = true }: GetMetadataOptions = {}\n  ) {\n    // TODO: Ignore publishedAt if availableStatus=false, and ignore locale if\n    // i18n is disabled\n    const { populate = {}, fields = [] } = getPopulateForValidation(uid);\n\n    const params = {\n      populate: {\n        ...populate,\n        // NOTE: creator fields are selected in this way to avoid exposing sensitive data\n        createdBy: {\n          select: ['id', 'firstname', 'lastname', 'email'],\n        },\n        updatedBy: {\n          select: ['id', 'firstname', 'lastname', 'email'],\n        },\n      },\n      fields: uniq([...AVAILABLE_LOCALES_FIELDS, ...fields]),\n      filters: {\n        documentId: version.documentId,\n      },\n    };\n\n    const dbParams = strapi.get('query-params').transform(uid, params);\n    const versions = await strapi.db.query(uid).findMany(dbParams);\n\n    // TODO: Remove use of available locales and use localizations instead\n    const availableLocalesResult = availableLocales\n      ? await this.getAvailableLocales(uid, version, versions)\n      : [];\n\n    const availableStatusResult = availableStatus\n      ? this.getAvailableStatus(version, versions)\n      : null;\n\n    return {\n      availableLocales: availableLocalesResult,\n      availableStatus: availableStatusResult ? [availableStatusResult] : [],\n    };\n  },\n\n  /**\n   * Returns associated metadata of a document:\n   * - Available locales of the document for the current status\n   * - Available status of the document for the current locale\n   */\n  async formatDocumentWithMetadata(\n    uid: UID.ContentType,\n    document: DocumentVersion,\n    opts: GetMetadataOptions = {}\n  ) {\n    if (!document) {\n      return {\n        data: document,\n        meta: {\n          availableLocales: [],\n          availableStatus: [],\n        },\n      };\n    }\n\n    const hasDraftAndPublish = contentTypes.hasDraftAndPublish(strapi.getModel(uid));\n\n    // Ignore available status if the content type does not have draft and publish\n    if (!hasDraftAndPublish) {\n      opts.availableStatus = false;\n    }\n\n    const meta = await this.getMetadata(uid, document, opts);\n\n    // Populate localization statuses\n    if (document.localizations) {\n      const otherStatus = await this.getManyAvailableStatus(uid, document.localizations);\n\n      document.localizations = document.localizations.map((d) => {\n        const status = otherStatus.find(\n          (s) => s.documentId === d.documentId && s.locale === d.locale\n        );\n        return {\n          ...d,\n          status: this.getStatus(d, status ? [status] : []),\n        };\n      });\n    }\n\n    return {\n      data: {\n        ...document,\n        // Add status to the document only if draft and publish is enabled\n        status: hasDraftAndPublish\n          ? this.getStatus(document, meta.availableStatus as any)\n          : undefined,\n      },\n      meta,\n    };\n  },\n});\n"],"names":["AVAILABLE_STATUS_FIELDS","AVAILABLE_LOCALES_FIELDS","CONTENT_MANAGER_STATUS","PUBLISHED","DRAFT","MODIFIED","getIsVersionLatestModification","version","otherVersion","updatedAt","versionUpdatedAt","Date","getTime","otherUpdatedAt","strapi","getAvailableLocales","uid","allVersions","versionsByLocale","groupBy","locale","model","getModel","mappingResult","async","map","Object","values","localeVersions","contentTypes","hasDraftAndPublish","draftVersion","find","v","publishedAt","otherVersions","filter","id","status","getStatus","Boolean","getAvailableStatus","availableStatus","matchLocale","matchStatus","pick","getManyAvailableStatus","documents","length","locales","d","where","documentId","$in","$null","query","findMany","select","otherDocumentStatuses","publishedVersion","at","isDraftModified","getMetadata","availableLocales","populate","fields","getPopulateForValidation","params","createdBy","updatedBy","uniq","filters","dbParams","get","transform","versions","db","availableLocalesResult","availableStatusResult","formatDocumentWithMetadata","document","opts","data","meta","localizations","otherStatus","s","undefined"],"mappings":"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"}