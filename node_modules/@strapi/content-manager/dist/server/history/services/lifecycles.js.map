{"version":3,"file":"lifecycles.js","sources":["../../../../server/src/history/services/lifecycles.ts"],"sourcesContent":["import type { Core, Modules, UID } from '@strapi/types';\nimport { contentTypes } from '@strapi/utils';\n\nimport { omit, castArray } from 'lodash/fp';\n\nimport { scheduleJob } from 'node-schedule';\n\nimport { getService } from '../utils';\nimport { FIELDS_TO_IGNORE, HISTORY_VERSION_UID } from '../constants';\n\nimport type { CreateHistoryVersion } from '../../../../shared/contracts/history-versions';\nimport { createServiceUtils } from './utils';\n\n/**\n * Filters out actions that should not create a history version.\n */\nconst shouldCreateHistoryVersion = (\n  context: Modules.Documents.Middleware.Context\n): context is Modules.Documents.Middleware.Context & {\n  action: 'create' | 'update' | 'clone' | 'publish' | 'unpublish' | 'discardDraft';\n  contentType: UID.CollectionType;\n} => {\n  // Ignore requests that are not related to the content manager\n  if (!strapi.requestContext.get()?.request.url.startsWith('/content-manager')) {\n    return false;\n  }\n\n  // NOTE: cannot do type narrowing with array includes\n  if (\n    context.action !== 'create' &&\n    context.action !== 'update' &&\n    context.action !== 'clone' &&\n    context.action !== 'publish' &&\n    context.action !== 'unpublish' &&\n    context.action !== 'discardDraft'\n  ) {\n    return false;\n  }\n\n  /**\n   * When a document is published, the draft version of the document is also updated.\n   * It creates confusion for users because they see two history versions each publish action.\n   * To avoid this, we silence the update action during a publish request,\n   * so that they only see the published version of the document in the history.\n   */\n  if (\n    context.action === 'update' &&\n    strapi.requestContext.get()?.request.url.endsWith('/actions/publish')\n  ) {\n    return false;\n  }\n\n  // Ignore content types not created by the user\n  if (!context.contentType.uid.startsWith('api::')) {\n    return false;\n  }\n\n  return true;\n};\n\n/**\n * Returns the content type schema (and its components schemas).\n * Used to determine if changes were made in the content type builder since a history version was created.\n * And therefore which fields can be restored and which cannot.\n */\nconst getSchemas = (uid: UID.CollectionType) => {\n  const attributesSchema = strapi.getModel(uid).attributes;\n\n  // TODO: Handle nested components\n  const componentsSchemas = Object.keys(attributesSchema).reduce(\n    (currentComponentSchemas, key) => {\n      const fieldSchema = attributesSchema[key];\n\n      if (fieldSchema.type === 'component') {\n        const componentSchema = strapi.getModel(fieldSchema.component).attributes;\n        return {\n          ...currentComponentSchemas,\n          [fieldSchema.component]: componentSchema,\n        };\n      }\n\n      // Ignore anything that's not a component\n      return currentComponentSchemas;\n    },\n    {} as CreateHistoryVersion['componentsSchemas']\n  );\n\n  return {\n    schema: omit(FIELDS_TO_IGNORE, attributesSchema) as CreateHistoryVersion['schema'],\n    componentsSchemas,\n  };\n};\n\nconst createLifecyclesService = ({ strapi }: { strapi: Core.Strapi }) => {\n  const state: {\n    deleteExpiredJob: ReturnType<typeof scheduleJob> | null;\n    isInitialized: boolean;\n  } = {\n    deleteExpiredJob: null,\n    isInitialized: false,\n  };\n\n  const serviceUtils = createServiceUtils({ strapi });\n  const { persistTablesWithPrefix } = strapi.service('admin::persist-tables');\n\n  return {\n    async bootstrap() {\n      // Prevent initializing the service twice\n      if (state.isInitialized) {\n        return;\n      }\n\n      // Avoid data loss in case users temporarily don't have a license\n      await persistTablesWithPrefix('strapi_history_versions');\n\n      strapi.documents.use(async (context, next) => {\n        const result = (await next()) as any;\n\n        if (!shouldCreateHistoryVersion(context)) {\n          return result;\n        }\n\n        // On create/clone actions, the documentId is not available before creating the action is executed\n        const documentId =\n          context.action === 'create' || context.action === 'clone'\n            ? result.documentId\n            : context.params.documentId;\n\n        // Apply default locale if not available in the request\n        const defaultLocale = await serviceUtils.getDefaultLocale();\n        const locales = castArray(context.params?.locale || defaultLocale);\n        if (!locales.length) {\n          return result;\n        }\n\n        // All schemas related to the content type\n        const uid = context.contentType.uid;\n        const schemas = getSchemas(uid);\n        const model = strapi.getModel(uid);\n\n        const isLocalizedContentType = serviceUtils.isLocalizedContentType(model);\n\n        // Find all affected entries\n        const localeEntries = await strapi.db.query(uid).findMany({\n          where: {\n            documentId,\n            ...(isLocalizedContentType ? { locale: { $in: locales } } : {}),\n            ...(contentTypes.hasDraftAndPublish(strapi.contentTypes[uid])\n              ? { publishedAt: null }\n              : {}),\n          },\n          populate: serviceUtils.getDeepPopulate(uid, true /* use database syntax */),\n        });\n\n        await strapi.db.transaction(async ({ onCommit }) => {\n          // .createVersion() is executed asynchronously,\n          // onCommit prevents creating a history version\n          // when the transaction has already been committed\n          onCommit(async () => {\n            for (const entry of localeEntries) {\n              const status = await serviceUtils.getVersionStatus(uid, entry);\n\n              await getService(strapi, 'history').createVersion({\n                contentType: uid,\n                data: omit(FIELDS_TO_IGNORE, entry) as Modules.Documents.AnyDocument,\n                relatedDocumentId: documentId,\n                locale: entry.locale,\n                status,\n                ...schemas,\n              });\n            }\n          });\n        });\n\n        return result;\n      });\n\n      // Schedule a job to delete expired history versions every day at midnight\n      state.deleteExpiredJob = scheduleJob('historyDaily', '0 0 * * *', () => {\n        const retentionDaysInMilliseconds = serviceUtils.getRetentionDays() * 24 * 60 * 60 * 1000;\n        const expirationDate = new Date(Date.now() - retentionDaysInMilliseconds);\n\n        strapi.db\n          .query(HISTORY_VERSION_UID)\n          .deleteMany({\n            where: {\n              created_at: {\n                $lt: expirationDate,\n              },\n            },\n          })\n          .catch((error) => {\n            if (error instanceof Error) {\n              strapi.log.error('Error deleting expired history versions', error.message);\n            }\n          });\n      });\n\n      state.isInitialized = true;\n    },\n\n    async destroy() {\n      if (state.deleteExpiredJob) {\n        state.deleteExpiredJob.cancel();\n      }\n    },\n  };\n};\n\nexport { createLifecyclesService };\n"],"names":["shouldCreateHistoryVersion","context","strapi","requestContext","get","request","url","startsWith","action","endsWith","contentType","uid","getSchemas","attributesSchema","getModel","attributes","componentsSchemas","Object","keys","reduce","currentComponentSchemas","key","fieldSchema","type","componentSchema","component","schema","omit","FIELDS_TO_IGNORE","createLifecyclesService","state","deleteExpiredJob","isInitialized","serviceUtils","createServiceUtils","persistTablesWithPrefix","service","bootstrap","documents","use","next","result","documentId","params","defaultLocale","getDefaultLocale","locales","castArray","locale","length","schemas","model","isLocalizedContentType","localeEntries","db","query","findMany","where","$in","contentTypes","hasDraftAndPublish","publishedAt","populate","getDeepPopulate","transaction","onCommit","entry","status","getVersionStatus","getService","createVersion","data","relatedDocumentId","scheduleJob","retentionDaysInMilliseconds","getRetentionDays","expirationDate","Date","now","HISTORY_VERSION_UID","deleteMany","created_at","$lt","catch","error","Error","log","message","destroy","cancel"],"mappings":"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"}