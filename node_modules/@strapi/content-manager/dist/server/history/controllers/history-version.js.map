{"version":3,"file":"history-version.js","sources":["../../../../server/src/history/controllers/history-version.ts"],"sourcesContent":["import { async, errors } from '@strapi/utils';\nimport type { Core, UID } from '@strapi/types';\nimport { pick } from 'lodash/fp';\nimport { getService as getContentManagerService } from '../../utils';\nimport { getService } from '../utils';\nimport type { HistoryVersions } from '../../../../shared/contracts';\nimport { validateRestoreVersion } from './validation/history-version';\n\n/**\n * Parses pagination params and makes sure they're within valid ranges\n */\nconst getValidPagination = ({ page, pageSize }: { page: any; pageSize: any }) => {\n  let pageNumber = 1;\n  let pageSizeNumber = 20;\n\n  if (page) {\n    const parsedPage = parseInt(page, 10);\n    pageNumber = parseInt(page, 10);\n\n    if (!Number.isNaN(parsedPage) && parsedPage >= 1) {\n      pageNumber = parsedPage;\n    }\n  }\n\n  if (pageSize) {\n    const parsedPageSize = parseInt(pageSize, 10);\n\n    if (!Number.isNaN(parsedPageSize) && parsedPageSize >= 1 && parsedPageSize <= 100) {\n      pageSizeNumber = parsedPageSize;\n    }\n  }\n\n  return { page: pageNumber, pageSize: pageSizeNumber };\n};\n\nconst createHistoryVersionController = ({ strapi }: { strapi: Core.Strapi }) => {\n  return {\n    async findMany(ctx) {\n      const contentTypeUid = ctx.query.contentType as UID.ContentType;\n      const isSingleType = strapi.getModel(contentTypeUid)?.kind === 'singleType';\n\n      if (isSingleType && !contentTypeUid) {\n        throw new errors.ForbiddenError('contentType is required');\n      }\n\n      if (!isSingleType && (!contentTypeUid || !ctx.query.documentId)) {\n        throw new errors.ForbiddenError('contentType and documentId are required');\n      }\n\n      /**\n       * There are no permissions specifically for history versions,\n       * but we need to check that the user can read the content type\n       */\n      const permissionChecker = getContentManagerService('permission-checker').create({\n        userAbility: ctx.state.userAbility,\n        model: ctx.query.contentType,\n      });\n\n      if (permissionChecker.cannot.read()) {\n        return ctx.forbidden();\n      }\n\n      const query: HistoryVersions.GetHistoryVersions.Request['query'] =\n        await permissionChecker.sanitizeQuery(ctx.query);\n\n      const { results, pagination } = await getService(strapi, 'history').findVersionsPage({\n        query: {\n          ...query,\n          ...getValidPagination({ page: query.page, pageSize: query.pageSize }),\n        },\n        state: { userAbility: ctx.state.userAbility },\n      });\n\n      const sanitizedResults = await async.map(\n        results,\n        async (version: HistoryVersions.HistoryVersionDataResponse & { locale: string }) => {\n          return {\n            ...version,\n            data: await permissionChecker.sanitizeOutput(version.data),\n            createdBy: version.createdBy\n              ? pick(['id', 'firstname', 'lastname', 'username', 'email'], version.createdBy)\n              : undefined,\n          };\n        }\n      );\n\n      return {\n        data: sanitizedResults,\n        meta: { pagination },\n      };\n    },\n\n    async restoreVersion(ctx) {\n      const request = ctx.request as unknown as HistoryVersions.RestoreHistoryVersion.Request;\n\n      await validateRestoreVersion(request.body, 'contentType is required');\n\n      const permissionChecker = getContentManagerService('permission-checker').create({\n        userAbility: ctx.state.userAbility,\n        model: request.body.contentType,\n      });\n\n      if (permissionChecker.cannot.update()) {\n        throw new errors.ForbiddenError();\n      }\n\n      const restoredDocument = await getService(strapi, 'history').restoreVersion(\n        request.params.versionId\n      );\n\n      return {\n        data: { documentId: restoredDocument.documentId },\n      } satisfies HistoryVersions.RestoreHistoryVersion.Response;\n    },\n  } satisfies Core.Controller;\n};\n\nexport { createHistoryVersionController };\n"],"names":["getValidPagination","page","pageSize","pageNumber","pageSizeNumber","parsedPage","parseInt","Number","isNaN","parsedPageSize","createHistoryVersionController","strapi","findMany","ctx","contentTypeUid","query","contentType","isSingleType","getModel","kind","errors","ForbiddenError","documentId","permissionChecker","getContentManagerService","create","userAbility","state","model","cannot","read","forbidden","sanitizeQuery","results","pagination","getService","findVersionsPage","sanitizedResults","async","map","version","data","sanitizeOutput","createdBy","pick","undefined","meta","restoreVersion","request","validateRestoreVersion","body","update","restoredDocument","params","versionId"],"mappings":"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"}