{"version":3,"file":"preview-config.js","sources":["../../../../server/src/preview/services/preview-config.ts"],"sourcesContent":["import { mergeWith } from 'lodash/fp';\n\nimport type { Core, UID } from '@strapi/types';\nimport { errors } from '@strapi/utils';\n\nexport type HandlerParams = {\n  documentId: string;\n  locale: string;\n  status: 'published' | 'draft';\n};\n\nexport interface PreviewConfig {\n  enabled: boolean;\n  config: {\n    // List of CSP allowed origins. This is a shortcut to setting it up inside `config/middlewares.js`\n    allowedOrigins: string[];\n    handler: (uid: UID.Schema, params: HandlerParams) => string | undefined;\n  };\n}\n\n/**\n * Utility to extend Strapi configuration middlewares. Mainly used to extend the CSP directives from the security middleware.\n */\nconst extendMiddlewareConfiguration = (middleware = { name: '', config: {} }) => {\n  const middlewares = strapi.config.get('middlewares') as (string | object)[];\n\n  const configuredMiddlewares = middlewares.map((currentMiddleware) => {\n    if (currentMiddleware === middleware.name) {\n      // Use the new config object if the middleware has no config property yet\n      return middleware;\n    }\n\n    // @ts-expect-error - currentMiddleware is not a string\n    if (currentMiddleware.name === middleware.name) {\n      // Deep merge (+ concat arrays) the new config with the current middleware config\n      return mergeWith(\n        (objValue, srcValue) => {\n          if (Array.isArray(objValue)) {\n            return objValue.concat(srcValue);\n          }\n\n          return undefined;\n        },\n        currentMiddleware,\n        middleware\n      );\n    }\n\n    return currentMiddleware;\n  });\n\n  strapi.config.set('middlewares', configuredMiddlewares);\n};\n\n/**\n * Read configuration for static preview\n */\nconst createPreviewConfigService = ({ strapi }: { strapi: Core.Strapi }) => {\n  return {\n    register() {\n      if (!this.isEnabled()) {\n        return;\n      }\n\n      const config = strapi.config.get('admin.preview') as PreviewConfig;\n\n      /**\n       * Register the allowed origins for CSP, so the preview URL can be displayed\n       */\n      if (config.config?.allowedOrigins) {\n        extendMiddlewareConfiguration({\n          name: 'strapi::security',\n          config: {\n            contentSecurityPolicy: {\n              directives: {\n                'frame-src': config.config.allowedOrigins,\n              },\n            },\n          },\n        });\n      }\n    },\n\n    isEnabled() {\n      const config = strapi.config.get('admin.preview') as PreviewConfig;\n\n      if (!config) {\n        return false;\n      }\n\n      return config?.enabled ?? true;\n    },\n\n    /**\n     * Validate if the configuration is valid\n     */\n    validate() {\n      if (!this.isEnabled()) {\n        return;\n      }\n\n      const handler = this.getPreviewHandler();\n\n      // Handler must be a function\n      if (typeof handler !== 'function') {\n        throw new errors.ValidationError(\n          'Preview configuration is invalid. Handler must be a function'\n        );\n      }\n    },\n\n    /**\n     * Utility to get the preview handler from the configuration\n     */\n    getPreviewHandler(): PreviewConfig['config']['handler'] {\n      const config = strapi.config.get('admin.preview') as PreviewConfig;\n\n      const emptyHandler = () => {\n        return undefined;\n      };\n\n      if (!this.isEnabled()) {\n        return emptyHandler;\n      }\n\n      return config?.config?.handler || emptyHandler;\n    },\n  };\n};\n\nexport { createPreviewConfigService };\n"],"names":["extendMiddlewareConfiguration","middleware","name","config","middlewares","strapi","get","configuredMiddlewares","map","currentMiddleware","mergeWith","objValue","srcValue","Array","isArray","concat","undefined","set","createPreviewConfigService","register","isEnabled","allowedOrigins","contentSecurityPolicy","directives","enabled","validate","handler","getPreviewHandler","errors","ValidationError","emptyHandler"],"mappings":";;;;;AAoBA;;IAGA,MAAMA,6BAAgC,GAAA,CAACC,UAAa,GAAA;IAAEC,IAAM,EAAA,EAAA;AAAIC,IAAAA,MAAAA,EAAQ;AAAG,CAAC,GAAA;AAC1E,IAAA,MAAMC,WAAcC,GAAAA,MAAAA,CAAOF,MAAM,CAACG,GAAG,CAAC,aAAA,CAAA;AAEtC,IAAA,MAAMC,qBAAwBH,GAAAA,WAAAA,CAAYI,GAAG,CAAC,CAACC,iBAAAA,GAAAA;QAC7C,IAAIA,iBAAAA,KAAsBR,UAAWC,CAAAA,IAAI,EAAE;;YAEzC,OAAOD,UAAAA;AACT;;AAGA,QAAA,IAAIQ,iBAAkBP,CAAAA,IAAI,KAAKD,UAAAA,CAAWC,IAAI,EAAE;;YAE9C,OAAOQ,YAAAA,CACL,CAACC,QAAUC,EAAAA,QAAAA,GAAAA;gBACT,IAAIC,KAAAA,CAAMC,OAAO,CAACH,QAAW,CAAA,EAAA;oBAC3B,OAAOA,QAAAA,CAASI,MAAM,CAACH,QAAAA,CAAAA;AACzB;gBAEA,OAAOI,SAAAA;AACT,aAAA,EACAP,iBACAR,EAAAA,UAAAA,CAAAA;AAEJ;QAEA,OAAOQ,iBAAAA;AACT,KAAA,CAAA;AAEAJ,IAAAA,MAAAA,CAAOF,MAAM,CAACc,GAAG,CAAC,aAAeV,EAAAA,qBAAAA,CAAAA;AACnC,CAAA;AAEA;;AAEC,UACKW,0BAA6B,GAAA,CAAC,EAAEb,MAAAA,EAAAA,OAAM,EAA2B,GAAA;IACrE,OAAO;AACLc,QAAAA,QAAAA,CAAAA,GAAAA;AACE,YAAA,IAAI,CAAC,IAAI,CAACC,SAAS,EAAI,EAAA;AACrB,gBAAA;AACF;AAEA,YAAA,MAAMjB,MAASE,GAAAA,OAAAA,CAAOF,MAAM,CAACG,GAAG,CAAC,eAAA,CAAA;AAEjC;;AAEC,UACD,IAAIH,MAAAA,CAAOA,MAAM,EAAEkB,cAAgB,EAAA;gBACjCrB,6BAA8B,CAAA;oBAC5BE,IAAM,EAAA,kBAAA;oBACNC,MAAQ,EAAA;wBACNmB,qBAAuB,EAAA;4BACrBC,UAAY,EAAA;gCACV,WAAapB,EAAAA,MAAAA,CAAOA,MAAM,CAACkB;AAC7B;AACF;AACF;AACF,iBAAA,CAAA;AACF;AACF,SAAA;AAEAD,QAAAA,SAAAA,CAAAA,GAAAA;AACE,YAAA,MAAMjB,MAASE,GAAAA,OAAAA,CAAOF,MAAM,CAACG,GAAG,CAAC,eAAA,CAAA;AAEjC,YAAA,IAAI,CAACH,MAAQ,EAAA;gBACX,OAAO,KAAA;AACT;AAEA,YAAA,OAAOA,QAAQqB,OAAW,IAAA,IAAA;AAC5B,SAAA;AAEA;;QAGAC,QAAAA,CAAAA,GAAAA;AACE,YAAA,IAAI,CAAC,IAAI,CAACL,SAAS,EAAI,EAAA;AACrB,gBAAA;AACF;YAEA,MAAMM,OAAAA,GAAU,IAAI,CAACC,iBAAiB,EAAA;;YAGtC,IAAI,OAAOD,YAAY,UAAY,EAAA;gBACjC,MAAM,IAAIE,kBAAOC,CAAAA,eAAe,CAC9B,8DAAA,CAAA;AAEJ;AACF,SAAA;AAEA;;QAGAF,iBAAAA,CAAAA,GAAAA;AACE,YAAA,MAAMxB,MAASE,GAAAA,OAAAA,CAAOF,MAAM,CAACG,GAAG,CAAC,eAAA,CAAA;AAEjC,YAAA,MAAMwB,YAAe,GAAA,IAAA;gBACnB,OAAOd,SAAAA;AACT,aAAA;AAEA,YAAA,IAAI,CAAC,IAAI,CAACI,SAAS,EAAI,EAAA;gBACrB,OAAOU,YAAAA;AACT;YAEA,OAAO3B,MAAAA,EAAQA,QAAQuB,OAAWI,IAAAA,YAAAA;AACpC;AACF,KAAA;AACF;;;;"}