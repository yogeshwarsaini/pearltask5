{"version":3,"file":"generate-types.js","sources":["../../../../../src/cli/commands/ts/generate-types.ts"],"sourcesContent":["import { createCommand } from 'commander';\nimport tsUtils from '@strapi/typescript-utils';\nimport { createStrapi, compileStrapi } from '@strapi/core';\n\nimport type { StrapiCommand } from '../../types';\nimport { runAction } from '../../utils/helpers';\n\ninterface CmdOptions {\n  debug?: boolean;\n  silent?: boolean;\n  verbose?: boolean;\n  outDir?: string;\n}\n\nconst action = async ({ debug, silent, verbose, outDir }: CmdOptions) => {\n  if ((debug || verbose) && silent) {\n    console.error('Flags conflict: both silent and debug mode are enabled, exiting...');\n    process.exit(1);\n  }\n\n  const appContext = await compileStrapi({ ignoreDiagnostics: true });\n  const app = await createStrapi(appContext).register();\n\n  await tsUtils.generators.generate({\n    strapi: app,\n    pwd: appContext.appDir,\n    rootDir: outDir ?? undefined,\n    logger: {\n      silent,\n      debug,\n    },\n    artifacts: { contentTypes: true, components: true },\n  });\n\n  await app.destroy();\n};\n\n/**\n * `$ strapi ts:generate-types`\n */\nconst command: StrapiCommand = () => {\n  return createCommand('ts:generate-types')\n    .description(`Generate TypeScript typings for your schemas`)\n    .option('-d, --debug', `Run the generation with debug messages`, false)\n    .option('-s, --silent', `Run the generation silently, without any output`, false)\n    .option(\n      '-o, --out-dir <outDir>',\n      'Specify a relative root directory in which the definitions will be generated. Changing this value might break types exposed by Strapi that relies on generated types.'\n    )\n    .action(runAction('ts:generate-types', action));\n};\n\nexport { action, command };\n"],"names":["action","debug","silent","verbose","outDir","console","error","process","exit","appContext","compileStrapi","ignoreDiagnostics","app","createStrapi","register","tsUtils","generators","generate","strapi","pwd","appDir","rootDir","undefined","logger","artifacts","contentTypes","components","destroy","command","createCommand","description","option","runAction"],"mappings":";;;;;;;AAcMA,MAAAA,MAAAA,GAAS,OAAO,EAAEC,KAAK,EAAEC,MAAM,EAAEC,OAAO,EAAEC,MAAM,EAAc,GAAA;AAClE,IAAA,IAAI,CAACH,KAASE,IAAAA,OAAM,KAAMD,MAAQ,EAAA;AAChCG,QAAAA,OAAAA,CAAQC,KAAK,CAAC,oEAAA,CAAA;AACdC,QAAAA,OAAAA,CAAQC,IAAI,CAAC,CAAA,CAAA;AACf;IAEA,MAAMC,UAAAA,GAAa,MAAMC,kBAAc,CAAA;QAAEC,iBAAmB,EAAA;AAAK,KAAA,CAAA;AACjE,IAAA,MAAMC,GAAM,GAAA,MAAMC,iBAAaJ,CAAAA,UAAAA,CAAAA,CAAYK,QAAQ,EAAA;AAEnD,IAAA,MAAMC,OAAQC,CAAAA,UAAU,CAACC,QAAQ,CAAC;QAChCC,MAAQN,EAAAA,GAAAA;AACRO,QAAAA,GAAAA,EAAKV,WAAWW,MAAM;AACtBC,QAAAA,OAAAA,EAASjB,MAAUkB,IAAAA,SAAAA;QACnBC,MAAQ,EAAA;AACNrB,YAAAA,MAAAA;AACAD,YAAAA;AACF,SAAA;QACAuB,SAAW,EAAA;YAAEC,YAAc,EAAA,IAAA;YAAMC,UAAY,EAAA;AAAK;AACpD,KAAA,CAAA;AAEA,IAAA,MAAMd,IAAIe,OAAO,EAAA;AACnB;AAEA;;AAEC,UACKC,OAAyB,GAAA,IAAA;AAC7B,IAAA,OAAOC,uBAAc,CAAA,mBAAA,CAAA,CAClBC,WAAW,CAAC,CAAC,4CAA4C,CAAC,CAAA,CAC1DC,MAAM,CAAC,aAAe,EAAA,CAAC,sCAAsC,CAAC,EAAE,KAChEA,CAAAA,CAAAA,MAAM,CAAC,cAAA,EAAgB,CAAC,+CAA+C,CAAC,EAAE,KAAA,CAAA,CAC1EA,MAAM,CACL,wBACA,EAAA,uKAAA,CAAA,CAED/B,MAAM,CAACgC,kBAAU,mBAAqBhC,EAAAA,MAAAA,CAAAA,CAAAA;AAC3C;;;;;"}