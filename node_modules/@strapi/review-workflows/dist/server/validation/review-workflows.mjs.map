{"version":3,"file":"review-workflows.mjs","sources":["../../../server/src/validation/review-workflows.ts"],"sourcesContent":["/* eslint-disable func-names */\nimport { yup, validateYupSchema } from '@strapi/utils';\nimport { hasStageAttribute } from '../utils/review-workflows';\nimport { STAGE_TRANSITION_UID } from '../constants/workflows';\n\nconst stageObject = yup.object().shape({\n  id: yup.number().integer().min(1),\n  name: yup.string().max(255).required(),\n  color: yup.string().matches(/^#(?:[0-9a-fA-F]{3}){1,2}$/i), // hex color\n  permissions: yup.array().of(\n    yup.object().shape({\n      role: yup.number().integer().min(1).required(),\n      action: yup.string().oneOf([STAGE_TRANSITION_UID]).required(),\n      actionParameters: yup.object().shape({\n        from: yup.number().integer().min(1).required(),\n        to: yup.number().integer().min(1),\n      }),\n    })\n  ),\n});\n\nconst validateUpdateStageOnEntitySchema = yup\n  .object()\n  .shape({\n    id: yup.number().integer().min(1).required(),\n  })\n  .required();\n\nconst validateContentTypes = yup.array().of(\n  yup\n    .string()\n    .test({\n      name: 'content-type-exists',\n      message: (value) => `Content type ${value.originalValue} does not exist`,\n      test(uid: any) {\n        // Warning; we use the strapi global - to avoid that, it would need to refactor how\n        // we generate validation function by using a factory with the strapi instance as parameter.\n        return !!strapi.getModel(uid);\n      },\n    })\n    .test({\n      name: 'content-type-review-workflow-enabled',\n      message: (value) =>\n        `Content type ${value.originalValue} does not have review workflow enabled`,\n      test(uid: any) {\n        const model = strapi.getModel(uid);\n\n        // It's not a valid content type if it doesn't have the stage attribute\n        return hasStageAttribute(model);\n      },\n    })\n);\n\nconst validateWorkflowCreateSchema = yup.object().shape({\n  name: yup.string().max(255).min(1, 'Workflow name can not be empty').required(),\n  stages: yup\n    .array()\n    .of(stageObject)\n    // @ts-expect-error - add unique property into the yup namespace typing\n    .uniqueProperty('name', 'Stage name must be unique')\n    .min(1, 'Can not create a workflow without stages')\n    .max(200, 'Can not have more than 200 stages')\n    .required('Can not create a workflow without stages'),\n  contentTypes: validateContentTypes,\n  stageRequiredToPublishName: yup.string().min(1).nullable(),\n});\n\nconst validateWorkflowUpdateSchema = yup.object().shape({\n  name: yup.string().max(255).min(1, 'Workflow name can not be empty'),\n  stages: yup\n    .array()\n    .of(stageObject)\n    // @ts-expect-error - add unique property into the yup namespace typing\n    .uniqueProperty('name', 'Stage name must be unique')\n    .min(1, 'Can not update a workflow without stages')\n    .max(200, 'Can not have more than 200 stages'),\n  contentTypes: validateContentTypes,\n  stageRequiredToPublishName: yup.string().min(1).nullable(),\n});\n\nconst validateUpdateAssigneeOnEntitySchema = yup\n  .object()\n  .shape({\n    id: yup.number().integer().min(1).nullable(),\n  })\n  .required();\n\nconst validateLocaleSchema = yup.string().nullable();\n\nexport const validateWorkflowCreate = validateYupSchema(validateWorkflowCreateSchema);\nexport const validateUpdateStageOnEntity = validateYupSchema(validateUpdateStageOnEntitySchema);\nexport const validateUpdateAssigneeOnEntity = validateYupSchema(\n  validateUpdateAssigneeOnEntitySchema\n);\nexport const validateWorkflowUpdate = validateYupSchema(validateWorkflowUpdateSchema);\nexport const validateLocale = validateYupSchema(validateLocaleSchema);\n\nexport default {\n  validateWorkflowCreate,\n  validateUpdateStageOnEntity,\n  validateUpdateAssigneeOnEntity,\n  validateWorkflowUpdate,\n  validateLocale,\n};\n"],"names":["stageObject","yup","object","shape","id","number","integer","min","name","string","max","required","color","matches","permissions","array","of","role","action","oneOf","STAGE_TRANSITION_UID","actionParameters","from","to","validateUpdateStageOnEntitySchema","validateContentTypes","test","message","value","originalValue","uid","strapi","getModel","model","hasStageAttribute","validateWorkflowCreateSchema","stages","uniqueProperty","contentTypes","stageRequiredToPublishName","nullable","validateWorkflowUpdateSchema","validateUpdateAssigneeOnEntitySchema","validateLocaleSchema","validateWorkflowCreate","validateYupSchema","validateUpdateStageOnEntity","validateUpdateAssigneeOnEntity","validateWorkflowUpdate","validateLocale"],"mappings":"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"}