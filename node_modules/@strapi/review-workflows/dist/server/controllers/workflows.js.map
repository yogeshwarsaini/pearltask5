{"version":3,"file":"workflows.js","sources":["../../../server/src/controllers/workflows.ts"],"sourcesContent":["import type { Context } from 'koa';\nimport { update, map, property } from 'lodash/fp';\n\nimport type { Core } from '@strapi/types';\nimport { async } from '@strapi/utils';\n\nimport { getService } from '../utils';\nimport { validateWorkflowCreate, validateWorkflowUpdate } from '../validation/review-workflows';\nimport { WORKFLOW_MODEL_UID, WORKFLOW_POPULATE } from '../constants/workflows';\n\n/**\n *\n * @param { Core.Strapi } strapi - Strapi instance\n * @param userAbility\n * @return { PermissionChecker }\n */\nfunction getWorkflowsPermissionChecker({ strapi }: { strapi: Core.Strapi }, userAbility: unknown) {\n  return strapi\n    .plugin('content-manager')\n    .service('permission-checker')\n    .create({ userAbility, model: WORKFLOW_MODEL_UID });\n}\n\n/**\n * Transforms workflow to an admin UI format.\n * Some attributes (like permissions) are presented in a different format in the admin UI.\n * @param {Workflow} workflow\n */\nfunction formatWorkflowToAdmin(workflow: any) {\n  if (!workflow) return;\n  if (!workflow.stages) return workflow;\n\n  // Transform permissions roles to be the id string instead of an object\n  const transformPermissions = map(update('role', property('id')));\n  const transformStages = map(update('permissions', transformPermissions));\n  return update('stages', transformStages, workflow);\n}\n\nexport default {\n  /**\n   * Create a new workflow\n   * @param {import('koa').BaseContext} ctx - koa context\n   */\n  async create(ctx: Context) {\n    const { body, query } = ctx.request;\n    const { sanitizeCreateInput, sanitizeOutput, sanitizedQuery } = getWorkflowsPermissionChecker(\n      { strapi },\n      ctx.state.userAbility\n    );\n    const { populate } = await sanitizedQuery.create(query);\n\n    const workflowBody = await validateWorkflowCreate(body.data);\n\n    const workflowService = getService('workflows');\n    const createdWorkflow = await workflowService\n      .create({\n        data: await sanitizeCreateInput(workflowBody),\n        populate,\n      })\n      .then(formatWorkflowToAdmin);\n\n    ctx.created({\n      data: await sanitizeOutput(createdWorkflow),\n    });\n  },\n\n  /**\n   * Update a workflow\n   * @param {import('koa').BaseContext} ctx - koa context\n   */\n  async update(ctx: Context) {\n    const { id } = ctx.params;\n    const { body, query } = ctx.request;\n    const workflowService = getService('workflows');\n    const { sanitizeUpdateInput, sanitizeOutput, sanitizedQuery } = getWorkflowsPermissionChecker(\n      { strapi },\n      ctx.state.userAbility\n    );\n    const { populate } = await sanitizedQuery.update(query);\n    const workflowBody = await validateWorkflowUpdate(body.data);\n\n    // Find if workflow exists\n    const workflow = await workflowService.findById(id, { populate: WORKFLOW_POPULATE });\n    if (!workflow) {\n      return ctx.notFound();\n    }\n\n    // Sanitize input data\n    const getPermittedFieldToUpdate = sanitizeUpdateInput(workflow);\n    const dataToUpdate = await getPermittedFieldToUpdate(workflowBody);\n\n    // Update workflow\n    const updatedWorkflow = await workflowService\n      .update(workflow, {\n        data: dataToUpdate,\n        populate,\n      })\n      .then(formatWorkflowToAdmin);\n\n    // Send sanitized response\n    ctx.body = {\n      data: await sanitizeOutput(updatedWorkflow),\n    };\n  },\n\n  /**\n   * Delete a workflow\n   * @param {import('koa').BaseContext} ctx - koa context\n   */\n  async delete(ctx: Context) {\n    const { id } = ctx.params;\n    const { query } = ctx.request;\n    const workflowService = getService('workflows');\n    const { sanitizeOutput, sanitizedQuery } = getWorkflowsPermissionChecker(\n      { strapi },\n      ctx.state.userAbility\n    );\n    const { populate } = await sanitizedQuery.delete(query);\n\n    const workflow = await workflowService.findById(id, { populate: WORKFLOW_POPULATE });\n    if (!workflow) {\n      return ctx.notFound(\"Workflow doesn't exist\");\n    }\n\n    const deletedWorkflow = await workflowService\n      .delete(workflow, { populate })\n      .then(formatWorkflowToAdmin);\n\n    ctx.body = {\n      data: await sanitizeOutput(deletedWorkflow),\n    };\n  },\n\n  /**\n   * List all workflows\n   * @param {import('koa').BaseContext} ctx - koa context\n   */\n  async find(ctx: Context) {\n    const { query } = ctx.request;\n    const workflowService = getService('workflows');\n    const { sanitizeOutput, sanitizedQuery } = getWorkflowsPermissionChecker(\n      { strapi },\n      ctx.state.userAbility\n    );\n    const { populate, filters, sort } = await sanitizedQuery.read(query);\n\n    const [workflows, workflowCount] = await Promise.all([\n      workflowService.find({ populate, filters, sort }).then(map(formatWorkflowToAdmin)),\n      workflowService.count(),\n    ]);\n\n    ctx.body = {\n      data: await async.map(workflows, sanitizeOutput),\n      meta: {\n        workflowCount,\n      },\n    };\n  },\n};\n"],"names":["getWorkflowsPermissionChecker","strapi","userAbility","plugin","service","create","model","WORKFLOW_MODEL_UID","formatWorkflowToAdmin","workflow","stages","transformPermissions","map","update","property","transformStages","ctx","body","query","request","sanitizeCreateInput","sanitizeOutput","sanitizedQuery","state","populate","workflowBody","validateWorkflowCreate","data","workflowService","getService","createdWorkflow","then","created","id","params","sanitizeUpdateInput","validateWorkflowUpdate","findById","WORKFLOW_POPULATE","notFound","getPermittedFieldToUpdate","dataToUpdate","updatedWorkflow","delete","deletedWorkflow","find","filters","sort","read","workflows","workflowCount","Promise","all","count","async","meta"],"mappings":"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"}