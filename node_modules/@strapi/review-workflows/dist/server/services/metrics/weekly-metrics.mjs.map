{"version":3,"file":"weekly-metrics.mjs","sources":["../../../../server/src/services/metrics/weekly-metrics.ts"],"sourcesContent":["import type { Core } from '@strapi/types';\nimport { flow, map, sum, size, mean, max, defaultTo } from 'lodash/fp';\nimport { add } from 'date-fns';\nimport { getService } from '../../utils';\n\nconst ONE_WEEK = 7 * 24 * 60 * 60 * 1000;\n\nconst getWeeklyCronScheduleAt = (date: Date) =>\n  `${date.getSeconds()} ${date.getMinutes()} ${date.getHours()} * * ${date.getDay()}`;\n\nexport default ({ strapi }: { strapi: Core.Strapi }) => {\n  const metrics = getService('workflow-metrics', { strapi });\n  const workflowsService = getService('workflows', { strapi });\n\n  const getMetricsStoreValue = async () => {\n    const value = await strapi.store.get({ type: 'plugin', name: 'ee', key: 'metrics' });\n    return defaultTo({}, value);\n  };\n\n  const setMetricsStoreValue = (value: unknown) =>\n    strapi.store.set({ type: 'plugin', name: 'ee', key: 'metrics', value });\n\n  return {\n    async computeMetrics() {\n      // There will never be more than 200 workflow, so we can safely fetch them all\n      const workflows = await workflowsService.find({ populate: 'stages' });\n\n      const stagesCount = flow(\n        map('stages'), // Number of stages per workflow\n        map(size)\n      )(workflows);\n\n      const contentTypesCount = flow(\n        map('contentTypes'), // Number of content types per workflow\n        map(size)\n      )(workflows);\n\n      return {\n        numberOfActiveWorkflows: size(workflows),\n        avgStagesCount: mean(stagesCount),\n        maxStagesCount: max(stagesCount),\n        activatedContentTypes: sum(contentTypesCount),\n      };\n    },\n\n    async sendMetrics() {\n      const computedMetrics = await this.computeMetrics();\n      metrics.sendDidSendReviewWorkflowPropertiesOnceAWeek(computedMetrics);\n\n      const metricsInfoStored = await getMetricsStoreValue();\n      // @ts-expect-error metricsInfoStored can use spread\n      await setMetricsStoreValue({ ...metricsInfoStored, lastWeeklyUpdate: new Date().getTime() });\n    },\n\n    async ensureWeeklyStoredCronSchedule() {\n      const metricsInfoStored: any = await getMetricsStoreValue();\n      const { weeklySchedule: currentSchedule, lastWeeklyUpdate } = metricsInfoStored;\n\n      const now = new Date();\n      let weeklySchedule = currentSchedule;\n\n      if (!currentSchedule || !lastWeeklyUpdate || lastWeeklyUpdate + ONE_WEEK < now.getTime()) {\n        weeklySchedule = getWeeklyCronScheduleAt(add(now, { seconds: 15 }));\n        await setMetricsStoreValue({ ...metricsInfoStored, weeklySchedule });\n      }\n\n      return weeklySchedule;\n    },\n\n    async registerCron() {\n      const weeklySchedule = await this.ensureWeeklyStoredCronSchedule();\n\n      strapi.cron.add({\n        reviewWorkflowsWeekly: {\n          task: this.sendMetrics.bind(this),\n          options: weeklySchedule,\n        },\n      });\n    },\n  };\n};\n"],"names":["ONE_WEEK","getWeeklyCronScheduleAt","date","getSeconds","getMinutes","getHours","getDay","strapi","metrics","getService","workflowsService","getMetricsStoreValue","value","store","get","type","name","key","defaultTo","setMetricsStoreValue","set","computeMetrics","workflows","find","populate","stagesCount","flow","map","size","contentTypesCount","numberOfActiveWorkflows","avgStagesCount","mean","maxStagesCount","max","activatedContentTypes","sum","sendMetrics","computedMetrics","sendDidSendReviewWorkflowPropertiesOnceAWeek","metricsInfoStored","lastWeeklyUpdate","Date","getTime","ensureWeeklyStoredCronSchedule","weeklySchedule","currentSchedule","now","add","seconds","registerCron","cron","reviewWorkflowsWeekly","task","bind","options"],"mappings":"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"}