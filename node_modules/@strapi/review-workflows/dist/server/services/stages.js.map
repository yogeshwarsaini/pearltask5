{"version":3,"file":"stages.js","sources":["../../../server/src/services/stages.ts"],"sourcesContent":["import type { Core, UID } from '@strapi/types';\nimport { async, errors } from '@strapi/utils';\nimport { map, pick, isEqual } from 'lodash/fp';\nimport { STAGE_MODEL_UID, ENTITY_STAGE_ATTRIBUTE, ERRORS } from '../constants/workflows';\nimport { WORKFLOW_UPDATE_STAGE } from '../constants/webhook-events';\nimport { getService } from '../utils';\n\nconst { ApplicationError, ValidationError } = errors;\nconst sanitizedStageFields = ['id', 'name', 'workflow', 'color'];\nconst sanitizeStageFields = pick(sanitizedStageFields);\n\nexport default ({ strapi }: { strapi: Core.Strapi }) => {\n  const metrics = getService('workflow-metrics', { strapi });\n  const stagePermissionsService = getService('stage-permissions', { strapi });\n  const workflowValidator = getService('validation', { strapi });\n\n  return {\n    find({ workflowId, populate }: any) {\n      return strapi.db.query(STAGE_MODEL_UID).findMany({\n        where: { workflow: workflowId },\n        populate,\n      });\n    },\n\n    findById(id: string | number, { populate }: any = {}) {\n      return strapi.db.query(STAGE_MODEL_UID).findOne({\n        where: { id },\n        populate,\n      });\n    },\n\n    async createMany(stagesList: any, { fields }: any = {}) {\n      const params = { select: fields ?? '*' };\n\n      const stages = await Promise.all(\n        stagesList.map((stage: any) =>\n          strapi.db.query(STAGE_MODEL_UID).create({\n            data: sanitizeStageFields(stage),\n            ...params,\n          })\n        )\n      );\n\n      // Create stage permissions\n      await async.reduce(stagesList)(async (_, stage, idx) => {\n        // Ignore stages without permissions\n        if (!stage.permissions || stage.permissions.length === 0) {\n          return;\n        }\n\n        const stagePermissions = stage.permissions;\n        const stageId = stages[idx].id;\n\n        const permissions = await async.map(\n          stagePermissions,\n          // Register each stage permission\n          (permission: any) =>\n            stagePermissionsService.register({\n              roleId: permission.role,\n              action: permission.action,\n              fromStage: stageId,\n            })\n        );\n\n        // Update stage with the new permissions\n        await strapi.db.query(STAGE_MODEL_UID).update({\n          where: { id: stageId },\n          data: {\n            permissions: permissions.flat().map((p: any) => p.id),\n          },\n        });\n      }, []);\n\n      metrics.sendDidCreateStage();\n\n      return stages;\n    },\n\n    async update(srcStage: any, destStage: any) {\n      let stagePermissions = srcStage?.permissions ?? [];\n      const stageId = destStage.id;\n\n      if (destStage.permissions) {\n        await this.deleteStagePermissions([srcStage]);\n\n        const permissions = await async.map(destStage.permissions, (permission: any) =>\n          stagePermissionsService.register({\n            roleId: permission.role,\n            action: permission.action,\n            fromStage: stageId,\n          })\n        );\n        stagePermissions = permissions.flat().map((p: any) => p.id);\n      }\n\n      const stage = await strapi.db.query(STAGE_MODEL_UID).update({\n        where: { id: stageId },\n        data: {\n          ...destStage,\n          permissions: stagePermissions,\n        },\n      });\n\n      metrics.sendDidEditStage();\n\n      return stage;\n    },\n\n    async delete(stage: any) {\n      // Unregister all permissions related to this stage id\n      await this.deleteStagePermissions([stage]);\n\n      const deletedStage = await strapi.db.query(STAGE_MODEL_UID).delete({\n        where: { id: stage.id },\n      });\n\n      metrics.sendDidDeleteStage();\n\n      return deletedStage;\n    },\n\n    async deleteMany(stages: any) {\n      await this.deleteStagePermissions(stages);\n\n      return strapi.db.query(STAGE_MODEL_UID).deleteMany({\n        where: { id: { $in: stages.map((s: any) => s.id) } },\n      });\n    },\n\n    async deleteStagePermissions(stages: any) {\n      // TODO: Find another way to do this for when we use the \"to\" parameter.\n      const permissions = stages.map((s: any) => s.permissions || []).flat();\n      await stagePermissionsService.unregister(permissions || []);\n    },\n\n    count({ workflowId }: any = {}) {\n      const opts = {} as any;\n\n      if (workflowId) {\n        opts.where = {\n          workflow: workflowId,\n        };\n      }\n\n      return strapi.db.query(STAGE_MODEL_UID).count(opts);\n    },\n\n    async replaceStages(srcStages: any, destStages: any, contentTypesToMigrate = []) {\n      const { created, updated, deleted } = getDiffBetweenStages(srcStages, destStages);\n\n      assertAtLeastOneStageRemain(srcStages || [], { created, deleted });\n\n      // Update stages and assign entity stages\n      return strapi.db.transaction(async ({ trx }) => {\n        // Create the new stages\n        const createdStages = await this.createMany(created, { fields: ['id'] });\n        // Put all the newly created stages ids\n        const createdStagesIds = map('id', createdStages);\n\n        // Update the workflow stages\n        await async.map(updated, (destStage: any) => {\n          const srcStage = srcStages.find((s: any) => s.id === destStage.id);\n\n          return this.update(srcStage, destStage);\n        });\n\n        // Delete the stages that are not in the new stages list\n        await async.map(deleted, async (stage: any) => {\n          // Find the nearest stage in the workflow and newly created stages\n          // that is not deleted, prioritizing the previous stages\n          const nearestStage = findNearestMatchingStage(\n            [...srcStages, ...createdStages],\n            srcStages.findIndex((s: any) => s.id === stage.id),\n            (targetStage: any) => {\n              return !deleted.find((s: any) => s.id === targetStage.id);\n            }\n          );\n\n          // Assign the new stage to entities that had the deleted stage\n          await async.map(contentTypesToMigrate, (contentTypeUID: any) => {\n            this.updateEntitiesStage(contentTypeUID, {\n              fromStageId: stage.id,\n              toStageId: nearestStage.id,\n              trx,\n            });\n          });\n\n          return this.delete(stage);\n        });\n\n        return destStages.map((stage: any) => ({\n          ...stage,\n          id: stage.id ?? createdStagesIds.shift(),\n        }));\n      });\n    },\n\n    /**\n     * Update the stage of an entity\n     */\n    async updateEntity(\n      entityToUpdate: {\n        id: number | string;\n        documentId: string;\n        locale: string;\n        updatedAt: string;\n      },\n      model: UID.ContentType,\n      stageId: any\n    ) {\n      const stage = await this.findById(stageId);\n      const { documentId, locale } = entityToUpdate;\n\n      await workflowValidator.validateWorkflowCount();\n\n      if (!stage) {\n        throw new ApplicationError(`Selected stage does not exist`);\n      }\n\n      const entity = await strapi.documents(model).update({\n        documentId,\n        locale,\n        // Stage doesn't have DP or i18n enabled, connecting it through the `id`\n        // will be safer than relying on the `documentId` + `locale` + `status` transformation\n        data: { [ENTITY_STAGE_ATTRIBUTE]: pick(['id'], stage) },\n        populate: [ENTITY_STAGE_ATTRIBUTE],\n      });\n\n      // Update the `updated_at` field of the entity, so that the `status` is not considered `Modified`\n      // NOTE: `updatedAt` is a protected attribute that can not be modified directly from the query layer\n      //        hence the knex query builder is used here.\n      const { tableName } = strapi.db.metadata.get(model);\n      await strapi.db\n        .connection(tableName)\n        .where({ id: entityToUpdate.id })\n        .update({\n          updated_at: new Date(entityToUpdate.updatedAt),\n        });\n\n      metrics.sendDidChangeEntryStage();\n\n      return entity;\n    },\n\n    /**\n     * Updates entity stages of a content type:\n     *  - If fromStageId is undefined, all entities with an existing stage will be assigned the new stage\n     *  - If fromStageId is null, all entities without a stage will be assigned the new stage\n     *  - If fromStageId is a number, all entities with that stage will be assigned the new stage\n     *\n     * For performance reasons we use knex queries directly.\n     *\n     * @param {string} contentTypeUID\n     * @param {number | undefined | null} fromStageId\n     * @param {number} toStageId\n     * @param {import('knex').Knex.Transaction} trx\n     * @returns\n     */\n    async updateEntitiesStage(contentTypeUID: any, { fromStageId, toStageId }: any) {\n      const { attributes, tableName } = strapi.db.metadata.get(contentTypeUID) as any;\n      const joinTable = attributes[ENTITY_STAGE_ATTRIBUTE].joinTable;\n      const joinColumn = joinTable.joinColumn.name;\n      const invJoinColumn = joinTable.inverseJoinColumn.name;\n\n      await workflowValidator.validateWorkflowCount();\n\n      return strapi.db.transaction(async ({ trx }) => {\n        // Update all already existing links to the new stage\n        if (fromStageId === undefined) {\n          return strapi.db\n            .getConnection()\n            .from(joinTable.name)\n            .update({ [invJoinColumn]: toStageId })\n            .transacting(trx);\n        }\n\n        // Update all links from the specified stage to the new stage\n        const selectStatement = strapi.db\n          .getConnection()\n          .select({ [joinColumn]: 't1.id', [invJoinColumn]: toStageId })\n          .from(`${tableName} as t1`)\n          .leftJoin(`${joinTable.name} as t2`, `t1.id`, `t2.${joinColumn}`)\n          .where(`t2.${invJoinColumn}`, fromStageId)\n          .toSQL();\n\n        // Insert rows for all entries of the content type that have the specified stage\n        return strapi.db\n          .getConnection(joinTable.name)\n          .insert(\n            strapi.db.connection.raw(\n              `(${joinColumn}, ${invJoinColumn})  ${selectStatement.sql}`,\n              selectStatement.bindings\n            )\n          )\n          .transacting(trx);\n      });\n    },\n\n    /**\n     * Deletes all entity stages of a content type\n     * @param {string} contentTypeUID\n     * @returns\n     */\n    async deleteAllEntitiesStage(contentTypeUID: any) {\n      const { attributes } = strapi.db.metadata.get(contentTypeUID) as any;\n      const joinTable = attributes[ENTITY_STAGE_ATTRIBUTE].joinTable;\n\n      // Delete all stage links for the content type\n      return strapi.db.transaction(async ({ trx }) =>\n        strapi.db.getConnection().from(joinTable.name).delete().transacting(trx)\n      );\n    },\n  };\n};\n\n/**\n * Compares two arrays of stages and returns an object indicating the differences.\n *\n * The function compares the `id` properties of each stage in `sourceStages` and `comparisonStages` to determine if the stage is present in both arrays.\n * If a stage with the same `id` is found in both arrays but the `name` property is different, the stage is considered updated.\n * If a stage with a particular `id` is only found in `comparisonStages`, it is considered created.\n * If a stage with a particular `id` is only found in `sourceStages`, it is considered deleted.\n *\n * @typedef {{id: Number, name: String, workflow: Number}} Stage\n * @typedef {{created: Stage[], updated: Stage[], deleted: Stage[]}} DiffStages\n *\n * The DiffStages object has three properties: `created`, `updated`, and `deleted`.\n * `created` is an array of stages that are in `comparisonStages` but not in `sourceStages`.\n * `updated` is an array of stages that have different names in `comparisonStages` and `sourceStages`.\n * `deleted` is an array of stages that are in `sourceStages` but not in `comparisonStages`.\n *\n * @param {Stage[]} sourceStages\n * @param {Stage[]} comparisonStages\n * @returns { DiffStages }\n */\nfunction getDiffBetweenStages(sourceStages: any, comparisonStages: any) {\n  const result = comparisonStages.reduce(\n    // ...\n\n    (acc: any, stageToCompare: any) => {\n      const srcStage = sourceStages.find((stage: any) => stage.id === stageToCompare.id);\n\n      if (!srcStage) {\n        acc.created.push(stageToCompare);\n      } else if (\n        !isEqual(\n          pick(['name', 'color', 'permissions'], srcStage),\n          pick(['name', 'color', 'permissions'], stageToCompare)\n        )\n      ) {\n        acc.updated.push(stageToCompare);\n      }\n      return acc;\n    },\n    { created: [], updated: [] }\n  );\n\n  result.deleted = sourceStages.filter(\n    (srcStage: any) => !comparisonStages.some((cmpStage: any) => cmpStage.id === srcStage.id)\n  );\n\n  return result;\n}\n\n/**\n * Asserts that at least one stage remains in the workflow after applying deletions and additions.\n *\n * @param {Array} workflowStages - An array of stages in the current workflow.\n * @param {Object} diffStages - An object containing the stages to be deleted and created.\n * @param {Array} diffStages.deleted - An array of stages that are planned to be deleted from the workflow.\n * @param {Array} diffStages.created - An array of stages that are planned to be created in the workflow.\n *\n * @throws {ValidationError} If the number of remaining stages in the workflow after applying deletions and additions is less than 1.\n */\nfunction assertAtLeastOneStageRemain(workflowStages: any, diffStages: any) {\n  const remainingStagesCount =\n    workflowStages.length - diffStages.deleted.length + diffStages.created.length;\n  if (remainingStagesCount < 1) {\n    throw new ValidationError(ERRORS.WORKFLOW_WITHOUT_STAGES);\n  }\n}\n\n/**\n * Find the id of the nearest object in an array that matches a condition.\n * Used for searching for the nearest stage that is not deleted.\n * Starts by searching the elements before the index, then the remaining elements in the array.\n *\n * @param {Array} stages\n * @param {Number} startIndex the index to start searching from\n * @param {Function} condition must evaluate to true for the object to be considered a match\n * @returns {Object} stage\n */\nfunction findNearestMatchingStage(stages: any, startIndex: any, condition: any) {\n  // Start by searching the elements before the startIndex\n  for (let i = startIndex; i >= 0; i -= 1) {\n    if (condition(stages[i])) {\n      return stages[i];\n    }\n  }\n\n  // If no matching element is found before the startIndex,\n  // search the remaining elements in the array\n  const remainingArray = stages.slice(startIndex + 1);\n  const nearestObject = remainingArray.filter(condition)[0];\n  return nearestObject;\n}\n"],"names":["ApplicationError","ValidationError","errors","sanitizedStageFields","sanitizeStageFields","pick","strapi","metrics","getService","stagePermissionsService","workflowValidator","find","workflowId","populate","db","query","STAGE_MODEL_UID","findMany","where","workflow","findById","id","findOne","createMany","stagesList","fields","params","select","stages","Promise","all","map","stage","create","data","async","reduce","_","idx","permissions","length","stagePermissions","stageId","permission","register","roleId","role","action","fromStage","update","flat","p","sendDidCreateStage","srcStage","destStage","deleteStagePermissions","sendDidEditStage","delete","deletedStage","sendDidDeleteStage","deleteMany","$in","s","unregister","count","opts","replaceStages","srcStages","destStages","contentTypesToMigrate","created","updated","deleted","getDiffBetweenStages","assertAtLeastOneStageRemain","transaction","trx","createdStages","createdStagesIds","nearestStage","findNearestMatchingStage","findIndex","targetStage","contentTypeUID","updateEntitiesStage","fromStageId","toStageId","shift","updateEntity","entityToUpdate","model","documentId","locale","validateWorkflowCount","entity","documents","ENTITY_STAGE_ATTRIBUTE","tableName","metadata","get","connection","updated_at","Date","updatedAt","sendDidChangeEntryStage","attributes","joinTable","joinColumn","name","invJoinColumn","inverseJoinColumn","undefined","getConnection","from","transacting","selectStatement","leftJoin","toSQL","insert","raw","sql","bindings","deleteAllEntitiesStage","sourceStages","comparisonStages","result","acc","stageToCompare","push","isEqual","filter","some","cmpStage","workflowStages","diffStages","remainingStagesCount","ERRORS","WORKFLOW_WITHOUT_STAGES","startIndex","condition","i","remainingArray","slice","nearestObject"],"mappings":"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"}