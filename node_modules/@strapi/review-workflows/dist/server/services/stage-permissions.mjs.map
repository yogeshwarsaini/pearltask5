{"version":3,"file":"stage-permissions.mjs","sources":["../../../server/src/services/stage-permissions.ts"],"sourcesContent":["import type { Core } from '@strapi/types';\nimport { prop } from 'lodash/fp';\nimport { async, errors } from '@strapi/utils';\nimport { getService, getAdminService } from '../utils';\nimport { STAGE_TRANSITION_UID } from '../constants/workflows';\n\nconst { ApplicationError } = errors;\nconst validActions = [STAGE_TRANSITION_UID];\n\nexport default ({ strapi }: { strapi: Core.Strapi }) => {\n  const roleService = getAdminService('role');\n  const permissionService = getAdminService('permission');\n\n  return {\n    async register({ roleId, action, fromStage }: any) {\n      if (!validActions.includes(action)) {\n        throw new ApplicationError(`Invalid action ${action}`);\n      }\n      const permissions = await roleService.addPermissions(roleId, [\n        {\n          action,\n          actionParameters: {\n            from: fromStage,\n          },\n        },\n      ]);\n\n      // TODO: Filter response\n      return permissions;\n    },\n    async registerMany(permissions: any) {\n      return async.map(permissions, this.register);\n    },\n    async unregister(permissions: any) {\n      const permissionIds = permissions.map(prop('id'));\n      await permissionService.deleteByIds(permissionIds);\n    },\n    can(action: any, fromStage: any) {\n      const requestState = strapi.requestContext.get()?.state;\n\n      if (!requestState) {\n        return false;\n      }\n\n      // Override permissions for super admin\n      const userRoles = requestState.user?.roles;\n      if (userRoles?.some((role: any) => role.code === 'strapi-super-admin')) {\n        return true;\n      }\n\n      return requestState.userAbility.can({\n        name: action,\n        params: { from: fromStage },\n      });\n    },\n  };\n};\n"],"names":["ApplicationError","errors","validActions","STAGE_TRANSITION_UID","strapi","roleService","getAdminService","permissionService","register","roleId","action","fromStage","includes","permissions","addPermissions","actionParameters","from","registerMany","async","map","unregister","permissionIds","prop","deleteByIds","can","requestState","requestContext","get","state","userRoles","user","roles","some","role","code","userAbility","name","params"],"mappings":";;;;;AAMA,MAAM,EAAEA,gBAAgB,EAAE,GAAGC,MAAAA;AAC7B,MAAMC,YAAe,GAAA;AAACC,IAAAA;AAAqB,CAAA;AAE3C,uBAAe,CAAA,CAAC,EAAEC,MAAM,EAA2B,GAAA;AACjD,IAAA,MAAMC,cAAcC,eAAgB,CAAA,MAAA,CAAA;AACpC,IAAA,MAAMC,oBAAoBD,eAAgB,CAAA,YAAA,CAAA;IAE1C,OAAO;AACL,QAAA,MAAME,UAAS,EAAEC,MAAM,EAAEC,MAAM,EAAEC,SAAS,EAAO,EAAA;AAC/C,YAAA,IAAI,CAACT,YAAAA,CAAaU,QAAQ,CAACF,MAAS,CAAA,EAAA;AAClC,gBAAA,MAAM,IAAIV,gBAAiB,CAAA,CAAC,eAAe,EAAEU,OAAO,CAAC,CAAA;AACvD;AACA,YAAA,MAAMG,WAAc,GAAA,MAAMR,WAAYS,CAAAA,cAAc,CAACL,MAAQ,EAAA;AAC3D,gBAAA;AACEC,oBAAAA,MAAAA;oBACAK,gBAAkB,EAAA;wBAChBC,IAAML,EAAAA;AACR;AACF;AACD,aAAA,CAAA;;YAGD,OAAOE,WAAAA;AACT,SAAA;AACA,QAAA,MAAMI,cAAaJ,WAAgB,EAAA;AACjC,YAAA,OAAOK,MAAMC,GAAG,CAACN,WAAa,EAAA,IAAI,CAACL,QAAQ,CAAA;AAC7C,SAAA;AACA,QAAA,MAAMY,YAAWP,WAAgB,EAAA;AAC/B,YAAA,MAAMQ,aAAgBR,GAAAA,WAAAA,CAAYM,GAAG,CAACG,IAAK,CAAA,IAAA,CAAA,CAAA;YAC3C,MAAMf,iBAAAA,CAAkBgB,WAAW,CAACF,aAAAA,CAAAA;AACtC,SAAA;QACAG,GAAId,CAAAA,CAAAA,MAAW,EAAEC,SAAc,EAAA;AAC7B,YAAA,MAAMc,YAAerB,GAAAA,MAAAA,CAAOsB,cAAc,CAACC,GAAG,EAAIC,EAAAA,KAAAA;AAElD,YAAA,IAAI,CAACH,YAAc,EAAA;gBACjB,OAAO,KAAA;AACT;;YAGA,MAAMI,SAAAA,GAAYJ,YAAaK,CAAAA,IAAI,EAAEC,KAAAA;AACrC,YAAA,IAAIF,WAAWG,IAAK,CAAA,CAACC,OAAcA,IAAKC,CAAAA,IAAI,KAAK,oBAAuB,CAAA,EAAA;gBACtE,OAAO,IAAA;AACT;AAEA,YAAA,OAAOT,YAAaU,CAAAA,WAAW,CAACX,GAAG,CAAC;gBAClCY,IAAM1B,EAAAA,MAAAA;gBACN2B,MAAQ,EAAA;oBAAErB,IAAML,EAAAA;AAAU;AAC5B,aAAA,CAAA;AACF;AACF,KAAA;AACF,CAAA;;;;"}