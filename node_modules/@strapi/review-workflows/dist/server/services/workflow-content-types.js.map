{"version":3,"file":"workflow-content-types.js","sources":["../../../server/src/services/workflow-content-types.ts"],"sourcesContent":["import type { Core } from '@strapi/types';\nimport { async } from '@strapi/utils';\nimport { difference, merge } from 'lodash/fp';\nimport { getService } from '../utils';\nimport { WORKFLOW_MODEL_UID } from '../constants/workflows';\n\nexport default ({ strapi }: { strapi: Core.Strapi }) => {\n  const contentManagerContentTypeService = strapi\n    .plugin('content-manager')\n    .service('content-types');\n  const stagesService = getService('stages', { strapi });\n\n  const updateContentTypeConfig = async (uid: any, reviewWorkflowOption: any) => {\n    // Merge options in the configuration as the configuration service use a destructuration merge which doesn't include nested objects\n    const modelConfig = await contentManagerContentTypeService.findConfiguration(uid);\n\n    await contentManagerContentTypeService.updateConfiguration(\n      { uid },\n      { options: merge(modelConfig.options, { reviewWorkflows: reviewWorkflowOption }) }\n    );\n  };\n\n  return {\n    /**\n     * Migrates entities stages. Used when a content type is assigned to a workflow.\n     * @param {*} options\n     * @param {Array<string>} options.srcContentTypes - The content types assigned to the previous workflow\n     * @param {Array<string>} options.destContentTypes - The content types assigned to the new workflow\n     * @param {Workflow.Stage} options.stageId - The new stage to assign the entities to\n     */\n    async migrate({ srcContentTypes = [], destContentTypes, stageId }: any) {\n      const workflowsService = getService('workflows', { strapi });\n      const { created, deleted } = diffContentTypes(srcContentTypes, destContentTypes);\n\n      await async.map(\n        created,\n        async (uid: any) => {\n          // Content Types should only be assigned to one workflow\n          // However, edge cases can happen, and this handles them\n          const srcWorkflows = await workflowsService._getAssignedWorkflows(uid, {});\n\n          if (srcWorkflows.length) {\n            // Updates all existing entities stages links to the new stage\n            await stagesService.updateEntitiesStage(uid, { toStageId: stageId });\n            // Transfer content types from the previous workflow(s)\n            await async.map(srcWorkflows, (srcWorkflow: any) =>\n              this.transferContentTypes(srcWorkflow, uid)\n            );\n          }\n          await updateContentTypeConfig(uid, true);\n\n          // Create new stages links to the new stage\n          return stagesService.updateEntitiesStage(uid, {\n            fromStageId: null,\n            toStageId: stageId,\n          });\n        },\n        // transferContentTypes can cause race conditions if called in parallel when updating the same workflow\n        { concurrency: 1 }\n      );\n\n      await async.map(deleted, async (uid: any) => {\n        await updateContentTypeConfig(uid, false);\n        await stagesService.deleteAllEntitiesStage(uid, {});\n      });\n    },\n\n    /**\n     * Filters the content types assigned to a workflow\n     * @param {Workflow} srcWorkflow - The workflow to transfer from\n     * @param {string} uid - The content type uid\n     */\n    async transferContentTypes(srcWorkflow: any, uid: any) {\n      // Update assignedContentTypes of the previous workflow\n      await strapi.db.query(WORKFLOW_MODEL_UID).update({\n        where: {\n          id: srcWorkflow.id,\n        },\n        data: {\n          contentTypes: srcWorkflow.contentTypes.filter((contentType: any) => contentType !== uid),\n        },\n      });\n    },\n  };\n};\n\nconst diffContentTypes = (srcContentTypes: any, destContentTypes: any) => {\n  const created = difference(destContentTypes, srcContentTypes);\n  const deleted = difference(srcContentTypes, destContentTypes);\n  return { created, deleted };\n};\n"],"names":["strapi","contentManagerContentTypeService","plugin","service","stagesService","getService","updateContentTypeConfig","uid","reviewWorkflowOption","modelConfig","findConfiguration","updateConfiguration","options","merge","reviewWorkflows","migrate","srcContentTypes","destContentTypes","stageId","workflowsService","created","deleted","diffContentTypes","async","map","srcWorkflows","_getAssignedWorkflows","length","updateEntitiesStage","toStageId","srcWorkflow","transferContentTypes","fromStageId","concurrency","deleteAllEntitiesStage","db","query","WORKFLOW_MODEL_UID","update","where","id","data","contentTypes","filter","contentType","difference"],"mappings":"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"}