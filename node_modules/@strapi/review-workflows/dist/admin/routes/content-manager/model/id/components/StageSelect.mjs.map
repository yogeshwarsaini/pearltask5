{"version":3,"file":"StageSelect.mjs","sources":["../../../../../../../admin/src/routes/content-manager/model/id/components/StageSelect.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { useNotification, useAPIErrorHandler, useQueryParams } from '@strapi/admin/strapi-admin';\nimport { useLicenseLimits } from '@strapi/admin/strapi-admin/ee';\nimport { unstable_useDocument } from '@strapi/content-manager/strapi-admin';\nimport {\n  SingleSelect,\n  type SingleSelectProps,\n  SingleSelectOption,\n  Field,\n  Flex,\n  Loader,\n  Typography,\n  VisuallyHidden,\n  Tooltip,\n} from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\nimport { useParams } from 'react-router-dom';\n\nimport { Stage } from '../../../../../../../shared/contracts/review-workflows';\nimport { LimitsModal, LimitsModalProps } from '../../../../../components/LimitsModal';\nimport {\n  CHARGEBEE_STAGES_PER_WORKFLOW_ENTITLEMENT_NAME,\n  CHARGEBEE_WORKFLOW_ENTITLEMENT_NAME,\n} from '../../../../../constants';\nimport { useGetStagesQuery, useUpdateStageMutation } from '../../../../../services/content-manager';\nimport { buildValidParams } from '../../../../../utils/api';\nimport { getStageColorByHex } from '../../../../../utils/colors';\n\nimport { STAGE_ATTRIBUTE_NAME } from './constants';\n\nimport type { Data } from '@strapi/types';\n\n/* -------------------------------------------------------------------------------------------------\n * LimitModals\n * -----------------------------------------------------------------------------------------------*/\n\nconst WorkflowLimitModal = ({ open, onOpenChange }: LimitsModalProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <LimitsModal.Root open={open} onOpenChange={onOpenChange}>\n      <LimitsModal.Title>\n        {formatMessage({\n          id: 'content-manager.reviewWorkflows.workflows.limit.title',\n          defaultMessage: 'You’ve reached the limit of workflows in your plan',\n        })}\n      </LimitsModal.Title>\n\n      <LimitsModal.Body>\n        {formatMessage({\n          id: 'content-manager.reviewWorkflows.workflows.limit.body',\n          defaultMessage: 'Delete a workflow or contact Sales to enable more workflows.',\n        })}\n      </LimitsModal.Body>\n    </LimitsModal.Root>\n  );\n};\n\nconst StageLimitModal = ({ open, onOpenChange }: LimitsModalProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <LimitsModal.Root open={open} onOpenChange={onOpenChange}>\n      <LimitsModal.Title>\n        {formatMessage({\n          id: 'content-manager.reviewWorkflows.stages.limit.title',\n          defaultMessage: 'You have reached the limit of stages for this workflow in your plan',\n        })}\n      </LimitsModal.Title>\n\n      <LimitsModal.Body>\n        {formatMessage({\n          id: 'content-manager.reviewWorkflows.stages.limit.body',\n          defaultMessage: 'Try deleting some stages or contact Sales to enable more stages.',\n        })}\n      </LimitsModal.Body>\n    </LimitsModal.Root>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * StageSelect\n * -----------------------------------------------------------------------------------------------*/\n\nconst Select = ({\n  stages,\n  activeWorkflowStage,\n  isLoading,\n  ...props\n}: SingleSelectProps & { stages: Stage[]; activeWorkflowStage: Stage; isLoading: boolean }) => {\n  const { formatMessage } = useIntl();\n  const { themeColorName } = getStageColorByHex(activeWorkflowStage?.color) ?? {};\n\n  return (\n    <SingleSelect\n      disabled={stages.length === 0}\n      placeholder={formatMessage({\n        id: 'content-manager.reviewWorkflows.assignee.placeholder',\n        defaultMessage: 'Select…',\n      })}\n      startIcon={\n        activeWorkflowStage && (\n          <Flex\n            tag=\"span\"\n            height={2}\n            background={activeWorkflowStage?.color}\n            borderColor={themeColorName === 'neutral0' ? 'neutral150' : undefined}\n            hasRadius\n            shrink={0}\n            width={2}\n            marginRight=\"-3px\"\n          />\n        )\n      }\n      // @ts-expect-error – `customizeContent` is not correctly typed in the DS.\n      customizeContent={() => {\n        return (\n          <Flex tag=\"span\" justifyContent=\"space-between\" alignItems=\"center\" width=\"100%\">\n            <Typography textColor=\"neutral800\" ellipsis lineHeight=\"inherit\">\n              {activeWorkflowStage?.name ?? ''}\n            </Typography>\n            {isLoading ? <Loader small style={{ display: 'flex' }} data-testid=\"loader\" /> : null}\n          </Flex>\n        );\n      }}\n      {...props}\n    >\n      {stages.map(({ id, color, name }) => {\n        const { themeColorName } = getStageColorByHex(color) ?? {};\n\n        return (\n          <SingleSelectOption\n            key={id}\n            startIcon={\n              <Flex\n                height={2}\n                background={color}\n                borderColor={themeColorName === 'neutral0' ? 'neutral150' : undefined}\n                hasRadius\n                shrink={0}\n                width={2}\n              />\n            }\n            value={id}\n            textValue={name}\n          >\n            {name}\n          </SingleSelectOption>\n        );\n      })}\n    </SingleSelect>\n  );\n};\n\nexport const StageSelect = ({ isCompact }: { isCompact?: boolean }) => {\n  const {\n    collectionType = '',\n    slug: model = '',\n    id = '',\n  } = useParams<{\n    collectionType: string;\n    slug: string;\n    id: string;\n  }>();\n  const { formatMessage } = useIntl();\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\n  const { toggleNotification } = useNotification();\n  const [{ query }] = useQueryParams();\n  const params = React.useMemo(() => buildValidParams(query), [query]);\n  const { document, isLoading: isLoadingDocument } = unstable_useDocument(\n    {\n      collectionType,\n      model,\n      documentId: id,\n    },\n    {\n      skip: !id && collectionType !== 'single-types',\n    }\n  );\n\n  const { data, isLoading: isLoadingStages } = useGetStagesQuery(\n    {\n      slug: collectionType,\n      model: model,\n      // @ts-expect-error – `id` is not correctly typed in the DS.\n      id: document?.documentId,\n      params,\n    },\n    {\n      skip: !document?.documentId,\n    }\n  );\n\n  const { meta, stages = [] } = data ?? {};\n\n  const { getFeature } = useLicenseLimits();\n  const [showLimitModal, setShowLimitModal] = React.useState<'stage' | 'workflow' | null>(null);\n\n  const limits = getFeature<string>('review-workflows') ?? {};\n\n  const activeWorkflowStage = document ? document[STAGE_ATTRIBUTE_NAME] : null;\n\n  const [updateStage, { error }] = useUpdateStageMutation();\n\n  const handleChange = async (stageId: Data.ID) => {\n    try {\n      /**\n       * If the current license has a limit:\n       * check if the total count of workflows exceeds that limit and display\n       * the limits modal.\n       *\n       * If the current license does not have a limit (e.g. offline license):\n       * do nothing (for now).\n       *\n       */\n\n      if (\n        limits?.[CHARGEBEE_WORKFLOW_ENTITLEMENT_NAME] &&\n        parseInt(limits[CHARGEBEE_WORKFLOW_ENTITLEMENT_NAME], 10) < (meta?.workflowCount ?? 0)\n      ) {\n        setShowLimitModal('workflow');\n\n        /**\n         * If the current license has a limit:\n         * check if the total count of stages exceeds that limit and display\n         * the limits modal.\n         *\n         * If the current license does not have a limit (e.g. offline license):\n         * do nothing (for now).\n         *\n         */\n      } else if (\n        limits?.[CHARGEBEE_STAGES_PER_WORKFLOW_ENTITLEMENT_NAME] &&\n        parseInt(limits[CHARGEBEE_STAGES_PER_WORKFLOW_ENTITLEMENT_NAME], 10) < stages.length\n      ) {\n        setShowLimitModal('stage');\n      } else {\n        if (document?.documentId) {\n          const res = await updateStage({\n            model,\n            id: document.documentId,\n            slug: collectionType,\n            params,\n            data: { id: stageId },\n          });\n\n          if ('data' in res) {\n            toggleNotification({\n              type: 'success',\n              message: formatMessage({\n                id: 'content-manager.reviewWorkflows.stage.notification.saved',\n                defaultMessage: 'Review stage updated',\n              }),\n            });\n          }\n\n          if (isCompact && 'error' in res) {\n            toggleNotification({\n              type: 'danger',\n              message: formatAPIError(res.error),\n            });\n          }\n        }\n      }\n    } catch (error) {\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({\n          id: 'content-manager.reviewWorkflows.stage.notification.error',\n          defaultMessage: 'An error occurred while updating the review stage',\n        }),\n      });\n    }\n  };\n\n  const isLoading = isLoadingStages || isLoadingDocument;\n\n  const reviewStageLabel = formatMessage({\n    id: 'content-manager.reviewWorkflows.stage.label',\n    defaultMessage: 'Review stage',\n  });\n  const reviewStageHint =\n    !isLoading &&\n    stages.length === 0 &&\n    // TODO: Handle errors and hints\n    formatMessage({\n      id: 'content-manager.reviewWorkflows.stages.no-transition',\n      defaultMessage: 'You don’t have the permission to update this stage.',\n    });\n\n  if (isCompact) {\n    return (\n      <>\n        <Tooltip label={reviewStageHint}>\n          <Field.Root name={STAGE_ATTRIBUTE_NAME} id={STAGE_ATTRIBUTE_NAME}>\n            <>\n              <VisuallyHidden>\n                <Field.Label>{reviewStageLabel}</Field.Label>\n              </VisuallyHidden>\n              <Select\n                stages={stages}\n                activeWorkflowStage={activeWorkflowStage}\n                isLoading={isLoading}\n                size=\"S\"\n                disabled={stages.length === 0}\n                value={activeWorkflowStage?.id}\n                onChange={handleChange}\n                placeholder={formatMessage({\n                  id: 'content-manager.reviewWorkflows.assignee.placeholder',\n                  defaultMessage: 'Select…',\n                })}\n              />\n            </>\n          </Field.Root>\n        </Tooltip>\n        <WorkflowLimitModal\n          open={showLimitModal === 'workflow'}\n          onOpenChange={() => setShowLimitModal(null)}\n        />\n        <StageLimitModal\n          open={showLimitModal === 'stage'}\n          onOpenChange={() => setShowLimitModal(null)}\n        />\n      </>\n    );\n  }\n\n  return (\n    <>\n      <Field.Root\n        hint={reviewStageHint}\n        error={(error && formatAPIError(error)) || undefined}\n        name={STAGE_ATTRIBUTE_NAME}\n        id={STAGE_ATTRIBUTE_NAME}\n      >\n        <Field.Label>{reviewStageLabel}</Field.Label>\n        <Select\n          stages={stages}\n          activeWorkflowStage={activeWorkflowStage}\n          isLoading={isLoading}\n          disabled={stages.length === 0}\n          value={activeWorkflowStage?.id}\n          onChange={handleChange}\n          placeholder={formatMessage({\n            id: 'content-manager.reviewWorkflows.assignee.placeholder',\n            defaultMessage: 'Select…',\n          })}\n        />\n        <Field.Hint />\n        <Field.Error />\n      </Field.Root>\n      <WorkflowLimitModal\n        open={showLimitModal === 'workflow'}\n        onOpenChange={() => setShowLimitModal(null)}\n      />\n      <StageLimitModal\n        open={showLimitModal === 'stage'}\n        onOpenChange={() => setShowLimitModal(null)}\n      />\n    </>\n  );\n};\n"],"names":["WorkflowLimitModal","open","onOpenChange","formatMessage","useIntl","_jsxs","LimitsModal","Root","_jsx","Title","id","defaultMessage","Body","StageLimitModal","Select","stages","activeWorkflowStage","isLoading","props","themeColorName","getStageColorByHex","color","SingleSelect","disabled","length","placeholder","startIcon","Flex","tag","height","background","borderColor","undefined","hasRadius","shrink","width","marginRight","customizeContent","justifyContent","alignItems","Typography","textColor","ellipsis","lineHeight","name","Loader","small","style","display","data-testid","map","SingleSelectOption","value","textValue","StageSelect","isCompact","collectionType","slug","model","useParams","_unstableFormatAPIError","formatAPIError","useAPIErrorHandler","toggleNotification","useNotification","query","useQueryParams","params","React","useMemo","buildValidParams","document","isLoadingDocument","unstable_useDocument","documentId","skip","data","isLoadingStages","useGetStagesQuery","meta","getFeature","useLicenseLimits","showLimitModal","setShowLimitModal","useState","limits","STAGE_ATTRIBUTE_NAME","updateStage","error","useUpdateStageMutation","handleChange","stageId","CHARGEBEE_WORKFLOW_ENTITLEMENT_NAME","parseInt","workflowCount","CHARGEBEE_STAGES_PER_WORKFLOW_ENTITLEMENT_NAME","res","type","message","reviewStageLabel","reviewStageHint","_Fragment","Tooltip","label","Field","VisuallyHidden","Label","size","onChange","hint","Hint","Error"],"mappings":"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"}