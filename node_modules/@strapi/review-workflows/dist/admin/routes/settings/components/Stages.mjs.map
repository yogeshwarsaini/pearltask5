{"version":3,"file":"Stages.mjs","sources":["../../../../../admin/src/routes/settings/components/Stages.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {\n  useField,\n  useForm,\n  useTracking,\n  ConfirmDialog,\n  useNotification,\n  InputRenderer as AdminInputRenderer,\n  InputProps,\n} from '@strapi/admin/strapi-admin';\nimport {\n  Box,\n  Flex,\n  MultiSelectOption,\n  Accordion,\n  Grid,\n  IconButton,\n  MultiSelect,\n  MultiSelectGroup,\n  SingleSelect,\n  SingleSelectOption,\n  TextInput,\n  VisuallyHidden,\n  useComposedRefs,\n  Menu,\n  Field,\n  Dialog,\n} from '@strapi/design-system';\nimport { Duplicate, Drag, More, EyeStriked } from '@strapi/icons';\nimport { getEmptyImage } from 'react-dnd-html5-backend';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport { Stage as IStage, StagePermission } from '../../../../../shared/contracts/review-workflows';\nimport { useGetAdminRolesQuery } from '../../../services/admin';\nimport { AVAILABLE_COLORS, getStageColorByHex } from '../../../utils/colors';\nimport { DRAG_DROP_TYPES } from '../constants';\nimport { useDragAndDrop } from '../hooks/useDragAndDrop';\n\nimport { AddStage } from './AddStage';\n\ninterface WorkflowStage extends Pick<IStage, 'id' | 'name' | 'permissions' | 'color'> {\n  __temp_key__: string;\n}\n\n/* -------------------------------------------------------------------------------------------------\n * Stages\n * -----------------------------------------------------------------------------------------------*/\ninterface StagesProps {\n  canDelete?: boolean;\n  canUpdate?: boolean;\n  isCreating?: boolean;\n}\n\nconst Stages = ({ canDelete = true, canUpdate = true, isCreating }: StagesProps) => {\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n  const addFieldRow = useForm('Stages', (state) => state.addFieldRow);\n  const { value: stages = [] } = useField<WorkflowStage[]>('stages');\n\n  return (\n    <Flex direction=\"column\" gap={6} width=\"100%\">\n      <Box position=\"relative\" width=\"100%\">\n        <Background\n          background=\"neutral200\"\n          height=\"100%\"\n          left=\"50%\"\n          position=\"absolute\"\n          top=\"0\"\n          width={2}\n        />\n\n        <Flex direction=\"column\" alignItems=\"stretch\" gap={6} position=\"relative\" tag=\"ol\">\n          {stages.map((stage, index) => {\n            return (\n              <Box key={stage.__temp_key__} tag=\"li\">\n                <Stage\n                  index={index}\n                  canDelete={stages.length > 1 && canDelete}\n                  canReorder={stages.length > 1}\n                  canUpdate={canUpdate}\n                  stagesCount={stages.length}\n                  defaultOpen={!stage.id}\n                  {...stage}\n                />\n              </Box>\n            );\n          })}\n        </Flex>\n      </Box>\n\n      {canUpdate && (\n        <AddStage\n          type=\"button\"\n          onClick={() => {\n            addFieldRow('stages', { name: '' });\n            trackUsage('willCreateStage');\n          }}\n        >\n          {formatMessage({\n            id: 'Settings.review-workflows.stage.add',\n            defaultMessage: 'Add new stage',\n          })}\n        </AddStage>\n      )}\n    </Flex>\n  );\n};\n\nconst Background = styled(Box)`\n  transform: translateX(-50%);\n`;\n\n/* -------------------------------------------------------------------------------------------------\n * Stage\n * -----------------------------------------------------------------------------------------------*/\ninterface StageProps extends WorkflowStage {\n  canDelete?: boolean;\n  canReorder?: boolean;\n  canUpdate?: boolean;\n  index: number;\n  stagesCount: number;\n  defaultOpen?: boolean;\n}\n\nconst Stage = ({\n  index,\n  canDelete = false,\n  canReorder = false,\n  canUpdate = false,\n  stagesCount,\n  name,\n  permissions,\n  color,\n  defaultOpen,\n}: StageProps) => {\n  const [liveText, setLiveText] = React.useState<string>();\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n  const stageErrors = useForm('Stages', (state) => state.errors.stages as object[]);\n  const error = stageErrors?.[index];\n  const addFieldRow = useForm('Stage', (state) => state.addFieldRow);\n  const moveFieldRow = useForm('Stage', (state) => state.moveFieldRow);\n  const removeFieldRow = useForm('Stage', (state) => state.removeFieldRow);\n\n  const getItemPos = (index: number) => `${index + 1} of ${stagesCount}`;\n\n  const handleGrabStage = (index: number) => {\n    setLiveText(\n      formatMessage(\n        {\n          id: 'dnd.grab-item',\n          defaultMessage: `{item}, grabbed. Current position in list: {position}. Press up and down arrow to change position, Spacebar to drop, Escape to cancel.`,\n        },\n        {\n          item: name,\n          position: getItemPos(index),\n        }\n      )\n    );\n  };\n\n  const handleDropStage = (index: number) => {\n    setLiveText(\n      formatMessage(\n        {\n          id: 'dnd.drop-item',\n          defaultMessage: `{item}, dropped. Final position in list: {position}.`,\n        },\n        {\n          item: name,\n          position: getItemPos(index),\n        }\n      )\n    );\n  };\n\n  const handleCancelDragStage = () => {\n    setLiveText(\n      formatMessage(\n        {\n          id: 'dnd.cancel-item',\n          defaultMessage: '{item}, dropped. Re-order cancelled.',\n        },\n        {\n          item: name,\n        }\n      )\n    );\n  };\n\n  const handleMoveStage = (newIndex: number, oldIndex: number) => {\n    setLiveText(\n      formatMessage(\n        {\n          id: 'dnd.reorder',\n          defaultMessage: '{item}, moved. New position in list: {position}.',\n        },\n        {\n          item: name,\n          position: getItemPos(newIndex),\n        }\n      )\n    );\n\n    moveFieldRow('stages', oldIndex, newIndex);\n  };\n\n  const [{ handlerId, isDragging, handleKeyDown }, stageRef, dropRef, dragRef, dragPreviewRef] =\n    useDragAndDrop(canReorder, {\n      index,\n      item: {\n        index,\n        name,\n      },\n      onGrabItem: handleGrabStage,\n      onDropItem: handleDropStage,\n      onMoveItem: handleMoveStage,\n      onCancel: handleCancelDragStage,\n      type: DRAG_DROP_TYPES.STAGE,\n    });\n\n  // @ts-expect-error â€“ the stageRef is incorrectly typed.\n  const composedRef = useComposedRefs<HTMLDivElement>(stageRef, dropRef);\n\n  React.useEffect(() => {\n    dragPreviewRef(getEmptyImage(), { captureDraggingState: false });\n  }, [dragPreviewRef, index]);\n\n  const handleCloneClick = () => {\n    addFieldRow('stages', { name, color, permissions });\n  };\n\n  const id = React.useId();\n\n  return (\n    <Box ref={composedRef} shadow=\"tableShadow\">\n      {liveText && <VisuallyHidden aria-live=\"assertive\">{liveText}</VisuallyHidden>}\n\n      {isDragging ? (\n        <Box\n          background=\"primary100\"\n          borderStyle=\"dashed\"\n          borderColor=\"primary600\"\n          borderWidth=\"1px\"\n          display=\"block\"\n          hasRadius\n          padding={6}\n        />\n      ) : (\n        <AccordionRoot\n          onValueChange={(value) => {\n            if (value) {\n              trackUsage('willEditStage');\n            }\n          }}\n          defaultValue={defaultOpen ? id : undefined}\n          $error={Object.values(error ?? {}).length > 0}\n        >\n          <Accordion.Item value={id}>\n            <Accordion.Header>\n              <Accordion.Trigger>{name}</Accordion.Trigger>\n              <Accordion.Actions>\n                {canDelete || canUpdate ? (\n                  <>\n                    <Menu.Root>\n                      <ContextMenuTrigger size=\"S\" endIcon={null} paddingLeft={2} paddingRight={2}>\n                        <More aria-hidden focusable={false} />\n                        <VisuallyHidden tag=\"span\">\n                          {formatMessage({\n                            id: '[tbdb].components.DynamicZone.more-actions',\n                            defaultMessage: 'More actions',\n                          })}\n                        </VisuallyHidden>\n                      </ContextMenuTrigger>\n                      {/* z-index needs to be as big as the one defined for the wrapper in Stages, otherwise the menu\n                       * disappears behind the accordion\n                       */}\n                      <Menu.Content popoverPlacement=\"bottom-end\" zIndex={2}>\n                        <Menu.SubRoot>\n                          {canUpdate && (\n                            <Menu.Item onClick={handleCloneClick}>\n                              {formatMessage({\n                                id: 'Settings.review-workflows.stage.delete',\n                                defaultMessage: 'Duplicate stage',\n                              })}\n                            </Menu.Item>\n                          )}\n\n                          {canDelete && (\n                            <Menu.Item\n                              onClick={() => removeFieldRow('stages', index)}\n                              variant=\"danger\"\n                            >\n                              {formatMessage({\n                                id: 'Settings.review-workflows.stage.delete',\n                                defaultMessage: 'Delete',\n                              })}\n                            </Menu.Item>\n                          )}\n                        </Menu.SubRoot>\n                      </Menu.Content>\n                    </Menu.Root>\n\n                    {canUpdate && (\n                      <IconButton\n                        background=\"transparent\"\n                        hasRadius\n                        variant=\"ghost\"\n                        data-handler-id={handlerId}\n                        ref={dragRef}\n                        label={formatMessage({\n                          id: 'Settings.review-workflows.stage.drag',\n                          defaultMessage: 'Drag',\n                        })}\n                        onClick={(e) => e.stopPropagation()}\n                        onKeyDown={handleKeyDown}\n                      >\n                        <Drag />\n                      </IconButton>\n                    )}\n                  </>\n                ) : null}\n              </Accordion.Actions>\n            </Accordion.Header>\n            <Accordion.Content>\n              <Grid.Root gap={4} padding={6}>\n                {[\n                  {\n                    disabled: !canUpdate,\n                    label: formatMessage({\n                      id: 'Settings.review-workflows.stage.name.label',\n                      defaultMessage: 'Stage name',\n                    }),\n                    name: `stages.${index}.name`,\n                    required: true,\n                    size: 6,\n                    type: 'string' as const,\n                  },\n                  {\n                    disabled: !canUpdate,\n                    label: formatMessage({\n                      id: 'content-manager.reviewWorkflows.stage.color',\n                      defaultMessage: 'Color',\n                    }),\n                    name: `stages.${index}.color`,\n                    required: true,\n                    size: 6,\n                    type: 'color' as const,\n                  },\n                  {\n                    disabled: !canUpdate,\n                    label: formatMessage({\n                      id: 'Settings.review-workflows.stage.permissions.label',\n                      defaultMessage: 'Roles that can change this stage',\n                    }),\n                    name: `stages.${index}.permissions`,\n                    placeholder: formatMessage({\n                      id: 'Settings.review-workflows.stage.permissions.placeholder',\n                      defaultMessage: 'Select a role',\n                    }),\n                    required: true,\n                    size: 6,\n                    type: 'permissions' as const,\n                  },\n                ].map(({ size, ...field }) => (\n                  <Grid.Item key={field.name} col={size} direction=\"column\" alignItems=\"stretch\">\n                    <InputRenderer {...field} />\n                  </Grid.Item>\n                ))}\n              </Grid.Root>\n            </Accordion.Content>\n          </Accordion.Item>\n        </AccordionRoot>\n      )}\n    </Box>\n  );\n};\n\nconst AccordionRoot = styled(Accordion.Root)<{ $error?: boolean }>`\n  border: 1px solid\n    ${({ theme, $error }) => ($error ? theme.colors.danger600 : theme.colors.neutral200)};\n`;\n\n// Removing the font-size from the child-span aligns the\n// more icon vertically\nconst ContextMenuTrigger = styled(Menu.Trigger)`\n  :hover,\n  :focus {\n    background-color: ${({ theme }) => theme.colors.neutral100};\n  }\n\n  > span {\n    font-size: 0;\n  }\n`;\n\n/* -------------------------------------------------------------------------------------------------\n * InputRenderer\n * -----------------------------------------------------------------------------------------------*/\n\ntype InputRendererProps = InputProps | ColorSelectorProps | PermissionsFieldProps;\n\nconst InputRenderer = (props: InputRendererProps) => {\n  switch (props.type) {\n    case 'color':\n      return <ColorSelector {...props} />;\n    case 'permissions':\n      return <PermissionsField {...props} />;\n    default:\n      return <AdminInputRenderer {...props} />;\n  }\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ColorSelector\n * -----------------------------------------------------------------------------------------------*/\n\ninterface ColorSelectorProps\n  extends Omit<Extract<InputProps, { type: 'enumeration' }>, 'type' | 'options'> {\n  type: 'color';\n}\n\nconst ColorSelector = ({ disabled, label, name, required }: ColorSelectorProps) => {\n  const { formatMessage } = useIntl();\n  const { value, error, onChange } = useField<string>(name);\n\n  const colorOptions = AVAILABLE_COLORS.map(({ hex, name }) => ({\n    value: hex,\n    label: formatMessage(\n      {\n        id: 'Settings.review-workflows.stage.color.name',\n        defaultMessage: '{name}',\n      },\n      { name }\n    ),\n    color: hex,\n  }));\n\n  const { themeColorName } = getStageColorByHex(value) ?? {};\n\n  return (\n    <Field.Root error={error} name={name} required={required}>\n      <Field.Label>{label}</Field.Label>\n      <SingleSelect\n        disabled={disabled}\n        onChange={(v) => {\n          onChange(name, v.toString());\n        }}\n        value={value?.toUpperCase()}\n        startIcon={\n          <Flex\n            tag=\"span\"\n            height={2}\n            background={value}\n            borderColor={themeColorName === 'neutral0' ? 'neutral150' : 'transparent'}\n            hasRadius\n            shrink={0}\n            width={2}\n          />\n        }\n      >\n        {colorOptions.map(({ value, label, color }) => {\n          const { themeColorName } = getStageColorByHex(color) || {};\n\n          return (\n            <SingleSelectOption\n              value={value}\n              key={value}\n              startIcon={\n                <Flex\n                  tag=\"span\"\n                  height={2}\n                  background={color}\n                  borderColor={themeColorName === 'neutral0' ? 'neutral150' : 'transparent'}\n                  hasRadius\n                  shrink={0}\n                  width={2}\n                />\n              }\n            >\n              {label}\n            </SingleSelectOption>\n          );\n        })}\n      </SingleSelect>\n      <Field.Error />\n    </Field.Root>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * PermissionsField\n * -----------------------------------------------------------------------------------------------*/\ninterface PermissionsFieldProps\n  extends Omit<Extract<InputProps, { type: 'enumeration' }>, 'type' | 'options'> {\n  type: 'permissions';\n}\n\nconst PermissionsField = ({ disabled, name, placeholder, required }: PermissionsFieldProps) => {\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n  const [isApplyAllConfirmationOpen, setIsApplyAllConfirmationOpen] = React.useState(false);\n  const { value = [], error, onChange } = useField<StagePermission[]>(name);\n  const allStages = useForm<WorkflowStage[]>('PermissionsField', (state) => state.values.stages);\n  const onFormValueChange = useForm('PermissionsField', (state) => state.onChange);\n  const rolesErrorCount = React.useRef(0);\n\n  const { data: roles = [], isLoading, error: getRolesError } = useGetAdminRolesQuery();\n\n  // Super admins always have permissions to do everything and therefore\n  // there is no point for this role to show up in the role combobox\n  const filteredRoles = roles?.filter((role) => role.code !== 'strapi-super-admin') ?? [];\n\n  React.useEffect(() => {\n    if (\n      !isLoading &&\n      getRolesError &&\n      'status' in getRolesError &&\n      getRolesError.status == 403 &&\n      rolesErrorCount.current === 0\n    ) {\n      rolesErrorCount.current = 1;\n\n      toggleNotification({\n        blockTransition: true,\n        type: 'danger',\n        message: formatMessage({\n          id: 'review-workflows.stage.permissions.noPermissions.description',\n          defaultMessage: 'You donâ€™t have the permission to see roles. Contact your administrator.',\n        }),\n      });\n    }\n  }, [formatMessage, isLoading, roles, toggleNotification, getRolesError]);\n\n  if (!isLoading && filteredRoles.length === 0) {\n    return (\n      <Field.Root\n        name={name}\n        hint={formatMessage({\n          id: 'Settings.review-workflows.stage.permissions.noPermissions.description',\n          defaultMessage: 'You donâ€™t have the permission to see roles',\n        })}\n        required={required}\n      >\n        <Field.Label>\n          {formatMessage({\n            id: 'Settings.review-workflows.stage.permissions.label',\n            defaultMessage: 'Roles that can change this stage',\n          })}\n        </Field.Label>\n        <TextInput\n          disabled\n          placeholder={formatMessage({\n            id: 'components.NotAllowedInput.text',\n            defaultMessage: 'No permissions to see this field',\n          })}\n          startAction={<EyeStriked fill=\"neutral600\" />}\n          type=\"text\"\n          value=\"\"\n        />\n        <Field.Hint />\n      </Field.Root>\n    );\n  }\n\n  return (\n    <>\n      <Flex alignItems=\"flex-end\" gap={3}>\n        <PermissionWrapper grow={1}>\n          <Field.Root error={error} name={name} required>\n            <Field.Label>\n              {formatMessage({\n                id: 'Settings.review-workflows.stage.permissions.label',\n                defaultMessage: 'Roles that can change this stage',\n              })}\n            </Field.Label>\n            <MultiSelect\n              disabled={disabled}\n              onChange={(values) => {\n                // Because the select components expects strings for values, but\n                // the yup schema validates we are sending full permission objects to the API,\n                // we must coerce the string value back to an object\n                const permissions = values.map((value) => ({\n                  role: parseInt(value, 10),\n                  action: 'admin::review-workflows.stage.transition',\n                }));\n\n                onChange(name, permissions);\n              }}\n              placeholder={placeholder}\n              // The Select component expects strings for values\n              value={value.map((permission) => `${permission.role}`)}\n              withTags\n            >\n              <MultiSelectGroup\n                label={formatMessage({\n                  id: 'Settings.review-workflows.stage.permissions.allRoles.label',\n                  defaultMessage: 'All roles',\n                })}\n                values={filteredRoles.map((r) => `${r.id}`)}\n              >\n                {filteredRoles.map((role) => {\n                  return (\n                    <NestedOption key={role.id} value={`${role.id}`}>\n                      {role.name}\n                    </NestedOption>\n                  );\n                })}\n              </MultiSelectGroup>\n            </MultiSelect>\n            <Field.Error />\n          </Field.Root>\n        </PermissionWrapper>\n        <Dialog.Root open={isApplyAllConfirmationOpen} onOpenChange={setIsApplyAllConfirmationOpen}>\n          <Dialog.Trigger>\n            <IconButton\n              disabled={disabled}\n              label={formatMessage({\n                id: 'Settings.review-workflows.stage.permissions.apply.label',\n                defaultMessage: 'Apply to all stages',\n              })}\n              size=\"L\"\n            >\n              <Duplicate />\n            </IconButton>\n          </Dialog.Trigger>\n          <ConfirmDialog\n            onConfirm={() => {\n              onFormValueChange(\n                'stages',\n                allStages.map((stage) => ({\n                  ...stage,\n                  permissions: value,\n                }))\n              );\n\n              setIsApplyAllConfirmationOpen(false);\n              toggleNotification({\n                type: 'success',\n                message: formatMessage({\n                  id: 'Settings.review-workflows.page.edit.confirm.stages.permissions.copy.success',\n                  defaultMessage: 'Applied roles to all other stages of the workflow',\n                }),\n              });\n            }}\n            variant=\"default\"\n          >\n            {formatMessage({\n              id: 'Settings.review-workflows.page.edit.confirm.stages.permissions.copy',\n              defaultMessage:\n                'Roles that can change that stage will be applied to all the other stages.',\n            })}\n          </ConfirmDialog>\n        </Dialog.Root>\n      </Flex>\n    </>\n  );\n};\n\nconst NestedOption = styled(MultiSelectOption)`\n  padding-left: ${({ theme }) => theme.spaces[7]};\n`;\n\n// Grow the size of the permission Select\nconst PermissionWrapper = styled(Flex)`\n  > * {\n    flex-grow: 1;\n  }\n`;\n\nexport { Stages };\nexport type { StagesProps, WorkflowStage };\n"],"names":["Stages","canDelete","canUpdate","isCreating","formatMessage","useIntl","trackUsage","useTracking","addFieldRow","useForm","state","value","stages","useField","_jsxs","Flex","direction","gap","width","Box","position","_jsx","Background","background","height","left","top","alignItems","tag","map","stage","index","Stage","length","canReorder","stagesCount","defaultOpen","id","__temp_key__","AddStage","type","onClick","name","defaultMessage","styled","permissions","color","liveText","setLiveText","React","useState","stageErrors","errors","error","moveFieldRow","removeFieldRow","getItemPos","handleGrabStage","item","handleDropStage","handleCancelDragStage","handleMoveStage","newIndex","oldIndex","handlerId","isDragging","handleKeyDown","stageRef","dropRef","dragRef","dragPreviewRef","useDragAndDrop","onGrabItem","onDropItem","onMoveItem","onCancel","DRAG_DROP_TYPES","STAGE","composedRef","useComposedRefs","useEffect","getEmptyImage","captureDraggingState","handleCloneClick","useId","ref","shadow","VisuallyHidden","aria-live","borderStyle","borderColor","borderWidth","display","hasRadius","padding","AccordionRoot","onValueChange","defaultValue","undefined","$error","Object","values","Accordion","Item","Header","Trigger","Actions","_Fragment","Menu","Root","ContextMenuTrigger","size","endIcon","paddingLeft","paddingRight","More","aria-hidden","focusable","Content","popoverPlacement","zIndex","SubRoot","variant","IconButton","data-handler-id","label","e","stopPropagation","onKeyDown","Drag","Grid","disabled","required","placeholder","field","col","InputRenderer","theme","colors","danger600","neutral200","neutral100","props","ColorSelector","PermissionsField","AdminInputRenderer","onChange","colorOptions","AVAILABLE_COLORS","hex","themeColorName","getStageColorByHex","Field","Label","SingleSelect","v","toString","toUpperCase","startIcon","shrink","SingleSelectOption","Error","toggleNotification","useNotification","isApplyAllConfirmationOpen","setIsApplyAllConfirmationOpen","allStages","onFormValueChange","rolesErrorCount","useRef","data","roles","isLoading","getRolesError","useGetAdminRolesQuery","filteredRoles","filter","role","code","status","current","blockTransition","message","hint","TextInput","startAction","EyeStriked","fill","Hint","PermissionWrapper","grow","MultiSelect","parseInt","action","permission","withTags","MultiSelectGroup","r","NestedOption","Dialog","open","onOpenChange","Duplicate","ConfirmDialog","onConfirm","MultiSelectOption","spaces"],"mappings":"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"}