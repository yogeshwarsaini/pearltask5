{"version":3,"file":"WorkflowAttributes.mjs","sources":["../../../../../admin/src/routes/settings/components/WorkflowAttributes.tsx"],"sourcesContent":["import { InputRenderer, useField, useForm } from '@strapi/admin/strapi-admin';\nimport {\n  Field,\n  Grid,\n  MultiSelect,\n  MultiSelectGroup,\n  MultiSelectOption,\n  Typography,\n  useCollator,\n  SingleSelect,\n  SingleSelectOption,\n} from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport { useGetContentTypesQuery } from '../../../services/content-manager';\nimport { useReviewWorkflows } from '../hooks/useReviewWorkflows';\n\nimport type { WorkflowStage } from './Stages';\n\n/* -------------------------------------------------------------------------------------------------\n * WorkflowAttributes\n * -----------------------------------------------------------------------------------------------*/\ninterface WorkflowAttributesProps {\n  canUpdate?: boolean;\n}\n\nconst WorkflowAttributes = ({ canUpdate = true }: WorkflowAttributesProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Grid.Root background=\"neutral0\" hasRadius gap={4} padding={6} shadow=\"tableShadow\">\n      <Grid.Item col={6} direction=\"column\" alignItems=\"stretch\">\n        <InputRenderer\n          disabled={!canUpdate}\n          label={formatMessage({\n            id: 'Settings.review-workflows.workflow.name.label',\n            defaultMessage: 'Workflow Name',\n          })}\n          name=\"name\"\n          required\n          type=\"string\"\n        />\n      </Grid.Item>\n      <Grid.Item col={6} direction=\"column\" alignItems=\"stretch\">\n        <ContentTypesSelector disabled={!canUpdate} />\n      </Grid.Item>\n      <Grid.Item col={6} direction=\"column\" alignItems=\"stretch\">\n        <StageSelector disabled={!canUpdate} />\n      </Grid.Item>\n    </Grid.Root>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ContentTypesSelector\n * -----------------------------------------------------------------------------------------------*/\ninterface ContentTypesSelectorProps {\n  disabled?: boolean;\n}\n\nconst ContentTypesSelector = ({ disabled }: ContentTypesSelectorProps) => {\n  const { formatMessage, locale } = useIntl();\n  const { data: contentTypes, isLoading } = useGetContentTypesQuery();\n  const { workflows } = useReviewWorkflows();\n  const currentWorkflow = useForm('ContentTypesSelector', (state) => state.values);\n\n  const { error, value, onChange } = useField('contentTypes');\n\n  const formatter = useCollator(locale, {\n    sensitivity: 'base',\n  });\n\n  const isDisabled =\n    disabled ||\n    isLoading ||\n    !contentTypes ||\n    (contentTypes.collectionType.length === 0 && contentTypes.singleType.length === 0);\n\n  const collectionTypes = (contentTypes?.collectionType ?? [])\n    .toSorted((a, b) => formatter.compare(a.info.displayName, b.info.displayName))\n    .map((contentType) => ({\n      label: contentType.info.displayName,\n      value: contentType.uid,\n    }));\n\n  const singleTypes = (contentTypes?.singleType ?? []).map((contentType) => ({\n    label: contentType.info.displayName,\n    value: contentType.uid,\n  }));\n\n  return (\n    <Field.Root error={error} name={'contentTypes'}>\n      <Field.Label>\n        {formatMessage({\n          id: 'Settings.review-workflows.workflow.contentTypes.label',\n          defaultMessage: 'Associated to',\n        })}\n      </Field.Label>\n      <MultiSelect\n        customizeContent={(value) =>\n          formatMessage(\n            {\n              id: 'Settings.review-workflows.workflow.contentTypes.displayValue',\n              defaultMessage:\n                '{count} {count, plural, one {content type} other {content types}} selected',\n            },\n            { count: value?.length }\n          )\n        }\n        disabled={isDisabled}\n        onChange={(values) => {\n          onChange('contentTypes', values);\n        }}\n        value={value}\n        placeholder={formatMessage({\n          id: 'Settings.review-workflows.workflow.contentTypes.placeholder',\n          defaultMessage: 'Select',\n        })}\n      >\n        {[\n          ...(collectionTypes.length > 0\n            ? [\n                {\n                  label: formatMessage({\n                    id: 'Settings.review-workflows.workflow.contentTypes.collectionTypes.label',\n                    defaultMessage: 'Collection Types',\n                  }),\n                  children: collectionTypes,\n                },\n              ]\n            : []),\n\n          ...(singleTypes.length > 0\n            ? [\n                {\n                  label: formatMessage({\n                    id: 'Settings.review-workflows.workflow.contentTypes.singleTypes.label',\n                    defaultMessage: 'Single Types',\n                  }),\n                  children: singleTypes,\n                },\n              ]\n            : []),\n        ].map((opt) => {\n          return (\n            <MultiSelectGroup\n              key={opt.label}\n              label={opt.label}\n              values={opt.children.map((child) => child.value.toString())}\n            >\n              {opt.children.map((child) => {\n                const { name: assignedWorkflowName } =\n                  workflows?.find(\n                    (workflow) =>\n                      ((currentWorkflow && workflow.id !== currentWorkflow.id) ||\n                        !currentWorkflow) &&\n                      workflow.contentTypes.includes(child.value)\n                  ) ?? {};\n\n                return (\n                  <NestedOption key={child.value} value={child.value}>\n                    <Typography>\n                      {\n                        // @ts-expect-error - formatMessage options doesn't expect to be a React component but that's what we need actually for the <i> and <em> components\n                        formatMessage(\n                          {\n                            id: 'Settings.review-workflows.workflow.contentTypes.assigned.notice',\n                            defaultMessage:\n                              '{label} {name, select, undefined {} other {<i>(assigned to <em>{name}</em> workflow)</i>}}',\n                          },\n                          {\n                            label: child.label,\n                            name: assignedWorkflowName,\n                            em: (...children) => (\n                              <Typography tag=\"em\" fontWeight=\"bold\">\n                                {children}\n                              </Typography>\n                            ),\n                            i: (...children) => (\n                              <ContentTypeTakeNotice>{children}</ContentTypeTakeNotice>\n                            ),\n                          }\n                        )\n                      }\n                    </Typography>\n                  </NestedOption>\n                );\n              })}\n            </MultiSelectGroup>\n          );\n        })}\n      </MultiSelect>\n    </Field.Root>\n  );\n};\n\nconst NestedOption = styled(MultiSelectOption)`\n  padding-left: ${({ theme }) => theme.spaces[7]};\n`;\n\nconst ContentTypeTakeNotice = styled(Typography)`\n  font-style: italic;\n`;\n\n/* -------------------------------------------------------------------------------------------------\n * StageSelector\n * -----------------------------------------------------------------------------------------------*/\ninterface StageSelectorProps {\n  disabled?: boolean;\n}\n\nconst StageSelector = ({ disabled }: StageSelectorProps) => {\n  const { value: stages = [] } = useField<WorkflowStage[]>('stages');\n  const { formatMessage } = useIntl();\n\n  const { error, value, onChange } = useField('stageRequiredToPublish');\n\n  // stages with empty names are not valid, so we avoid them from being used to avoid errors\n  const validStages = stages.filter((stage) => stage.name);\n\n  return (\n    <Field.Root\n      error={error}\n      name=\"stageRequiredToPublish\"\n      hint={formatMessage({\n        id: 'settings.review-workflows.workflow.stageRequiredToPublish.hint',\n        defaultMessage:\n          'Prevents entries from being published if they are not at the required stage.',\n      })}\n    >\n      <Field.Label>\n        {formatMessage({\n          id: 'settings.review-workflows.workflow.stageRequiredToPublish.label',\n          defaultMessage: 'Required stage for publishing',\n        })}\n      </Field.Label>\n      <SingleSelect\n        disabled={disabled}\n        onChange={(value) => {\n          onChange('stageRequiredToPublish', value);\n        }}\n        value={value}\n      >\n        <SingleSelectOption value={''}>\n          {formatMessage({\n            id: 'settings.review-workflows.workflow.stageRequiredToPublish.any',\n            defaultMessage: 'Any stage',\n          })}\n        </SingleSelectOption>\n        {validStages.map((stage, i) => (\n          <SingleSelectOption\n            key={`requiredToPublishStage-${stage.id || stage.__temp_key__}`}\n            value={stage.id?.toString() || stage.__temp_key__}\n          >\n            {stage.name}\n          </SingleSelectOption>\n        ))}\n      </SingleSelect>\n      <Field.Hint />\n    </Field.Root>\n  );\n};\n\nexport { WorkflowAttributes };\nexport type { WorkflowAttributesProps };\n"],"names":["WorkflowAttributes","canUpdate","formatMessage","useIntl","_jsxs","Grid","Root","background","hasRadius","gap","padding","shadow","_jsx","Item","col","direction","alignItems","InputRenderer","disabled","label","id","defaultMessage","name","required","type","ContentTypesSelector","StageSelector","locale","data","contentTypes","isLoading","useGetContentTypesQuery","workflows","useReviewWorkflows","currentWorkflow","useForm","state","values","error","value","onChange","useField","formatter","useCollator","sensitivity","isDisabled","collectionType","length","singleType","collectionTypes","toSorted","a","b","compare","info","displayName","map","contentType","uid","singleTypes","Field","Label","MultiSelect","customizeContent","count","placeholder","children","opt","MultiSelectGroup","child","toString","assignedWorkflowName","find","workflow","includes","NestedOption","Typography","em","tag","fontWeight","i","ContentTypeTakeNotice","styled","MultiSelectOption","theme","spaces","stages","validStages","filter","stage","hint","SingleSelect","SingleSelectOption","__temp_key__","Hint"],"mappings":"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"}