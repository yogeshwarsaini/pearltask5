{"version":3,"file":"id.mjs","sources":["../../../../admin/src/routes/settings/id.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {\n  ConfirmDialog,\n  BackButton,\n  useNotification,\n  useAPIErrorHandler,\n  useRBAC,\n  Form,\n  Page,\n  FormProps,\n  FormHelpers,\n} from '@strapi/admin/strapi-admin';\nimport { useLicenseLimits } from '@strapi/admin/strapi-admin/ee';\nimport { Button, Dialog, Flex, Typography } from '@strapi/design-system';\nimport { Check } from '@strapi/icons';\nimport { generateNKeysBetween } from 'fractional-indexing';\nimport { useIntl } from 'react-intl';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport * as yup from 'yup';\n\nimport { LimitsModal } from '../../components/LimitsModal';\nimport {\n  CHARGEBEE_WORKFLOW_ENTITLEMENT_NAME,\n  CHARGEBEE_STAGES_PER_WORKFLOW_ENTITLEMENT_NAME,\n} from '../../constants';\nimport { useTypedSelector } from '../../modules/hooks';\nimport { isBaseQueryError } from '../../utils/api';\n\nimport * as Layout from './components/Layout';\nimport { Stages, WorkflowStage } from './components/Stages';\nimport { WorkflowAttributes } from './components/WorkflowAttributes';\nimport { useReviewWorkflows } from './hooks/useReviewWorkflows';\n\nimport type { Stage, Workflow } from '../../../../shared/contracts/review-workflows';\n\n/* -------------------------------------------------------------------------------------------------\n * EditPage\n * -----------------------------------------------------------------------------------------------*/\n\nconst WORKFLOW_SCHEMA = yup.object({\n  contentTypes: yup.array().of(yup.string()),\n  name: yup\n    .string()\n    .max(255, {\n      id: 'review-workflows.validation.name.max-length',\n      defaultMessage: 'Name can not be longer than 255 characters',\n    })\n    .required()\n    .nullable(),\n  stages: yup\n    .array()\n    .of(\n      yup.object().shape({\n        name: yup\n          .string()\n          .nullable()\n          .required({\n            id: 'review-workflows.validation.stage.name',\n            defaultMessage: 'Name is required',\n          })\n          .max(255, {\n            id: 'review-workflows.validation.stage.max-length',\n            defaultMessage: 'Name can not be longer than 255 characters',\n          })\n          .test(\n            'unique-name',\n            {\n              id: 'review-workflows.validation.stage.duplicate',\n              defaultMessage: 'Stage name must be unique',\n            },\n            (stageName, context) => {\n              // @ts-expect-error it does exist.\n              const { stages } = context.from[1].value;\n\n              return stages.filter((stage: Stage) => stage.name === stageName).length === 1;\n            }\n          ),\n        color: yup\n          .string()\n          .nullable()\n          .required({\n            id: 'review-workflows.validation.stage.color',\n            defaultMessage: 'Color is required',\n          })\n          .matches(/^#(?:[0-9a-fA-F]{3}){1,2}$/i),\n\n        permissions: yup\n          .array(\n            yup.object({\n              role: yup\n                .number()\n                .strict()\n                .typeError({\n                  id: 'review-workflows.validation.stage.permissions.role.number',\n                  defaultMessage: 'Role must be of type number',\n                })\n                .required(),\n              action: yup.string().required({\n                id: 'review-workflows.validation.stage.permissions.action.required',\n                defaultMessage: 'Action is a required argument',\n              }),\n            })\n          )\n          .strict(),\n      })\n    )\n    .min(1),\n  stageRequiredToPublish: yup.string().nullable(),\n});\n\nconst EditPage = () => {\n  const { id = '' } = useParams<{ id: string }>();\n  const isCreatingWorkflow = id === 'create';\n  const { formatMessage } = useIntl();\n  const { _unstableFormatValidationErrors: formatValidationErrors } = useAPIErrorHandler();\n  const navigate = useNavigate();\n  const { toggleNotification } = useNotification();\n  const {\n    isLoading: isLoadingWorkflow,\n    meta,\n    workflows,\n    error,\n    update,\n    create,\n  } = useReviewWorkflows();\n  const permissions = useTypedSelector(\n    (state) => state.admin_app.permissions['settings']?.['review-workflows']\n  );\n  const {\n    allowedActions: { canDelete, canUpdate, canCreate },\n  } = useRBAC(permissions);\n\n  const [savePrompts, setSavePrompts] = React.useState<{\n    hasDeletedServerStages?: boolean;\n    hasReassignedContentTypes?: boolean;\n  }>({});\n  const { getFeature, isLoading: isLicenseLoading } = useLicenseLimits();\n  const [showLimitModal, setShowLimitModal] = React.useState<'workflow' | 'stage' | null>(null);\n\n  const currentWorkflow = workflows?.find((workflow) => workflow.id === parseInt(id, 10));\n  const contentTypesFromOtherWorkflows = workflows\n    ?.filter((workflow) => workflow.id !== parseInt(id, 10))\n    .flatMap((workflow) => workflow.contentTypes);\n\n  const limits = getFeature<string>('review-workflows');\n  const numberOfWorkflows = limits?.[CHARGEBEE_WORKFLOW_ENTITLEMENT_NAME];\n  const stagesPerWorkflow = limits?.[CHARGEBEE_STAGES_PER_WORKFLOW_ENTITLEMENT_NAME];\n\n  interface FormValues {\n    name: string;\n    stages: WorkflowStage[];\n    contentTypes: string[];\n    stageRequiredToPublish: string | null;\n  }\n\n  const submitForm = async (data: FormValues, helpers: Pick<FormHelpers, 'setErrors'>) => {\n    try {\n      const { stageRequiredToPublish, ...rest } = data;\n      const stageRequiredToPublishName =\n        stageRequiredToPublish === ''\n          ? null\n          : rest.stages.find(\n              (stage) =>\n                stage.id === Number(stageRequiredToPublish) ||\n                stage.__temp_key__ === stageRequiredToPublish\n            )?.name;\n\n      if (!isCreatingWorkflow) {\n        const res = await update(id, {\n          ...rest,\n          // compare permissions of stages and only submit them if at least one has\n          // changed; this enables partial updates e.g. for users who don't have\n          // permissions to see roles\n          stages: rest.stages.map((stage) => {\n            let hasUpdatedPermissions = true;\n            const serverStage = currentWorkflow?.stages?.find(\n              (serverStage) => serverStage.id === stage?.id\n            );\n            if (serverStage) {\n              hasUpdatedPermissions =\n                serverStage.permissions?.length !== stage.permissions?.length ||\n                !serverStage.permissions?.every(\n                  (serverPermission) =>\n                    !!stage.permissions?.find(\n                      (permission) => permission.role === serverPermission.role\n                    )\n                );\n            }\n            return {\n              ...stage,\n              permissions: hasUpdatedPermissions ? stage.permissions : undefined,\n            } satisfies Stage;\n          }),\n          stageRequiredToPublishName,\n        });\n\n        if ('error' in res && isBaseQueryError(res.error) && res.error.name === 'ValidationError') {\n          helpers.setErrors(formatValidationErrors(res.error));\n        }\n      } else {\n        const res = await create({\n          ...rest,\n          stageRequiredToPublishName,\n        });\n\n        if ('error' in res && isBaseQueryError(res.error) && res.error.name === 'ValidationError') {\n          helpers.setErrors(formatValidationErrors(res.error));\n        } else if ('data' in res) {\n          navigate(`../${res.data.id}`, { replace: true });\n        }\n      }\n    } catch (error) {\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({\n          id: 'notification.error',\n          defaultMessage: 'An error occurred',\n        }),\n      });\n    }\n    setSavePrompts({});\n  };\n\n  const handleConfirmDeleteDialog =\n    (data: FormValues, helpers: Pick<FormHelpers, 'setErrors'>) => async () => {\n      await submitForm(data, helpers);\n    };\n\n  const handleConfirmClose = () => {\n    setSavePrompts({});\n  };\n\n  const handleSubmit: FormProps<FormValues>['onSubmit'] = async (data, helpers) => {\n    const isContentTypeReassignment = data.contentTypes.some((contentType) =>\n      contentTypesFromOtherWorkflows?.includes(contentType)\n    );\n    const hasDeletedServerStages =\n      !isCreatingWorkflow &&\n      !currentWorkflow?.stages.every((stage) =>\n        data.stages.some((newStage) => newStage.id === stage.id)\n      );\n\n    if (meta && numberOfWorkflows && meta?.workflowCount > parseInt(numberOfWorkflows, 10)) {\n      /**\n       * If the current license has a limit, check if the total count of workflows\n       * exceeds that limit and display the limits modal instead of sending the\n       * update, because it would throw an API error.\n       */\n      setShowLimitModal('workflow');\n\n      /**\n       * If the current license has a limit, check if the total count of stages\n       * exceeds that limit and display the limits modal instead of sending the\n       * update, because it would throw an API error.\n       */\n    } else if (\n      data.stages &&\n      stagesPerWorkflow &&\n      data.stages.length > parseInt(stagesPerWorkflow, 10)\n    ) {\n      setShowLimitModal('stage');\n    } else if (hasDeletedServerStages || isContentTypeReassignment) {\n      if (hasDeletedServerStages) {\n        setSavePrompts((prev) => ({ ...prev, hasDeletedServerStages: true }));\n      }\n\n      if (isContentTypeReassignment) {\n        setSavePrompts((prev) => ({ ...prev, hasReassignedContentTypes: true }));\n      }\n    } else {\n      await submitForm(data, helpers);\n    }\n  };\n\n  /**\n   * If the current license has a limit:\n   * check if the total count of workflows or stages exceeds that limit and display\n   * the limits modal on page load. It can be closed by the user, but the\n   * API will throw an error in case they try to create a new workflow or update the\n   * stages.\n   *\n   * If the current license does not have a limit (e.g. offline license):\n   * do nothing (for now). In case they are trying to create the 201st workflow/ stage\n   * the API will throw an error.\n   *\n   */\n  React.useEffect(() => {\n    if (!isLoadingWorkflow && !isLicenseLoading) {\n      if (meta && numberOfWorkflows && meta?.workflowCount > parseInt(numberOfWorkflows, 10)) {\n        setShowLimitModal('workflow');\n      } else if (\n        currentWorkflow &&\n        currentWorkflow.stages &&\n        stagesPerWorkflow &&\n        currentWorkflow.stages.length > parseInt(stagesPerWorkflow, 10)\n      ) {\n        setShowLimitModal('stage');\n      }\n    }\n  }, [\n    currentWorkflow,\n    isLicenseLoading,\n    isLoadingWorkflow,\n    limits,\n    meta,\n    numberOfWorkflows,\n    stagesPerWorkflow,\n  ]);\n\n  const initialValues: FormValues = React.useMemo(() => {\n    if (isCreatingWorkflow || !currentWorkflow) {\n      return {\n        name: '',\n        stages: [],\n        contentTypes: [],\n        stageRequiredToPublish: '',\n      };\n    } else {\n      return {\n        name: currentWorkflow.name,\n        stages: addTmpKeysToStages(currentWorkflow.stages),\n        contentTypes: currentWorkflow.contentTypes,\n        stageRequiredToPublish: currentWorkflow.stageRequiredToPublish?.id.toString() ?? '',\n      };\n    }\n  }, [currentWorkflow, isCreatingWorkflow]);\n\n  if (isLoadingWorkflow) {\n    return <Page.Loading />;\n  }\n\n  if (error) {\n    return <Page.Error />;\n  }\n\n  return (\n    <>\n      <Layout.DragLayerRendered />\n\n      <Form\n        method={isCreatingWorkflow ? 'POST' : 'PUT'}\n        initialValues={initialValues}\n        validationSchema={WORKFLOW_SCHEMA}\n        onSubmit={handleSubmit}\n      >\n        {({ modified, isSubmitting, values, setErrors }) => (\n          <>\n            <Layout.Header\n              navigationAction={<BackButton fallback=\"..\" />}\n              primaryAction={\n                canUpdate || canCreate ? (\n                  <Button\n                    startIcon={<Check />}\n                    type=\"submit\"\n                    disabled={!modified || isSubmitting || values.stages.length === 0}\n                    // if the confirm dialog is open the loading state is on\n                    // the confirm button already\n                    loading={!Boolean(Object.keys(savePrompts).length > 0) && isSubmitting}\n                  >\n                    {formatMessage({\n                      id: 'global.save',\n                      defaultMessage: 'Save',\n                    })}\n                  </Button>\n                ) : null\n              }\n              subtitle={formatMessage(\n                {\n                  id: 'review-workflows.page.subtitle',\n                  defaultMessage: '{count, plural, one {# stage} other {# stages}}',\n                },\n                { count: currentWorkflow?.stages?.length ?? 0 }\n              )}\n              title={\n                currentWorkflow?.name ||\n                formatMessage({\n                  id: 'Settings.review-workflows.create.page.title',\n                  defaultMessage: 'Create Review Workflow',\n                })\n              }\n            />\n            <Layout.Root>\n              <Flex alignItems=\"stretch\" direction=\"column\" gap={7}>\n                <WorkflowAttributes canUpdate={canUpdate || canCreate} />\n                <Stages\n                  canDelete={canDelete}\n                  canUpdate={canUpdate || canCreate}\n                  isCreating={isCreatingWorkflow}\n                />\n              </Flex>\n            </Layout.Root>\n            <Dialog.Root\n              open={Object.keys(savePrompts).length > 0}\n              onOpenChange={handleConfirmClose}\n            >\n              <ConfirmDialog onConfirm={handleConfirmDeleteDialog(values, { setErrors })}>\n                <Flex direction=\"column\" gap={5}>\n                  {savePrompts.hasDeletedServerStages && (\n                    <Typography textAlign=\"center\" variant=\"omega\">\n                      {formatMessage({\n                        id: 'review-workflows.page.delete.confirm.stages.body',\n                        defaultMessage:\n                          'All entries assigned to deleted stages will be moved to the previous stage.',\n                      })}\n                    </Typography>\n                  )}\n\n                  {savePrompts.hasReassignedContentTypes && (\n                    <Typography textAlign=\"center\" variant=\"omega\">\n                      {formatMessage(\n                        {\n                          id: 'review-workflows.page.delete.confirm.contentType.body',\n                          defaultMessage:\n                            '{count} {count, plural, one {content-type} other {content-types}} {count, plural, one {is} other {are}} already mapped to {count, plural, one {another workflow} other {other workflows}}. If you save changes, {count, plural, one {this} other {these}} {count, plural, one {content-type} other {{count} content-types}} will no more be mapped to the {count, plural, one {another workflow} other {other workflows}} and all corresponding information will be removed.',\n                        },\n                        {\n                          count:\n                            contentTypesFromOtherWorkflows?.filter((contentType) =>\n                              values.contentTypes.includes(contentType)\n                            ).length ?? 0,\n                        }\n                      )}\n                    </Typography>\n                  )}\n\n                  <Typography textAlign=\"center\" variant=\"omega\">\n                    {formatMessage({\n                      id: 'review-workflows.page.delete.confirm.confirm',\n                      defaultMessage: 'Are you sure you want to save?',\n                    })}\n                  </Typography>\n                </Flex>\n              </ConfirmDialog>\n            </Dialog.Root>\n          </>\n        )}\n      </Form>\n\n      <LimitsModal.Root\n        open={showLimitModal === 'workflow'}\n        onOpenChange={() => setShowLimitModal(null)}\n      >\n        <LimitsModal.Title>\n          {formatMessage({\n            id: 'review-workflows.edit.page.workflows.limit.title',\n            defaultMessage: 'You’ve reached the limit of workflows in your plan',\n          })}\n        </LimitsModal.Title>\n\n        <LimitsModal.Body>\n          {formatMessage({\n            id: 'review-workflows.edit.page.workflows.limit.body',\n            defaultMessage: 'Delete a workflow or contact Sales to enable more workflows.',\n          })}\n        </LimitsModal.Body>\n      </LimitsModal.Root>\n\n      <LimitsModal.Root\n        open={showLimitModal === 'stage'}\n        onOpenChange={() => setShowLimitModal(null)}\n      >\n        <LimitsModal.Title>\n          {formatMessage({\n            id: 'review-workflows.edit.page.stages.limit.title',\n            defaultMessage: 'You have reached the limit of stages for this workflow in your plan',\n          })}\n        </LimitsModal.Title>\n\n        <LimitsModal.Body>\n          {formatMessage({\n            id: 'review-workflows.edit.page.stages.limit.body',\n            defaultMessage: 'Try deleting some stages or contact Sales to enable more stages.',\n          })}\n        </LimitsModal.Body>\n      </LimitsModal.Root>\n    </>\n  );\n};\n\nconst addTmpKeysToStages = (data: Workflow['stages']) => {\n  const keys = generateNKeysBetween(undefined, undefined, data.length);\n\n  return data.map((datum, index) => ({\n    ...datum,\n    __temp_key__: keys[index],\n  }));\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ProtectedEditPage\n * -----------------------------------------------------------------------------------------------*/\n\nconst ProtectedEditPage = () => {\n  const permissions = useTypedSelector((state) => {\n    const {\n      create = [],\n      update = [],\n      read = [],\n    } = state.admin_app.permissions.settings?.['review-workflows'] ?? {};\n\n    return [...create, ...update, ...read];\n  });\n\n  return (\n    <Page.Protect permissions={permissions}>\n      <EditPage />\n    </Page.Protect>\n  );\n};\n\nexport { ProtectedEditPage };\n"],"names":["WORKFLOW_SCHEMA","yup","object","contentTypes","array","of","string","name","max","id","defaultMessage","required","nullable","stages","shape","test","stageName","context","from","value","filter","stage","length","color","matches","permissions","role","number","strict","typeError","action","min","stageRequiredToPublish","EditPage","useParams","isCreatingWorkflow","formatMessage","useIntl","_unstableFormatValidationErrors","formatValidationErrors","useAPIErrorHandler","navigate","useNavigate","toggleNotification","useNotification","isLoading","isLoadingWorkflow","meta","workflows","error","update","create","useReviewWorkflows","useTypedSelector","state","admin_app","allowedActions","canDelete","canUpdate","canCreate","useRBAC","savePrompts","setSavePrompts","React","useState","getFeature","isLicenseLoading","useLicenseLimits","showLimitModal","setShowLimitModal","currentWorkflow","find","workflow","parseInt","contentTypesFromOtherWorkflows","flatMap","limits","numberOfWorkflows","CHARGEBEE_WORKFLOW_ENTITLEMENT_NAME","stagesPerWorkflow","CHARGEBEE_STAGES_PER_WORKFLOW_ENTITLEMENT_NAME","submitForm","data","helpers","rest","stageRequiredToPublishName","Number","__temp_key__","res","map","hasUpdatedPermissions","serverStage","every","serverPermission","permission","undefined","isBaseQueryError","setErrors","replace","type","message","handleConfirmDeleteDialog","handleConfirmClose","handleSubmit","isContentTypeReassignment","some","contentType","includes","hasDeletedServerStages","newStage","workflowCount","prev","hasReassignedContentTypes","useEffect","initialValues","useMemo","addTmpKeysToStages","toString","_jsx","Page","Loading","Error","_jsxs","_Fragment","Layout","Form","method","validationSchema","onSubmit","modified","isSubmitting","values","navigationAction","BackButton","fallback","primaryAction","Button","startIcon","Check","disabled","loading","Boolean","Object","keys","subtitle","count","title","Flex","alignItems","direction","gap","WorkflowAttributes","Stages","isCreating","Dialog","Root","open","onOpenChange","ConfirmDialog","onConfirm","Typography","textAlign","variant","LimitsModal","Title","Body","generateNKeysBetween","datum","index","ProtectedEditPage","read","settings","Protect"],"mappings":"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"}