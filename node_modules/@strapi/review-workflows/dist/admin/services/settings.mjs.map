{"version":3,"file":"settings.mjs","sources":["../../../admin/src/services/settings.ts"],"sourcesContent":["import { reviewWorkflowsApi } from './api';\n\nimport type { Create, Update, Delete, GetAll } from '../../../shared/contracts/review-workflows';\n\nconst settingsApi = reviewWorkflowsApi.injectEndpoints({\n  endpoints: (builder) => ({\n    getWorkflows: builder.query<\n      {\n        workflows: GetAll.Response['data'];\n        meta?: GetAll.Response['meta'];\n      },\n      GetWorkflowsParams | void\n    >({\n      query: (args) => {\n        return {\n          url: '/review-workflows/workflows',\n          method: 'GET',\n          config: {\n            params: args ?? {},\n          },\n        };\n      },\n      transformResponse: (res: GetAll.Response) => {\n        return {\n          workflows: res.data,\n          meta: 'meta' in res ? res.meta : undefined,\n        };\n      },\n      providesTags: (res) => {\n        return [\n          ...(res?.workflows.map(({ id }) => ({ type: 'ReviewWorkflow' as const, id })) ?? []),\n          { type: 'ReviewWorkflow' as const, id: 'LIST' },\n        ];\n      },\n    }),\n    createWorkflow: builder.mutation<Create.Response['data'], Create.Request['body']>({\n      query: (data) => ({\n        url: '/review-workflows/workflows',\n        method: 'POST',\n        data,\n      }),\n      transformResponse: (res: Create.Response) => res.data,\n      invalidatesTags(res) {\n        return [\n          { type: 'ReviewWorkflow' as const, id: 'LIST' },\n          'ReviewWorkflowStages',\n          { type: 'Document', id: `ALL_LIST` },\n          { type: 'ContentTypeSettings', id: 'LIST' },\n          ...(res?.contentTypes.map((uid) => ({\n            type: 'Document' as const,\n            id: `${uid}_ALL_ITEMS`,\n          })) ?? []),\n        ];\n      },\n    }),\n    updateWorkflow: builder.mutation<\n      Update.Response['data'],\n      Update.Request['body'] & Update.Params\n    >({\n      query: ({ id, ...data }) => ({\n        url: `/review-workflows/workflows/${id}`,\n        method: 'PUT',\n        data,\n      }),\n      transformResponse: (res: Update.Response) => res.data,\n      invalidatesTags: (res, _err, arg) => [\n        { type: 'ReviewWorkflow' as const, id: arg.id },\n        'ReviewWorkflowStages',\n        { type: 'Document', id: 'ALL_LIST' },\n        { type: 'ContentTypeSettings', id: 'LIST' },\n        ...(res?.contentTypes.map((uid) => ({\n          type: 'Document' as const,\n          id: `${uid}_ALL_ITEMS`,\n        })) ?? []),\n      ],\n    }),\n    deleteWorkflow: builder.mutation<Delete.Response['data'], Delete.Params>({\n      query: ({ id }) => ({\n        url: `/review-workflows/workflows/${id}`,\n        method: 'DELETE',\n      }),\n      transformResponse: (res: Delete.Response) => res.data,\n      invalidatesTags: (res, _err, arg) => [\n        { type: 'ReviewWorkflow' as const, id: arg.id },\n        'ReviewWorkflowStages',\n        { type: 'Document', id: `ALL_LIST` },\n        { type: 'ContentTypeSettings', id: 'LIST' },\n      ],\n    }),\n  }),\n  overrideExisting: false,\n});\n\ntype GetWorkflowsParams = GetAll.Request['query'];\n\nconst {\n  useGetWorkflowsQuery,\n  useCreateWorkflowMutation,\n  useDeleteWorkflowMutation,\n  useUpdateWorkflowMutation,\n} = settingsApi;\n\nexport {\n  useGetWorkflowsQuery,\n  useCreateWorkflowMutation,\n  useDeleteWorkflowMutation,\n  useUpdateWorkflowMutation,\n  type GetWorkflowsParams,\n};\n"],"names":["settingsApi","reviewWorkflowsApi","injectEndpoints","endpoints","builder","getWorkflows","query","args","url","method","config","params","transformResponse","res","workflows","data","meta","undefined","providesTags","map","id","type","createWorkflow","mutation","invalidatesTags","contentTypes","uid","updateWorkflow","_err","arg","deleteWorkflow","overrideExisting","useGetWorkflowsQuery","useCreateWorkflowMutation","useDeleteWorkflowMutation","useUpdateWorkflowMutation"],"mappings":"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"}