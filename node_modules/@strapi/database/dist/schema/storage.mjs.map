{"version":3,"file":"storage.mjs","sources":["../../src/schema/storage.ts"],"sourcesContent":["import crypto from 'crypto';\n\nimport type { Database } from '..';\nimport type { Schema } from './types';\n\nconst TABLE_NAME = 'strapi_database_schema';\n\nexport default (db: Database) => {\n  const hasSchemaTable = () => db.getSchemaConnection().hasTable(TABLE_NAME);\n\n  const createSchemaTable = () => {\n    return db.getSchemaConnection().createTable(TABLE_NAME, (t) => {\n      t.increments('id');\n      t.json('schema');\n      t.datetime('time', { useTz: false });\n      t.string('hash');\n    });\n  };\n\n  const checkTableExists = async () => {\n    if (!(await hasSchemaTable())) {\n      await createSchemaTable();\n    }\n  };\n\n  return {\n    async read(): Promise<{\n      id: number;\n      time: Date;\n      hash: string;\n      schema: Schema;\n    } | null> {\n      await checkTableExists();\n\n      // NOTE: We get the ID first before fetching the exact entry for performance on MySQL/MariaDB\n      // See: https://github.com/strapi/strapi/issues/20312\n      const getSchemaID = await db\n        .getConnection()\n        .select('id')\n        .from(TABLE_NAME)\n        .orderBy('time', 'DESC')\n        .first();\n\n      if (!getSchemaID) {\n        return null;\n      }\n\n      const res = await db\n        .getConnection()\n        .select('*')\n        .from(TABLE_NAME)\n        .where({ id: getSchemaID.id })\n        .first();\n\n      if (!res) {\n        return null;\n      }\n\n      const parsedSchema = typeof res.schema === 'object' ? res.schema : JSON.parse(res.schema);\n\n      return {\n        ...res,\n        schema: parsedSchema,\n      };\n    },\n\n    hashSchema(schema: Schema) {\n      return crypto.createHash('sha256').update(JSON.stringify(schema)).digest('hex');\n    },\n\n    async add(schema: Schema) {\n      await checkTableExists();\n\n      // NOTE: we can remove this to add history\n      await db.getConnection(TABLE_NAME).delete();\n\n      const time = new Date();\n\n      await db\n        .getConnection()\n        .insert({\n          schema: JSON.stringify(schema),\n          hash: this.hashSchema(schema),\n          time,\n        })\n        .into(TABLE_NAME);\n    },\n\n    async clear() {\n      await checkTableExists();\n\n      await db.getConnection(TABLE_NAME).truncate();\n    },\n  };\n};\n"],"names":["TABLE_NAME","db","hasSchemaTable","getSchemaConnection","hasTable","createSchemaTable","createTable","t","increments","json","datetime","useTz","string","checkTableExists","read","getSchemaID","getConnection","select","from","orderBy","first","res","where","id","parsedSchema","schema","JSON","parse","hashSchema","crypto","createHash","update","stringify","digest","add","delete","time","Date","insert","hash","into","clear","truncate"],"mappings":"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"}