{"version":3,"file":"5.0.0-02-document-id.js","sources":["../../../src/migrations/internal-migrations/5.0.0-02-document-id.ts"],"sourcesContent":["/**\n * NOTE: This migration avoids using the `identifiers` utility.\n * As the `5.0.0-01-convert-identifiers-long-than-max-length`\n * migration does not convert the `localizations` join tables, as they are not\n * tables that exist anymore in v5 and are not in the db metadata.\n *\n * This migration therefore relies on the fact that those tables still exist, and\n * references them directly.\n *\n * Database join table name: `categories_localizations_links`\n * Actual `identifiers` returned join table name: `categories_localizations_lnk`\n *\n */\nimport { createId } from '@paralleldrive/cuid2';\nimport { snakeCase } from 'lodash/fp';\nimport type { Knex } from 'knex';\n\nimport type { Migration } from '../common';\nimport type { Database } from '../..';\nimport type { Meta } from '../../metadata';\n\ninterface Params {\n  joinColumn: string;\n  inverseJoinColumn: string;\n  tableName: string;\n  joinTableName: string;\n}\n\nconst QUERIES = {\n  async postgres(knex: Knex, params: Params) {\n    const res = await knex.raw(\n      `\n    SELECT :tableName:.id as id, string_agg(DISTINCT :inverseJoinColumn:::character varying, ',') as other_ids\n    FROM :tableName:\n    LEFT JOIN :joinTableName: ON :tableName:.id = :joinTableName:.:joinColumn:\n    WHERE :tableName:.document_id IS NULL\n    GROUP BY :tableName:.id, :joinTableName:.:joinColumn:\n    LIMIT 1;\n  `,\n      params\n    );\n\n    return res.rows;\n  },\n  async mysql(knex: Knex, params: Params) {\n    const [res] = await knex.raw(\n      `\n    SELECT :tableName:.id as id, group_concat(DISTINCT :inverseJoinColumn:) as other_ids\n    FROM :tableName:\n    LEFT JOIN :joinTableName: ON :tableName:.id = :joinTableName:.:joinColumn:\n    WHERE :tableName:.document_id IS NULL\n    GROUP BY :tableName:.id, :joinTableName:.:joinColumn:\n    LIMIT 1;\n  `,\n      params\n    );\n\n    return res;\n  },\n  async sqlite(knex: Knex, params: Params) {\n    return knex.raw(\n      `\n    SELECT :tableName:.id as id, group_concat(DISTINCT :inverseJoinColumn:) as other_ids\n    FROM :tableName:\n    LEFT JOIN :joinTableName: ON :tableName:.id = :joinTableName:.:joinColumn:\n    WHERE :tableName:.document_id IS NULL\n    GROUP BY :joinTableName:.:joinColumn:\n    LIMIT 1;\n    `,\n      params\n    );\n  },\n};\n\nconst getNextIdsToCreateDocumentId = async (\n  db: Database,\n  knex: Knex,\n  {\n    joinColumn,\n    inverseJoinColumn,\n    tableName,\n    joinTableName,\n  }: {\n    joinColumn: string;\n    inverseJoinColumn: string;\n    tableName: string;\n    joinTableName: string;\n  }\n): Promise<number[]> => {\n  const res = await QUERIES[db.dialect.client as keyof typeof QUERIES](knex, {\n    joinColumn,\n    inverseJoinColumn,\n    tableName,\n    joinTableName,\n  });\n\n  if (res.length > 0) {\n    const row = res[0];\n    const otherIds = row.other_ids\n      ? row.other_ids.split(',').map((v: string) => parseInt(v, 10))\n      : [];\n\n    return [row.id, ...otherIds];\n  }\n\n  return [];\n};\n\n// Migrate document ids for tables that have localizations\nconst migrateDocumentIdsWithLocalizations = async (db: Database, knex: Knex, meta: Meta) => {\n  const singularName = meta.singularName.toLowerCase();\n  const joinColumn = snakeCase(`${singularName}_id`);\n  const inverseJoinColumn = snakeCase(`inv_${singularName}_id`);\n  let ids: number[];\n\n  do {\n    ids = await getNextIdsToCreateDocumentId(db, knex, {\n      joinColumn,\n      inverseJoinColumn,\n      tableName: meta.tableName,\n      joinTableName: snakeCase(`${meta.tableName}_localizations_links`),\n    });\n\n    if (ids.length > 0) {\n      await knex(meta.tableName).update({ document_id: createId() }).whereIn('id', ids);\n    }\n  } while (ids.length > 0);\n};\n\n// Migrate document ids for tables that don't have localizations\nconst migrationDocumentIds = async (db: Database, knex: Knex, meta: Meta) => {\n  let updatedRows: number;\n\n  do {\n    updatedRows = await knex(meta.tableName)\n      .update({ document_id: createId() })\n      .whereIn(\n        'id',\n        knex(meta.tableName)\n          .select('id')\n          .from(knex(meta.tableName).select('id').whereNull('document_id').limit(1).as('sub_query'))\n      );\n  } while (updatedRows > 0);\n};\n\nconst createDocumentIdColumn = async (knex: Knex, tableName: string) => {\n  await knex.schema.alterTable(tableName, (table) => {\n    table.string('document_id');\n  });\n};\n\nconst hasLocalizationsJoinTable = async (knex: Knex, tableName: string) => {\n  const joinTableName = snakeCase(`${tableName}_localizations_links`);\n  return knex.schema.hasTable(joinTableName);\n};\n\nexport const createdDocumentId: Migration = {\n  name: '5.0.0-02-created-document-id',\n  async up(knex, db) {\n    // do sth\n    for (const meta of db.metadata.values()) {\n      const hasTable = await knex.schema.hasTable(meta.tableName);\n\n      if (!hasTable) {\n        continue;\n      }\n\n      if ('documentId' in meta.attributes) {\n        // add column if doesn't exist\n        const hasDocumentIdColumn = await knex.schema.hasColumn(meta.tableName, 'document_id');\n\n        if (hasDocumentIdColumn) {\n          continue;\n        }\n\n        await createDocumentIdColumn(knex, meta.tableName);\n\n        if (await hasLocalizationsJoinTable(knex, meta.tableName)) {\n          await migrateDocumentIdsWithLocalizations(db, knex, meta);\n        } else {\n          await migrationDocumentIds(db, knex, meta);\n        }\n      }\n    }\n  },\n  async down() {\n    throw new Error('not implemented');\n  },\n};\n"],"names":["QUERIES","postgres","knex","params","res","raw","rows","mysql","sqlite","getNextIdsToCreateDocumentId","db","joinColumn","inverseJoinColumn","tableName","joinTableName","dialect","client","length","row","otherIds","other_ids","split","map","v","parseInt","id","migrateDocumentIdsWithLocalizations","meta","singularName","toLowerCase","snakeCase","ids","update","document_id","createId","whereIn","migrationDocumentIds","updatedRows","select","from","whereNull","limit","as","createDocumentIdColumn","schema","alterTable","table","string","hasLocalizationsJoinTable","hasTable","createdDocumentId","name","up","metadata","values","attributes","hasDocumentIdColumn","hasColumn","down","Error"],"mappings":";;;;;AA4BA,MAAMA,OAAU,GAAA;IACd,MAAMC,QAAAA,CAAAA,CAASC,IAAU,EAAEC,MAAc,EAAA;AACvC,QAAA,MAAMC,GAAM,GAAA,MAAMF,IAAKG,CAAAA,GAAG,CACxB;;;;;;;AAOJ,EAAA,CAAC,EACGF,MAAAA,CAAAA;AAGF,QAAA,OAAOC,IAAIE,IAAI;AACjB,KAAA;IACA,MAAMC,KAAAA,CAAAA,CAAML,IAAU,EAAEC,MAAc,EAAA;AACpC,QAAA,MAAM,CAACC,GAAI,CAAA,GAAG,MAAMF,IAAKG,CAAAA,GAAG,CAC1B;;;;;;;AAOJ,EAAA,CAAC,EACGF,MAAAA,CAAAA;QAGF,OAAOC,GAAAA;AACT,KAAA;IACA,MAAMI,MAAAA,CAAAA,CAAON,IAAU,EAAEC,MAAc,EAAA;QACrC,OAAOD,IAAAA,CAAKG,GAAG,CACb;;;;;;;AAOF,IAAA,CAAC,EACCF,MAAAA,CAAAA;AAEJ;AACF,CAAA;AAEA,MAAMM,4BAA+B,GAAA,OACnCC,EACAR,EAAAA,IAAAA,EACA,EACES,UAAU,EACVC,iBAAiB,EACjBC,SAAS,EACTC,aAAa,EAMd,GAAA;IAED,MAAMV,GAAAA,GAAM,MAAMJ,OAAO,CAACU,EAAAA,CAAGK,OAAO,CAACC,MAAM,CAAyB,CAACd,IAAM,EAAA;AACzES,QAAAA,UAAAA;AACAC,QAAAA,iBAAAA;AACAC,QAAAA,SAAAA;AACAC,QAAAA;AACF,KAAA,CAAA;IAEA,IAAIV,GAAAA,CAAIa,MAAM,GAAG,CAAG,EAAA;QAClB,MAAMC,GAAAA,GAAMd,GAAG,CAAC,CAAE,CAAA;AAClB,QAAA,MAAMe,WAAWD,GAAIE,CAAAA,SAAS,GAC1BF,GAAAA,CAAIE,SAAS,CAACC,KAAK,CAAC,GAAA,CAAA,CAAKC,GAAG,CAAC,CAACC,IAAcC,QAASD,CAAAA,CAAAA,EAAG,OACxD,EAAE;QAEN,OAAO;AAACL,YAAAA,GAAAA,CAAIO,EAAE;AAAKN,YAAAA,GAAAA;AAAS,SAAA;AAC9B;AAEA,IAAA,OAAO,EAAE;AACX,CAAA;AAEA;AACA,MAAMO,mCAAAA,GAAsC,OAAOhB,EAAAA,EAAcR,IAAYyB,EAAAA,IAAAA,GAAAA;AAC3E,IAAA,MAAMC,YAAeD,GAAAA,IAAAA,CAAKC,YAAY,CAACC,WAAW,EAAA;AAClD,IAAA,MAAMlB,aAAamB,WAAU,CAAA,CAAC,EAAEF,YAAAA,CAAa,GAAG,CAAC,CAAA;AACjD,IAAA,MAAMhB,oBAAoBkB,WAAU,CAAA,CAAC,IAAI,EAAEF,YAAAA,CAAa,GAAG,CAAC,CAAA;IAC5D,IAAIG,GAAAA;IAEJ,GAAG;QACDA,GAAM,GAAA,MAAMtB,4BAA6BC,CAAAA,EAAAA,EAAIR,IAAM,EAAA;AACjDS,YAAAA,UAAAA;AACAC,YAAAA,iBAAAA;AACAC,YAAAA,SAAAA,EAAWc,KAAKd,SAAS;AACzBC,YAAAA,aAAAA,EAAegB,YAAU,CAAC,EAAEH,KAAKd,SAAS,CAAC,oBAAoB,CAAC;AAClE,SAAA,CAAA;QAEA,IAAIkB,GAAAA,CAAId,MAAM,GAAG,CAAG,EAAA;AAClB,YAAA,MAAMf,IAAKyB,CAAAA,IAAAA,CAAKd,SAAS,CAAA,CAAEmB,MAAM,CAAC;gBAAEC,WAAaC,EAAAA,cAAAA;aAAcC,CAAAA,CAAAA,OAAO,CAAC,IAAMJ,EAAAA,GAAAA,CAAAA;AAC/E;KACOA,OAAAA,GAAAA,CAAId,MAAM,GAAG,CAAG;AAC3B,CAAA;AAEA;AACA,MAAMmB,oBAAAA,GAAuB,OAAO1B,EAAAA,EAAcR,IAAYyB,EAAAA,IAAAA,GAAAA;IAC5D,IAAIU,WAAAA;IAEJ,GAAG;AACDA,QAAAA,WAAAA,GAAc,MAAMnC,IAAKyB,CAAAA,IAAAA,CAAKd,SAAS,CAAA,CACpCmB,MAAM,CAAC;YAAEC,WAAaC,EAAAA,cAAAA;SACtBC,CAAAA,CAAAA,OAAO,CACN,IAAA,EACAjC,IAAKyB,CAAAA,IAAAA,CAAKd,SAAS,CAAA,CAChByB,MAAM,CAAC,IACPC,CAAAA,CAAAA,IAAI,CAACrC,IAAAA,CAAKyB,KAAKd,SAAS,CAAA,CAAEyB,MAAM,CAAC,IAAME,CAAAA,CAAAA,SAAS,CAAC,aAAA,CAAA,CAAeC,KAAK,CAAC,CAAGC,CAAAA,CAAAA,EAAE,CAAC,WAAA,CAAA,CAAA,CAAA;AAErF,KAAA,OAASL,cAAc,CAAG;AAC5B,CAAA;AAEA,MAAMM,sBAAAA,GAAyB,OAAOzC,IAAYW,EAAAA,SAAAA,GAAAA;AAChD,IAAA,MAAMX,KAAK0C,MAAM,CAACC,UAAU,CAAChC,WAAW,CAACiC,KAAAA,GAAAA;AACvCA,QAAAA,KAAAA,CAAMC,MAAM,CAAC,aAAA,CAAA;AACf,KAAA,CAAA;AACF,CAAA;AAEA,MAAMC,yBAAAA,GAA4B,OAAO9C,IAAYW,EAAAA,SAAAA,GAAAA;AACnD,IAAA,MAAMC,gBAAgBgB,WAAU,CAAA,CAAC,EAAEjB,SAAAA,CAAU,oBAAoB,CAAC,CAAA;AAClE,IAAA,OAAOX,IAAK0C,CAAAA,MAAM,CAACK,QAAQ,CAACnC,aAAAA,CAAAA;AAC9B,CAAA;MAEaoC,iBAA+B,GAAA;IAC1CC,IAAM,EAAA,8BAAA;IACN,MAAMC,EAAAA,CAAAA,CAAGlD,IAAI,EAAEQ,EAAE,EAAA;;AAEf,QAAA,KAAK,MAAMiB,IAAQjB,IAAAA,EAAAA,CAAG2C,QAAQ,CAACC,MAAM,EAAI,CAAA;YACvC,MAAML,QAAAA,GAAW,MAAM/C,IAAK0C,CAAAA,MAAM,CAACK,QAAQ,CAACtB,KAAKd,SAAS,CAAA;AAE1D,YAAA,IAAI,CAACoC,QAAU,EAAA;AACb,gBAAA;AACF;YAEA,IAAI,YAAA,IAAgBtB,IAAK4B,CAAAA,UAAU,EAAE;;gBAEnC,MAAMC,mBAAAA,GAAsB,MAAMtD,IAAK0C,CAAAA,MAAM,CAACa,SAAS,CAAC9B,IAAKd,CAAAA,SAAS,EAAE,aAAA,CAAA;AAExE,gBAAA,IAAI2C,mBAAqB,EAAA;AACvB,oBAAA;AACF;gBAEA,MAAMb,sBAAAA,CAAuBzC,IAAMyB,EAAAA,IAAAA,CAAKd,SAAS,CAAA;AAEjD,gBAAA,IAAI,MAAMmC,yBAAAA,CAA0B9C,IAAMyB,EAAAA,IAAAA,CAAKd,SAAS,CAAG,EAAA;oBACzD,MAAMa,mCAAAA,CAAoChB,IAAIR,IAAMyB,EAAAA,IAAAA,CAAAA;iBAC/C,MAAA;oBACL,MAAMS,oBAAAA,CAAqB1B,IAAIR,IAAMyB,EAAAA,IAAAA,CAAAA;AACvC;AACF;AACF;AACF,KAAA;IACA,MAAM+B,IAAAA,CAAAA,GAAAA;AACJ,QAAA,MAAM,IAAIC,KAAM,CAAA,iBAAA,CAAA;AAClB;AACF;;;;"}