{"version":3,"file":"storage.js","sources":["../../src/migrations/storage.ts"],"sourcesContent":["import type { Database } from '..';\n\nexport interface Options {\n  db: Database;\n  tableName: string;\n}\n\nexport const createStorage = (opts: Options) => {\n  const { db, tableName } = opts;\n\n  const hasMigrationTable = () => db.getSchemaConnection().hasTable(tableName);\n\n  const createMigrationTable = () => {\n    return db.getSchemaConnection().createTable(tableName, (table) => {\n      table.increments('id');\n      table.string('name');\n      table.datetime('time', { useTz: false });\n    });\n  };\n\n  return {\n    async logMigration({ name }: { name: string }) {\n      await db\n        .getConnection()\n        .insert({\n          name,\n          time: new Date(),\n        })\n        .into(tableName);\n    },\n\n    async unlogMigration({ name }: { name: string }) {\n      await db.getConnection(tableName).del().where({ name });\n    },\n\n    async executed() {\n      if (!(await hasMigrationTable())) {\n        await createMigrationTable();\n        return [];\n      }\n\n      const logs = await db.getConnection(tableName).select().from(tableName).orderBy('time');\n\n      return logs.map((log: { name: string }) => log.name);\n    },\n  };\n};\n"],"names":["createStorage","opts","db","tableName","hasMigrationTable","getSchemaConnection","hasTable","createMigrationTable","createTable","table","increments","string","datetime","useTz","logMigration","name","getConnection","insert","time","Date","into","unlogMigration","del","where","executed","logs","select","from","orderBy","map","log"],"mappings":";;AAOO,MAAMA,gBAAgB,CAACC,IAAAA,GAAAA;AAC5B,IAAA,MAAM,EAAEC,EAAE,EAAEC,SAAS,EAAE,GAAGF,IAAAA;AAE1B,IAAA,MAAMG,oBAAoB,IAAMF,EAAAA,CAAGG,mBAAmB,EAAA,CAAGC,QAAQ,CAACH,SAAAA,CAAAA;AAElE,IAAA,MAAMI,oBAAuB,GAAA,IAAA;AAC3B,QAAA,OAAOL,GAAGG,mBAAmB,EAAA,CAAGG,WAAW,CAACL,WAAW,CAACM,KAAAA,GAAAA;AACtDA,YAAAA,KAAAA,CAAMC,UAAU,CAAC,IAAA,CAAA;AACjBD,YAAAA,KAAAA,CAAME,MAAM,CAAC,MAAA,CAAA;YACbF,KAAMG,CAAAA,QAAQ,CAAC,MAAQ,EAAA;gBAAEC,KAAO,EAAA;AAAM,aAAA,CAAA;AACxC,SAAA,CAAA;AACF,KAAA;IAEA,OAAO;QACL,MAAMC,YAAAA,CAAAA,CAAa,EAAEC,IAAI,EAAoB,EAAA;AAC3C,YAAA,MAAMb,EACHc,CAAAA,aAAa,EACbC,CAAAA,MAAM,CAAC;AACNF,gBAAAA,IAAAA;AACAG,gBAAAA,IAAAA,EAAM,IAAIC,IAAAA;AACZ,aAAA,CAAA,CACCC,IAAI,CAACjB,SAAAA,CAAAA;AACV,SAAA;QAEA,MAAMkB,cAAAA,CAAAA,CAAe,EAAEN,IAAI,EAAoB,EAAA;AAC7C,YAAA,MAAMb,GAAGc,aAAa,CAACb,WAAWmB,GAAG,EAAA,CAAGC,KAAK,CAAC;AAAER,gBAAAA;AAAK,aAAA,CAAA;AACvD,SAAA;QAEA,MAAMS,QAAAA,CAAAA,GAAAA;YACJ,IAAI,CAAE,MAAMpB,iBAAsB,EAAA,EAAA;gBAChC,MAAMG,oBAAAA,EAAAA;AACN,gBAAA,OAAO,EAAE;AACX;AAEA,YAAA,MAAMkB,IAAO,GAAA,MAAMvB,EAAGc,CAAAA,aAAa,CAACb,SAAAA,CAAAA,CAAWuB,MAAM,EAAA,CAAGC,IAAI,CAACxB,SAAWyB,CAAAA,CAAAA,OAAO,CAAC,MAAA,CAAA;AAEhF,YAAA,OAAOH,KAAKI,GAAG,CAAC,CAACC,GAAAA,GAA0BA,IAAIf,IAAI,CAAA;AACrD;AACF,KAAA;AACF;;;;"}