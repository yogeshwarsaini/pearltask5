{"version":3,"file":"internal.js","sources":["../../src/migrations/internal.ts"],"sourcesContent":["import { Umzug } from 'umzug';\n\nimport { wrapTransaction } from './common';\nimport { internalMigrations } from './internal-migrations';\nimport { createStorage } from './storage';\nimport { transformLogMessage } from './logger';\n\nimport type { InternalMigrationProvider, Migration } from './common';\nimport type { Database } from '..';\n\nexport const createInternalMigrationProvider = (db: Database): InternalMigrationProvider => {\n  const context = { db };\n  const migrations: Migration[] = [...internalMigrations];\n\n  const umzugProvider = new Umzug({\n    storage: createStorage({ db, tableName: 'strapi_migrations_internal' }),\n    logger: {\n      info(message) {\n        // NOTE: only log internal migration in debug mode\n        db.logger.debug(transformLogMessage('info', message));\n      },\n      warn(message) {\n        db.logger.warn(transformLogMessage('warn', message));\n      },\n      error(message) {\n        db.logger.error(transformLogMessage('error', message));\n      },\n      debug(message) {\n        db.logger.debug(transformLogMessage('debug', message));\n      },\n    },\n    context,\n    migrations: () =>\n      migrations.map((migration) => {\n        return {\n          name: migration.name,\n          up: wrapTransaction(context.db)(migration.up),\n          down: wrapTransaction(context.db)(migration.down),\n        };\n      }),\n  });\n\n  return {\n    async register(migration: Migration) {\n      migrations.push(migration);\n    },\n    async shouldRun() {\n      const pendingMigrations = await umzugProvider.pending();\n      return pendingMigrations.length > 0;\n    },\n    async up() {\n      await umzugProvider.up();\n    },\n    async down() {\n      await umzugProvider.down();\n    },\n  };\n};\n"],"names":["createInternalMigrationProvider","db","context","migrations","internalMigrations","umzugProvider","Umzug","storage","createStorage","tableName","logger","info","message","debug","transformLogMessage","warn","error","map","migration","name","up","wrapTransaction","down","register","push","shouldRun","pendingMigrations","pending","length"],"mappings":";;;;;;;;AAUO,MAAMA,kCAAkC,CAACC,EAAAA,GAAAA;AAC9C,IAAA,MAAMC,OAAU,GAAA;AAAED,QAAAA;AAAG,KAAA;AACrB,IAAA,MAAME,UAA0B,GAAA;AAAIC,QAAAA,GAAAA;AAAmB,KAAA;IAEvD,MAAMC,aAAAA,GAAgB,IAAIC,WAAM,CAAA;AAC9BC,QAAAA,OAAAA,EAASC,qBAAc,CAAA;AAAEP,YAAAA,EAAAA;YAAIQ,SAAW,EAAA;AAA6B,SAAA,CAAA;QACrEC,MAAQ,EAAA;AACNC,YAAAA,IAAAA,CAAAA,CAAKC,OAAO,EAAA;;AAEVX,gBAAAA,EAAAA,CAAGS,MAAM,CAACG,KAAK,CAACC,2BAAoB,MAAQF,EAAAA,OAAAA,CAAAA,CAAAA;AAC9C,aAAA;AACAG,YAAAA,IAAAA,CAAAA,CAAKH,OAAO,EAAA;AACVX,gBAAAA,EAAAA,CAAGS,MAAM,CAACK,IAAI,CAACD,2BAAoB,MAAQF,EAAAA,OAAAA,CAAAA,CAAAA;AAC7C,aAAA;AACAI,YAAAA,KAAAA,CAAAA,CAAMJ,OAAO,EAAA;AACXX,gBAAAA,EAAAA,CAAGS,MAAM,CAACM,KAAK,CAACF,2BAAoB,OAASF,EAAAA,OAAAA,CAAAA,CAAAA;AAC/C,aAAA;AACAC,YAAAA,KAAAA,CAAAA,CAAMD,OAAO,EAAA;AACXX,gBAAAA,EAAAA,CAAGS,MAAM,CAACG,KAAK,CAACC,2BAAoB,OAASF,EAAAA,OAAAA,CAAAA,CAAAA;AAC/C;AACF,SAAA;AACAV,QAAAA,OAAAA;AACAC,QAAAA,UAAAA,EAAY,IACVA,UAAAA,CAAWc,GAAG,CAAC,CAACC,SAAAA,GAAAA;gBACd,OAAO;AACLC,oBAAAA,IAAAA,EAAMD,UAAUC,IAAI;AACpBC,oBAAAA,EAAAA,EAAIC,sBAAgBnB,CAAAA,OAAAA,CAAQD,EAAE,CAAA,CAAEiB,UAAUE,EAAE,CAAA;AAC5CE,oBAAAA,IAAAA,EAAMD,sBAAgBnB,CAAAA,OAAAA,CAAQD,EAAE,CAAA,CAAEiB,UAAUI,IAAI;AAClD,iBAAA;AACF,aAAA;AACJ,KAAA,CAAA;IAEA,OAAO;AACL,QAAA,MAAMC,UAASL,SAAoB,EAAA;AACjCf,YAAAA,UAAAA,CAAWqB,IAAI,CAACN,SAAAA,CAAAA;AAClB,SAAA;QACA,MAAMO,SAAAA,CAAAA,GAAAA;YACJ,MAAMC,iBAAAA,GAAoB,MAAMrB,aAAAA,CAAcsB,OAAO,EAAA;YACrD,OAAOD,iBAAAA,CAAkBE,MAAM,GAAG,CAAA;AACpC,SAAA;QACA,MAAMR,EAAAA,CAAAA,GAAAA;AACJ,YAAA,MAAMf,cAAce,EAAE,EAAA;AACxB,SAAA;QACA,MAAME,IAAAA,CAAAA,GAAAA;AACJ,YAAA,MAAMjB,cAAciB,IAAI,EAAA;AAC1B;AACF,KAAA;AACF;;;;"}