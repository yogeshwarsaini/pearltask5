{"version":3,"file":"query-builder.js","sources":["../../src/query/query-builder.ts"],"sourcesContent":["import type { Knex } from 'knex';\nimport _ from 'lodash/fp';\n\nimport type { Database } from '..';\n\nimport { DatabaseError } from '../errors';\nimport { transactionCtx } from '../transaction-context';\nimport { isKnexQuery } from '../utils/knex';\nimport * as helpers from './helpers';\nimport type { Join } from './helpers/join';\n\ninterface State {\n  type: 'select' | 'insert' | 'update' | 'delete' | 'count' | 'max' | 'truncate';\n  select: Array<string | Knex.Raw>;\n  count: string | null;\n  max: string | null;\n  first: boolean;\n  data: Record<string, unknown> | (null | Record<string, unknown>)[] | null;\n  where: Record<string, unknown>[];\n  joins: Join[];\n  populate: object | null;\n  limit: number | null;\n  offset: number | null;\n  transaction: any;\n  forUpdate: boolean;\n  onConflict: any;\n  merge: any;\n  ignore: boolean;\n  orderBy: any[];\n  groupBy: any[];\n  increments: any[];\n  decrements: any[];\n  aliasCounter: number;\n  filters: any;\n  search: string;\n  processed: boolean;\n}\n\nexport interface QueryBuilder {\n  alias: string;\n  state: State;\n  raw: Knex.RawBuilder;\n\n  getAlias(): string;\n\n  clone(): QueryBuilder;\n\n  select(args: string | Array<string | Knex.Raw>): QueryBuilder;\n\n  addSelect(args: string | string[]): QueryBuilder;\n\n  insert<TData extends Record<string, unknown> | Record<string, unknown>[]>(\n    data: TData\n  ): QueryBuilder;\n\n  onConflict(args: any): QueryBuilder;\n\n  merge(args: any): QueryBuilder;\n\n  ignore(): QueryBuilder;\n\n  delete(): QueryBuilder;\n\n  ref(name: string): any;\n\n  update<TData extends Record<string, unknown>>(data: TData): QueryBuilder;\n\n  increment(column: string, amount?: number): QueryBuilder;\n\n  decrement(column: string, amount?: number): QueryBuilder;\n\n  count(count?: string): QueryBuilder;\n\n  max(column: string): QueryBuilder;\n\n  where(where?: object): QueryBuilder;\n\n  limit(limit: number): QueryBuilder;\n\n  offset(offset: number): QueryBuilder;\n\n  orderBy(orderBy: any): QueryBuilder;\n\n  groupBy(groupBy: any): QueryBuilder;\n\n  populate(populate: any): QueryBuilder;\n\n  search(query: string): QueryBuilder;\n\n  transacting(transaction: any): QueryBuilder;\n\n  forUpdate(): QueryBuilder;\n\n  init(params?: any): QueryBuilder;\n\n  filters(filters: any): void;\n\n  first(): QueryBuilder;\n\n  join(join: any): QueryBuilder;\n\n  mustUseAlias(): boolean;\n\n  aliasColumn(key: any, alias?: string): any;\n\n  shouldUseSubQuery(): boolean;\n\n  runSubQuery(): any;\n\n  processState(): void;\n\n  shouldUseDistinct(): boolean;\n\n  shouldUseDeepSort(): boolean;\n\n  processSelect(): void;\n\n  getKnexQuery(): Knex.QueryBuilder;\n\n  execute<T>(options?: { mapResults?: boolean }): Promise<T>;\n\n  stream(options?: { mapResults?: boolean }): helpers.ReadableQuery;\n}\n\nconst createQueryBuilder = (\n  uid: string,\n  db: Database,\n  initialState: Partial<State> = {}\n): QueryBuilder => {\n  const meta = db.metadata.get(uid);\n  const { tableName } = meta;\n\n  const state: State = _.defaults(\n    {\n      type: 'select',\n      select: [],\n      count: null,\n      max: null,\n      first: false,\n      data: null,\n      where: [],\n      joins: [],\n      populate: null,\n      limit: null,\n      offset: null,\n      transaction: null,\n      forUpdate: false,\n      onConflict: null,\n      merge: null,\n      ignore: false,\n      orderBy: [],\n      groupBy: [],\n      increments: [],\n      decrements: [],\n      aliasCounter: 0,\n      filters: null,\n      search: null,\n      processed: false,\n    },\n    initialState\n  );\n\n  const getAlias = () => {\n    const alias = `t${state.aliasCounter}`;\n\n    state.aliasCounter += 1;\n\n    return alias;\n  };\n\n  return {\n    alias: getAlias(),\n    getAlias,\n    state,\n\n    clone() {\n      return createQueryBuilder(uid, db, state);\n    },\n\n    select(args) {\n      state.type = 'select';\n      state.select = _.uniq(_.castArray(args));\n\n      return this;\n    },\n\n    addSelect(args) {\n      state.select = _.uniq([...state.select, ..._.castArray(args)]);\n\n      return this;\n    },\n\n    insert(data) {\n      state.type = 'insert';\n      state.data = data;\n\n      return this;\n    },\n\n    onConflict(args) {\n      state.onConflict = args;\n\n      return this;\n    },\n\n    merge(args) {\n      state.merge = args;\n\n      return this;\n    },\n\n    ignore() {\n      state.ignore = true;\n\n      return this;\n    },\n\n    delete() {\n      state.type = 'delete';\n\n      return this;\n    },\n\n    ref(name) {\n      return db.connection.ref(helpers.toColumnName(meta, name));\n    },\n\n    update(data) {\n      state.type = 'update';\n      state.data = data;\n\n      return this;\n    },\n\n    increment(column, amount = 1) {\n      state.type = 'update';\n      state.increments.push({ column, amount });\n\n      return this;\n    },\n\n    decrement(column, amount = 1) {\n      state.type = 'update';\n      state.decrements.push({ column, amount });\n\n      return this;\n    },\n\n    count(count = 'id') {\n      state.type = 'count';\n      state.count = count;\n\n      return this;\n    },\n\n    max(column: string) {\n      state.type = 'max';\n      state.max = column;\n\n      return this;\n    },\n\n    where(where: Record<string, unknown> = {}) {\n      if (!_.isPlainObject(where)) {\n        throw new Error('Where must be an object');\n      }\n\n      state.where.push(where);\n\n      return this;\n    },\n\n    limit(limit) {\n      state.limit = limit;\n      return this;\n    },\n\n    offset(offset) {\n      state.offset = offset;\n      return this;\n    },\n\n    orderBy(orderBy) {\n      state.orderBy = orderBy;\n      return this;\n    },\n\n    groupBy(groupBy) {\n      state.groupBy = groupBy;\n      return this;\n    },\n\n    populate(populate) {\n      state.populate = populate;\n      return this;\n    },\n\n    search(query) {\n      state.search = query;\n      return this;\n    },\n\n    transacting(transaction) {\n      state.transaction = transaction;\n      return this;\n    },\n\n    forUpdate() {\n      state.forUpdate = true;\n      return this;\n    },\n\n    init(params = {}) {\n      const { _q, filters, where, select, limit, offset, orderBy, groupBy, populate } = params;\n\n      if (!_.isNil(where)) {\n        this.where(where);\n      }\n\n      if (!_.isNil(_q)) {\n        this.search(_q);\n      }\n\n      if (!_.isNil(select)) {\n        this.select(select);\n      } else {\n        this.select('*');\n      }\n\n      if (!_.isNil(limit)) {\n        this.limit(limit);\n      }\n\n      if (!_.isNil(offset)) {\n        this.offset(offset);\n      }\n\n      if (!_.isNil(orderBy)) {\n        this.orderBy(orderBy);\n      }\n\n      if (!_.isNil(groupBy)) {\n        this.groupBy(groupBy);\n      }\n\n      if (!_.isNil(populate)) {\n        this.populate(populate);\n      }\n\n      if (!_.isNil(filters)) {\n        this.filters(filters);\n      }\n\n      return this;\n    },\n\n    filters(filters) {\n      state.filters = filters;\n    },\n\n    first() {\n      state.first = true;\n      return this;\n    },\n\n    join(join) {\n      if (!join.targetField) {\n        state.joins.push(join);\n        return this;\n      }\n\n      const model = db.metadata.get(uid);\n      const attribute = model.attributes[join.targetField];\n\n      helpers.createJoin(\n        { db, qb: this, uid },\n        {\n          alias: this.alias,\n          refAlias: join.alias,\n          attributeName: join.targetField,\n          attribute,\n        }\n      );\n\n      return this;\n    },\n\n    mustUseAlias() {\n      return ['select', 'count'].includes(state.type);\n    },\n\n    aliasColumn(key: string | unknown, alias: string): string | unknown {\n      if (typeof key !== 'string') {\n        return key;\n      }\n\n      if (key.indexOf('.') >= 0) {\n        return key;\n      }\n\n      if (!_.isNil(alias)) {\n        return `${alias}.${key}`;\n      }\n\n      return this.mustUseAlias() ? `${this.alias}.${key}` : key;\n    },\n\n    raw: db.connection.raw.bind(db.connection),\n\n    shouldUseSubQuery() {\n      return ['delete', 'update'].includes(state.type) && state.joins.length > 0;\n    },\n\n    runSubQuery() {\n      const originalType = state.type;\n\n      this.select('id');\n      const subQB = this.getKnexQuery();\n\n      const nestedSubQuery = db.getConnection().select('id').from(subQB.as('subQuery'));\n      const connection = db.getConnection(tableName);\n\n      return (connection[originalType] as Knex)().whereIn('id', nestedSubQuery);\n    },\n\n    processState() {\n      if (this.state.processed) {\n        return;\n      }\n\n      state.orderBy = helpers.processOrderBy(state.orderBy, { qb: this, uid, db });\n\n      if (!_.isNil(state.filters)) {\n        if (_.isFunction(state.filters)) {\n          const filters = state.filters({ qb: this, uid, meta, db });\n\n          if (!_.isNil(filters)) {\n            state.where.push(filters);\n          }\n        } else {\n          state.where.push(state.filters);\n        }\n      }\n\n      state.where = helpers.processWhere(state.where, { qb: this, uid, db });\n      state.populate = helpers.processPopulate(state.populate, { qb: this, uid, db });\n\n      state.data = helpers.toRow(meta, state.data);\n\n      this.processSelect();\n\n      this.state.processed = true;\n    },\n\n    shouldUseDistinct() {\n      return state.joins.length > 0 && _.isEmpty(state.groupBy);\n    },\n\n    shouldUseDeepSort() {\n      return (\n        state.orderBy\n          .filter(({ column }) => column.indexOf('.') >= 0)\n          .filter(({ column }) => {\n            const col = column.split('.');\n\n            for (let i = 0; i < col.length - 1; i += 1) {\n              const el = col[i];\n\n              // order by \"rel\".\"xxx\"\n              const isRelationAttribute = meta.attributes[el]?.type === 'relation';\n\n              // order by \"t2\".\"xxx\"\n              const isAliasedRelation = Object.values(state.joins)\n                .map((join) => join.alias)\n                .includes(el);\n\n              if (isRelationAttribute || isAliasedRelation) {\n                return true;\n              }\n            }\n\n            return false;\n          }).length > 0\n      );\n    },\n\n    processSelect() {\n      state.select = state.select.map((field) => {\n        if (isKnexQuery(field)) {\n          return field;\n        }\n\n        return helpers.toColumnName(meta, field);\n      });\n\n      if (this.shouldUseDistinct()) {\n        const joinsOrderByColumns = state.joins.flatMap((join) => {\n          return _.keys(join.orderBy).map((key) => this.aliasColumn(key, join.alias));\n        });\n        const orderByColumns = state.orderBy.map(({ column }) => column);\n\n        state.select = _.uniq([...joinsOrderByColumns, ...orderByColumns, ...state.select]);\n      }\n    },\n\n    getKnexQuery() {\n      if (!state.type) {\n        this.select('*');\n      }\n\n      const aliasedTableName = this.mustUseAlias() ? `${tableName} as ${this.alias}` : tableName;\n\n      const qb = db.getConnection(aliasedTableName);\n\n      // The state should always be processed before calling shouldUseSubQuery as it\n      // relies on the presence or absence of joins to determine the need of a subquery\n      this.processState();\n\n      if (this.shouldUseSubQuery()) {\n        return this.runSubQuery();\n      }\n\n      switch (state.type) {\n        case 'select': {\n          qb.select(state.select.map((column) => this.aliasColumn(column)));\n\n          if (this.shouldUseDistinct()) {\n            qb.distinct();\n          }\n\n          break;\n        }\n        case 'count': {\n          const dbColumnName = this.aliasColumn(helpers.toColumnName(meta, state.count));\n\n          if (this.shouldUseDistinct()) {\n            qb.countDistinct({ count: dbColumnName });\n          } else {\n            qb.count({ count: dbColumnName });\n          }\n          break;\n        }\n        case 'max': {\n          const dbColumnName = this.aliasColumn(helpers.toColumnName(meta, state.max));\n          qb.max({ max: dbColumnName });\n          break;\n        }\n        case 'insert': {\n          qb.insert(state.data);\n\n          if (db.dialect.useReturning() && _.has('id', meta.attributes)) {\n            qb.returning('id');\n          }\n\n          break;\n        }\n        case 'update': {\n          if (state.data) {\n            qb.update(state.data);\n          }\n          break;\n        }\n        case 'delete': {\n          qb.delete();\n\n          break;\n        }\n        case 'truncate': {\n          qb.truncate();\n          break;\n        }\n        default: {\n          throw new Error('Unknown query type');\n        }\n      }\n\n      if (state.transaction) {\n        qb.transacting(state.transaction);\n      }\n\n      if (state.forUpdate) {\n        qb.forUpdate();\n      }\n\n      if (!_.isEmpty(state.increments)) {\n        state.increments.forEach((incr) => qb.increment(incr.column, incr.amount));\n      }\n\n      if (!_.isEmpty(state.decrements)) {\n        state.decrements.forEach((decr) => qb.decrement(decr.column, decr.amount));\n      }\n\n      if (state.onConflict) {\n        if (state.merge) {\n          qb.onConflict(state.onConflict).merge(state.merge);\n        } else if (state.ignore) {\n          qb.onConflict(state.onConflict).ignore();\n        }\n      }\n\n      if (state.limit) {\n        qb.limit(state.limit);\n      }\n\n      if (state.offset) {\n        qb.offset(state.offset);\n      }\n\n      if (state.orderBy.length > 0) {\n        qb.orderBy(state.orderBy);\n      }\n\n      if (state.first) {\n        qb.first();\n      }\n\n      if (state.groupBy.length > 0) {\n        qb.groupBy(state.groupBy);\n      }\n\n      // if there are joins and it is a delete or update use a sub query\n      if (state.where) {\n        helpers.applyWhere(qb, state.where);\n      }\n\n      // if there are joins and it is a delete or update use a sub query\n      if (state.search) {\n        qb.where((subQb) => {\n          helpers.applySearch(subQb, state.search, { qb: this, db, uid });\n        });\n      }\n\n      if (state.joins.length > 0) {\n        helpers.applyJoins(qb, state.joins);\n      }\n\n      if (this.shouldUseDeepSort()) {\n        return helpers.wrapWithDeepSort(qb, { qb: this, db, uid });\n      }\n\n      return qb;\n    },\n\n    async execute({ mapResults = true } = {}) {\n      try {\n        const qb = this.getKnexQuery();\n\n        const transaction = transactionCtx.get();\n        if (transaction) {\n          qb.transacting(transaction);\n        }\n\n        const rows = await qb;\n\n        if (state.populate && !_.isNil(rows)) {\n          await helpers.applyPopulate(_.castArray(rows), state.populate, {\n            qb: this,\n            uid,\n            db,\n          });\n        }\n\n        let results = rows;\n        if (mapResults && state.type === 'select') {\n          results = helpers.fromRow(meta, rows);\n        }\n\n        return results;\n      } catch (error) {\n        if (error instanceof Error) {\n          db.dialect.transformErrors(error);\n        } else {\n          throw error;\n        }\n      }\n    },\n\n    stream({ mapResults = true } = {}) {\n      if (state.type === 'select') {\n        return new helpers.ReadableQuery({ qb: this, db, uid, mapResults });\n      }\n\n      throw new DatabaseError(\n        `query-builder.stream() has been called with an unsupported query type: \"${state.type}\"`\n      );\n    },\n  };\n};\n\nexport default createQueryBuilder;\n"],"names":["createQueryBuilder","uid","db","initialState","meta","metadata","get","tableName","state","_","defaults","type","select","count","max","first","data","where","joins","populate","limit","offset","transaction","forUpdate","onConflict","merge","ignore","orderBy","groupBy","increments","decrements","aliasCounter","filters","search","processed","getAlias","alias","clone","args","uniq","castArray","addSelect","insert","delete","ref","name","connection","helpers","update","increment","column","amount","push","decrement","isPlainObject","Error","query","transacting","init","params","_q","isNil","join","targetField","model","attribute","attributes","qb","refAlias","attributeName","mustUseAlias","includes","aliasColumn","key","indexOf","raw","bind","shouldUseSubQuery","length","runSubQuery","originalType","subQB","getKnexQuery","nestedSubQuery","getConnection","from","as","whereIn","processState","isFunction","processSelect","shouldUseDistinct","isEmpty","shouldUseDeepSort","filter","col","split","i","el","isRelationAttribute","isAliasedRelation","Object","values","map","field","isKnexQuery","joinsOrderByColumns","flatMap","keys","orderByColumns","aliasedTableName","distinct","dbColumnName","countDistinct","dialect","useReturning","has","returning","truncate","forEach","incr","decr","subQb","execute","mapResults","transactionCtx","rows","results","error","transformErrors","stream","DatabaseError"],"mappings":"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"}