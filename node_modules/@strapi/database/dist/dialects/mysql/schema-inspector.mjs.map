{"version":3,"file":"schema-inspector.mjs","sources":["../../../src/dialects/mysql/schema-inspector.ts"],"sourcesContent":["import type { Column, ForeignKey, Index, Schema } from '../../schema/types';\nimport type { SchemaInspector } from '../dialect';\nimport type { Database } from '../..';\n\ninterface RawTable {\n  table_name: string;\n}\n\ninterface RawColumn {\n  data_type: string;\n  column_name: string;\n  character_maximum_length: number;\n  column_default: string;\n  is_nullable: string;\n  column_type: string;\n  column_key: string;\n}\n\ninterface RawIndex {\n  Key_name: string;\n  Column_name: string;\n  Non_unique: boolean | string;\n}\n\ninterface RawForeignKey {\n  constraint_name: string;\n}\n\nconst SQL_QUERIES = {\n  TABLE_LIST: /* sql */ `\n    SELECT\n      t.table_name as table_name\n    FROM information_schema.tables t\n    WHERE table_type = 'BASE TABLE'\n    AND table_schema = schema();\n  `,\n  LIST_COLUMNS: /* sql */ `\n    SELECT\n      c.data_type as data_type,\n      c.column_name as column_name,\n      c.character_maximum_length as character_maximum_length,\n      c.column_default as column_default,\n      c.is_nullable as is_nullable,\n      c.column_type as column_type,\n      c.column_key as column_key\n    FROM information_schema.columns c\n    WHERE table_schema = database()\n    AND table_name = ?;\n  `,\n  INDEX_LIST: /* sql */ `\n    show index from ??;\n  `,\n  FOREIGN_KEY_LIST: /* sql */ `\n    SELECT\n      tc.constraint_name as constraint_name\n    FROM information_schema.table_constraints tc\n    WHERE tc.constraint_type = 'FOREIGN KEY'\n    AND tc.table_schema = database()\n    AND tc.table_name = ?;\n  `,\n  FOREIGN_KEY_REFERENCES: /* sql */ `\n    SELECT\n      kcu.constraint_name as constraint_name,\n      kcu.column_name as column_name,\n      kcu.referenced_table_name as referenced_table_name,\n      kcu.referenced_column_name as referenced_column_name\n    FROM information_schema.key_column_usage kcu\n    WHERE kcu.constraint_name in (?)\n    AND kcu.table_schema = database()\n    AND kcu.table_name = ?;\n  `,\n  FOREIGN_KEY_REFERENTIALS_CONSTRAINTS: /* sql */ `\n    SELECT\n      rc.constraint_name as constraint_name,\n      rc.update_rule as on_update,\n      rc.delete_rule as on_delete\n    FROM information_schema.referential_constraints AS rc\n    WHERE rc.constraint_name in (?)\n    AND rc.constraint_schema = database()\n    AND rc.table_name = ?;\n  `,\n};\n\nconst toStrapiType = (column: RawColumn) => {\n  const rootType = column.data_type.toLowerCase().match(/[^(), ]+/)?.[0];\n\n  switch (rootType) {\n    case 'int': {\n      if (column.column_key === 'PRI') {\n        return { type: 'increments', args: [{ primary: true, primaryKey: true }], unsigned: false };\n      }\n\n      return { type: 'integer' };\n    }\n    case 'decimal': {\n      return { type: 'decimal', args: [10, 2] };\n    }\n    case 'double': {\n      return { type: 'double' };\n    }\n    case 'bigint': {\n      return { type: 'bigInteger' };\n    }\n    case 'enum': {\n      return { type: 'string' };\n    }\n    case 'tinyint': {\n      return { type: 'boolean' };\n    }\n    case 'longtext': {\n      return { type: 'text', args: ['longtext'] };\n    }\n    case 'varchar': {\n      return { type: 'string', args: [column.character_maximum_length] };\n    }\n    case 'datetime': {\n      return { type: 'datetime', args: [{ useTz: false, precision: 6 }] };\n    }\n    case 'date': {\n      return { type: 'date' };\n    }\n    case 'time': {\n      return { type: 'time', args: [{ precision: 3 }] };\n    }\n    case 'timestamp': {\n      return { type: 'timestamp', args: [{ useTz: false, precision: 6 }] };\n    }\n    case 'json': {\n      return { type: 'jsonb' };\n    }\n    default: {\n      return { type: 'specificType', args: [column.data_type] };\n    }\n  }\n};\n\nexport default class MysqlSchemaInspector implements SchemaInspector {\n  db: Database;\n\n  constructor(db: Database) {\n    this.db = db;\n  }\n\n  async getSchema() {\n    const schema: Schema = { tables: [] };\n\n    const tables = await this.getTables();\n\n    schema.tables = await Promise.all(\n      tables.map(async (tableName) => {\n        const columns = await this.getColumns(tableName);\n        const indexes = await this.getIndexes(tableName);\n        const foreignKeys = await this.getForeignKeys(tableName);\n\n        return {\n          name: tableName,\n          columns,\n          indexes,\n          foreignKeys,\n        };\n      })\n    );\n\n    return schema;\n  }\n\n  async getTables(): Promise<string[]> {\n    const [rows] = await this.db.connection.raw<[RawTable[]]>(SQL_QUERIES.TABLE_LIST);\n\n    return rows.map((row) => row.table_name);\n  }\n\n  async getColumns(tableName: string): Promise<Column[]> {\n    const [rows] = await this.db.connection.raw<[RawColumn[]]>(SQL_QUERIES.LIST_COLUMNS, [\n      tableName,\n    ]);\n\n    return rows.map((row) => {\n      const { type, args = [], ...rest } = toStrapiType(row);\n\n      return {\n        type,\n        args,\n        defaultTo: row.column_default,\n        name: row.column_name,\n        notNullable: row.is_nullable === 'NO',\n        unsigned: row.column_type.endsWith(' unsigned'),\n        ...rest,\n      };\n    });\n  }\n\n  async getIndexes(tableName: string): Promise<Index[]> {\n    const [rows] = await this.db.connection.raw<[RawIndex[]]>(SQL_QUERIES.INDEX_LIST, [tableName]);\n\n    const ret: Record<RawIndex['Key_name'], Index> = {};\n\n    for (const index of rows) {\n      if (index.Column_name === 'id') {\n        continue;\n      }\n\n      if (!ret[index.Key_name]) {\n        const indexInfo: Index = {\n          columns: [index.Column_name],\n          name: index.Key_name,\n        };\n        if (!index.Non_unique || index.Non_unique === '0') {\n          indexInfo.type = 'unique';\n        }\n\n        ret[index.Key_name] = indexInfo;\n      } else {\n        ret[index.Key_name].columns.push(index.Column_name);\n      }\n    }\n\n    return Object.values(ret);\n  }\n\n  async getForeignKeys(tableName: string): Promise<ForeignKey[]> {\n    const [rows] = await this.db.connection.raw<[RawForeignKey[]]>(SQL_QUERIES.FOREIGN_KEY_LIST, [\n      tableName,\n    ]);\n\n    const ret: Record<RawForeignKey['constraint_name'], ForeignKey> = {};\n\n    for (const fk of rows) {\n      ret[fk.constraint_name] = {\n        name: fk.constraint_name,\n        columns: [],\n        referencedColumns: [],\n        referencedTable: null,\n        onUpdate: null,\n        onDelete: null,\n      } as unknown as ForeignKey;\n    }\n\n    const contraintNames = Object.keys(ret);\n\n    if (contraintNames.length > 0) {\n      const [fkReferences] = await this.db.connection.raw(SQL_QUERIES.FOREIGN_KEY_REFERENCES, [\n        contraintNames,\n        tableName,\n      ]);\n\n      for (const fkReference of fkReferences) {\n        ret[fkReference.constraint_name].referencedTable = fkReference.referenced_table_name;\n        ret[fkReference.constraint_name].columns.push(fkReference.column_name);\n        ret[fkReference.constraint_name].referencedColumns.push(fkReference.referenced_column_name);\n      }\n\n      const [fkReferentialConstraints] = await this.db.connection.raw(\n        SQL_QUERIES.FOREIGN_KEY_REFERENTIALS_CONSTRAINTS,\n        [contraintNames, tableName]\n      );\n\n      for (const fkReferentialConstraint of fkReferentialConstraints) {\n        ret[fkReferentialConstraint.constraint_name].onUpdate =\n          fkReferentialConstraint.on_update.toUpperCase();\n        ret[fkReferentialConstraint.constraint_name].onDelete =\n          fkReferentialConstraint.on_delete.toUpperCase();\n      }\n    }\n\n    return Object.values(ret);\n  }\n}\n"],"names":["SQL_QUERIES","TABLE_LIST","LIST_COLUMNS","INDEX_LIST","FOREIGN_KEY_LIST","FOREIGN_KEY_REFERENCES","FOREIGN_KEY_REFERENTIALS_CONSTRAINTS","toStrapiType","column","rootType","data_type","toLowerCase","match","column_key","type","args","primary","primaryKey","unsigned","character_maximum_length","useTz","precision","MysqlSchemaInspector","getSchema","schema","tables","getTables","Promise","all","map","tableName","columns","getColumns","indexes","getIndexes","foreignKeys","getForeignKeys","name","rows","db","connection","raw","row","table_name","rest","defaultTo","column_default","column_name","notNullable","is_nullable","column_type","endsWith","ret","index","Column_name","Key_name","indexInfo","Non_unique","push","Object","values","fk","constraint_name","referencedColumns","referencedTable","onUpdate","onDelete","contraintNames","keys","length","fkReferences","fkReference","referenced_table_name","referenced_column_name","fkReferentialConstraints","fkReferentialConstraint","on_update","toUpperCase","on_delete","constructor"],"mappings":"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"}