{"version":3,"file":"schema-inspector.js","sources":["../../../src/dialects/postgresql/schema-inspector.ts"],"sourcesContent":["import type { Database } from '../..';\nimport type { Schema, Column, Index, ForeignKey } from '../../schema/types';\nimport type { SchemaInspector } from '../dialect';\n\ninterface RawTable {\n  table_name: string;\n}\n\ninterface RawColumn {\n  data_type: string;\n  column_name: string;\n  character_maximum_length: number;\n  column_default: string;\n  is_nullable: string;\n}\n\ninterface RawIndex {\n  indexrelid: string;\n  index_name: string;\n  column_name: string;\n  is_unique: boolean;\n  is_primary: boolean;\n}\n\ninterface RawForeignKey {\n  constraint_name: string;\n}\n\nconst SQL_QUERIES = {\n  TABLE_LIST: /* sql */ `\n    SELECT *\n    FROM information_schema.tables\n    WHERE\n      table_schema = ?\n      AND table_type = 'BASE TABLE'\n      AND table_name != 'geometry_columns'\n      AND table_name != 'spatial_ref_sys';\n  `,\n  LIST_COLUMNS: /* sql */ `\n    SELECT data_type, column_name, character_maximum_length, column_default, is_nullable\n    FROM information_schema.columns\n    WHERE table_schema = ? AND table_name = ?;\n  `,\n  INDEX_LIST: /* sql */ `\n    SELECT\n      ix.indexrelid,\n      i.relname as index_name,\n      a.attname as column_name,\n      ix.indisunique as is_unique,\n      ix.indisprimary as is_primary\n    FROM\n      pg_class t,\n      pg_namespace s,\n      pg_class i,\n      pg_index ix,\n      pg_attribute a\n    WHERE\n      t.oid = ix.indrelid\n      AND i.oid = ix.indexrelid\n      AND a.attrelid = t.oid\n      AND a.attnum = ANY(ix.indkey)\n      AND t.relkind = 'r'\n      AND t.relnamespace = s.oid\n      AND s.nspname = ?\n      AND t.relname = ?;\n  `,\n  FOREIGN_KEY_LIST: /* sql */ `\n    SELECT\n      tco.\"constraint_name\" as constraint_name\n    FROM information_schema.table_constraints tco\n    WHERE\n      tco.constraint_type = 'FOREIGN KEY'\n      AND tco.constraint_schema = ?\n      AND tco.table_name = ?\n  `,\n  FOREIGN_KEY_REFERENCES: /* sql */ `\n    SELECT\n      kcu.\"constraint_name\" as constraint_name,\n      kcu.\"column_name\" as column_name\n\n    FROM information_schema.key_column_usage kcu\n    WHERE kcu.constraint_name=ANY(?)\n    AND kcu.table_schema = ?\n    AND kcu.table_name = ?;\n  `,\n\n  FOREIGN_KEY_REFERENCES_CONSTRAIN: /* sql */ `\n  SELECT\n  rco.update_rule as on_update,\n  rco.delete_rule as on_delete,\n  rco.\"unique_constraint_name\" as unique_constraint_name\n  FROM information_schema.referential_constraints rco\n  WHERE rco.constraint_name=ANY(?)\n  AND rco.constraint_schema = ?\n`,\n  FOREIGN_KEY_REFERENCES_CONSTRAIN_RFERENCE: /* sql */ `\n  SELECT\n  rel_kcu.\"table_name\" as foreign_table,\n  rel_kcu.\"column_name\" as fk_column_name\n    FROM information_schema.key_column_usage rel_kcu\n    WHERE rel_kcu.constraint_name=?\n    AND rel_kcu.table_schema = ?\n`,\n};\n\nconst toStrapiType = (column: RawColumn) => {\n  const rootType = column.data_type.toLowerCase().match(/[^(), ]+/)?.[0];\n\n  switch (rootType) {\n    case 'integer': {\n      // find a way to figure out the increments\n      return { type: 'integer' };\n    }\n    case 'text': {\n      return { type: 'text', args: ['longtext'] };\n    }\n    case 'boolean': {\n      return { type: 'boolean' };\n    }\n    case 'character': {\n      return { type: 'string', args: [column.character_maximum_length] };\n    }\n    case 'timestamp': {\n      return { type: 'datetime', args: [{ useTz: false, precision: 6 }] };\n    }\n    case 'date': {\n      return { type: 'date' };\n    }\n    case 'time': {\n      return { type: 'time', args: [{ precision: 3 }] };\n    }\n    case 'numeric': {\n      return { type: 'decimal', args: [10, 2] };\n    }\n    case 'real':\n    case 'double': {\n      return { type: 'double' };\n    }\n    case 'bigint': {\n      return { type: 'bigInteger' };\n    }\n    case 'jsonb': {\n      return { type: 'jsonb' };\n    }\n    default: {\n      return { type: 'specificType', args: [column.data_type] };\n    }\n  }\n};\n\nconst getIndexType = (index: RawIndex) => {\n  if (index.is_primary) {\n    return 'primary';\n  }\n\n  if (index.is_unique) {\n    return 'unique';\n  }\n};\n\nexport default class PostgresqlSchemaInspector implements SchemaInspector {\n  db: Database;\n\n  constructor(db: Database) {\n    this.db = db;\n  }\n\n  async getSchema() {\n    const schema: Schema = { tables: [] };\n\n    const tables = await this.getTables();\n\n    schema.tables = await Promise.all(\n      tables.map(async (tableName) => {\n        const columns = await this.getColumns(tableName);\n        const indexes = await this.getIndexes(tableName);\n        const foreignKeys = await this.getForeignKeys(tableName);\n\n        return {\n          name: tableName,\n          columns,\n          indexes,\n          foreignKeys,\n        };\n      })\n    );\n\n    return schema;\n  }\n\n  getDatabaseSchema(): string {\n    return this.db.getSchemaName() || 'public';\n  }\n\n  async getTables(): Promise<string[]> {\n    const { rows } = await this.db.connection.raw<{ rows: RawTable[] }>(SQL_QUERIES.TABLE_LIST, [\n      this.getDatabaseSchema(),\n    ]);\n\n    return rows.map((row) => row.table_name);\n  }\n\n  async getColumns(tableName: string): Promise<Column[]> {\n    const { rows } = await this.db.connection.raw<{ rows: RawColumn[] }>(SQL_QUERIES.LIST_COLUMNS, [\n      this.getDatabaseSchema(),\n      tableName,\n    ]);\n\n    return rows.map((row) => {\n      const { type, args = [], ...rest } = toStrapiType(row);\n\n      const defaultTo =\n        row.column_default && row.column_default.includes('nextval(') ? null : row.column_default;\n\n      return {\n        type,\n        args,\n        defaultTo,\n        name: row.column_name,\n        notNullable: row.is_nullable === 'NO',\n        unsigned: false,\n        ...rest,\n      };\n    });\n  }\n\n  async getIndexes(tableName: string): Promise<Index[]> {\n    const { rows } = await this.db.connection.raw<{ rows: RawIndex[] }>(SQL_QUERIES.INDEX_LIST, [\n      this.getDatabaseSchema(),\n      tableName,\n    ]);\n\n    const ret: Record<RawIndex['indexrelid'], Index> = {};\n\n    for (const index of rows) {\n      if (index.column_name === 'id') {\n        continue;\n      }\n\n      if (!ret[index.indexrelid]) {\n        ret[index.indexrelid] = {\n          columns: [index.column_name],\n          name: index.index_name,\n          type: getIndexType(index),\n        };\n      } else {\n        ret[index.indexrelid].columns.push(index.column_name);\n      }\n    }\n\n    return Object.values(ret);\n  }\n\n  async getForeignKeys(tableName: string): Promise<ForeignKey[]> {\n    const { rows } = await this.db.connection.raw<{ rows: RawForeignKey[] }>(\n      SQL_QUERIES.FOREIGN_KEY_LIST,\n      [this.getDatabaseSchema(), tableName]\n    );\n\n    const ret: Record<RawForeignKey['constraint_name'], ForeignKey> = {};\n\n    for (const fk of rows) {\n      ret[fk.constraint_name] = {\n        name: fk.constraint_name,\n        columns: [],\n        referencedColumns: [],\n        referencedTable: null,\n        onUpdate: null,\n        onDelete: null,\n      } as unknown as ForeignKey;\n    }\n\n    const constraintNames = Object.keys(ret);\n    const dbSchema = this.getDatabaseSchema();\n    if (constraintNames.length > 0) {\n      const { rows: fkReferences } = await this.db.connection.raw(\n        SQL_QUERIES.FOREIGN_KEY_REFERENCES,\n        [[constraintNames], dbSchema, tableName]\n      );\n\n      for (const fkReference of fkReferences) {\n        ret[fkReference.constraint_name].columns.push(fkReference.column_name);\n\n        const { rows: fkReferencesConstraint } = await this.db.connection.raw(\n          SQL_QUERIES.FOREIGN_KEY_REFERENCES_CONSTRAIN,\n          [[fkReference.constraint_name], dbSchema]\n        );\n\n        for (const fkReferenceC of fkReferencesConstraint) {\n          const { rows: fkReferencesConstraintReferece } = await this.db.connection.raw(\n            SQL_QUERIES.FOREIGN_KEY_REFERENCES_CONSTRAIN_RFERENCE,\n            [fkReferenceC.unique_constraint_name, dbSchema]\n          );\n          for (const fkReferenceConst of fkReferencesConstraintReferece) {\n            ret[fkReference.constraint_name].referencedTable = fkReferenceConst.foreign_table;\n            ret[fkReference.constraint_name].referencedColumns.push(\n              fkReferenceConst.fk_column_name\n            );\n          }\n          ret[fkReference.constraint_name].onUpdate = fkReferenceC.on_update.toUpperCase();\n          ret[fkReference.constraint_name].onDelete = fkReferenceC.on_delete.toUpperCase();\n        }\n      }\n    }\n\n    return Object.values(ret);\n  }\n}\n"],"names":["SQL_QUERIES","TABLE_LIST","LIST_COLUMNS","INDEX_LIST","FOREIGN_KEY_LIST","FOREIGN_KEY_REFERENCES","FOREIGN_KEY_REFERENCES_CONSTRAIN","FOREIGN_KEY_REFERENCES_CONSTRAIN_RFERENCE","toStrapiType","column","rootType","data_type","toLowerCase","match","type","args","character_maximum_length","useTz","precision","getIndexType","index","is_primary","is_unique","PostgresqlSchemaInspector","getSchema","schema","tables","getTables","Promise","all","map","tableName","columns","getColumns","indexes","getIndexes","foreignKeys","getForeignKeys","name","getDatabaseSchema","db","getSchemaName","rows","connection","raw","row","table_name","rest","defaultTo","column_default","includes","column_name","notNullable","is_nullable","unsigned","ret","indexrelid","index_name","push","Object","values","fk","constraint_name","referencedColumns","referencedTable","onUpdate","onDelete","constraintNames","keys","dbSchema","length","fkReferences","fkReference","fkReferencesConstraint","fkReferenceC","fkReferencesConstraintReferece","unique_constraint_name","fkReferenceConst","foreign_table","fk_column_name","on_update","toUpperCase","on_delete","constructor"],"mappings":"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"}