{"version":3,"file":"schema-inspector.mjs","sources":["../../../src/dialects/sqlite/schema-inspector.ts"],"sourcesContent":["import type { Database } from '../..';\nimport type { Schema, Column, Index, ForeignKey } from '../../schema/types';\nimport type { SchemaInspector } from '../dialect';\n\nconst SQL_QUERIES = {\n  TABLE_LIST: `select name from sqlite_master where type = 'table' and name NOT LIKE 'sqlite%'`,\n  TABLE_INFO: `pragma table_info(??)`,\n  INDEX_LIST: 'pragma index_list(??)',\n  INDEX_INFO: 'pragma index_info(??)',\n  FOREIGN_KEY_LIST: 'pragma foreign_key_list(??)',\n};\n\ninterface RawTable {\n  name: string;\n}\ninterface RawColumn {\n  type: string;\n  args?: unknown[];\n  name: string;\n  defaultTo?: unknown;\n  notNullable?: boolean;\n  unsigned?: boolean;\n  unique?: boolean;\n  primary?: boolean;\n  pk?: boolean;\n  foreign?: {\n    table: string;\n    column: string;\n    onUpdate: string;\n    onDelete: string;\n  };\n  data_type?: string;\n  dflt_value?: unknown;\n  notnull?: boolean;\n}\n\ninterface RawIndex {\n  name: string;\n  unique: boolean;\n}\n\ninterface RawIndexInfo {\n  name: string;\n}\n\ninterface RawForeignKey {\n  id: number;\n  seq: number;\n  table: string;\n  from: string;\n  to: string;\n  on_update: string;\n  on_delete: string;\n}\n\nconst toStrapiType = (column: RawColumn) => {\n  const { type } = column;\n\n  const rootType = type.toLowerCase().match(/[^(), ]+/)?.[0];\n\n  switch (rootType) {\n    case 'integer': {\n      if (column.pk) {\n        return { type: 'increments', args: [{ primary: true, primaryKey: true }] };\n      }\n\n      return { type: 'integer' };\n    }\n    case 'float': {\n      return { type: 'float', args: [10, 2] };\n    }\n    case 'bigint': {\n      return { type: 'bigInteger' };\n    }\n    case 'varchar': {\n      const length = type.slice(8, type.length - 1);\n\n      return { type: 'string', args: [Number(length)] };\n    }\n    case 'text': {\n      return { type: 'text', args: ['longtext'] };\n    }\n    case 'json': {\n      return { type: 'jsonb' };\n    }\n    case 'boolean': {\n      return { type: 'boolean' };\n    }\n    case 'datetime': {\n      return { type: 'datetime', args: [{ useTz: false, precision: 6 }] };\n    }\n    case 'date': {\n      return { type: 'date' };\n    }\n    case 'time': {\n      return { type: 'time', args: [{ precision: 3 }] };\n    }\n    default: {\n      return { type: 'specificType', args: [column.data_type] };\n    }\n  }\n};\n\nexport default class SqliteSchemaInspector implements SchemaInspector {\n  db: Database;\n\n  constructor(db: Database) {\n    this.db = db;\n  }\n\n  async getSchema() {\n    const schema: Schema = { tables: [] };\n    const tables = await this.getTables();\n\n    for (const tableName of tables) {\n      const columns = await this.getColumns(tableName);\n      const indexes = await this.getIndexes(tableName);\n      const foreignKeys = await this.getForeignKeys(tableName);\n\n      schema.tables.push({\n        name: tableName,\n        columns,\n        indexes,\n        foreignKeys,\n      });\n    }\n\n    return schema;\n  }\n\n  async getTables(): Promise<string[]> {\n    const rows = await this.db.connection.raw<RawTable[]>(SQL_QUERIES.TABLE_LIST);\n\n    return rows.map((row) => row.name);\n  }\n\n  async getColumns(tableName: string): Promise<Column[]> {\n    const rows = await this.db.connection.raw<RawColumn[]>(SQL_QUERIES.TABLE_INFO, [tableName]);\n\n    return rows.map((row) => {\n      const { type, args = [], ...rest } = toStrapiType(row);\n\n      return {\n        type,\n        args,\n        name: row.name,\n        defaultTo: row.dflt_value,\n        notNullable: row.notnull !== null ? Boolean(row.notnull) : null,\n        unsigned: false,\n        ...rest,\n      };\n    });\n  }\n\n  async getIndexes(tableName: string): Promise<Index[]> {\n    const indexes = await this.db.connection.raw<RawIndex[]>(SQL_QUERIES.INDEX_LIST, [tableName]);\n\n    const ret: Index[] = [];\n\n    for (const index of indexes.filter((index) => !index.name.startsWith('sqlite_'))) {\n      const res = await this.db.connection.raw<RawIndexInfo[]>(SQL_QUERIES.INDEX_INFO, [\n        index.name,\n      ]);\n\n      const indexInfo: Index = {\n        columns: res.map((row) => row.name),\n        name: index.name,\n      };\n\n      if (index.unique) {\n        indexInfo.type = 'unique';\n      }\n\n      ret.push(indexInfo);\n    }\n\n    return ret;\n  }\n\n  async getForeignKeys(tableName: string): Promise<ForeignKey[]> {\n    const fks = await this.db.connection.raw<RawForeignKey[]>(SQL_QUERIES.FOREIGN_KEY_LIST, [\n      tableName,\n    ]);\n\n    const ret: Record<RawForeignKey['id'], ForeignKey> = {};\n\n    for (const fk of fks) {\n      if (!ret[fk.id]) {\n        ret[fk.id] = {\n          // TODO: name, //  find name\n          name: '',\n          columns: [fk.from],\n          referencedColumns: [fk.to],\n          referencedTable: fk.table,\n          onUpdate: fk.on_update.toUpperCase(),\n          onDelete: fk.on_delete.toUpperCase(),\n        };\n      } else {\n        ret[fk.id].columns.push(fk.from);\n        ret[fk.id].referencedColumns.push(fk.to);\n      }\n    }\n\n    return Object.values(ret);\n  }\n}\n"],"names":["SQL_QUERIES","TABLE_LIST","TABLE_INFO","INDEX_LIST","INDEX_INFO","FOREIGN_KEY_LIST","toStrapiType","column","type","rootType","toLowerCase","match","pk","args","primary","primaryKey","length","slice","Number","useTz","precision","data_type","SqliteSchemaInspector","getSchema","schema","tables","getTables","tableName","columns","getColumns","indexes","getIndexes","foreignKeys","getForeignKeys","push","name","rows","db","connection","raw","map","row","rest","defaultTo","dflt_value","notNullable","notnull","Boolean","unsigned","ret","index","filter","startsWith","res","indexInfo","unique","fks","fk","id","from","referencedColumns","to","referencedTable","table","onUpdate","on_update","toUpperCase","onDelete","on_delete","Object","values","constructor"],"mappings":"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"}