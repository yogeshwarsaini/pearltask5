{"version":3,"file":"audit-logs.js","sources":["../../../../../../../ee/server/src/audit-logs/services/audit-logs.ts"],"sourcesContent":["import type { Core } from '@strapi/types';\n\ninterface Event {\n  action: string;\n  date: Date;\n  userId: string | number;\n  payload: Record<string, unknown>;\n}\n\ninterface Log extends Omit<Event, 'userId'> {\n  user: string | number;\n}\n\nconst getSanitizedUser = (user: any) => {\n  let displayName = user.email;\n\n  if (user.username) {\n    displayName = user.username;\n  } else if (user.firstname && user.lastname) {\n    displayName = `${user.firstname} ${user.lastname}`;\n  }\n\n  return {\n    id: user.id,\n    email: user.email,\n    displayName,\n  };\n};\n\n/**\n * @description\n * Manages audit logs interaction with the database. Accessible via strapi.get('audit-logs')\n */\nconst createAuditLogsService = (strapi: Core.Strapi) => {\n  return {\n    async saveEvent(event: Event) {\n      const { userId, ...rest } = event;\n\n      const auditLog: Log = { ...rest, user: userId };\n\n      // Save to database\n      await strapi.db?.query('admin::audit-log').create({ data: auditLog });\n\n      return this;\n    },\n\n    async findMany(query: unknown) {\n      const { results, pagination } = await strapi.db?.query('admin::audit-log').findPage({\n        populate: ['user'],\n        select: ['action', 'date', 'payload'],\n        ...strapi.get('query-params').transform('admin::audit-log', query),\n      });\n\n      const sanitizedResults = results.map((result: any) => {\n        const { user, ...rest } = result;\n        return {\n          ...rest,\n          user: user ? getSanitizedUser(user) : null,\n        };\n      });\n\n      return {\n        results: sanitizedResults,\n        pagination,\n      };\n    },\n\n    async findOne(id: unknown) {\n      const result: any = await strapi.db?.query('admin::audit-log').findOne({\n        where: { id },\n        populate: ['user'],\n        select: ['action', 'date', 'payload'],\n      });\n\n      if (!result) {\n        return null;\n      }\n\n      const { user, ...rest } = result;\n      return {\n        ...rest,\n        user: user ? getSanitizedUser(user) : null,\n      };\n    },\n\n    deleteExpiredEvents(expirationDate: Date) {\n      return strapi.db?.query('admin::audit-log').deleteMany({\n        where: {\n          date: {\n            $lt: expirationDate.toISOString(),\n          },\n        },\n      });\n    },\n  };\n};\n\nexport { createAuditLogsService };\n"],"names":["getSanitizedUser","user","displayName","email","username","firstname","lastname","id","createAuditLogsService","strapi","saveEvent","event","userId","rest","auditLog","db","query","create","data","findMany","results","pagination","findPage","populate","select","get","transform","sanitizedResults","map","result","findOne","where","deleteExpiredEvents","expirationDate","deleteMany","date","$lt","toISOString"],"mappings":"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"}