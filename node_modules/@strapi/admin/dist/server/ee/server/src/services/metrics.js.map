{"version":3,"file":"metrics.js","sources":["../../../../../../ee/server/src/services/metrics.ts"],"sourcesContent":["import { assign } from 'lodash/fp';\nimport type { Core } from '@strapi/types';\nimport { getService } from '../utils';\n\nconst getSSOProvidersList = async () => {\n  const { providerRegistry } = strapi.service('admin::passport');\n\n  return providerRegistry.getAll().map(({ uid }: { uid: string }) => uid);\n};\n\nconst sendUpdateProjectInformation = async (strapi: Core.Strapi) => {\n  let groupProperties = {};\n\n  const numberOfActiveAdminUsers = await getService('user').count({ isActive: true });\n  const numberOfAdminUsers = await getService('user').count();\n\n  if (strapi.ee.features.isEnabled('sso')) {\n    const SSOProviders = await getSSOProvidersList();\n\n    groupProperties = assign(groupProperties, {\n      SSOProviders,\n      isSSOConfigured: SSOProviders.length !== 0,\n    });\n  }\n\n  if (strapi.ee.features.isEnabled('cms-content-releases')) {\n    const numberOfContentReleases = await strapi\n      .db!.query('plugin::content-releases.release')\n      .count();\n\n    const numberOfPublishedContentReleases = await strapi\n      .db!.query('plugin::content-releases.release')\n      .count({\n        filters: { releasedAt: { $notNull: true } },\n      });\n\n    groupProperties = assign(groupProperties, {\n      numberOfContentReleases,\n      numberOfPublishedContentReleases,\n    });\n  }\n\n  groupProperties = assign(groupProperties, { numberOfActiveAdminUsers, numberOfAdminUsers });\n\n  strapi.telemetry.send('didUpdateProjectInformation', {\n    groupProperties,\n  });\n};\n\nconst startCron = (strapi: Core.Strapi) => {\n  strapi.cron.add({\n    sendProjectInformation: {\n      task: () => sendUpdateProjectInformation(strapi),\n      options: '0 0 0 * * *',\n    },\n  });\n};\n\nexport default { startCron, getSSOProvidersList, sendUpdateProjectInformation };\n"],"names":["getSSOProvidersList","providerRegistry","strapi","service","getAll","map","uid","sendUpdateProjectInformation","groupProperties","numberOfActiveAdminUsers","getService","count","isActive","numberOfAdminUsers","ee","features","isEnabled","SSOProviders","assign","isSSOConfigured","length","numberOfContentReleases","db","query","numberOfPublishedContentReleases","filters","releasedAt","$notNull","telemetry","send","startCron","cron","add","sendProjectInformation","task","options"],"mappings":";;;;;AAIA,MAAMA,mBAAsB,GAAA,UAAA;AAC1B,IAAA,MAAM,EAAEC,gBAAgB,EAAE,GAAGC,MAAAA,CAAOC,OAAO,CAAC,iBAAA,CAAA;IAE5C,OAAOF,gBAAAA,CAAiBG,MAAM,EAAGC,CAAAA,GAAG,CAAC,CAAC,EAAEC,GAAG,EAAmB,GAAKA,GAAAA,CAAAA;AACrE,CAAA;AAEA,MAAMC,+BAA+B,OAAOL,OAAAA,GAAAA;AAC1C,IAAA,IAAIM,kBAAkB,EAAC;AAEvB,IAAA,MAAMC,wBAA2B,GAAA,MAAMC,gBAAW,CAAA,MAAA,CAAA,CAAQC,KAAK,CAAC;QAAEC,QAAU,EAAA;AAAK,KAAA,CAAA;AACjF,IAAA,MAAMC,kBAAqB,GAAA,MAAMH,gBAAW,CAAA,MAAA,CAAA,CAAQC,KAAK,EAAA;AAEzD,IAAA,IAAIT,QAAOY,EAAE,CAACC,QAAQ,CAACC,SAAS,CAAC,KAAQ,CAAA,EAAA;AACvC,QAAA,MAAMC,eAAe,MAAMjB,mBAAAA,EAAAA;AAE3BQ,QAAAA,eAAAA,GAAkBU,UAAOV,eAAiB,EAAA;AACxCS,YAAAA,YAAAA;YACAE,eAAiBF,EAAAA,YAAAA,CAAaG,MAAM,KAAK;AAC3C,SAAA,CAAA;AACF;AAEA,IAAA,IAAIlB,QAAOY,EAAE,CAACC,QAAQ,CAACC,SAAS,CAAC,sBAAyB,CAAA,EAAA;QACxD,MAAMK,uBAAAA,GAA0B,MAAMnB,OACnCoB,CAAAA,EAAE,CAAEC,KAAK,CAAC,oCACVZ,KAAK,EAAA;QAER,MAAMa,gCAAAA,GAAmC,MAAMtB,OAC5CoB,CAAAA,EAAE,CAAEC,KAAK,CAAC,kCACVZ,CAAAA,CAAAA,KAAK,CAAC;YACLc,OAAS,EAAA;gBAAEC,UAAY,EAAA;oBAAEC,QAAU,EAAA;AAAK;AAAE;AAC5C,SAAA,CAAA;AAEFnB,QAAAA,eAAAA,GAAkBU,UAAOV,eAAiB,EAAA;AACxCa,YAAAA,uBAAAA;AACAG,YAAAA;AACF,SAAA,CAAA;AACF;AAEAhB,IAAAA,eAAAA,GAAkBU,UAAOV,eAAiB,EAAA;AAAEC,QAAAA,wBAAAA;AAA0BI,QAAAA;AAAmB,KAAA,CAAA;AAEzFX,IAAAA,OAAAA,CAAO0B,SAAS,CAACC,IAAI,CAAC,6BAA+B,EAAA;AACnDrB,QAAAA;AACF,KAAA,CAAA;AACF,CAAA;AAEA,MAAMsB,YAAY,CAAC5B,OAAAA,GAAAA;IACjBA,OAAO6B,CAAAA,IAAI,CAACC,GAAG,CAAC;QACdC,sBAAwB,EAAA;AACtBC,YAAAA,IAAAA,EAAM,IAAM3B,4BAA6BL,CAAAA,OAAAA,CAAAA;YACzCiC,OAAS,EAAA;AACX;AACF,KAAA,CAAA;AACF,CAAA;AAEA,cAAe;AAAEL,IAAAA,SAAAA;AAAW9B,IAAAA,mBAAAA;AAAqBO,IAAAA;AAA6B,CAAE;;;;"}