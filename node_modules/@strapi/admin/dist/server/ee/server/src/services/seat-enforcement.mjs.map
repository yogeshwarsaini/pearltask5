{"version":3,"file":"seat-enforcement.mjs","sources":["../../../../../../ee/server/src/services/seat-enforcement.ts"],"sourcesContent":["import { take, drop, map, prop, pick, reverse, isNil } from 'lodash/fp';\nimport { getService } from '../utils';\nimport constants from '../../../../server/src/services/constants';\n\nconst { SUPER_ADMIN_CODE } = constants;\n\n/**\n * Keeps the list of users disabled by the seat enforcement service\n */\nconst getDisabledUserList = async () => {\n  return strapi.store.get({ type: 'ee', key: 'disabled_users' });\n};\n\nconst enableMaximumUserCount = async (numberOfUsersToEnable: number) => {\n  const disabledUsers = (await getDisabledUserList()) as any;\n  const orderedDisabledUsers = reverse(disabledUsers);\n\n  const usersToEnable = take(numberOfUsersToEnable, orderedDisabledUsers);\n\n  await strapi.db.query('admin::user').updateMany({\n    where: { id: map(prop('id'), usersToEnable) },\n    data: { isActive: true },\n  });\n\n  const remainingDisabledUsers = drop(numberOfUsersToEnable, orderedDisabledUsers);\n\n  await strapi.store.set({\n    type: 'ee',\n    key: 'disabled_users',\n    value: remainingDisabledUsers,\n  });\n};\n\nconst disableUsersAboveLicenseLimit = async (numberOfUsersToDisable: number) => {\n  const currentlyDisabledUsers: any = (await getDisabledUserList()) ?? [];\n\n  const usersToDisable = [];\n  const nonSuperAdminUsersToDisable = await strapi.db.query('admin::user').findMany({\n    where: {\n      isActive: true,\n      roles: {\n        code: { $ne: SUPER_ADMIN_CODE },\n      },\n    },\n    orderBy: { createdAt: 'DESC' },\n    limit: numberOfUsersToDisable,\n  });\n\n  usersToDisable.push(...nonSuperAdminUsersToDisable);\n\n  if (nonSuperAdminUsersToDisable.length < numberOfUsersToDisable) {\n    const superAdminUsersToDisable = await strapi.db.query('admin::user').findMany({\n      where: {\n        isActive: true,\n        roles: { code: SUPER_ADMIN_CODE },\n      },\n      orderBy: { createdAt: 'DESC' },\n      limit: numberOfUsersToDisable - nonSuperAdminUsersToDisable.length,\n    });\n\n    usersToDisable.push(...superAdminUsersToDisable);\n  }\n\n  await strapi.db.query('admin::user').updateMany({\n    where: { id: map(prop('id'), usersToDisable) },\n    data: { isActive: false },\n  });\n\n  await strapi.store.set({\n    type: 'ee',\n    key: 'disabled_users',\n    value: currentlyDisabledUsers.concat(map(pick(['id', 'isActive']), usersToDisable)),\n  });\n};\n\nconst syncDisabledUserRecords = async () => {\n  const disabledUsers = await strapi.store.get({ type: 'ee', key: 'disabled_users' });\n\n  if (!disabledUsers) {\n    return;\n  }\n\n  await strapi.db.query('admin::user').updateMany({\n    where: { id: map(prop('id'), disabledUsers) },\n    data: { isActive: false },\n  });\n};\n\nconst seatEnforcementWorkflow = async () => {\n  const adminSeats = strapi.ee.seats;\n  if (isNil(adminSeats)) {\n    return;\n  }\n\n  // TODO: we need to make sure an admin can decide to disable specific user and reactivate others\n  await syncDisabledUserRecords();\n\n  const currentActiveUserCount = await getService('user').getCurrentActiveUserCount();\n\n  const adminSeatsLeft = adminSeats - currentActiveUserCount;\n\n  if (adminSeatsLeft > 0) {\n    await enableMaximumUserCount(adminSeatsLeft);\n  } else if (adminSeatsLeft < 0) {\n    await disableUsersAboveLicenseLimit(-adminSeatsLeft);\n  }\n};\n\nexport default {\n  seatEnforcementWorkflow,\n  getDisabledUserList,\n};\n"],"names":["SUPER_ADMIN_CODE","constants","getDisabledUserList","strapi","store","get","type","key","enableMaximumUserCount","numberOfUsersToEnable","disabledUsers","orderedDisabledUsers","reverse","usersToEnable","take","db","query","updateMany","where","id","map","prop","data","isActive","remainingDisabledUsers","drop","set","value","disableUsersAboveLicenseLimit","numberOfUsersToDisable","currentlyDisabledUsers","usersToDisable","nonSuperAdminUsersToDisable","findMany","roles","code","$ne","orderBy","createdAt","limit","push","length","superAdminUsersToDisable","concat","pick","syncDisabledUserRecords","seatEnforcementWorkflow","adminSeats","ee","seats","isNil","currentActiveUserCount","getService","getCurrentActiveUserCount","adminSeatsLeft"],"mappings":";;;;AAIA,MAAM,EAAEA,gBAAgB,EAAE,GAAGC,SAAAA;AAE7B;;AAEC,IACD,MAAMC,mBAAsB,GAAA,UAAA;AAC1B,IAAA,OAAOC,MAAOC,CAAAA,KAAK,CAACC,GAAG,CAAC;QAAEC,IAAM,EAAA,IAAA;QAAMC,GAAK,EAAA;AAAiB,KAAA,CAAA;AAC9D,CAAA;AAEA,MAAMC,yBAAyB,OAAOC,qBAAAA,GAAAA;AACpC,IAAA,MAAMC,gBAAiB,MAAMR,mBAAAA,EAAAA;AAC7B,IAAA,MAAMS,uBAAuBC,OAAQF,CAAAA,aAAAA,CAAAA;IAErC,MAAMG,aAAAA,GAAgBC,KAAKL,qBAAuBE,EAAAA,oBAAAA,CAAAA;AAElD,IAAA,MAAMR,OAAOY,EAAE,CAACC,KAAK,CAAC,aAAA,CAAA,CAAeC,UAAU,CAAC;QAC9CC,KAAO,EAAA;YAAEC,EAAIC,EAAAA,GAAAA,CAAIC,KAAK,IAAOR,CAAAA,EAAAA,aAAAA;AAAe,SAAA;QAC5CS,IAAM,EAAA;YAAEC,QAAU,EAAA;AAAK;AACzB,KAAA,CAAA;IAEA,MAAMC,sBAAAA,GAAyBC,KAAKhB,qBAAuBE,EAAAA,oBAAAA,CAAAA;AAE3D,IAAA,MAAMR,MAAOC,CAAAA,KAAK,CAACsB,GAAG,CAAC;QACrBpB,IAAM,EAAA,IAAA;QACNC,GAAK,EAAA,gBAAA;QACLoB,KAAOH,EAAAA;AACT,KAAA,CAAA;AACF,CAAA;AAEA,MAAMI,gCAAgC,OAAOC,sBAAAA,GAAAA;AAC3C,IAAA,MAAMC,sBAA8B,GAAC,MAAM5B,mBAAAA,EAAAA,IAA0B,EAAE;AAEvE,IAAA,MAAM6B,iBAAiB,EAAE;IACzB,MAAMC,2BAAAA,GAA8B,MAAM7B,MAAOY,CAAAA,EAAE,CAACC,KAAK,CAAC,aAAeiB,CAAAA,CAAAA,QAAQ,CAAC;QAChFf,KAAO,EAAA;YACLK,QAAU,EAAA,IAAA;YACVW,KAAO,EAAA;gBACLC,IAAM,EAAA;oBAAEC,GAAKpC,EAAAA;AAAiB;AAChC;AACF,SAAA;QACAqC,OAAS,EAAA;YAAEC,SAAW,EAAA;AAAO,SAAA;QAC7BC,KAAOV,EAAAA;AACT,KAAA,CAAA;AAEAE,IAAAA,cAAAA,CAAeS,IAAI,CAAIR,GAAAA,2BAAAA,CAAAA;IAEvB,IAAIA,2BAAAA,CAA4BS,MAAM,GAAGZ,sBAAwB,EAAA;QAC/D,MAAMa,wBAAAA,GAA2B,MAAMvC,MAAOY,CAAAA,EAAE,CAACC,KAAK,CAAC,aAAeiB,CAAAA,CAAAA,QAAQ,CAAC;YAC7Ef,KAAO,EAAA;gBACLK,QAAU,EAAA,IAAA;gBACVW,KAAO,EAAA;oBAAEC,IAAMnC,EAAAA;AAAiB;AAClC,aAAA;YACAqC,OAAS,EAAA;gBAAEC,SAAW,EAAA;AAAO,aAAA;YAC7BC,KAAOV,EAAAA,sBAAAA,GAAyBG,4BAA4BS;AAC9D,SAAA,CAAA;AAEAV,QAAAA,cAAAA,CAAeS,IAAI,CAAIE,GAAAA,wBAAAA,CAAAA;AACzB;AAEA,IAAA,MAAMvC,OAAOY,EAAE,CAACC,KAAK,CAAC,aAAA,CAAA,CAAeC,UAAU,CAAC;QAC9CC,KAAO,EAAA;YAAEC,EAAIC,EAAAA,GAAAA,CAAIC,KAAK,IAAOU,CAAAA,EAAAA,cAAAA;AAAgB,SAAA;QAC7CT,IAAM,EAAA;YAAEC,QAAU,EAAA;AAAM;AAC1B,KAAA,CAAA;AAEA,IAAA,MAAMpB,MAAOC,CAAAA,KAAK,CAACsB,GAAG,CAAC;QACrBpB,IAAM,EAAA,IAAA;QACNC,GAAK,EAAA,gBAAA;AACLoB,QAAAA,KAAAA,EAAOG,sBAAuBa,CAAAA,MAAM,CAACvB,GAAAA,CAAIwB,IAAK,CAAA;AAAC,YAAA,IAAA;AAAM,YAAA;SAAW,CAAGb,EAAAA,cAAAA,CAAAA;AACrE,KAAA,CAAA;AACF,CAAA;AAEA,MAAMc,uBAA0B,GAAA,UAAA;AAC9B,IAAA,MAAMnC,gBAAgB,MAAMP,MAAAA,CAAOC,KAAK,CAACC,GAAG,CAAC;QAAEC,IAAM,EAAA,IAAA;QAAMC,GAAK,EAAA;AAAiB,KAAA,CAAA;AAEjF,IAAA,IAAI,CAACG,aAAe,EAAA;AAClB,QAAA;AACF;AAEA,IAAA,MAAMP,OAAOY,EAAE,CAACC,KAAK,CAAC,aAAA,CAAA,CAAeC,UAAU,CAAC;QAC9CC,KAAO,EAAA;YAAEC,EAAIC,EAAAA,GAAAA,CAAIC,KAAK,IAAOX,CAAAA,EAAAA,aAAAA;AAAe,SAAA;QAC5CY,IAAM,EAAA;YAAEC,QAAU,EAAA;AAAM;AAC1B,KAAA,CAAA;AACF,CAAA;AAEA,MAAMuB,uBAA0B,GAAA,UAAA;AAC9B,IAAA,MAAMC,UAAa5C,GAAAA,MAAAA,CAAO6C,EAAE,CAACC,KAAK;AAClC,IAAA,IAAIC,MAAMH,UAAa,CAAA,EAAA;AACrB,QAAA;AACF;;IAGA,MAAMF,uBAAAA,EAAAA;AAEN,IAAA,MAAMM,sBAAyB,GAAA,MAAMC,UAAW,CAAA,MAAA,CAAA,CAAQC,yBAAyB,EAAA;AAEjF,IAAA,MAAMC,iBAAiBP,UAAaI,GAAAA,sBAAAA;AAEpC,IAAA,IAAIG,iBAAiB,CAAG,EAAA;AACtB,QAAA,MAAM9C,sBAAuB8C,CAAAA,cAAAA,CAAAA;KACxB,MAAA,IAAIA,iBAAiB,CAAG,EAAA;AAC7B,QAAA,MAAM1B,8BAA8B,CAAC0B,cAAAA,CAAAA;AACvC;AACF,CAAA;AAEA,sBAAe;AACbR,IAAAA,uBAAAA;AACA5C,IAAAA;AACF,CAAE;;;;"}