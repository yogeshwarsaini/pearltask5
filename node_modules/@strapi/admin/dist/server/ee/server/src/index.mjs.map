{"version":3,"file":"index.mjs","sources":["../../../../../ee/server/src/index.ts"],"sourcesContent":["import register from './register';\nimport bootstrap from './bootstrap';\nimport destroy from './destroy';\nimport adminContentTypes from './content-types';\nimport services from './services';\nimport controllers from './controllers';\nimport routes from './routes';\nimport auditLogsRoutes from './audit-logs/routes/audit-logs';\nimport auditLogsController from './audit-logs/controllers/audit-logs';\nimport { createAuditLogsService } from './audit-logs/services/audit-logs';\nimport { createAuditLogsLifecycleService } from './audit-logs/services/lifecycles';\nimport { auditLog } from './audit-logs/content-types/audit-log';\nimport type { Core } from '@strapi/types';\n\nconst getAdminEE = () => {\n  const eeAdmin = {\n    register,\n    bootstrap,\n    destroy,\n    contentTypes: {\n      // Always register the audit-log content type to prevent data loss\n      'audit-log': auditLog,\n      ...adminContentTypes,\n    },\n    services,\n    controllers,\n    routes,\n  };\n\n  // Only add the other audit-logs APIs if the feature is enabled by the user and the license\n  if (\n    strapi.config.get('admin.auditLogs.enabled', true) &&\n    strapi.ee.features.isEnabled('audit-logs')\n  ) {\n    return {\n      ...eeAdmin,\n      controllers: {\n        ...eeAdmin.controllers,\n        'audit-logs': auditLogsController,\n      },\n      routes: {\n        ...eeAdmin.routes,\n        'audit-logs': auditLogsRoutes,\n      },\n      async register({ strapi }: { strapi: Core.Strapi }) {\n        // Run the the default registration\n        await eeAdmin.register({ strapi });\n        // Register an internal audit logs service\n        strapi.add('audit-logs', createAuditLogsService(strapi));\n        // Register an internal audit logs lifecycle service\n        const auditLogsLifecycle = createAuditLogsLifecycleService(strapi);\n        strapi.add('audit-logs-lifecycle', auditLogsLifecycle);\n\n        await auditLogsLifecycle.register();\n      },\n      async destroy({ strapi }: { strapi: Core.Strapi }) {\n        strapi.get('audit-logs-lifecycle').destroy();\n        await eeAdmin.destroy({ strapi });\n      },\n    };\n  }\n\n  return eeAdmin;\n};\n\nexport default getAdminEE;\n"],"names":["getAdminEE","eeAdmin","register","bootstrap","destroy","contentTypes","auditLog","adminContentTypes","services","controllers","routes","strapi","config","get","ee","features","isEnabled","auditLogsController","auditLogsRoutes","add","createAuditLogsService","auditLogsLifecycle","createAuditLogsLifecycleService"],"mappings":";;;;;;;;;;;;;AAcA,MAAMA,UAAa,GAAA,IAAA;AACjB,IAAA,MAAMC,OAAU,GAAA;AACdC,QAAAA,QAAAA;AACAC,QAAAA,SAAAA;AACAC,QAAAA,OAAAA;QACAC,YAAc,EAAA;;YAEZ,WAAaC,EAAAA,QAAAA;AACb,YAAA,GAAGC;AACL,SAAA;AACAC,QAAAA,QAAAA;AACAC,QAAAA,WAAAA;AACAC,QAAAA;AACF,KAAA;;AAGA,IAAA,IACEC,MAAOC,CAAAA,MAAM,CAACC,GAAG,CAAC,yBAA2B,EAAA,IAAA,CAAA,IAC7CF,MAAOG,CAAAA,EAAE,CAACC,QAAQ,CAACC,SAAS,CAAC,YAC7B,CAAA,EAAA;QACA,OAAO;AACL,YAAA,GAAGf,OAAO;YACVQ,WAAa,EAAA;AACX,gBAAA,GAAGR,QAAQQ,WAAW;gBACtB,YAAcQ,EAAAA;AAChB,aAAA;YACAP,MAAQ,EAAA;AACN,gBAAA,GAAGT,QAAQS,MAAM;gBACjB,YAAcQ,EAAAA;AAChB,aAAA;AACA,YAAA,MAAMhB,QAAS,CAAA,CAAA,EAAES,MAAAA,EAAAA,OAAM,EAA2B,EAAA;;gBAEhD,MAAMV,OAAAA,CAAQC,QAAQ,CAAC;oBAAES,MAAAA,EAAAA;AAAO,iBAAA,CAAA;;gBAEhCA,OAAOQ,CAAAA,GAAG,CAAC,YAAA,EAAcC,sBAAuBT,CAAAA,OAAAA,CAAAA,CAAAA;;AAEhD,gBAAA,MAAMU,qBAAqBC,+BAAgCX,CAAAA,OAAAA,CAAAA;gBAC3DA,OAAOQ,CAAAA,GAAG,CAAC,sBAAwBE,EAAAA,kBAAAA,CAAAA;AAEnC,gBAAA,MAAMA,mBAAmBnB,QAAQ,EAAA;AACnC,aAAA;AACA,YAAA,MAAME,OAAQ,CAAA,CAAA,EAAEO,MAAAA,EAAAA,OAAM,EAA2B,EAAA;gBAC/CA,OAAOE,CAAAA,GAAG,CAAC,sBAAA,CAAA,CAAwBT,OAAO,EAAA;gBAC1C,MAAMH,OAAAA,CAAQG,OAAO,CAAC;oBAAEO,MAAAA,EAAAA;AAAO,iBAAA,CAAA;AACjC;AACF,SAAA;AACF;IAEA,OAAOV,OAAAA;AACT;;;;"}