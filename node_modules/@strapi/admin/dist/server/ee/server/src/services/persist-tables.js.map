{"version":3,"file":"persist-tables.js","sources":["../../../../../../ee/server/src/services/persist-tables.ts"],"sourcesContent":["import type { Core } from '@strapi/types';\nimport { differenceWith, isEqual } from 'lodash/fp';\n\nexport interface PersistedTable {\n  name: string;\n  dependsOn?: Array<{ name: string }>;\n}\n\n/**\n * Transform table name to the object format\n */\nconst transformTableName = (table: string | PersistedTable) => {\n  if (typeof table === 'string') {\n    return { name: table };\n  }\n  return table;\n};\n\n/**\n * Finds all tables in the database matching the regular expression\n * @param {Object} ctx\n * @param {Strapi} ctx.strapi\n * @param {RegExp} regex\n * @returns {Promise<string[]>}\n */\nexport async function findTables({ strapi }: { strapi: Core.Strapi }, regex: any) {\n  const tables = await strapi.db.dialect.schemaInspector.getTables();\n  return tables.filter((tableName: string) => regex.test(tableName));\n}\n\n/**\n * Add tables name to the reserved tables in core store\n */\nasync function addPersistTables(\n  { strapi }: { strapi: Core.Strapi },\n  tableNames: Array<string | PersistedTable>\n) {\n  const persistedTables = await getPersistedTables({ strapi });\n  const tables = tableNames.map(transformTableName);\n\n  // Get new tables to be persisted, remove tables if they already were persisted\n  const notPersistedTableNames = differenceWith(isEqual, tables, persistedTables);\n  // Remove tables that are going to be changed\n  const tablesToPersist = differenceWith(\n    (t1: any, t2: any) => t1.name === t2.name,\n    persistedTables,\n    notPersistedTableNames\n  );\n\n  if (!notPersistedTableNames.length) {\n    return;\n  }\n\n  // @ts-expect-error lodash types\n  tablesToPersist.push(...notPersistedTableNames);\n  await strapi.store.set({\n    type: 'core',\n    key: 'persisted_tables',\n    value: tablesToPersist,\n  });\n}\n\n/**\n * Get all reserved table names from the core store\n * @param {Object} ctx\n * @param {Strapi} ctx.strapi\n * @param {RegExp} regex\n * @returns {Promise<string[]>}\n */\n\nasync function getPersistedTables({ strapi }: { strapi: Core.Strapi }) {\n  const persistedTables: any = await strapi.store.get({\n    type: 'core',\n    key: 'persisted_tables',\n  });\n\n  return (persistedTables || []).map(transformTableName);\n}\n\n/**\n * Set all reserved table names in the core store\n * @param {Object} ctx\n * @param {Strapi} ctx.strapi\n * @param {Array<string|{ table: string; dependsOn?: Array<{ table: string;}> }>} tableNames\n * @returns {Promise<void>}\n */\nasync function setPersistedTables(\n  { strapi }: { strapi: Core.Strapi },\n  tableNames: Array<string | PersistedTable>\n) {\n  await strapi.store.set({\n    type: 'core',\n    key: 'persisted_tables',\n    value: tableNames,\n  });\n}\n/**\n * Add all table names that start with a prefix to the reserved tables in\n * core store\n * @param {string} tableNamePrefix\n * @return {Promise<void>}\n */\n\nexport const persistTablesWithPrefix = async (tableNamePrefix: string) => {\n  const tableNameRegex = new RegExp(`^${tableNamePrefix}.*`);\n  const tableNames = await findTables({ strapi }, tableNameRegex);\n\n  await addPersistTables({ strapi }, tableNames);\n};\n\n/**\n * Remove all table names that end with a suffix from the reserved tables in core store\n * @param {string} tableNameSuffix\n * @return {Promise<void>}\n */\nexport const removePersistedTablesWithSuffix = async (tableNameSuffix: string) => {\n  const tableNameRegex = new RegExp(`.*${tableNameSuffix}$`);\n  const persistedTables = await getPersistedTables({ strapi });\n\n  const filteredPersistedTables = persistedTables.filter((table: any) => {\n    return !tableNameRegex.test(table.name);\n  });\n\n  if (filteredPersistedTables.length === persistedTables.length) {\n    return;\n  }\n\n  await setPersistedTables({ strapi }, filteredPersistedTables);\n};\n\n/**\n * Add tables to the reserved tables in core store\n */\nexport const persistTables = async (tables: Array<string | PersistedTable>) => {\n  await addPersistTables({ strapi }, tables);\n};\n\nexport default {\n  persistTablesWithPrefix,\n  removePersistedTablesWithSuffix,\n  persistTables,\n  findTables,\n};\n"],"names":["transformTableName","table","name","findTables","strapi","regex","tables","db","dialect","schemaInspector","getTables","filter","tableName","test","addPersistTables","tableNames","persistedTables","getPersistedTables","map","notPersistedTableNames","differenceWith","isEqual","tablesToPersist","t1","t2","length","push","store","set","type","key","value","get","setPersistedTables","persistTablesWithPrefix","tableNamePrefix","tableNameRegex","RegExp","removePersistedTablesWithSuffix","tableNameSuffix","filteredPersistedTables","persistTables"],"mappings":"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"}