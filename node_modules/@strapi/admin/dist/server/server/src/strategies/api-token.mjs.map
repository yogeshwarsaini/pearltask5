{"version":3,"file":"api-token.mjs","sources":["../../../../../server/src/strategies/api-token.ts"],"sourcesContent":["import type { Context } from 'koa';\nimport { castArray, isNil } from 'lodash/fp';\nimport { differenceInHours, parseISO } from 'date-fns';\nimport { errors } from '@strapi/utils';\nimport constants from '../services/constants';\nimport { getService } from '../utils';\nimport '@strapi/types';\n\nconst { UnauthorizedError, ForbiddenError } = errors;\n\nconst isReadScope = (scope: any) => scope.endsWith('find') || scope.endsWith('findOne');\n\nconst extractToken = (ctx: Context) => {\n  if (ctx.request && ctx.request.header && ctx.request.header.authorization) {\n    const parts = ctx.request.header.authorization.split(/\\s+/);\n\n    if (parts[0].toLowerCase() !== 'bearer' || parts.length !== 2) {\n      return null;\n    }\n\n    return parts[1];\n  }\n\n  return null;\n};\n\n/**\n * Authenticate the validity of the token\n */\nexport const authenticate = async (ctx: Context) => {\n  const apiTokenService = getService('api-token');\n  const token = extractToken(ctx);\n\n  if (!token) {\n    return { authenticated: false };\n  }\n\n  const apiToken = await apiTokenService.getBy({\n    accessKey: apiTokenService.hash(token),\n  });\n\n  // token not found\n  if (!apiToken) {\n    return { authenticated: false };\n  }\n\n  const currentDate = new Date();\n\n  if (!isNil(apiToken.expiresAt)) {\n    const expirationDate = new Date(apiToken.expiresAt);\n    // token has expired\n    if (expirationDate < currentDate) {\n      return { authenticated: false, error: new UnauthorizedError('Token expired') };\n    }\n  }\n\n  if (!isNil(apiToken.lastUsedAt)) {\n    // update lastUsedAt if the token has not been used in the last hour\n    const hoursSinceLastUsed = differenceInHours(currentDate, parseISO(apiToken.lastUsedAt));\n    if (hoursSinceLastUsed >= 1) {\n      await strapi.db.query('admin::api-token').update({\n        where: { id: apiToken.id },\n        data: { lastUsedAt: currentDate },\n      });\n    }\n  } else {\n    // If lastUsedAt is not set, initialize it to the current date\n    await strapi.db.query('admin::api-token').update({\n      where: { id: apiToken.id },\n      data: { lastUsedAt: currentDate },\n    });\n  }\n\n  if (apiToken.type === constants.API_TOKEN_TYPE.CUSTOM) {\n    const ability = await strapi.contentAPI.permissions.engine.generateAbility(\n      apiToken.permissions.map((action: any) => ({ action }))\n    );\n\n    return { authenticated: true, ability, credentials: apiToken };\n  }\n\n  return { authenticated: true, credentials: apiToken };\n};\n\n/**\n * Verify the token has the required abilities for the requested scope\n *\n *  @type {import('.').VerifyFunction}\n */\nexport const verify = (auth: any, config: any) => {\n  const { credentials: apiToken, ability } = auth;\n\n  if (!apiToken) {\n    throw new UnauthorizedError('Token not found');\n  }\n\n  const currentDate = new Date();\n\n  if (!isNil(apiToken.expiresAt)) {\n    const expirationDate = new Date(apiToken.expiresAt);\n    // token has expired\n    if (expirationDate < currentDate) {\n      throw new UnauthorizedError('Token expired');\n    }\n  }\n\n  // Full access\n  if (apiToken.type === constants.API_TOKEN_TYPE.FULL_ACCESS) {\n    return;\n  }\n\n  // Read only\n  if (apiToken.type === constants.API_TOKEN_TYPE.READ_ONLY) {\n    /**\n     * If you don't have `full-access` you can only access `find` and `findOne`\n     * scopes. If the route has no scope, then you can't get access to it.\n     */\n    const scopes = castArray(config.scope);\n\n    if (config.scope && scopes.every(isReadScope)) {\n      return;\n    }\n  }\n\n  // Custom\n  else if (apiToken.type === constants.API_TOKEN_TYPE.CUSTOM) {\n    if (!ability) {\n      throw new ForbiddenError();\n    }\n\n    const scopes = castArray(config.scope);\n\n    const isAllowed = scopes.every((scope) => ability.can(scope));\n\n    if (isAllowed) {\n      return;\n    }\n  }\n\n  throw new ForbiddenError();\n};\n\nexport const name = 'api-token';\n\nexport default {\n  name: 'api-token',\n  authenticate,\n  verify,\n};\n"],"names":["UnauthorizedError","ForbiddenError","errors","isReadScope","scope","endsWith","extractToken","ctx","request","header","authorization","parts","split","toLowerCase","length","authenticate","apiTokenService","getService","token","authenticated","apiToken","getBy","accessKey","hash","currentDate","Date","isNil","expiresAt","expirationDate","error","lastUsedAt","hoursSinceLastUsed","differenceInHours","parseISO","strapi","db","query","update","where","id","data","type","constants","API_TOKEN_TYPE","CUSTOM","ability","contentAPI","permissions","engine","generateAbility","map","action","credentials","verify","auth","config","FULL_ACCESS","READ_ONLY","scopes","castArray","every","isAllowed","can","name"],"mappings":"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"}