{"version":3,"file":"data-transfer.mjs","sources":["../../../../../server/src/strategies/data-transfer.ts"],"sourcesContent":["import type { Context } from 'koa';\nimport { differenceInHours, parseISO } from 'date-fns';\nimport { errors } from '@strapi/utils';\nimport { castArray, isNil } from 'lodash/fp';\n\nimport { getService } from '../utils';\n\nconst { UnauthorizedError, ForbiddenError } = errors;\n\nconst extractToken = (ctx: Context) => {\n  if (ctx.request && ctx.request.header && ctx.request.header.authorization) {\n    const parts = ctx.request.header.authorization.split(/\\s+/);\n\n    if (parts[0].toLowerCase() !== 'bearer' || parts.length !== 2) {\n      return null;\n    }\n\n    return parts[1];\n  }\n\n  return null;\n};\n\n/**\n * Authenticate the validity of the token\n *\n *  @type {import('.').AuthenticateFunction}\n */\nexport const authenticate = async (ctx: Context) => {\n  const { token: tokenService } = getService('transfer');\n  const token = extractToken(ctx);\n\n  if (!token) {\n    return { authenticated: false };\n  }\n\n  const transferToken = await tokenService.getBy({ accessKey: tokenService.hash(token) });\n\n  // Check if the token exists\n  if (!transferToken) {\n    return { authenticated: false };\n  }\n\n  // Check if the token has expired\n  const currentDate = new Date();\n\n  if (!isNil(transferToken.expiresAt)) {\n    const expirationDate = new Date(transferToken.expiresAt);\n\n    if (expirationDate < currentDate) {\n      return { authenticated: false, error: new UnauthorizedError('Token expired') };\n    }\n  }\n\n  // Update token metadata if the token has not been used in the last hour\n  // @ts-expect-error - FIXME: verify lastUsedAt is defined\n  const hoursSinceLastUsed = differenceInHours(currentDate, parseISO(transferToken.lastUsedAt));\n  if (hoursSinceLastUsed >= 1) {\n    await strapi.db.query('admin::api-token').update({\n      where: { id: transferToken.id },\n      data: { lastUsedAt: currentDate },\n    });\n  }\n\n  // Generate an ability based on the token permissions\n  const ability = await getService('transfer').permission.engine.generateAbility(\n    transferToken.permissions.map((action: any) => ({ action }))\n  );\n\n  return { authenticated: true, ability, credentials: transferToken };\n};\n\n/**\n * Verify the token has the required abilities for the requested scope\n *\n *  @type {import('.').VerifyFunction}\n */\nexport const verify = async (auth: any, config: any = {}) => {\n  const { credentials: transferToken, ability } = auth;\n\n  if (!transferToken) {\n    throw new UnauthorizedError('Token not found');\n  }\n\n  const currentDate = new Date();\n\n  if (!isNil(transferToken.expiresAt)) {\n    const expirationDate = new Date(transferToken.expiresAt);\n    // token has expired\n    if (expirationDate < currentDate) {\n      throw new UnauthorizedError('Token expired');\n    }\n  }\n\n  if (!ability) {\n    throw new ForbiddenError();\n  }\n\n  const scopes = castArray(config.scope ?? []);\n\n  const isAllowed = scopes.every((scope) => ability.can(scope));\n\n  if (!isAllowed) {\n    throw new ForbiddenError();\n  }\n};\n\nexport const name = 'data-transfer';\n\n/** @type {import('.').AuthStrategy} */\nexport default {\n  name,\n  authenticate,\n  verify,\n};\n"],"names":["UnauthorizedError","ForbiddenError","errors","extractToken","ctx","request","header","authorization","parts","split","toLowerCase","length","authenticate","token","tokenService","getService","authenticated","transferToken","getBy","accessKey","hash","currentDate","Date","isNil","expiresAt","expirationDate","error","hoursSinceLastUsed","differenceInHours","parseISO","lastUsedAt","strapi","db","query","update","where","id","data","ability","permission","engine","generateAbility","permissions","map","action","credentials","verify","auth","config","scopes","castArray","scope","isAllowed","every","can","name"],"mappings":"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"}