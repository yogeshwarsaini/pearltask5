{"version":3,"file":"authentication.js","sources":["../../../../../server/src/controllers/authentication.ts"],"sourcesContent":["import type { Context, Next } from 'koa';\nimport passport from 'koa-passport';\nimport compose from 'koa-compose';\nimport '@strapi/types';\nimport { errors } from '@strapi/utils';\nimport { getService } from '../utils';\nimport {\n  validateRegistrationInput,\n  validateAdminRegistrationInput,\n  validateRegistrationInfoQuery,\n  validateForgotPasswordInput,\n  validateResetPasswordInput,\n  validateRenewTokenInput,\n} from '../validation/authentication';\n\nimport type {\n  ForgotPassword,\n  Login,\n  Register,\n  RegistrationInfo,\n  RenewToken,\n  ResetPassword,\n} from '../../../shared/contracts/authentication';\nimport { AdminUser } from '../../../shared/contracts/shared';\n\nconst { ApplicationError, ValidationError } = errors;\n\nexport default {\n  login: compose([\n    (ctx: Context, next: Next) => {\n      return passport.authenticate('local', { session: false }, (err, user, info) => {\n        if (err) {\n          strapi.eventHub.emit('admin.auth.error', { error: err, provider: 'local' });\n          // if this is a recognized error, allow it to bubble up to user\n          if (err.details?.code === 'LOGIN_NOT_ALLOWED') {\n            throw err;\n          }\n\n          // for all other errors throw a generic error to prevent leaking info\n          return ctx.notImplemented();\n        }\n\n        if (!user) {\n          strapi.eventHub.emit('admin.auth.error', {\n            error: new Error(info.message),\n            provider: 'local',\n          });\n          throw new ApplicationError(info.message);\n        }\n\n        const query = ctx.state as Login.Request['query'];\n        query.user = user;\n\n        const sanitizedUser = getService('user').sanitizeUser(user);\n        strapi.eventHub.emit('admin.auth.success', { user: sanitizedUser, provider: 'local' });\n\n        return next();\n      })(ctx, next);\n    },\n    (ctx: Context) => {\n      const { user } = ctx.state as { user: AdminUser };\n\n      ctx.body = {\n        data: {\n          token: getService('token').createJwtToken(user),\n          user: getService('user').sanitizeUser(ctx.state.user), // TODO: fetch more detailed info\n        },\n      } satisfies Login.Response;\n    },\n  ]),\n\n  async renewToken(ctx: Context) {\n    await validateRenewTokenInput(ctx.request.body);\n\n    const { token } = ctx.request.body as RenewToken.Request['body'];\n\n    const { isValid, payload } = getService('token').decodeJwtToken(token);\n\n    if (!isValid) {\n      throw new ValidationError('Invalid token');\n    }\n\n    ctx.body = {\n      data: {\n        token: getService('token').createJwtToken({ id: payload.id }),\n      },\n    } satisfies RenewToken.Response;\n  },\n\n  async registrationInfo(ctx: Context) {\n    await validateRegistrationInfoQuery(ctx.request.query);\n\n    const { registrationToken } = ctx.request.query as RegistrationInfo.Request['query'];\n\n    const registrationInfo = await getService('user').findRegistrationInfo(registrationToken);\n\n    if (!registrationInfo) {\n      throw new ValidationError('Invalid registrationToken');\n    }\n\n    ctx.body = { data: registrationInfo } satisfies RegistrationInfo.Response;\n  },\n\n  async register(ctx: Context) {\n    const input = ctx.request.body as Register.Request['body'];\n\n    await validateRegistrationInput(input);\n\n    const user = await getService('user').register(input);\n\n    ctx.body = {\n      data: {\n        token: getService('token').createJwtToken(user),\n        user: getService('user').sanitizeUser(user),\n      },\n    } satisfies Register.Response;\n  },\n\n  async registerAdmin(ctx: Context) {\n    const input = ctx.request.body as Register.Request['body'];\n\n    await validateAdminRegistrationInput(input);\n\n    const hasAdmin = await getService('user').exists();\n\n    if (hasAdmin) {\n      throw new ApplicationError('You cannot register a new super admin');\n    }\n\n    const superAdminRole = await getService('role').getSuperAdmin();\n\n    if (!superAdminRole) {\n      throw new ApplicationError(\n        \"Cannot register the first admin because the super admin role doesn't exist.\"\n      );\n    }\n\n    const user = await getService('user').create({\n      ...input,\n      registrationToken: null,\n      isActive: true,\n      roles: superAdminRole ? [superAdminRole.id] : [],\n    });\n\n    strapi.telemetry.send('didCreateFirstAdmin');\n\n    ctx.body = {\n      data: {\n        token: getService('token').createJwtToken(user),\n        user: getService('user').sanitizeUser(user),\n      },\n    };\n  },\n\n  async forgotPassword(ctx: Context) {\n    const input = ctx.request.body as ForgotPassword.Request['body'];\n\n    await validateForgotPasswordInput(input);\n\n    getService('auth').forgotPassword(input);\n\n    ctx.status = 204;\n  },\n\n  async resetPassword(ctx: Context) {\n    const input = ctx.request.body as ResetPassword.Request['body'];\n\n    await validateResetPasswordInput(input);\n\n    const user = await getService('auth').resetPassword(input);\n\n    ctx.body = {\n      data: {\n        token: getService('token').createJwtToken(user),\n        user: getService('user').sanitizeUser(user),\n      },\n    } satisfies ResetPassword.Response;\n  },\n\n  logout(ctx: Context) {\n    const sanitizedUser = getService('user').sanitizeUser(ctx.state.user);\n    strapi.eventHub.emit('admin.logout', { user: sanitizedUser });\n    ctx.body = { data: {} };\n  },\n};\n"],"names":["ApplicationError","ValidationError","errors","login","compose","ctx","next","passport","authenticate","session","err","user","info","strapi","eventHub","emit","error","provider","details","code","notImplemented","Error","message","query","state","sanitizedUser","getService","sanitizeUser","body","data","token","createJwtToken","renewToken","validateRenewTokenInput","request","isValid","payload","decodeJwtToken","id","registrationInfo","validateRegistrationInfoQuery","registrationToken","findRegistrationInfo","register","input","validateRegistrationInput","registerAdmin","validateAdminRegistrationInput","hasAdmin","exists","superAdminRole","getSuperAdmin","create","isActive","roles","telemetry","send","forgotPassword","validateForgotPasswordInput","status","resetPassword","validateResetPasswordInput","logout"],"mappings":";;;;;;;;;;;;AAyBA,MAAM,EAAEA,gBAAgB,EAAEC,eAAe,EAAE,GAAGC,YAAAA;AAE9C,qBAAe;AACbC,IAAAA,KAAAA,EAAOC,OAAQ,CAAA;AACb,QAAA,CAACC,GAAcC,EAAAA,IAAAA,GAAAA;YACb,OAAOC,QAAAA,CAASC,YAAY,CAAC,OAAS,EAAA;gBAAEC,OAAS,EAAA;aAAS,EAAA,CAACC,KAAKC,IAAMC,EAAAA,IAAAA,GAAAA;AACpE,gBAAA,IAAIF,GAAK,EAAA;AACPG,oBAAAA,MAAAA,CAAOC,QAAQ,CAACC,IAAI,CAAC,kBAAoB,EAAA;wBAAEC,KAAON,EAAAA,GAAAA;wBAAKO,QAAU,EAAA;AAAQ,qBAAA,CAAA;;AAEzE,oBAAA,IAAIP,GAAIQ,CAAAA,OAAO,EAAEC,IAAAA,KAAS,mBAAqB,EAAA;wBAC7C,MAAMT,GAAAA;AACR;;AAGA,oBAAA,OAAOL,IAAIe,cAAc,EAAA;AAC3B;AAEA,gBAAA,IAAI,CAACT,IAAM,EAAA;AACTE,oBAAAA,MAAAA,CAAOC,QAAQ,CAACC,IAAI,CAAC,kBAAoB,EAAA;wBACvCC,KAAO,EAAA,IAAIK,KAAMT,CAAAA,IAAAA,CAAKU,OAAO,CAAA;wBAC7BL,QAAU,EAAA;AACZ,qBAAA,CAAA;oBACA,MAAM,IAAIjB,gBAAiBY,CAAAA,IAAAA,CAAKU,OAAO,CAAA;AACzC;gBAEA,MAAMC,KAAAA,GAAQlB,IAAImB,KAAK;AACvBD,gBAAAA,KAAAA,CAAMZ,IAAI,GAAGA,IAAAA;AAEb,gBAAA,MAAMc,aAAgBC,GAAAA,gBAAAA,CAAW,MAAQC,CAAAA,CAAAA,YAAY,CAAChB,IAAAA,CAAAA;AACtDE,gBAAAA,MAAAA,CAAOC,QAAQ,CAACC,IAAI,CAAC,oBAAsB,EAAA;oBAAEJ,IAAMc,EAAAA,aAAAA;oBAAeR,QAAU,EAAA;AAAQ,iBAAA,CAAA;gBAEpF,OAAOX,IAAAA,EAAAA;AACT,aAAA,CAAA,CAAGD,GAAKC,EAAAA,IAAAA,CAAAA;AACV,SAAA;QACA,CAACD,GAAAA,GAAAA;AACC,YAAA,MAAM,EAAEM,IAAI,EAAE,GAAGN,IAAImB,KAAK;AAE1BnB,YAAAA,GAAAA,CAAIuB,IAAI,GAAG;gBACTC,IAAM,EAAA;oBACJC,KAAOJ,EAAAA,gBAAAA,CAAW,OAASK,CAAAA,CAAAA,cAAc,CAACpB,IAAAA,CAAAA;AAC1CA,oBAAAA,IAAAA,EAAMe,iBAAW,MAAQC,CAAAA,CAAAA,YAAY,CAACtB,GAAImB,CAAAA,KAAK,CAACb,IAAI;AACtD;AACF,aAAA;AACF;AACD,KAAA,CAAA;AAED,IAAA,MAAMqB,YAAW3B,GAAY,EAAA;AAC3B,QAAA,MAAM4B,UAAwB5B,CAAAA,GAAAA,CAAI6B,OAAO,CAACN,IAAI,CAAA;AAE9C,QAAA,MAAM,EAAEE,KAAK,EAAE,GAAGzB,GAAI6B,CAAAA,OAAO,CAACN,IAAI;QAElC,MAAM,EAAEO,OAAO,EAAEC,OAAO,EAAE,GAAGV,gBAAAA,CAAW,OAASW,CAAAA,CAAAA,cAAc,CAACP,KAAAA,CAAAA;AAEhE,QAAA,IAAI,CAACK,OAAS,EAAA;AACZ,YAAA,MAAM,IAAIlC,eAAgB,CAAA,eAAA,CAAA;AAC5B;AAEAI,QAAAA,GAAAA,CAAIuB,IAAI,GAAG;YACTC,IAAM,EAAA;gBACJC,KAAOJ,EAAAA,gBAAAA,CAAW,OAASK,CAAAA,CAAAA,cAAc,CAAC;AAAEO,oBAAAA,EAAAA,EAAIF,QAAQE;AAAG,iBAAA;AAC7D;AACF,SAAA;AACF,KAAA;AAEA,IAAA,MAAMC,kBAAiBlC,GAAY,EAAA;AACjC,QAAA,MAAMmC,sCAA8BnC,CAAAA,GAAAA,CAAI6B,OAAO,CAACX,KAAK,CAAA;AAErD,QAAA,MAAM,EAAEkB,iBAAiB,EAAE,GAAGpC,GAAI6B,CAAAA,OAAO,CAACX,KAAK;AAE/C,QAAA,MAAMgB,gBAAmB,GAAA,MAAMb,gBAAW,CAAA,MAAA,CAAA,CAAQgB,oBAAoB,CAACD,iBAAAA,CAAAA;AAEvE,QAAA,IAAI,CAACF,gBAAkB,EAAA;AACrB,YAAA,MAAM,IAAItC,eAAgB,CAAA,2BAAA,CAAA;AAC5B;AAEAI,QAAAA,GAAAA,CAAIuB,IAAI,GAAG;YAAEC,IAAMU,EAAAA;AAAiB,SAAA;AACtC,KAAA;AAEA,IAAA,MAAMI,UAAStC,GAAY,EAAA;AACzB,QAAA,MAAMuC,KAAQvC,GAAAA,GAAAA,CAAI6B,OAAO,CAACN,IAAI;AAE9B,QAAA,MAAMiB,kCAA0BD,CAAAA,KAAAA,CAAAA;AAEhC,QAAA,MAAMjC,IAAO,GAAA,MAAMe,gBAAW,CAAA,MAAA,CAAA,CAAQiB,QAAQ,CAACC,KAAAA,CAAAA;AAE/CvC,QAAAA,GAAAA,CAAIuB,IAAI,GAAG;YACTC,IAAM,EAAA;gBACJC,KAAOJ,EAAAA,gBAAAA,CAAW,OAASK,CAAAA,CAAAA,cAAc,CAACpB,IAAAA,CAAAA;gBAC1CA,IAAMe,EAAAA,gBAAAA,CAAW,MAAQC,CAAAA,CAAAA,YAAY,CAAChB,IAAAA;AACxC;AACF,SAAA;AACF,KAAA;AAEA,IAAA,MAAMmC,eAAczC,GAAY,EAAA;AAC9B,QAAA,MAAMuC,KAAQvC,GAAAA,GAAAA,CAAI6B,OAAO,CAACN,IAAI;AAE9B,QAAA,MAAMmB,uCAA+BH,CAAAA,KAAAA,CAAAA;AAErC,QAAA,MAAMI,QAAW,GAAA,MAAMtB,gBAAW,CAAA,MAAA,CAAA,CAAQuB,MAAM,EAAA;AAEhD,QAAA,IAAID,QAAU,EAAA;AACZ,YAAA,MAAM,IAAIhD,gBAAiB,CAAA,uCAAA,CAAA;AAC7B;AAEA,QAAA,MAAMkD,cAAiB,GAAA,MAAMxB,gBAAW,CAAA,MAAA,CAAA,CAAQyB,aAAa,EAAA;AAE7D,QAAA,IAAI,CAACD,cAAgB,EAAA;AACnB,YAAA,MAAM,IAAIlD,gBACR,CAAA,6EAAA,CAAA;AAEJ;AAEA,QAAA,MAAMW,IAAO,GAAA,MAAMe,gBAAW,CAAA,MAAA,CAAA,CAAQ0B,MAAM,CAAC;AAC3C,YAAA,GAAGR,KAAK;YACRH,iBAAmB,EAAA,IAAA;YACnBY,QAAU,EAAA,IAAA;AACVC,YAAAA,KAAAA,EAAOJ,cAAiB,GAAA;AAACA,gBAAAA,cAAAA,CAAeZ;AAAG,aAAA,GAAG;AAChD,SAAA,CAAA;QAEAzB,MAAO0C,CAAAA,SAAS,CAACC,IAAI,CAAC,qBAAA,CAAA;AAEtBnD,QAAAA,GAAAA,CAAIuB,IAAI,GAAG;YACTC,IAAM,EAAA;gBACJC,KAAOJ,EAAAA,gBAAAA,CAAW,OAASK,CAAAA,CAAAA,cAAc,CAACpB,IAAAA,CAAAA;gBAC1CA,IAAMe,EAAAA,gBAAAA,CAAW,MAAQC,CAAAA,CAAAA,YAAY,CAAChB,IAAAA;AACxC;AACF,SAAA;AACF,KAAA;AAEA,IAAA,MAAM8C,gBAAepD,GAAY,EAAA;AAC/B,QAAA,MAAMuC,KAAQvC,GAAAA,GAAAA,CAAI6B,OAAO,CAACN,IAAI;AAE9B,QAAA,MAAM8B,cAA4Bd,CAAAA,KAAAA,CAAAA;QAElClB,gBAAW,CAAA,MAAA,CAAA,CAAQ+B,cAAc,CAACb,KAAAA,CAAAA;AAElCvC,QAAAA,GAAAA,CAAIsD,MAAM,GAAG,GAAA;AACf,KAAA;AAEA,IAAA,MAAMC,eAAcvD,GAAY,EAAA;AAC9B,QAAA,MAAMuC,KAAQvC,GAAAA,GAAAA,CAAI6B,OAAO,CAACN,IAAI;AAE9B,QAAA,MAAMiC,aAA2BjB,CAAAA,KAAAA,CAAAA;AAEjC,QAAA,MAAMjC,IAAO,GAAA,MAAMe,gBAAW,CAAA,MAAA,CAAA,CAAQkC,aAAa,CAAChB,KAAAA,CAAAA;AAEpDvC,QAAAA,GAAAA,CAAIuB,IAAI,GAAG;YACTC,IAAM,EAAA;gBACJC,KAAOJ,EAAAA,gBAAAA,CAAW,OAASK,CAAAA,CAAAA,cAAc,CAACpB,IAAAA,CAAAA;gBAC1CA,IAAMe,EAAAA,gBAAAA,CAAW,MAAQC,CAAAA,CAAAA,YAAY,CAAChB,IAAAA;AACxC;AACF,SAAA;AACF,KAAA;AAEAmD,IAAAA,MAAAA,CAAAA,CAAOzD,GAAY,EAAA;QACjB,MAAMoB,aAAAA,GAAgBC,iBAAW,MAAQC,CAAAA,CAAAA,YAAY,CAACtB,GAAImB,CAAAA,KAAK,CAACb,IAAI,CAAA;AACpEE,QAAAA,MAAAA,CAAOC,QAAQ,CAACC,IAAI,CAAC,cAAgB,EAAA;YAAEJ,IAAMc,EAAAA;AAAc,SAAA,CAAA;AAC3DpB,QAAAA,GAAAA,CAAIuB,IAAI,GAAG;AAAEC,YAAAA,IAAAA,EAAM;AAAG,SAAA;AACxB;AACF,CAAE;;;;"}