{"version":3,"file":"role.mjs","sources":["../../../../../server/src/controllers/role.ts"],"sourcesContent":["import type { Context } from 'koa';\nimport { errors } from '@strapi/utils';\nimport {\n  validateRoleUpdateInput,\n  validateRoleCreateInput,\n  validateRoleDeleteInput,\n  validateRolesDeleteInput,\n} from '../validation/role';\nimport { validatedUpdatePermissionsInput } from '../validation/permission';\nimport constants from '../services/constants';\nimport { getService } from '../utils';\nimport type {\n  Create,\n  FindRoles,\n  FindRole,\n  Update,\n  GetPermissions,\n  UpdatePermissions,\n  Delete,\n  BatchDelete,\n} from '../../../shared/contracts/roles';\nimport { AdminRole } from '../../../shared/contracts/shared';\n\nconst { ApplicationError } = errors;\nconst { SUPER_ADMIN_CODE } = constants;\n\nexport default {\n  /**\n   * Create a new role\n   * @param {KoaContext} ctx - koa context\n   */\n  async create(ctx: Context) {\n    const { body } = ctx.request as Create.Request;\n    await validateRoleCreateInput(body);\n\n    const roleService = getService('role');\n\n    const role = await roleService.create(body);\n    const sanitizedRole = roleService.sanitizeRole(role) as Omit<AdminRole, 'users' | 'permission'>;\n\n    ctx.created({ data: sanitizedRole } satisfies Create.Response);\n  },\n\n  /**\n   * Returns on role by id\n   * @param {KoaContext} ctx - koa context\n   */\n  async findOne(ctx: Context) {\n    const { id } = ctx.params as FindRole.Request['params'];\n    const role = await getService('role').findOneWithUsersCount({ id });\n\n    if (!role) {\n      return ctx.notFound('role.notFound');\n    }\n\n    ctx.body = {\n      data: role,\n    } satisfies FindRole.Response;\n  },\n\n  /**\n   * Returns every roles\n   * @param {KoaContext} ctx - koa context\n   */\n  async findAll(ctx: Context) {\n    const { query } = ctx.request as FindRoles.Request;\n\n    const permissionsManager = getService('permission').createPermissionsManager({\n      ability: ctx.state.userAbility,\n      model: 'admin::role',\n    });\n\n    await permissionsManager.validateQuery(query);\n    const sanitizedQuery = await permissionsManager.sanitizeQuery(query);\n\n    const roles = await getService('role').findAllWithUsersCount(sanitizedQuery);\n\n    ctx.body = {\n      data: roles,\n    } satisfies FindRoles.Response;\n  },\n\n  /**\n   * Updates a role by id\n   * @param {KoaContext} ctx - koa context\n   */\n  async update(ctx: Context) {\n    const { id } = ctx.params as Update.Request['params'];\n    const { body } = ctx.request as Omit<Update.Request, 'params'>;\n\n    const roleService = getService('role');\n\n    await validateRoleUpdateInput(body);\n\n    const role = await roleService.findOne({ id });\n\n    if (!role) {\n      return ctx.notFound('role.notFound');\n    }\n\n    if (role.code === SUPER_ADMIN_CODE) {\n      throw new ApplicationError(\"Super admin can't be edited.\");\n    }\n\n    const updatedRole = await roleService.update({ id }, body);\n    const sanitizedRole = roleService.sanitizeRole(updatedRole) as Omit<\n      AdminRole,\n      'users' | 'permission'\n    >;\n\n    ctx.body = {\n      data: sanitizedRole,\n    } satisfies Update.Response;\n  },\n\n  /**\n   * Returns the permissions assigned to a role\n   * @param {KoaContext} ctx - koa context\n   */\n  async getPermissions(ctx: Context) {\n    const { id } = ctx.params as GetPermissions.Request['params'];\n\n    const roleService = getService('role');\n    const permissionService = getService('permission');\n\n    const role = await roleService.findOne({ id });\n\n    if (!role) {\n      return ctx.notFound('role.notFound');\n    }\n\n    const permissions = await permissionService.findMany({ where: { role: { id: role.id } } });\n\n    const sanitizedPermissions = permissions.map(permissionService.sanitizePermission);\n\n    ctx.body = {\n      // @ts-expect-error - transform response type to sanitized permission\n      data: sanitizedPermissions,\n    } satisfies GetPermissions.Response;\n  },\n\n  /**\n   * Updates the permissions assigned to a role\n   * @param {KoaContext} ctx - koa context\n   */\n  async updatePermissions(ctx: Context) {\n    const { id } = ctx.params as UpdatePermissions.Request['params'];\n    const { body: input } = ctx.request as Omit<UpdatePermissions.Request, 'params'>;\n\n    const roleService = getService('role');\n    const permissionService = getService('permission');\n\n    const role = await roleService.findOne({ id });\n\n    if (!role) {\n      return ctx.notFound('role.notFound');\n    }\n\n    if (role.code === SUPER_ADMIN_CODE) {\n      throw new ApplicationError(\"Super admin permissions can't be edited.\");\n    }\n\n    await validatedUpdatePermissionsInput(input);\n\n    if (!role) {\n      return ctx.notFound('role.notFound');\n    }\n\n    const permissions = await roleService.assignPermissions(role.id, input.permissions);\n\n    const sanitizedPermissions = permissions.map(permissionService.sanitizePermission);\n\n    ctx.body = {\n      data: sanitizedPermissions,\n    } satisfies UpdatePermissions.Response;\n  },\n\n  /**\n   * Delete a role\n   * @param {KoaContext} ctx - koa context\n   */\n  async deleteOne(ctx: Context) {\n    const { id } = ctx.params as Delete.Request['params'];\n\n    await validateRoleDeleteInput(id);\n\n    const roleService = getService('role');\n\n    const roles = await roleService.deleteByIds([id]);\n\n    const sanitizedRole = roles.map((role) => roleService.sanitizeRole(role))[0] || null;\n\n    return ctx.deleted({\n      data: sanitizedRole,\n    } satisfies Delete.Response);\n  },\n\n  /**\n   * delete several roles\n   * @param {KoaContext} ctx - koa context\n   */\n  async deleteMany(ctx: Context) {\n    const { body } = ctx.request as BatchDelete.Request;\n\n    await validateRolesDeleteInput(body);\n\n    const roleService = getService('role');\n\n    const roles = await roleService.deleteByIds(body.ids);\n    const sanitizedRoles = roles.map(roleService.sanitizeRole);\n\n    return ctx.deleted({\n      data: sanitizedRoles,\n    } satisfies BatchDelete.Response);\n  },\n};\n"],"names":["ApplicationError","errors","SUPER_ADMIN_CODE","constants","create","ctx","body","request","validateRoleCreateInput","roleService","getService","role","sanitizedRole","sanitizeRole","created","data","findOne","id","params","findOneWithUsersCount","notFound","findAll","query","permissionsManager","createPermissionsManager","ability","state","userAbility","model","validateQuery","sanitizedQuery","sanitizeQuery","roles","findAllWithUsersCount","update","validateRoleUpdateInput","code","updatedRole","getPermissions","permissionService","permissions","findMany","where","sanitizedPermissions","map","sanitizePermission","updatePermissions","input","validatedUpdatePermissionsInput","assignPermissions","deleteOne","validateRoleDeleteInput","deleteByIds","deleted","deleteMany","validateRolesDeleteInput","ids","sanitizedRoles"],"mappings":"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"}