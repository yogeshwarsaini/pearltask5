{"version":3,"file":"api-token.mjs","sources":["../../../../../server/src/controllers/api-token.ts"],"sourcesContent":["import type { Context } from 'koa';\n\nimport { strings, errors } from '@strapi/utils';\nimport { trim, has } from 'lodash/fp';\nimport { getService } from '../utils';\nimport {\n  validateApiTokenCreationInput,\n  validateApiTokenUpdateInput,\n} from '../validation/api-tokens';\n\nimport { Create, List, Revoke, Get, Update } from '../../../shared/contracts/api-token';\n\nconst { ApplicationError } = errors;\n\nexport default {\n  async create(ctx: Context) {\n    const { body } = ctx.request as Create.Request;\n    const apiTokenService = getService('api-token');\n\n    /**\n     * We trim both field to avoid having issues with either:\n     * - having a space at the end or start of the value.\n     * - having only spaces as value;\n     */\n    const attributes = {\n      name: trim(body.name),\n      description: trim(body.description),\n      type: body.type,\n      permissions: body.permissions,\n      lifespan: body.lifespan,\n    };\n\n    await validateApiTokenCreationInput(attributes);\n\n    const alreadyExists = await apiTokenService.exists({ name: attributes.name });\n    if (alreadyExists) {\n      throw new ApplicationError('Name already taken');\n    }\n\n    const apiToken = await apiTokenService.create(attributes);\n    ctx.created({ data: apiToken } satisfies Create.Response);\n  },\n\n  async regenerate(ctx: Context) {\n    const { id } = ctx.params;\n    const apiTokenService = getService('api-token');\n\n    const apiTokenExists = await apiTokenService.getById(id);\n    if (!apiTokenExists) {\n      ctx.notFound('API Token not found');\n      return;\n    }\n\n    const accessToken = await apiTokenService.regenerate(id);\n\n    ctx.created({ data: accessToken });\n  },\n\n  async list(ctx: Context) {\n    const apiTokenService = getService('api-token');\n    const apiTokens = await apiTokenService.list();\n\n    ctx.send({ data: apiTokens } satisfies List.Response);\n  },\n\n  async revoke(ctx: Context) {\n    const { id } = ctx.params as Revoke.Params;\n    const apiTokenService = getService('api-token');\n    const apiToken = await apiTokenService.revoke(id);\n\n    ctx.deleted({ data: apiToken } satisfies Revoke.Response);\n  },\n\n  async get(ctx: Context) {\n    const { id } = ctx.params;\n    const apiTokenService = getService('api-token');\n    const apiToken = await apiTokenService.getById(id);\n\n    if (!apiToken) {\n      ctx.notFound('API Token not found');\n      return;\n    }\n\n    ctx.send({ data: apiToken } satisfies Get.Response);\n  },\n\n  async update(ctx: Context) {\n    const { body } = ctx.request as Update.Request;\n    const { id } = ctx.params as Update.Params;\n    const apiTokenService = getService('api-token');\n\n    const attributes = body;\n    /**\n     * We trim both field to avoid having issues with either:\n     * - having a space at the end or start of the value.\n     * - having only spaces as value;\n     */\n    if (has('name', attributes)) {\n      attributes.name = trim(body.name);\n    }\n\n    if (has('description', attributes) || attributes.description === null) {\n      attributes.description = trim(body.description);\n    }\n\n    await validateApiTokenUpdateInput(attributes);\n\n    const apiTokenExists = await apiTokenService.getById(id);\n    if (!apiTokenExists) {\n      return ctx.notFound('API Token not found');\n    }\n\n    if (has('name', attributes)) {\n      const nameAlreadyTaken = await apiTokenService.getByName(attributes.name);\n\n      /**\n       * We cast the ids as string as the one coming from the ctx isn't cast\n       * as a Number in case it is supposed to be an integer. It remains\n       * as a string. This way we avoid issues with integers in the db.\n       */\n      if (!!nameAlreadyTaken && !strings.isEqual(nameAlreadyTaken.id, id)) {\n        throw new ApplicationError('Name already taken');\n      }\n    }\n\n    const apiToken = await apiTokenService.update(id, attributes);\n    ctx.send({ data: apiToken } satisfies Update.Response);\n  },\n\n  async getLayout(ctx: Context) {\n    const apiTokenService = getService('api-token');\n    // TODO\n    // @ts-expect-error remove this controller if not used\n    const layout = await apiTokenService.getApiTokenLayout();\n\n    ctx.send({ data: layout });\n  },\n};\n"],"names":["ApplicationError","errors","create","ctx","body","request","apiTokenService","getService","attributes","name","trim","description","type","permissions","lifespan","validateApiTokenCreationInput","alreadyExists","exists","apiToken","created","data","regenerate","id","params","apiTokenExists","getById","notFound","accessToken","list","apiTokens","send","revoke","deleted","get","update","has","validateApiTokenUpdateInput","nameAlreadyTaken","getByName","strings","isEqual","getLayout","layout","getApiTokenLayout"],"mappings":"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"}