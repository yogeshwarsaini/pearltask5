{"version":3,"file":"admin.js","sources":["../../../../../server/src/controllers/admin.ts"],"sourcesContent":["import type { Context } from 'koa';\n\nimport path from 'path';\n\nimport { map, values, sumBy, pipe, flatMap, propEq } from 'lodash/fp';\nimport _ from 'lodash';\nimport { exists } from 'fs-extra';\nimport { env } from '@strapi/utils';\nimport tsUtils from '@strapi/typescript-utils';\nimport {\n  validateUpdateProjectSettings,\n  validateUpdateProjectSettingsFiles,\n  validateUpdateProjectSettingsImagesDimensions,\n} from '../validation/project-settings';\nimport { getService } from '../utils';\n\nimport type {\n  Init,\n  GetProjectSettings,\n  Information,\n  Plugins,\n  TelemetryProperties,\n  UpdateProjectSettings,\n  GetGuidedTourMeta,\n} from '../../../shared/contracts/admin';\n\nconst { isUsingTypeScript } = tsUtils;\n\n/**\n * A set of functions called \"actions\" for `Admin`\n */\nexport default {\n  // TODO very temporary to check the switch ee/ce\n  // When removing this we need to update the /admin/src/index.js file\n  // whe,re we set the strapi.window.isEE value\n\n  // NOTE: admin/ee/server overrides this controller, and adds the EE features\n  // This returns an empty feature list for CE\n  async getProjectType() {\n    const flags = strapi.config.get('admin.flags', {});\n    return { data: { isEE: false, features: [], flags } };\n  },\n\n  async init() {\n    let uuid = strapi.config.get('uuid', false);\n    const hasAdmin = await getService('user').exists();\n    const { menuLogo, authLogo } = await getService('project-settings').getProjectSettings();\n    // set to null if telemetryDisabled flag not avaialble in package.json\n    const telemetryDisabled: boolean | null = strapi.config.get(\n      'packageJsonStrapi.telemetryDisabled',\n      null\n    );\n\n    if (telemetryDisabled !== null && telemetryDisabled === true) {\n      uuid = false;\n    }\n\n    return {\n      data: {\n        uuid,\n        hasAdmin,\n        menuLogo: menuLogo ? menuLogo.url : null,\n        authLogo: authLogo ? authLogo.url : null,\n      },\n    } satisfies Init.Response;\n  },\n\n  async getProjectSettings() {\n    return getService(\n      'project-settings'\n    ).getProjectSettings() satisfies Promise<GetProjectSettings.Response>;\n  },\n\n  async updateProjectSettings(ctx: Context) {\n    const {\n      request: { files, body },\n    } = ctx as { request: UpdateProjectSettings.Request };\n\n    const projectSettingsService = getService('project-settings');\n\n    await validateUpdateProjectSettings(body);\n    await validateUpdateProjectSettingsFiles(files);\n\n    const formatedFiles = await projectSettingsService.parseFilesData(files);\n    await validateUpdateProjectSettingsImagesDimensions(formatedFiles);\n\n    return projectSettingsService.updateProjectSettings({\n      ...body,\n      ...formatedFiles,\n    }) satisfies Promise<UpdateProjectSettings.Response>;\n  },\n\n  async telemetryProperties(ctx: Context) {\n    // If the telemetry is disabled, ignore the request and return early\n    if (strapi.telemetry.isDisabled) {\n      ctx.status = 204;\n      return;\n    }\n\n    const useTypescriptOnServer = await isUsingTypeScript(strapi.dirs.app.root);\n    const useTypescriptOnAdmin = await isUsingTypeScript(\n      path.join(strapi.dirs.app.root, 'src', 'admin')\n    );\n    const isHostedOnStrapiCloud = env('STRAPI_HOSTING', null) === 'strapi.cloud';\n\n    const numberOfAllContentTypes = _.size(strapi.contentTypes);\n    const numberOfComponents = _.size(strapi.components);\n\n    const getNumberOfDynamicZones = () => {\n      return pipe(\n        map('attributes'),\n        flatMap(values),\n        // @ts-expect-error lodash types\n        sumBy(propEq('type', 'dynamiczone'))\n      )(strapi.contentTypes as any);\n    };\n\n    return {\n      data: {\n        useTypescriptOnServer,\n        useTypescriptOnAdmin,\n        isHostedOnStrapiCloud,\n        numberOfAllContentTypes, // TODO: V5: This event should be renamed numberOfContentTypes in V5 as the name is already taken to describe the number of content types using i18n.\n        numberOfComponents,\n        numberOfDynamicZones: getNumberOfDynamicZones(),\n      },\n    } satisfies TelemetryProperties.Response;\n  },\n\n  async information() {\n    const currentEnvironment: string = strapi.config.get('environment');\n    const autoReload = strapi.config.get('autoReload', false);\n    const strapiVersion = strapi.config.get('info.strapi', null);\n    const dependencies = strapi.config.get('info.dependencies', {});\n    const projectId = strapi.config.get('uuid', null);\n    const nodeVersion = process.version;\n    const communityEdition = !strapi.EE;\n    const useYarn: boolean = await exists(path.join(process.cwd(), 'yarn.lock'));\n\n    return {\n      data: {\n        currentEnvironment,\n        autoReload,\n        strapiVersion,\n        dependencies,\n        projectId,\n        nodeVersion,\n        communityEdition,\n        useYarn,\n      },\n    } satisfies Information.Response;\n  },\n\n  async plugins(ctx: Context) {\n    const enabledPlugins = strapi.config.get('enabledPlugins') as any;\n\n    // List of core plugins that are always enabled,\n    // and so it's not necessary to display them in the plugins list\n    const CORE_PLUGINS = [\n      'content-manager',\n      'content-type-builder',\n      'email',\n      'upload',\n      'i18n',\n      'content-releases',\n      'review-workflows',\n    ];\n\n    const plugins = Object.entries(enabledPlugins)\n      .filter(([key]: any) => !CORE_PLUGINS.includes(key))\n      .map(([key, plugin]: any) => ({\n        name: plugin.info.name || key,\n        displayName: plugin.info.displayName || plugin.info.name || key,\n        description: plugin.info.description || '',\n        packageName: plugin.info.packageName,\n      }));\n\n    ctx.send({ plugins }) satisfies Plugins.Response;\n  },\n\n  async licenseTrialTimeLeft() {\n    const data = await strapi.ee.getTrialEndDate({\n      strapi,\n    });\n\n    return data;\n  },\n\n  async getGuidedTourMeta(ctx: Context) {\n    const [isFirstSuperAdminUser, completedActions] = await Promise.all([\n      getService('user').isFirstSuperAdminUser(ctx.state.user.id),\n      getService('guided-tour').getCompletedActions(),\n    ]);\n\n    return {\n      data: {\n        isFirstSuperAdminUser,\n        completedActions,\n      },\n    } satisfies GetGuidedTourMeta.Response;\n  },\n};\n"],"names":["isUsingTypeScript","tsUtils","getProjectType","flags","strapi","config","get","data","isEE","features","init","uuid","hasAdmin","getService","exists","menuLogo","authLogo","getProjectSettings","telemetryDisabled","url","updateProjectSettings","ctx","request","files","body","projectSettingsService","validateUpdateProjectSettings","validateUpdateProjectSettingsFiles","formatedFiles","parseFilesData","validateUpdateProjectSettingsImagesDimensions","telemetryProperties","telemetry","isDisabled","status","useTypescriptOnServer","dirs","app","root","useTypescriptOnAdmin","path","join","isHostedOnStrapiCloud","env","numberOfAllContentTypes","_","size","contentTypes","numberOfComponents","components","getNumberOfDynamicZones","pipe","map","flatMap","values","sumBy","propEq","numberOfDynamicZones","information","currentEnvironment","autoReload","strapiVersion","dependencies","projectId","nodeVersion","process","version","communityEdition","EE","useYarn","cwd","plugins","enabledPlugins","CORE_PLUGINS","Object","entries","filter","key","includes","plugin","name","info","displayName","description","packageName","send","licenseTrialTimeLeft","ee","getTrialEndDate","getGuidedTourMeta","isFirstSuperAdminUser","completedActions","Promise","all","state","user","id","getCompletedActions"],"mappings":"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"}