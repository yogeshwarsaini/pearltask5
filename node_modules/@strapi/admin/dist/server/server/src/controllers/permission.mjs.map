{"version":3,"file":"permission.mjs","sources":["../../../../../server/src/controllers/permission.ts"],"sourcesContent":["import type { Context } from 'koa';\nimport { validateCheckPermissionsInput } from '../validation/permission';\nimport { getService } from '../utils';\nimport { formatConditions } from './formatters';\nimport type { Action } from '../domain/action';\nimport type { GetAll, Check } from '../../../shared/contracts/permissions';\nimport { Condition } from '../domain/condition';\nimport { Permission } from '../../../shared/contracts/shared';\n\nexport default {\n  /**\n   * Check each permissions from `request.body.permissions` and returns an array of booleans\n   * @param {KoaContext} ctx - koa context\n   */\n  async check(ctx: Context) {\n    const { body: input } = ctx.request as Check.Request;\n    const { userAbility } = ctx.state;\n\n    await validateCheckPermissionsInput(input);\n\n    const { engine } = getService('permission');\n\n    const checkPermissionsFn = engine.checkMany(userAbility);\n\n    ctx.body = {\n      data: checkPermissionsFn(input.permissions as Permission[]),\n    } satisfies Check.Response;\n  },\n\n  /**\n   * Returns every permissions, in nested format\n   * @param {KoaContext} ctx - koa context\n   */\n  async getAll(ctx: Context) {\n    const { sectionsBuilder, actionProvider, conditionProvider } = getService('permission');\n\n    const actions = actionProvider.values() as Action[];\n    const conditions = conditionProvider.values() as Condition[];\n    const sections = await sectionsBuilder.build(actions);\n\n    ctx.body = {\n      data: {\n        // @ts-expect-error - refactor to use a proper type\n        conditions: formatConditions(conditions),\n        sections,\n      },\n    } satisfies GetAll.Response;\n  },\n};\n"],"names":["check","ctx","body","input","request","userAbility","state","validateCheckPermissionsInput","engine","getService","checkPermissionsFn","checkMany","data","permissions","getAll","sectionsBuilder","actionProvider","conditionProvider","actions","values","conditions","sections","build","formatConditions"],"mappings":";;;;AASA,iBAAe;AACb;;;MAIA,MAAMA,OAAMC,GAAY,EAAA;AACtB,QAAA,MAAM,EAAEC,IAAMC,EAAAA,KAAK,EAAE,GAAGF,IAAIG,OAAO;AACnC,QAAA,MAAM,EAAEC,WAAW,EAAE,GAAGJ,IAAIK,KAAK;AAEjC,QAAA,MAAMC,6BAA8BJ,CAAAA,KAAAA,CAAAA;AAEpC,QAAA,MAAM,EAAEK,MAAM,EAAE,GAAGC,UAAW,CAAA,YAAA,CAAA;QAE9B,MAAMC,kBAAAA,GAAqBF,MAAOG,CAAAA,SAAS,CAACN,WAAAA,CAAAA;AAE5CJ,QAAAA,GAAAA,CAAIC,IAAI,GAAG;YACTU,IAAMF,EAAAA,kBAAAA,CAAmBP,MAAMU,WAAW;AAC5C,SAAA;AACF,KAAA;AAEA;;;MAIA,MAAMC,QAAOb,GAAY,EAAA;QACvB,MAAM,EAAEc,eAAe,EAAEC,cAAc,EAAEC,iBAAiB,EAAE,GAAGR,UAAW,CAAA,YAAA,CAAA;QAE1E,MAAMS,OAAAA,GAAUF,eAAeG,MAAM,EAAA;QACrC,MAAMC,UAAAA,GAAaH,kBAAkBE,MAAM,EAAA;AAC3C,QAAA,MAAME,QAAW,GAAA,MAAMN,eAAgBO,CAAAA,KAAK,CAACJ,OAAAA,CAAAA;AAE7CjB,QAAAA,GAAAA,CAAIC,IAAI,GAAG;YACTU,IAAM,EAAA;;AAEJQ,gBAAAA,UAAAA,EAAYG,gBAAiBH,CAAAA,UAAAA,CAAAA;AAC7BC,gBAAAA;AACF;AACF,SAAA;AACF;AACF,CAAE;;;;"}