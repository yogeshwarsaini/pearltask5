{"version":3,"file":"index.js","sources":["../../../../../../server/src/domain/permission/index.ts"],"sourcesContent":["import type { Utils } from '@strapi/types';\n\nimport { providerFactory } from '@strapi/utils';\nimport {\n  pipe,\n  set,\n  pick,\n  eq,\n  omit,\n  remove,\n  get,\n  uniq,\n  isArray,\n  map,\n  curry,\n  merge,\n} from 'lodash/fp';\nimport { Permission } from '../../../../shared/contracts/shared';\nimport { SanitizedPermission } from '../../../../shared/contracts/roles';\n\nexport type CreatePermissionPayload = Utils.Object.PartialBy<\n  Permission,\n  'actionParameters' | 'conditions' | 'properties' | 'subject' | 'id' | 'createdAt' | 'updatedAt'\n>;\n\ntype Provider = ReturnType<typeof providerFactory>;\n\nexport const permissionFields = [\n  'id',\n  'action',\n  'actionParameters',\n  'subject',\n  'properties',\n  'conditions',\n  'role',\n];\nexport const sanitizedPermissionFields = [\n  'id',\n  'action',\n  'actionParameters',\n  'subject',\n  'properties',\n  'conditions',\n] as const;\n\nexport const sanitizePermissionFields: (p: Permission) => SanitizedPermission =\n  pick(sanitizedPermissionFields);\n\n/**\n * Creates a permission with default values\n */\nconst getDefaultPermission = () => ({\n  actionParameters: {},\n  conditions: [],\n  properties: {},\n  subject: null,\n});\n\n/**\n * Returns a new permission with the given condition\n * @param condition - The condition to add\n * @param permission - The permission on which we want to add the condition\n * @return\n */\nexport const addCondition = curry((condition: string, permission: Permission): Permission => {\n  const { conditions } = permission;\n  const newConditions = Array.isArray(conditions)\n    ? uniq(conditions.concat(condition))\n    : [condition];\n\n  return set('conditions', newConditions, permission);\n});\n\n/**\n * Returns a new permission without the given condition\n * @param condition - The condition to remove\n * @param permission - The permission on which we want to remove the condition\n */\nexport const removeCondition = curry((condition: string, permission: Permission): Permission => {\n  return set('conditions', remove(eq(condition), permission.conditions), permission);\n});\n\n/**\n * Gets a property or a part of a property from a permission.\n * @param property - The property to get\n * @param permission - The permission on which we want to access the property\n */\nexport const getProperty = curry(\n  (property: string, permission: Permission): Permission =>\n    get(`properties.${property}`, permission)\n);\n\n/**\n * Set a value for a given property on a new permission object\n * @param property - The name of the property\n * @param value - The value of the property\n * @param permission - The permission on which we want to set the property\n */\nexport const setProperty = (\n  property: string,\n  value: unknown,\n  permission: Permission\n): Permission => {\n  return set(`properties.${property}`, value, permission);\n};\n\n/**\n * Returns a new permission without the given property name set\n * @param property - The name of the property to delete\n * @param permission - The permission on which we want to remove the property\n */\nexport const deleteProperty = <TProperty extends string>(\n  property: TProperty,\n  permission: Permission\n) => omit(`properties.${property}`, permission) as Omit<Permission, TProperty>;\n\n/**\n * Creates a new {@link Permission} object from raw attributes. Set default values for certain fields\n * @param  attributes\n */\nexport const create = (attributes: CreatePermissionPayload) => {\n  return pipe(pick(permissionFields), merge(getDefaultPermission()))(attributes) as Permission;\n};\n\n/**\n * Using the given condition provider, check and remove invalid condition from the permission's condition array.\n * @param provider - The condition provider used to do the checks\n * @param permission - The condition to sanitize\n */\nexport const sanitizeConditions = curry(\n  (provider: Provider, permission: Permission): Permission => {\n    if (!isArray(permission.conditions)) {\n      return permission;\n    }\n\n    return permission.conditions\n      .filter((condition: string) => !provider.has(condition))\n      .reduce(\n        (perm: Permission, condition: string) => removeCondition(condition, perm),\n        permission\n      );\n  }\n);\n\n/**\n * Transform raw attributes into valid permissions using the create domain function.\n * @param  payload - Can either be a single object of attributes or an array of those objects.\n */\n\nfunction toPermission<T extends CreatePermissionPayload>(payload: T[]): Permission[];\nfunction toPermission<T extends CreatePermissionPayload>(payload: T): Permission;\nfunction toPermission<T extends CreatePermissionPayload>(\n  payload: T[] | T\n): Permission[] | Permission {\n  if (isArray(payload)) {\n    return map((value) => create(value), payload);\n  }\n\n  return create(payload);\n}\n\nexport { toPermission };\n\nexport default {\n  addCondition,\n  removeCondition,\n  create,\n  deleteProperty,\n  permissionFields,\n  getProperty,\n  sanitizedPermissionFields,\n  sanitizeConditions,\n  sanitizePermissionFields,\n  setProperty,\n  toPermission,\n};\n"],"names":["permissionFields","sanitizedPermissionFields","sanitizePermissionFields","pick","getDefaultPermission","actionParameters","conditions","properties","subject","addCondition","curry","condition","permission","newConditions","Array","isArray","uniq","concat","set","removeCondition","remove","eq","getProperty","property","get","setProperty","value","deleteProperty","omit","create","attributes","pipe","merge","sanitizeConditions","provider","filter","has","reduce","perm","toPermission","payload","map"],"mappings":"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"}