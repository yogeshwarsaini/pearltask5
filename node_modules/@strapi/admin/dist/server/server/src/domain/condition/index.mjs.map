{"version":3,"file":"index.mjs","sources":["../../../../../../server/src/domain/condition/index.ts"],"sourcesContent":["import { pipe, merge, set, pick } from 'lodash/fp';\n\nexport type Condition = {\n  id: string;\n  displayName: string;\n  name: string;\n  plugin?: string;\n  category?: string;\n  /**\n   * The handler of a {@link Condition}\n   */\n  handler: (user: object, options: object) => object | boolean;\n};\n\n/**\n * Set of attributes used to create a new {@link Action} object\n */\nexport type CreateConditionPayload = Omit<Condition, 'id'>;\n\nconst DEFAULT_CATEGORY = 'default';\n\n/**\n * Get the default value used for every condition\n * @return {Condition}\n */\nexport const getDefaultConditionAttributes = () => ({\n  category: DEFAULT_CATEGORY,\n});\n\n/**\n * Get the list of all the valid attributes of a {@link Condition}\n * @return {string[]}\n */\nexport const conditionFields = ['id', 'displayName', 'handler', 'plugin', 'category'] as const;\n\n/**\n * Remove unwanted attributes from a {@link Condition}\n */\nexport const sanitizeConditionAttributes = pick(conditionFields);\n\nexport const computeConditionId = (condition: CreateConditionPayload) => {\n  const { name, plugin } = condition;\n\n  if (!plugin) {\n    return `api::${name}`;\n  }\n\n  if (plugin === 'admin') {\n    return `admin::${name}`;\n  }\n\n  return `plugin::${plugin}.${name}`;\n};\n\n/**\n * Assign an id attribute to a {@link CreateConditionPayload} object\n * @param  attrs - Payload used to create a condition\n */\nexport const assignConditionId = (attrs: CreateConditionPayload): Condition => {\n  const condition = set('id', computeConditionId(attrs), attrs) as CreateConditionPayload & {\n    id: string;\n  };\n  return condition;\n};\n\n/**\n * Transform the given attributes into a domain representation of a Condition\n * @param payload - The condition payload containing the attributes needed to create a {@link Condition}\n */\nexport const create = pipe(\n  assignConditionId,\n  sanitizeConditionAttributes,\n  merge(getDefaultConditionAttributes())\n) as (payload: CreateConditionPayload) => Condition;\n\nexport default {\n  assignConditionId,\n  computeConditionId,\n  conditionFields,\n  create,\n  getDefaultConditionAttributes,\n  sanitizeConditionAttributes,\n};\n"],"names":["DEFAULT_CATEGORY","getDefaultConditionAttributes","category","conditionFields","sanitizeConditionAttributes","pick","computeConditionId","condition","name","plugin","assignConditionId","attrs","set","create","pipe","merge"],"mappings":";;AAmBA,MAAMA,gBAAmB,GAAA,SAAA;AAEzB;;;AAGC,IACM,MAAMC,6BAAgC,GAAA,KAAO;QAClDC,QAAUF,EAAAA;AACZ,KAAA;AAEA;;;UAIaG,eAAkB,GAAA;AAAC,IAAA,IAAA;AAAM,IAAA,aAAA;AAAe,IAAA,SAAA;AAAW,IAAA,QAAA;AAAU,IAAA;;AAE1E;;AAEC,IACM,MAAMC,2BAA8BC,GAAAA,IAAAA,CAAKF,eAAiB;AAE1D,MAAMG,qBAAqB,CAACC,SAAAA,GAAAA;AACjC,IAAA,MAAM,EAAEC,IAAI,EAAEC,MAAM,EAAE,GAAGF,SAAAA;AAEzB,IAAA,IAAI,CAACE,MAAQ,EAAA;AACX,QAAA,OAAO,CAAC,KAAK,EAAED,IAAAA,CAAK,CAAC;AACvB;AAEA,IAAA,IAAIC,WAAW,OAAS,EAAA;AACtB,QAAA,OAAO,CAAC,OAAO,EAAED,IAAAA,CAAK,CAAC;AACzB;AAEA,IAAA,OAAO,CAAC,QAAQ,EAAEC,OAAO,CAAC,EAAED,KAAK,CAAC;AACpC;AAEA;;;IAIaE,MAAAA,iBAAAA,GAAoB,CAACC,KAAAA,GAAAA;AAChC,IAAA,MAAMJ,SAAYK,GAAAA,GAAAA,CAAI,IAAMN,EAAAA,kBAAAA,CAAmBK,KAAQA,CAAAA,EAAAA,KAAAA,CAAAA;IAGvD,OAAOJ,SAAAA;AACT;AAEA;;;AAGC,IACYM,MAAAA,MAAAA,GAASC,KACpBJ,iBACAN,EAAAA,2BAAAA,EACAW,MAAMd,6BAC4C,EAAA,CAAA;AAEpD,aAAe;AACbS,IAAAA,iBAAAA;AACAJ,IAAAA,kBAAAA;AACAH,IAAAA,eAAAA;AACAU,IAAAA,MAAAA;AACAZ,IAAAA,6BAAAA;AACAG,IAAAA;AACF,CAAE;;;;"}