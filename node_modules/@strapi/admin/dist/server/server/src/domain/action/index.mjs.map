{"version":3,"file":"index.mjs","sources":["../../../../../../server/src/domain/action/index.ts"],"sourcesContent":["import type { Utils } from '@strapi/types';\n\nimport { curry, pipe, merge, set, pick, omit, includes, isArray, prop } from 'lodash/fp';\n\nexport interface ActionAlias {\n  /**\n   * The action ID to alias\n   */\n  actionId: string;\n\n  /**\n   * An optional array of subject to restrict the alias usage\n   */\n  subjects?: string[];\n}\n\nexport type Action = {\n  /**\n   * The unique identifier of the action\n   */\n  actionId: string;\n\n  /**\n   * The section linked to the action - These can be 'contentTypes' | 'plugins' | 'settings' | 'internal'\n   */\n  section: string;\n\n  /**\n   * The human readable name of an action\n   */\n  displayName: string;\n\n  /**\n   * The main category of an action\n   */\n  category: string;\n\n  /**\n   * The secondary category of an action (only for settings and plugins section)\n   */\n  subCategory?: string;\n\n  /**\n   * The plugin that provides the action\n   */\n  pluginName?: string;\n\n  /**\n   * A list of subjects on which the action can be applied\n   */\n  subjects?: string[];\n\n  /**\n   * The options of an action\n   */\n  options: {\n    /**\n     * The list of properties that can be associated with an action\n     */\n    applyToProperties: string[] | null;\n  };\n\n  /**\n   * An optional array of @see {@link ActionAlias}.\n   *\n   * It represents the possible aliases for the current action.\n   *\n   * Aliases are unidirectional.\n   *\n   * Note: This is an internal property and probably shouldn't be used outside Strapi core features.\n   *       Its behavior might change at any time without notice.\n   *\n   * @internal\n   */\n  aliases?: ActionAlias[];\n};\n\n/**\n * Set of attributes used to create a new {@link Action} object\n * @typedef {Action, { uid: string }} CreateActionPayload\n */\nexport type CreateActionPayload = Utils.Intersect<\n  [\n    Utils.Object.PartialBy<\n      // Action Id is computed from the uid value\n      Omit<Action, 'actionId'>,\n      // Options is filled with default values\n      'options'\n    >,\n    { uid: string },\n  ]\n>;\n\n/**\n * Return the default attributes of a new {@link Action}\n * @return Partial<Action>\n */\nconst getDefaultActionAttributes = (): Partial<Action> => ({\n  options: {\n    applyToProperties: null,\n  },\n});\n\n/**\n * Get the list of all the valid attributes of an {@link Action}\n */\nconst actionFields = [\n  'section',\n  'displayName',\n  'category',\n  'subCategory',\n  'pluginName',\n  'subjects',\n  'options',\n  'actionId',\n  'aliases',\n] as const;\n\n/**\n * Remove unwanted attributes from an {@link Action}\n */\nconst sanitizeActionAttributes = pick(actionFields) as (\n  action: Action | CreateActionPayload\n) => Action;\n\n/**\n * Create and return an identifier for an {@link CreateActionPayload}.\n * The format is based on the action's source ({@link CreateActionPayload.pluginName} or 'application') and {@link CreateActionPayload.uid}.\n * @param {CreateActionPayload} attributes\n * @return {string}\n */\n// TODO: TS - Use Common.UID\nconst computeActionId = (attributes: CreateActionPayload): string => {\n  const { pluginName, uid } = attributes;\n\n  if (!pluginName) {\n    return `api::${uid}`;\n  }\n\n  if (pluginName === 'admin') {\n    return `admin::${uid}`;\n  }\n\n  return `plugin::${pluginName}.${uid}`;\n};\n\n/**\n * Assign an actionId attribute to an {@link CreateActionPayload} object\n */\nconst assignActionId = (attrs: CreateActionPayload) =>\n  set('actionId', computeActionId(attrs), attrs);\n\n/**\n * Transform an action by adding or removing the {@link Action.subCategory} attribute\n * @param {Action} action - The action to process\n * @return {Action}\n */\nconst assignOrOmitSubCategory = (action: Action): Action => {\n  const shouldHaveSubCategory = ['settings', 'plugins'].includes(action.section);\n\n  return shouldHaveSubCategory\n    ? set('subCategory', action.subCategory || 'general', action)\n    : omit('subCategory', action);\n};\n\n/**\n * Check if a property can be applied to an {@link Action}\n */\nconst appliesToProperty = curry((property: string, action: Action): boolean => {\n  return pipe(prop('options.applyToProperties'), includes(property))(action);\n});\n\n/**\n * Check if an action applies to a subject\n */\nconst appliesToSubject = curry((subject: string, action: Action): boolean => {\n  return isArray(action.subjects) && includes(subject, action.subjects);\n});\n\n/**\n * Transform the given attributes into a domain representation of an Action\n */\nconst create: (payload: CreateActionPayload) => Action = pipe(\n  // Create and assign an action identifier to the action\n  // (need to be done before the sanitizeActionAttributes since we need the uid here)\n  assignActionId,\n  // Add or remove the sub category field based on the pluginName attribute\n  assignOrOmitSubCategory,\n  // Remove unwanted attributes from the payload\n  sanitizeActionAttributes,\n  // Complete the action creation by adding default values for some attributes\n  merge(getDefaultActionAttributes())\n);\n\nexport default {\n  actionFields,\n  appliesToProperty,\n  appliesToSubject,\n  assignActionId,\n  assignOrOmitSubCategory,\n  create,\n  computeActionId,\n  getDefaultActionAttributes,\n  sanitizeActionAttributes,\n};\n"],"names":["getDefaultActionAttributes","options","applyToProperties","actionFields","sanitizeActionAttributes","pick","computeActionId","attributes","pluginName","uid","assignActionId","attrs","set","assignOrOmitSubCategory","action","shouldHaveSubCategory","includes","section","subCategory","omit","appliesToProperty","curry","property","pipe","prop","appliesToSubject","subject","isArray","subjects","create","merge"],"mappings":";;AA6FA;;;IAIA,MAAMA,0BAA6B,GAAA,KAAwB;QACzDC,OAAS,EAAA;YACPC,iBAAmB,EAAA;AACrB;KACF,CAAA;AAEA;;AAEC,IACD,MAAMC,YAAe,GAAA;AACnB,IAAA,SAAA;AACA,IAAA,aAAA;AACA,IAAA,UAAA;AACA,IAAA,aAAA;AACA,IAAA,YAAA;AACA,IAAA,UAAA;AACA,IAAA,SAAA;AACA,IAAA,UAAA;AACA,IAAA;AACD,CAAA;AAED;;IAGA,MAAMC,2BAA2BC,IAAKF,CAAAA,YAAAA,CAAAA;AAItC;;;;;AAKC;AAED,MAAMG,kBAAkB,CAACC,UAAAA,GAAAA;AACvB,IAAA,MAAM,EAAEC,UAAU,EAAEC,GAAG,EAAE,GAAGF,UAAAA;AAE5B,IAAA,IAAI,CAACC,UAAY,EAAA;AACf,QAAA,OAAO,CAAC,KAAK,EAAEC,GAAAA,CAAI,CAAC;AACtB;AAEA,IAAA,IAAID,eAAe,OAAS,EAAA;AAC1B,QAAA,OAAO,CAAC,OAAO,EAAEC,GAAAA,CAAI,CAAC;AACxB;AAEA,IAAA,OAAO,CAAC,QAAQ,EAAED,WAAW,CAAC,EAAEC,IAAI,CAAC;AACvC,CAAA;AAEA;;AAEC,IACD,MAAMC,cAAiB,GAAA,CAACC,QACtBC,GAAI,CAAA,UAAA,EAAYN,gBAAgBK,KAAQA,CAAAA,EAAAA,KAAAA,CAAAA;AAE1C;;;;IAKA,MAAME,0BAA0B,CAACC,MAAAA,GAAAA;AAC/B,IAAA,MAAMC,qBAAwB,GAAA;AAAC,QAAA,UAAA;AAAY,QAAA;KAAU,CAACC,QAAQ,CAACF,MAAAA,CAAOG,OAAO,CAAA;IAE7E,OAAOF,qBAAAA,GACHH,IAAI,aAAeE,EAAAA,MAAAA,CAAOI,WAAW,IAAI,SAAA,EAAWJ,MACpDK,CAAAA,GAAAA,IAAAA,CAAK,aAAeL,EAAAA,MAAAA,CAAAA;AAC1B,CAAA;AAEA;;AAEC,IACD,MAAMM,iBAAAA,GAAoBC,KAAM,CAAA,CAACC,QAAkBR,EAAAA,MAAAA,GAAAA;AACjD,IAAA,OAAOS,IAAKC,CAAAA,IAAAA,CAAK,2BAA8BR,CAAAA,EAAAA,QAAAA,CAASM,QAAWR,CAAAA,CAAAA,CAAAA,MAAAA,CAAAA;AACrE,CAAA,CAAA;AAEA;;AAEC,IACD,MAAMW,gBAAAA,GAAmBJ,KAAM,CAAA,CAACK,OAAiBZ,EAAAA,MAAAA,GAAAA;AAC/C,IAAA,OAAOa,QAAQb,MAAOc,CAAAA,QAAQ,KAAKZ,QAASU,CAAAA,OAAAA,EAASZ,OAAOc,QAAQ,CAAA;AACtE,CAAA,CAAA;AAEA;;IAGA,MAAMC,MAAmDN,GAAAA,IAAAA;AAEvD;AACAb,cAAAA;AAEAG,uBAAAA;AAEAT,wBAAAA;AAEA0B,KAAM9B,CAAAA,0BAAAA,EAAAA,CAAAA,CAAAA;AAGR,mBAAe;AACbG,IAAAA,YAAAA;AACAiB,IAAAA,iBAAAA;AACAK,IAAAA,gBAAAA;AACAf,IAAAA,cAAAA;AACAG,IAAAA,uBAAAA;AACAgB,IAAAA,MAAAA;AACAvB,IAAAA,eAAAA;AACAN,IAAAA,0BAAAA;AACAI,IAAAA;AACF,CAAE;;;;"}