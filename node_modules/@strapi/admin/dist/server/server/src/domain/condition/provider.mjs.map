{"version":3,"file":"provider.mjs","sources":["../../../../../../server/src/domain/condition/provider.ts"],"sourcesContent":["import { providerFactory } from '@strapi/utils';\nimport domain from '.';\nimport type { CreateConditionPayload } from '.';\n\n/**\n * @typedef ConditionProviderOverride\n * @property {function(CreateConditionPayload)} register\n * @property {function(attributes CreateConditionPayload[]): Promise<this>} registerMany\n */\n\n/**\n * Creates a new instance of a condition provider\n * @return {Provider & ConditionProviderOverride}\n */\nconst createConditionProvider = () => {\n  const provider = providerFactory();\n\n  return {\n    ...provider,\n\n    async register(conditionAttributes: CreateConditionPayload) {\n      if (strapi.isLoaded) {\n        throw new Error(`You can't register new conditions outside of the bootstrap function.`);\n      }\n\n      const condition = domain.create(conditionAttributes);\n\n      return provider.register(condition.id, condition);\n    },\n\n    async registerMany(conditionsAttributes: CreateConditionPayload[]) {\n      for (const attributes of conditionsAttributes) {\n        await this.register(attributes);\n      }\n\n      return this;\n    },\n  };\n};\n\nexport default createConditionProvider;\n"],"names":["createConditionProvider","provider","providerFactory","register","conditionAttributes","strapi","isLoaded","Error","condition","domain","create","id","registerMany","conditionsAttributes","attributes"],"mappings":";;;AAIA;;;;;;;AASC,UACKA,uBAA0B,GAAA,IAAA;AAC9B,IAAA,MAAMC,QAAWC,GAAAA,eAAAA,EAAAA;IAEjB,OAAO;AACL,QAAA,GAAGD,QAAQ;AAEX,QAAA,MAAME,UAASC,mBAA2C,EAAA;YACxD,IAAIC,MAAAA,CAAOC,QAAQ,EAAE;AACnB,gBAAA,MAAM,IAAIC,KAAAA,CAAM,CAAC,oEAAoE,CAAC,CAAA;AACxF;YAEA,MAAMC,SAAAA,GAAYC,MAAOC,CAAAA,MAAM,CAACN,mBAAAA,CAAAA;AAEhC,YAAA,OAAOH,QAASE,CAAAA,QAAQ,CAACK,SAAAA,CAAUG,EAAE,EAAEH,SAAAA,CAAAA;AACzC,SAAA;AAEA,QAAA,MAAMI,cAAaC,oBAA8C,EAAA;YAC/D,KAAK,MAAMC,cAAcD,oBAAsB,CAAA;gBAC7C,MAAM,IAAI,CAACV,QAAQ,CAACW,UAAAA,CAAAA;AACtB;AAEA,YAAA,OAAO,IAAI;AACb;AACF,KAAA;AACF;;;;"}