{"version":3,"file":"common-validators.js","sources":["../../../../../server/src/validation/common-validators.ts"],"sourcesContent":["import { yup } from '@strapi/utils';\nimport _ from 'lodash';\nimport { isEmpty, has, isNil, isArray } from 'lodash/fp';\nimport { getService } from '../utils';\nimport actionDomain, { type Action } from '../domain/action';\nimport { checkFieldsAreCorrectlyNested, checkFieldsDontHaveDuplicates } from './common-functions';\nimport actions from '../domain/action/index';\n\nconst { actionFields } = actions;\n\nconst getActionFromProvider = (actionId: string) => {\n  return getService('permission').actionProvider.get(actionId);\n};\n\nexport const email = yup.string().email().lowercase();\n\nexport const firstname = yup.string().trim().min(1);\n\nexport const lastname = yup.string();\n\nexport const username = yup.string().min(1);\n\nexport const password = yup\n  .string()\n  .min(8)\n  .test('required-byte-size', '${path} must be less than 73 bytes', function (value) {\n    if (!value) return true;\n    const byteSize = new TextEncoder().encode(value).length;\n    return byteSize <= 72;\n  })\n  .matches(/[a-z]/, '${path} must contain at least one lowercase character')\n  .matches(/[A-Z]/, '${path} must contain at least one uppercase character')\n  .matches(/\\d/, '${path} must contain at least one number');\n\nexport const roles = yup.array(yup.strapiID()).min(1);\n\nconst isAPluginName = yup\n  .string()\n  .test('is-a-plugin-name', 'is not a plugin name', function (value) {\n    return [undefined, 'admin', ...Object.keys(strapi.plugins)].includes(value)\n      ? true\n      : this.createError({ path: this.path, message: `${this.path} is not an existing plugin` });\n  });\n\nexport const arrayOfConditionNames = yup\n  .array()\n  .of(yup.string())\n  .test('is-an-array-of-conditions', 'is not a plugin name', function (value) {\n    const ids = strapi.service('admin::permission').conditionProvider.keys();\n    return _.isUndefined(value) || _.difference(value, ids).length === 0\n      ? true\n      : this.createError({ path: this.path, message: `contains conditions that don't exist` });\n  });\n\nexport const permissionsAreEquals = (a: any, b: any) =>\n  a.action === b.action && (a.subject === b.subject || (_.isNil(a.subject) && _.isNil(b.subject)));\n\nconst checkNoDuplicatedPermissions = (permissions: unknown) =>\n  !Array.isArray(permissions) ||\n  permissions.every((permA, i) =>\n    permissions.slice(i + 1).every((permB) => !permissionsAreEquals(permA, permB))\n  );\n\nconst checkNilFields = (action: Action) =>\n  function (fields: typeof actionFields) {\n    // If the parent has no action field, then we ignore this test\n    if (isNil(action)) {\n      return true;\n    }\n\n    return actionDomain.appliesToProperty('fields', action) || isNil(fields);\n  };\n\nconst fieldsPropertyValidation = (action: Action) =>\n  yup\n    .array()\n    .of(yup.string())\n    .nullable()\n    .test(\n      'field-nested',\n      'Fields format are incorrect (bad nesting).',\n      checkFieldsAreCorrectlyNested\n    )\n    .test(\n      'field-nested',\n      'Fields format are incorrect (duplicates).',\n      checkFieldsDontHaveDuplicates\n    )\n    .test(\n      'fields-restriction',\n      'The permission at ${path} must have fields set to null or undefined',\n      // @ts-expect-error yup types\n      checkNilFields(action)\n    );\n\nexport const permission = yup\n  .object()\n  .shape({\n    action: yup\n      .string()\n      .required()\n      .test('action-validity', 'action is not an existing permission action', function (actionId) {\n        // If the action field is Nil, ignore the test and let the required check handle the error\n        if (isNil(actionId)) {\n          return true;\n        }\n\n        return !!getActionFromProvider(actionId);\n      }),\n    actionParameters: yup.object().nullable(),\n    subject: yup\n      .string()\n      .nullable()\n      .test('subject-validity', 'Invalid subject submitted', function (subject) {\n        // @ts-expect-error yup types\n        const action = getActionFromProvider(this.options.parent.action);\n\n        if (!action) {\n          return true;\n        }\n\n        if (isNil(action.subjects)) {\n          return isNil(subject);\n        }\n\n        if (isArray(action.subjects) && !isNil(subject)) {\n          return action.subjects.includes(subject);\n        }\n\n        return false;\n      }),\n    properties: yup\n      .object()\n      .test('properties-structure', 'Invalid property set at ${path}', function (properties) {\n        // @ts-expect-error yup types\n        const action = getActionFromProvider(this.options.parent.action) as any;\n        const hasNoProperties = isEmpty(properties) || isNil(properties);\n\n        if (!has('options.applyToProperties', action)) {\n          return hasNoProperties;\n        }\n\n        if (hasNoProperties) {\n          return true;\n        }\n\n        const { applyToProperties } = action.options;\n\n        if (!isArray(applyToProperties)) {\n          return false;\n        }\n\n        return Object.keys(properties).every((property) => applyToProperties.includes(property));\n      })\n      .test(\n        'fields-property',\n        'Invalid fields property at ${path}',\n        async function (properties = {}) {\n          // @ts-expect-error yup types\n          const action = getActionFromProvider(this.options.parent.action) as any;\n\n          if (!action || !properties) {\n            return true;\n          }\n\n          if (!actionDomain.appliesToProperty('fields', action)) {\n            return true;\n          }\n\n          try {\n            await fieldsPropertyValidation(action).validate(properties.fields, {\n              strict: true,\n              abortEarly: false,\n            });\n            return true;\n          } catch (e: any) {\n            // Propagate fieldsPropertyValidation error with updated path\n            throw this.createError({\n              message: e.message,\n              path: `${this.path}.fields`,\n            });\n          }\n        }\n      ),\n    conditions: yup.array().of(yup.string()),\n  })\n  .noUnknown();\n\nexport const updatePermissions = yup\n  .object()\n  .shape({\n    permissions: yup\n      .array()\n      .required()\n      .of(permission)\n      .test(\n        'duplicated-permissions',\n        'Some permissions are duplicated (same action and subject)',\n        checkNoDuplicatedPermissions\n      ),\n  })\n  .required()\n  .noUnknown();\n\nexport default {\n  email,\n  firstname,\n  lastname,\n  username,\n  password,\n  roles,\n  isAPluginName,\n  arrayOfConditionNames,\n  permission,\n  updatePermissions,\n};\n"],"names":["getActionFromProvider","actionId","getService","actionProvider","get","email","yup","string","lowercase","firstname","trim","min","lastname","username","password","test","value","byteSize","TextEncoder","encode","length","matches","roles","array","strapiID","isAPluginName","undefined","Object","keys","strapi","plugins","includes","createError","path","message","arrayOfConditionNames","of","ids","service","conditionProvider","_","isUndefined","difference","permissionsAreEquals","a","b","action","subject","isNil","checkNoDuplicatedPermissions","permissions","Array","isArray","every","permA","i","slice","permB","checkNilFields","fields","actionDomain","appliesToProperty","fieldsPropertyValidation","nullable","checkFieldsAreCorrectlyNested","checkFieldsDontHaveDuplicates","permission","object","shape","required","actionParameters","options","parent","subjects","properties","hasNoProperties","isEmpty","has","applyToProperties","property","validate","strict","abortEarly","e","conditions","noUnknown","updatePermissions"],"mappings":"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"}