{"version":3,"file":"permission.mjs","sources":["../../../../../server/src/validation/permission.ts"],"sourcesContent":["import { yup, validateYupSchema } from '@strapi/utils';\nimport { getService } from '../utils';\nimport validators from './common-validators';\n\nconst checkPermissionsSchema = yup.object().shape({\n  permissions: yup.array().of(\n    yup\n      .object()\n      .shape({\n        action: yup.string().required(),\n        subject: yup.string().nullable(),\n        field: yup.string(),\n      })\n      .noUnknown()\n  ),\n});\n\nconst checkPermissionsExist = function (permissions: any) {\n  const existingActions = getService('permission').actionProvider.values();\n  const failIndex = permissions.findIndex(\n    (permission: any) =>\n      !existingActions.some(\n        (action: any) =>\n          action.actionId === permission.action &&\n          (action.section !== 'contentTypes' || action.subjects.includes(permission.subject))\n      )\n  );\n\n  return failIndex === -1\n    ? true\n    : // @ts-expect-error yup types\n      this.createError({\n        path: 'permissions',\n        message: `[${failIndex}] is not an existing permission action`,\n      });\n};\n\nconst actionsExistSchema = yup\n  .array()\n  .of(\n    yup.object().shape({\n      conditions: yup.array().of(yup.string()),\n    })\n  )\n  .test('actions-exist', '', checkPermissionsExist);\n\nexport const validatePermissionsExist = validateYupSchema(actionsExistSchema);\nexport const validateCheckPermissionsInput = validateYupSchema(checkPermissionsSchema);\nexport const validatedUpdatePermissionsInput = validateYupSchema(validators.updatePermissions);\n\nexport default {\n  validatedUpdatePermissionsInput,\n  validatePermissionsExist,\n  validateCheckPermissionsInput,\n};\n"],"names":["checkPermissionsSchema","yup","object","shape","permissions","array","of","action","string","required","subject","nullable","field","noUnknown","checkPermissionsExist","existingActions","getService","actionProvider","values","failIndex","findIndex","permission","some","actionId","section","subjects","includes","createError","path","message","actionsExistSchema","conditions","test","validatePermissionsExist","validateYupSchema","validateCheckPermissionsInput","validatedUpdatePermissionsInput","validators","updatePermissions"],"mappings":";;;;AAIA,MAAMA,sBAAyBC,GAAAA,GAAAA,CAAIC,MAAM,EAAA,CAAGC,KAAK,CAAC;IAChDC,WAAaH,EAAAA,GAAAA,CAAII,KAAK,EAAGC,CAAAA,EAAE,CACzBL,GACGC,CAAAA,MAAM,EACNC,CAAAA,KAAK,CAAC;QACLI,MAAQN,EAAAA,GAAAA,CAAIO,MAAM,EAAA,CAAGC,QAAQ,EAAA;QAC7BC,OAAST,EAAAA,GAAAA,CAAIO,MAAM,EAAA,CAAGG,QAAQ,EAAA;AAC9BC,QAAAA,KAAAA,EAAOX,IAAIO,MAAM;AACnB,KAAA,CAAA,CACCK,SAAS,EAAA;AAEhB,CAAA,CAAA;AAEA,MAAMC,qBAAAA,GAAwB,SAAUV,WAAgB,EAAA;AACtD,IAAA,MAAMW,eAAkBC,GAAAA,UAAAA,CAAW,YAAcC,CAAAA,CAAAA,cAAc,CAACC,MAAM,EAAA;AACtE,IAAA,MAAMC,SAAYf,GAAAA,WAAAA,CAAYgB,SAAS,CACrC,CAACC,UAAAA,GACC,CAACN,eAAAA,CAAgBO,IAAI,CACnB,CAACf,MAAAA,GACCA,OAAOgB,QAAQ,KAAKF,UAAWd,CAAAA,MAAM,KACpCA,MAAOiB,CAAAA,OAAO,KAAK,cAAA,IAAkBjB,MAAOkB,CAAAA,QAAQ,CAACC,QAAQ,CAACL,UAAAA,CAAWX,OAAO,CAAA,CAAA,CAAA,CAAA;AAIzF,IAAA,OAAOS,cAAc,CAAC,CAAA,GAClB,OAEA,IAAI,CAACQ,WAAW,CAAC;QACfC,IAAM,EAAA,aAAA;AACNC,QAAAA,OAAAA,EAAS,CAAC,CAAC,EAAEV,SAAAA,CAAU,sCAAsC;AAC/D,KAAA,CAAA;AACN,CAAA;AAEA,MAAMW,kBAAAA,GAAqB7B,GACxBI,CAAAA,KAAK,EACLC,CAAAA,EAAE,CACDL,GAAIC,CAAAA,MAAM,EAAGC,CAAAA,KAAK,CAAC;AACjB4B,IAAAA,UAAAA,EAAY9B,IAAII,KAAK,EAAA,CAAGC,EAAE,CAACL,IAAIO,MAAM,EAAA;AACvC,CAEDwB,CAAAA,CAAAA,CAAAA,IAAI,CAAC,eAAA,EAAiB,EAAIlB,EAAAA,qBAAAA,CAAAA;AAEtB,MAAMmB,wBAA2BC,GAAAA,iBAAAA,CAAkBJ,kBAAoB;AACvE,MAAMK,6BAAgCD,GAAAA,iBAAAA,CAAkBlC,sBAAwB;AAC1EoC,MAAAA,+BAAAA,GAAkCF,iBAAkBG,CAAAA,UAAAA,CAAWC,iBAAiB;;;;"}