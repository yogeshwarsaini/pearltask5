{"version":3,"file":"query-builders.js","sources":["../../../../../../../server/src/services/permission/permissions-manager/query-builders.ts"],"sourcesContent":["// TODO: migration\nimport _ from 'lodash';\nimport { rulesToQuery } from '@casl/ability/extra';\n\nconst operatorsMap = {\n  $in: '$in',\n  $nin: '$notIn',\n  $exists: '$notNull',\n  $gte: '$gte',\n  $gt: '$gt',\n  $lte: '$lte',\n  $lt: '$lt',\n  $eq: '$eq',\n  $ne: '$ne',\n  $and: '$and',\n  $or: '$or',\n  $not: '$not',\n} as const;\n\nconst mapKey = (key: keyof typeof operatorsMap) => {\n  if (_.isString(key) && key.startsWith('$') && key in operatorsMap) {\n    return operatorsMap[key];\n  }\n  return key;\n};\n\nconst buildCaslQuery = (ability: unknown, action: unknown, model: unknown) => {\n  // @ts-expect-error casl types\n  return rulesToQuery(ability, action, model, (o) => o.conditions);\n};\n\nconst buildStrapiQuery = (caslQuery: unknown) => {\n  return unwrapDeep(caslQuery);\n};\n\nconst unwrapDeep = (obj: any): unknown => {\n  if (!_.isPlainObject(obj) && !_.isArray(obj)) {\n    return obj;\n  }\n  if (_.isArray(obj)) {\n    return obj.map((v: unknown) => unwrapDeep(v));\n  }\n\n  return _.reduce(\n    obj,\n    (acc, v, k: any) => {\n      const key = mapKey(k);\n\n      if (_.isPlainObject(v)) {\n        if ('$elemMatch' in v) {\n          _.setWith(acc, key, unwrapDeep(v.$elemMatch));\n        } else {\n          _.setWith(acc, key, unwrapDeep(v));\n        }\n      } else if (_.isArray(v)) {\n        // prettier-ignore\n        _.setWith(acc, key, v.map(v => unwrapDeep(v)));\n      } else {\n        _.setWith(acc, key, v);\n      }\n\n      return acc;\n    },\n    {}\n  );\n};\n\nexport { buildCaslQuery, buildStrapiQuery };\n"],"names":["operatorsMap","$in","$nin","$exists","$gte","$gt","$lte","$lt","$eq","$ne","$and","$or","$not","mapKey","key","_","isString","startsWith","buildCaslQuery","ability","action","model","rulesToQuery","o","conditions","buildStrapiQuery","caslQuery","unwrapDeep","obj","isPlainObject","isArray","map","v","reduce","acc","k","setWith","$elemMatch"],"mappings":";;;;;AAAA;AAIA,MAAMA,YAAe,GAAA;IACnBC,GAAK,EAAA,KAAA;IACLC,IAAM,EAAA,QAAA;IACNC,OAAS,EAAA,UAAA;IACTC,IAAM,EAAA,MAAA;IACNC,GAAK,EAAA,KAAA;IACLC,IAAM,EAAA,MAAA;IACNC,GAAK,EAAA,KAAA;IACLC,GAAK,EAAA,KAAA;IACLC,GAAK,EAAA,KAAA;IACLC,IAAM,EAAA,MAAA;IACNC,GAAK,EAAA,KAAA;IACLC,IAAM,EAAA;AACR,CAAA;AAEA,MAAMC,SAAS,CAACC,GAAAA,GAAAA;IACd,IAAIC,CAAAA,CAAEC,QAAQ,CAACF,GAAAA,CAAAA,IAAQA,IAAIG,UAAU,CAAC,GAAQH,CAAAA,IAAAA,GAAAA,IAAOd,YAAc,EAAA;QACjE,OAAOA,YAAY,CAACc,GAAI,CAAA;AAC1B;IACA,OAAOA,GAAAA;AACT,CAAA;AAEMI,MAAAA,cAAAA,GAAiB,CAACC,OAAAA,EAAkBC,MAAiBC,EAAAA,KAAAA,GAAAA;;AAEzD,IAAA,OAAOC,mBAAaH,OAASC,EAAAA,MAAAA,EAAQC,OAAO,CAACE,CAAAA,GAAMA,EAAEC,UAAU,CAAA;AACjE;AAEA,MAAMC,mBAAmB,CAACC,SAAAA,GAAAA;AACxB,IAAA,OAAOC,UAAWD,CAAAA,SAAAA,CAAAA;AACpB;AAEA,MAAMC,aAAa,CAACC,GAAAA,GAAAA;IAClB,IAAI,CAACb,EAAEc,aAAa,CAACD,QAAQ,CAACb,CAAAA,CAAEe,OAAO,CAACF,GAAM,CAAA,EAAA;QAC5C,OAAOA,GAAAA;AACT;IACA,IAAIb,CAAAA,CAAEe,OAAO,CAACF,GAAM,CAAA,EAAA;AAClB,QAAA,OAAOA,GAAIG,CAAAA,GAAG,CAAC,CAACC,IAAeL,UAAWK,CAAAA,CAAAA,CAAAA,CAAAA;AAC5C;AAEA,IAAA,OAAOjB,EAAEkB,MAAM,CACbL,GACA,EAAA,CAACM,KAAKF,CAAGG,EAAAA,CAAAA,GAAAA;AACP,QAAA,MAAMrB,MAAMD,MAAOsB,CAAAA,CAAAA,CAAAA;QAEnB,IAAIpB,CAAAA,CAAEc,aAAa,CAACG,CAAI,CAAA,EAAA;AACtB,YAAA,IAAI,gBAAgBA,CAAG,EAAA;AACrBjB,gBAAAA,CAAAA,CAAEqB,OAAO,CAACF,GAAAA,EAAKpB,GAAKa,EAAAA,UAAAA,CAAWK,EAAEK,UAAU,CAAA,CAAA;aACtC,MAAA;AACLtB,gBAAAA,CAAAA,CAAEqB,OAAO,CAACF,GAAKpB,EAAAA,GAAAA,EAAKa,UAAWK,CAAAA,CAAAA,CAAAA,CAAAA;AACjC;AACF,SAAA,MAAO,IAAIjB,CAAAA,CAAEe,OAAO,CAACE,CAAI,CAAA,EAAA;;YAEvBjB,CAAEqB,CAAAA,OAAO,CAACF,GAAKpB,EAAAA,GAAAA,EAAKkB,EAAED,GAAG,CAACC,CAAAA,CAAAA,GAAKL,UAAWK,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA;SACrC,MAAA;YACLjB,CAAEqB,CAAAA,OAAO,CAACF,GAAAA,EAAKpB,GAAKkB,EAAAA,CAAAA,CAAAA;AACtB;QAEA,OAAOE,GAAAA;AACT,KAAA,EACA,EAAC,CAAA;AAEL,CAAA;;;;;"}