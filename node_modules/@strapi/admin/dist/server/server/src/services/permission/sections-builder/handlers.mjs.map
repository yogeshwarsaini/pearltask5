{"version":3,"file":"handlers.mjs","sources":["../../../../../../../server/src/services/permission/sections-builder/handlers.ts"],"sourcesContent":["import type { Internal } from '@strapi/types';\nimport { contentTypes } from '@strapi/utils';\nimport {\n  toSubjectTemplate,\n  getValidOptions,\n  hasProperty,\n  isNotInSubjects,\n  resolveContentType,\n  isOfKind,\n} from './utils';\nimport type { Action } from '../../../domain/action';\n\nconst { isVisibleAttribute } = contentTypes;\n\nexport type ContentTypesSection = {\n  actions: Action[];\n  subjects: any[];\n};\n\nexport type ActionArraySection = Action[];\n\n/**\n * Transforms & adds the given  setting action to the section\n * Note: The action is transformed to a setting specific format\n * @param options\n * @param options.action\n * @param section\n */\nconst settings = ({ action, section }: { action: Action; section: ActionArraySection }) => {\n  const { category, subCategory, displayName, actionId } = action;\n\n  section.push({\n    displayName,\n    category,\n    subCategory,\n    // TODO: Investigate at which point the action property is transformed to actionId\n    // @ts-expect-error - action should be actionID\n    action: actionId,\n  });\n};\n\n/**\n * Transforms & adds the given plugin action to the section\n * Note: The action is transformed to a plugin specific format\n * @param {object} options\n * @param {Action} options.action\n * @param {ActionArraySection} section\n */\nconst plugins = ({ action, section }: { action: Action; section: ActionArraySection }) => {\n  const { pluginName, subCategory, displayName, actionId } = action;\n\n  section.push({\n    displayName,\n    // @ts-expect-error - plugin should be pluginName, TODO: Investigate at which point the plugin property\n    plugin: pluginName,\n    subCategory,\n    action: actionId,\n  });\n};\n\n/**\n * Transforms & adds the given action to the section's actions field\n * Note: The action is transformed to a content-type specific format\n * @param {object} options\n * @param {Action} options.action\n * @param {ContentTypesSection} section\n */\nconst contentTypesBase = ({\n  action,\n  section,\n}: {\n  action: Action;\n  section: ContentTypesSection;\n}) => {\n  const { displayName, actionId, subjects, options } = action;\n\n  section.actions.push({\n    // @ts-expect-error - label should be displayName, TODO: Investigate at which point the label property\n    label: displayName,\n    actionId,\n    subjects,\n    ...getValidOptions(options),\n  });\n};\n\n/**\n * Initialize the subjects array of a section based on the action's subjects\n */\nconst subjectsHandlerFor =\n  (kind: string) =>\n  ({ action, section: contentTypesSection }: { action: Action; section: ContentTypesSection }) => {\n    // TODO: add a type guard for UID.ContentType\n    const subjects = action.subjects as Internal.UID.ContentType[];\n\n    if (!subjects?.length) {\n      return;\n    }\n\n    const newSubjects = subjects\n      // Ignore already added subjects\n      .filter(isNotInSubjects(contentTypesSection.subjects))\n      // Transform UIDs into content-types\n      .map(resolveContentType)\n      // Only keep specific kind of content-types\n      .filter(isOfKind(kind))\n      // Transform the content-types into section's subjects\n      .map(toSubjectTemplate);\n\n    contentTypesSection.subjects.push(...newSubjects);\n  };\n\nconst buildNode = (model: any, attributeName: string, attribute: any) => {\n  if (!isVisibleAttribute(model, attributeName)) {\n    return null;\n  }\n\n  const node = { label: attributeName, value: attributeName };\n\n  if (attribute.required) {\n    Object.assign(node, { required: true });\n  }\n\n  if (attribute.type === 'component') {\n    const component = strapi.components[attribute.component];\n    return { ...node, children: buildDeepAttributesCollection(component) };\n  }\n\n  return node;\n};\n\nconst buildDeepAttributesCollection = (model: any): unknown => {\n  return Object.entries(model.attributes)\n    .map(([attributeName, attribute]) => buildNode(model, attributeName, attribute))\n    .filter((node) => node !== null);\n};\n\n/**\n * Create and populate the fields property for section's subjects based on the action's subjects list\n */\nconst fieldsProperty = ({ action, section }: { action: Action; section: ContentTypesSection }) => {\n  const { subjects } = action;\n\n  section.subjects\n    .filter((subject) => subjects?.includes(subject.uid))\n    .forEach((subject) => {\n      const { uid } = subject;\n      const contentType = resolveContentType(uid);\n\n      if (hasProperty('fields', subject)) {\n        return;\n      }\n\n      const fields = buildDeepAttributesCollection(contentType);\n      const fieldsProp = { label: 'Fields', value: 'fields', children: fields };\n\n      subject.properties.push(fieldsProp);\n    });\n};\n\nexport { plugins, settings, subjectsHandlerFor, contentTypesBase, fieldsProperty };\n"],"names":["isVisibleAttribute","contentTypes","settings","action","section","category","subCategory","displayName","actionId","push","plugins","pluginName","plugin","contentTypesBase","subjects","options","actions","label","getValidOptions","subjectsHandlerFor","kind","contentTypesSection","length","newSubjects","filter","isNotInSubjects","map","resolveContentType","isOfKind","toSubjectTemplate","buildNode","model","attributeName","attribute","node","value","required","Object","assign","type","component","strapi","components","children","buildDeepAttributesCollection","entries","attributes","fieldsProperty","subject","includes","uid","forEach","contentType","hasProperty","fields","fieldsProp","properties"],"mappings":"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"}