{"version":3,"file":"metrics.mjs","sources":["../../../../../server/src/services/metrics.ts"],"sourcesContent":["import type { Core } from '@strapi/types';\nimport { getService } from '../utils';\n\nconst sendDidInviteUser = async () => {\n  const numberOfUsers = await getService('user').count();\n  const numberOfRoles = await getService('role').count();\n  strapi.telemetry.send('didInviteUser', {\n    groupProperties: { numberOfRoles, numberOfUsers },\n  });\n};\n\nconst sendDidUpdateRolePermissions = async () => {\n  strapi.telemetry.send('didUpdateRolePermissions');\n};\n\nconst sendDidChangeInterfaceLanguage = async () => {\n  const languagesInUse = await getService('user').getLanguagesInUse();\n  // This event is anonymous\n  strapi.telemetry.send('didChangeInterfaceLanguage', { userProperties: { languagesInUse } });\n};\n\nconst sendUpdateProjectInformation = async (strapi: Core.Strapi) => {\n  const numberOfActiveAdminUsers = await getService('user').count({ isActive: true });\n  const numberOfAdminUsers = await getService('user').count();\n\n  strapi.telemetry.send('didUpdateProjectInformation', {\n    groupProperties: { numberOfActiveAdminUsers, numberOfAdminUsers },\n  });\n};\n\nconst startCron = (strapi: Core.Strapi) => {\n  strapi.cron.add({\n    sendProjectInformation: {\n      task: () => sendUpdateProjectInformation(strapi),\n      options: '0 0 0 * * *',\n    },\n  });\n};\n\nexport default {\n  sendDidInviteUser,\n  sendDidUpdateRolePermissions,\n  sendDidChangeInterfaceLanguage,\n  sendUpdateProjectInformation,\n  startCron,\n};\n"],"names":["sendDidInviteUser","numberOfUsers","getService","count","numberOfRoles","strapi","telemetry","send","groupProperties","sendDidUpdateRolePermissions","sendDidChangeInterfaceLanguage","languagesInUse","getLanguagesInUse","userProperties","sendUpdateProjectInformation","numberOfActiveAdminUsers","isActive","numberOfAdminUsers","startCron","cron","add","sendProjectInformation","task","options"],"mappings":";;AAGA,MAAMA,iBAAoB,GAAA,UAAA;AACxB,IAAA,MAAMC,aAAgB,GAAA,MAAMC,UAAW,CAAA,MAAA,CAAA,CAAQC,KAAK,EAAA;AACpD,IAAA,MAAMC,aAAgB,GAAA,MAAMF,UAAW,CAAA,MAAA,CAAA,CAAQC,KAAK,EAAA;AACpDE,IAAAA,MAAAA,CAAOC,SAAS,CAACC,IAAI,CAAC,eAAiB,EAAA;QACrCC,eAAiB,EAAA;AAAEJ,YAAAA,aAAAA;AAAeH,YAAAA;AAAc;AAClD,KAAA,CAAA;AACF,CAAA;AAEA,MAAMQ,4BAA+B,GAAA,UAAA;IACnCJ,MAAOC,CAAAA,SAAS,CAACC,IAAI,CAAC,0BAAA,CAAA;AACxB,CAAA;AAEA,MAAMG,8BAAiC,GAAA,UAAA;AACrC,IAAA,MAAMC,cAAiB,GAAA,MAAMT,UAAW,CAAA,MAAA,CAAA,CAAQU,iBAAiB,EAAA;;AAEjEP,IAAAA,MAAAA,CAAOC,SAAS,CAACC,IAAI,CAAC,4BAA8B,EAAA;QAAEM,cAAgB,EAAA;AAAEF,YAAAA;AAAe;AAAE,KAAA,CAAA;AAC3F,CAAA;AAEA,MAAMG,+BAA+B,OAAOT,OAAAA,GAAAA;AAC1C,IAAA,MAAMU,wBAA2B,GAAA,MAAMb,UAAW,CAAA,MAAA,CAAA,CAAQC,KAAK,CAAC;QAAEa,QAAU,EAAA;AAAK,KAAA,CAAA;AACjF,IAAA,MAAMC,kBAAqB,GAAA,MAAMf,UAAW,CAAA,MAAA,CAAA,CAAQC,KAAK,EAAA;AAEzDE,IAAAA,OAAAA,CAAOC,SAAS,CAACC,IAAI,CAAC,6BAA+B,EAAA;QACnDC,eAAiB,EAAA;AAAEO,YAAAA,wBAAAA;AAA0BE,YAAAA;AAAmB;AAClE,KAAA,CAAA;AACF,CAAA;AAEA,MAAMC,YAAY,CAACb,OAAAA,GAAAA;IACjBA,OAAOc,CAAAA,IAAI,CAACC,GAAG,CAAC;QACdC,sBAAwB,EAAA;AACtBC,YAAAA,IAAAA,EAAM,IAAMR,4BAA6BT,CAAAA,OAAAA,CAAAA;YACzCkB,OAAS,EAAA;AACX;AACF,KAAA,CAAA;AACF,CAAA;AAEA,cAAe;AACbvB,IAAAA,iBAAAA;AACAS,IAAAA,4BAAAA;AACAC,IAAAA,8BAAAA;AACAI,IAAAA,4BAAAA;AACAI,IAAAA;AACF,CAAE;;;;"}