{"version":3,"file":"index.js","sources":["../../../../../../../server/src/services/permission/permissions-manager/index.ts"],"sourcesContent":["import _ from 'lodash';\nimport { cloneDeep, isPlainObject } from 'lodash/fp';\nimport { subject as asSubject } from '@casl/ability';\nimport createSanitizeHelpers from './sanitize';\nimport createValidateHelpers from './validate';\n\nimport { buildStrapiQuery, buildCaslQuery } from './query-builders';\n\nexport default ({ ability, action, model }: any) => ({\n  ability,\n  action,\n  model,\n\n  get isAllowed(): unknown {\n    return this.ability.can(action, model);\n  },\n\n  toSubject(target: any, subjectType = model) {\n    return asSubject(subjectType, target);\n  },\n\n  pickPermittedFieldsOf(data: unknown, options = {}) {\n    return this.sanitizeInput(data, options);\n  },\n\n  getQuery(queryAction = action) {\n    if (_.isUndefined(queryAction)) {\n      throw new Error('Action must be defined to build a permission query');\n    }\n\n    return buildStrapiQuery(buildCaslQuery(ability, queryAction, model));\n  },\n\n  // eslint-disable-next-line @typescript-eslint/default-param-last\n  addPermissionsQueryTo(query = {} as any, action: unknown) {\n    const newQuery = cloneDeep(query);\n    const permissionQuery = this.getQuery(action) ?? undefined;\n\n    if (isPlainObject(query.filters)) {\n      newQuery.filters = permissionQuery\n        ? { $and: [query.filters, permissionQuery] }\n        : query.filters;\n    } else {\n      newQuery.filters = permissionQuery;\n    }\n\n    return newQuery;\n  },\n\n  ...createSanitizeHelpers({ action, ability, model }),\n  ...createValidateHelpers({ action, ability, model }),\n});\n"],"names":["ability","action","model","isAllowed","can","toSubject","target","subjectType","asSubject","pickPermittedFieldsOf","data","options","sanitizeInput","getQuery","queryAction","_","isUndefined","Error","buildStrapiQuery","buildCaslQuery","addPermissionsQueryTo","query","newQuery","cloneDeep","permissionQuery","undefined","isPlainObject","filters","$and","createSanitizeHelpers","createValidateHelpers"],"mappings":";;;;;;;;;AAQA,YAAe,CAAA,CAAC,WAAEA,SAAO,EAAEC,MAAM,EAAEC,KAAK,EAAO,IAAM;AACnDF,iBAAAA,SAAAA;AACAC,QAAAA,MAAAA;AACAC,QAAAA,KAAAA;AAEA,QAAA,IAAIC,SAAqB,CAAA,GAAA;AACvB,YAAA,OAAO,IAAI,CAACH,OAAO,CAACI,GAAG,CAACH,MAAQC,EAAAA,KAAAA,CAAAA;AAClC,SAAA;QAEAG,SAAUC,CAAAA,CAAAA,MAAW,EAAEC,WAAAA,GAAcL,KAAK,EAAA;AACxC,YAAA,OAAOM,gBAAUD,WAAaD,EAAAA,MAAAA,CAAAA;AAChC,SAAA;AAEAG,QAAAA,qBAAAA,CAAAA,CAAsBC,IAAa,EAAEC,OAAU,GAAA,EAAE,EAAA;AAC/C,YAAA,OAAO,IAAI,CAACC,aAAa,CAACF,IAAMC,EAAAA,OAAAA,CAAAA;AAClC,SAAA;AAEAE,QAAAA,QAAAA,CAAAA,CAASC,cAAcb,MAAM,EAAA;YAC3B,IAAIc,CAAAA,CAAEC,WAAW,CAACF,WAAc,CAAA,EAAA;AAC9B,gBAAA,MAAM,IAAIG,KAAM,CAAA,oDAAA,CAAA;AAClB;YAEA,OAAOC,8BAAAA,CAAiBC,4BAAenB,CAAAA,SAAAA,EAASc,WAAaZ,EAAAA,KAAAA,CAAAA,CAAAA;AAC/D,SAAA;;AAGAkB,QAAAA,qBAAAA,CAAAA,CAAsBC,KAAQ,GAAA,EAAS,EAAEpB,MAAe,EAAA;AACtD,YAAA,MAAMqB,WAAWC,YAAUF,CAAAA,KAAAA,CAAAA;AAC3B,YAAA,MAAMG,eAAkB,GAAA,IAAI,CAACX,QAAQ,CAACZ,MAAWwB,CAAAA,IAAAA,SAAAA;YAEjD,IAAIC,gBAAAA,CAAcL,KAAMM,CAAAA,OAAO,CAAG,EAAA;gBAChCL,QAASK,CAAAA,OAAO,GAAGH,eACf,GAAA;oBAAEI,IAAM,EAAA;AAACP,wBAAAA,KAAAA,CAAMM,OAAO;AAAEH,wBAAAA;AAAgB;AAAC,iBAAA,GACzCH,MAAMM,OAAO;aACZ,MAAA;AACLL,gBAAAA,QAAAA,CAASK,OAAO,GAAGH,eAAAA;AACrB;YAEA,OAAOF,QAAAA;AACT,SAAA;AAEA,QAAA,GAAGO,QAAsB,CAAA;AAAE5B,YAAAA,MAAAA;AAAQD,qBAAAA,SAAAA;AAASE,YAAAA;SAAQ,CAAA;AACpD,QAAA,GAAG4B,QAAsB,CAAA;AAAE7B,YAAAA,MAAAA;AAAQD,qBAAAA,SAAAA;AAASE,YAAAA;SAAQ;AACtD,KAAA,CAAC;;;;"}