{"version":3,"file":"project-settings.mjs","sources":["../../../../../server/src/services/project-settings.ts"],"sourcesContent":["import fs from 'fs';\nimport { pick } from 'lodash';\nimport { GetProjectSettings, UpdateProjectSettings } from '../../../shared/contracts/admin';\n\nconst PROJECT_SETTINGS_FILE_INPUTS = ['menuLogo', 'authLogo'] as const;\n\ninterface UploadFile {\n  name: string;\n  path: string;\n  type: string;\n  size: number;\n  stream: fs.ReadStream;\n  tmpPath: string;\n  hash: string;\n  url: string;\n  width: number;\n  height: number;\n  ext: string;\n  provider: unknown;\n}\n\ntype FormattedFiles = Partial<\n  Record<keyof UpdateProjectSettings.Request['files'], Partial<UploadFile>>\n>;\n\nconst parseFilesData = async (files: UpdateProjectSettings.Request['files']) => {\n  const formatedFilesData: FormattedFiles = {};\n\n  await Promise.all(\n    PROJECT_SETTINGS_FILE_INPUTS.map(async (inputName) => {\n      const file = files[inputName];\n\n      // Skip empty file inputs\n      if (!file) {\n        return;\n      }\n\n      const getStream = () => fs.createReadStream(file.filepath);\n\n      // Add formated data for the upload provider\n      formatedFilesData[inputName] = await strapi\n        .plugin('upload')\n        .service('upload')\n        .formatFileInfo({\n          filename: file.originalFilename,\n          type: file.mimetype,\n          size: file.size,\n        });\n\n      // Add image dimensions\n      Object.assign(\n        formatedFilesData[inputName]!,\n        await strapi.plugin('upload').service('image-manipulation').getDimensions({ getStream })\n      );\n\n      // Add file path, and stream\n      Object.assign(formatedFilesData[inputName]!, {\n        stream: getStream(),\n        tmpPath: file.filepath,\n        // TODO\n        // @ts-expect-error define the correct return type\n        provider: strapi.config.get('plugin::upload').provider,\n      });\n    })\n  );\n\n  return formatedFilesData;\n};\n\nconst getProjectSettings = async (): Promise<GetProjectSettings.Response> => {\n  const store = strapi.store({ type: 'core', name: 'admin' });\n\n  // Returns an object with file inputs names as key and null as value\n  const defaultProjectSettings = PROJECT_SETTINGS_FILE_INPUTS.reduce((prev: any, cur: any) => {\n    prev[cur] = null;\n    return prev;\n  }, {});\n\n  const projectSettings = {\n    ...defaultProjectSettings,\n    // @ts-expect-error spread can be applied to return value\n    ...(await store.get({ key: 'project-settings' })),\n  };\n\n  // Filter file input fields\n  PROJECT_SETTINGS_FILE_INPUTS.forEach((inputName) => {\n    if (!projectSettings[inputName]) {\n      return;\n    }\n\n    projectSettings[inputName] = pick(projectSettings[inputName], [\n      'name',\n      'url',\n      'width',\n      'height',\n      'ext',\n      'size',\n    ]);\n  });\n\n  return projectSettings;\n};\n\nconst uploadFiles = async (files: LogoFiles = {}) => {\n  // Call the provider upload function for each file\n  return Promise.all(\n    Object.values(files)\n      .filter((file) => file?.stream instanceof fs.ReadStream)\n      .map((file) => strapi.plugin('upload').provider.uploadStream(file))\n  );\n};\n\nconst deleteOldFiles = async ({ previousSettings, newSettings }: any) => {\n  return Promise.all(\n    PROJECT_SETTINGS_FILE_INPUTS.map(async (inputName) => {\n      // Skip if the store doesn't contain project settings\n      if (!previousSettings) {\n        return;\n      }\n\n      // Skip if there was no previous file\n      if (!previousSettings[inputName]) {\n        return;\n      }\n\n      // Skip if the file was not changed\n      if (\n        newSettings[inputName] &&\n        previousSettings[inputName].hash === newSettings[inputName].hash\n      ) {\n        return;\n      }\n\n      // Skip if the file was not uploaded with the current provider\n      // TODO\n      // @ts-expect-error define the correct return type\n      if (strapi.config.get('plugin::upload').provider !== previousSettings[inputName].provider) {\n        return;\n      }\n\n      // There was a previous file and an new file was uploaded\n      // Remove the previous file\n      strapi.plugin('upload').provider.delete(previousSettings[inputName]);\n    })\n  );\n};\n\ntype LogoFiles = { [K in keyof FormattedFiles]: FormattedFiles[K] | null };\n\nconst updateProjectSettings = async (\n  newSettings: Omit<UpdateProjectSettings.Request['body'], 'menuLogo' | 'authLogo'> & LogoFiles\n) => {\n  const store = strapi.store({ type: 'core', name: 'admin' });\n  const previousSettings = (await store.get({ key: 'project-settings' })) as any;\n  const files = pick(newSettings, PROJECT_SETTINGS_FILE_INPUTS);\n\n  await uploadFiles(files);\n\n  PROJECT_SETTINGS_FILE_INPUTS.forEach((inputName) => {\n    // If the user input exists but is not a formdata \"file\" remove it\n    if (newSettings[inputName] !== undefined && !(typeof newSettings[inputName] === 'object')) {\n      newSettings[inputName] = null;\n      return;\n    }\n\n    // If the user input is undefined reuse previous setting (do not update field)\n    if (!newSettings[inputName] && previousSettings) {\n      newSettings[inputName] = previousSettings[inputName];\n      return;\n    }\n\n    // Update the file\n    newSettings[inputName] = pick(newSettings[inputName], [\n      'name',\n      'hash',\n      'url',\n      'width',\n      'height',\n      'ext',\n      'size',\n      'provider',\n    ]);\n  });\n\n  // No await to proceed asynchronously\n  deleteOldFiles({ previousSettings, newSettings });\n\n  await store.set({\n    key: 'project-settings',\n    value: { ...previousSettings, ...newSettings },\n  });\n\n  return getProjectSettings();\n};\n\nexport { deleteOldFiles, parseFilesData, getProjectSettings, updateProjectSettings };\n"],"names":["PROJECT_SETTINGS_FILE_INPUTS","parseFilesData","files","formatedFilesData","Promise","all","map","inputName","file","getStream","fs","createReadStream","filepath","strapi","plugin","service","formatFileInfo","filename","originalFilename","type","mimetype","size","Object","assign","getDimensions","stream","tmpPath","provider","config","get","getProjectSettings","store","name","defaultProjectSettings","reduce","prev","cur","projectSettings","key","forEach","pick","uploadFiles","values","filter","ReadStream","uploadStream","deleteOldFiles","previousSettings","newSettings","hash","delete","updateProjectSettings","undefined","set","value"],"mappings":"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"}