{"version":3,"file":"builder.mjs","sources":["../../../../../../../server/src/services/permission/sections-builder/builder.ts"],"sourcesContent":["import { Action } from '../../../domain/action';\nimport createSection, { SectionOptions } from './section';\n\n/**\n * Create a new section builder with its own sections registry\n */\nconst createSectionBuilder = () => {\n  const state = {\n    sections: new Map(),\n  };\n\n  return {\n    /**\n     * Create & add a section to the builder's registry\n     * @param sectionName - The unique name of the section\n     * @param options - The options used to build a {@link Section}\n     */\n    createSection(sectionName: string, options: SectionOptions) {\n      const section = createSection(options);\n\n      state.sections.set(sectionName, section);\n\n      return this;\n    },\n\n    /**\n     * Removes a section from the builder's registry using its unique name\n     * @param sectionName - The name of the section to delete\n     */\n    deleteSection(sectionName: string) {\n      state.sections.delete(sectionName);\n\n      return this;\n    },\n\n    /**\n     * Register a handler function for a given section\n     * @param  sectionName - The name of the section\n     * @param  handler - The handler to register\n     */\n    addHandler(sectionName: string, handler: () => unknown) {\n      if (state.sections.has(sectionName)) {\n        state.sections.get(sectionName).hooks.handlers.register(handler);\n      }\n\n      return this;\n    },\n\n    /**\n     * Register a matcher function for a given section\n     * @param sectionName - The name of the section\n     * @param matcher - The handler to register\n\n     */\n    addMatcher(sectionName: string, matcher: () => unknown) {\n      if (state.sections.has(sectionName)) {\n        state.sections.get(sectionName).hooks.matchers.register(matcher);\n      }\n\n      return this;\n    },\n\n    /**\n     * Build a section tree based on the registered actions and the given actions\n     * @param actions - The actions used to build each section\n     */\n    async build(actions = [] as Action[]) {\n      const sections = {} as any;\n\n      for (const [sectionName, section] of state.sections.entries()) {\n        sections[sectionName] = await section.build(actions);\n      }\n\n      return sections;\n    },\n  };\n};\n\nexport default createSectionBuilder;\n"],"names":["createSectionBuilder","state","sections","Map","createSection","sectionName","options","section","set","deleteSection","delete","addHandler","handler","has","get","hooks","handlers","register","addMatcher","matcher","matchers","build","actions","entries"],"mappings":";;AAGA;;AAEC,UACKA,oBAAuB,GAAA,IAAA;AAC3B,IAAA,MAAMC,KAAQ,GAAA;AACZC,QAAAA,QAAAA,EAAU,IAAIC,GAAAA;AAChB,KAAA;IAEA,OAAO;AACL;;;;QAKAC,aAAAA,CAAAA,CAAcC,WAAmB,EAAEC,OAAuB,EAAA;AACxD,YAAA,MAAMC,UAAUH,aAAcE,CAAAA,OAAAA,CAAAA;AAE9BL,YAAAA,KAAAA,CAAMC,QAAQ,CAACM,GAAG,CAACH,WAAaE,EAAAA,OAAAA,CAAAA;AAEhC,YAAA,OAAO,IAAI;AACb,SAAA;AAEA;;;AAGC,QACDE,eAAcJ,WAAmB,EAAA;YAC/BJ,KAAMC,CAAAA,QAAQ,CAACQ,MAAM,CAACL,WAAAA,CAAAA;AAEtB,YAAA,OAAO,IAAI;AACb,SAAA;AAEA;;;;QAKAM,UAAAA,CAAAA,CAAWN,WAAmB,EAAEO,OAAsB,EAAA;AACpD,YAAA,IAAIX,KAAMC,CAAAA,QAAQ,CAACW,GAAG,CAACR,WAAc,CAAA,EAAA;gBACnCJ,KAAMC,CAAAA,QAAQ,CAACY,GAAG,CAACT,WAAAA,CAAAA,CAAaU,KAAK,CAACC,QAAQ,CAACC,QAAQ,CAACL,OAAAA,CAAAA;AAC1D;AAEA,YAAA,OAAO,IAAI;AACb,SAAA;AAEA;;;;;QAMAM,UAAAA,CAAAA,CAAWb,WAAmB,EAAEc,OAAsB,EAAA;AACpD,YAAA,IAAIlB,KAAMC,CAAAA,QAAQ,CAACW,GAAG,CAACR,WAAc,CAAA,EAAA;gBACnCJ,KAAMC,CAAAA,QAAQ,CAACY,GAAG,CAACT,WAAAA,CAAAA,CAAaU,KAAK,CAACK,QAAQ,CAACH,QAAQ,CAACE,OAAAA,CAAAA;AAC1D;AAEA,YAAA,OAAO,IAAI;AACb,SAAA;AAEA;;;AAGC,QACD,MAAME,KAAAA,CAAAA,CAAMC,OAAU,GAAA,EAAE,EAAY;AAClC,YAAA,MAAMpB,WAAW,EAAC;YAElB,KAAK,MAAM,CAACG,WAAaE,EAAAA,OAAAA,CAAQ,IAAIN,KAAMC,CAAAA,QAAQ,CAACqB,OAAO,EAAI,CAAA;AAC7DrB,gBAAAA,QAAQ,CAACG,WAAY,CAAA,GAAG,MAAME,OAAAA,CAAQc,KAAK,CAACC,OAAAA,CAAAA;AAC9C;YAEA,OAAOpB,QAAAA;AACT;AACF,KAAA;AACF;;;;"}