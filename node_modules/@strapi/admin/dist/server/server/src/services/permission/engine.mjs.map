{"version":3,"file":"engine.mjs","sources":["../../../../../../server/src/services/permission/engine.ts"],"sourcesContent":["import { curry, isArray, isEmpty, difference } from 'lodash/fp';\nimport permissions, { type engine } from '@strapi/permissions';\nimport type { Ability } from '@casl/ability';\nimport permissionDomain from '../../domain/permission';\nimport { getService } from '../../utils';\nimport { Action } from '../../domain/action';\nimport type { AdminUser, Permission } from '../../../../shared/contracts/shared';\n\nexport default (params: { providers: engine.EngineParams['providers'] }) => {\n  const { providers } = params;\n\n  const engine = permissions.engine\n    .new({ providers })\n    /**\n     * Validate the permission's action exists in the action registry\n     */\n    .on('before-format::validate.permission', ({ permission }) => {\n      const action = providers.action.get(permission.action);\n\n      // If the action isn't registered into the action provider, then ignore the permission\n      if (!action) {\n        strapi.log.debug(\n          `Unknown action \"${permission.action}\" supplied when registering a new permission in engine`\n        );\n        return false;\n      }\n    })\n\n    /**\n     * Remove invalid properties from the permission based on the action (applyToProperties)\n     */\n    .on('format.permission', (permission: Permission) => {\n      const action = providers.action.get(permission.action) as Action;\n      const properties = permission.properties || {};\n\n      // Only keep the properties allowed by the action (action.applyToProperties)\n      const propertiesName = Object.keys(properties);\n      const invalidProperties = difference(\n        propertiesName,\n        // @ts-expect-error - applyToProperties is defined inside the options of an action\n        action.applyToProperties || propertiesName\n      );\n\n      const permissionWithSanitizedProperties = invalidProperties.reduce(\n        // @ts-expect-error - fix reduce, property should be a string but it's actually the permission object\n        (property) => permissionDomain.deleteProperty(property, permission) as Permission,\n        permission\n      );\n\n      return permissionWithSanitizedProperties;\n    })\n\n    /**\n     * Ignore the permission if the fields property is an empty array (access to no field)\n     */\n    .on('after-format::validate.permission', ({ permission }) => {\n      const { fields } = permission.properties;\n\n      if (isArray(fields) && isEmpty(fields)) {\n        return false;\n      }\n    });\n\n  return {\n    get hooks() {\n      return engine.hooks;\n    },\n\n    /**\n     * Generate an ability based on the given user (using associated roles & permissions)\n     * @param user\n     */\n    async generateUserAbility(user: AdminUser): Promise<Ability> {\n      const permissions = (await getService('permission').findUserPermissions(user)) as any;\n\n      return engine.generateAbility(permissions, user);\n    },\n\n    /**\n     * Check many permissions based on an ability\n     */\n    checkMany: curry((ability: Ability, permissions: Permission[]) => {\n      // @ts-expect-error - Permissions does not contain any field property\n      return permissions.map(({ action, subject, field }) => ability.can(action, subject, field));\n    }),\n  };\n};\n"],"names":["params","providers","engine","permissions","new","on","permission","action","get","strapi","log","debug","properties","propertiesName","Object","keys","invalidProperties","difference","applyToProperties","permissionWithSanitizedProperties","reduce","property","permissionDomain","deleteProperty","fields","isArray","isEmpty","hooks","generateUserAbility","user","getService","findUserPermissions","generateAbility","checkMany","curry","ability","map","subject","field","can"],"mappings":";;;;;AAQA,6BAAe,CAAA,CAACA,MAAAA,GAAAA;IACd,MAAM,EAAEC,SAAS,EAAE,GAAGD,MAAAA;AAEtB,IAAA,MAAME,MAASC,GAAAA,WAAAA,CAAYD,MAAM,CAC9BE,GAAG,CAAC;AAAEH,QAAAA;KACP,CAAA;;AAEC,SACAI,EAAE,CAAC,oCAAA,EAAsC,CAAC,EAAEC,UAAU,EAAE,GAAA;AACvD,QAAA,MAAMC,SAASN,SAAUM,CAAAA,MAAM,CAACC,GAAG,CAACF,WAAWC,MAAM,CAAA;;AAGrD,QAAA,IAAI,CAACA,MAAQ,EAAA;YACXE,MAAOC,CAAAA,GAAG,CAACC,KAAK,CACd,CAAC,gBAAgB,EAAEL,UAAWC,CAAAA,MAAM,CAAC,sDAAsD,CAAC,CAAA;YAE9F,OAAO,KAAA;AACT;KAGF,CAAA;;SAGCF,EAAE,CAAC,mBAAA,EAAqB,CAACC,UAAAA,GAAAA;AACxB,QAAA,MAAMC,SAASN,SAAUM,CAAAA,MAAM,CAACC,GAAG,CAACF,WAAWC,MAAM,CAAA;AACrD,QAAA,MAAMK,UAAaN,GAAAA,UAAAA,CAAWM,UAAU,IAAI,EAAC;;QAG7C,MAAMC,cAAAA,GAAiBC,MAAOC,CAAAA,IAAI,CAACH,UAAAA,CAAAA;QACnC,MAAMI,iBAAAA,GAAoBC,UACxBJ,CAAAA,cAAAA;AAEAN,QAAAA,MAAAA,CAAOW,iBAAiB,IAAIL,cAAAA,CAAAA;AAG9B,QAAA,MAAMM,iCAAoCH,GAAAA,iBAAAA,CAAkBI,MAAM;AAEhE,QAAA,CAACC,QAAaC,GAAAA,gBAAAA,CAAiBC,cAAc,CAACF,UAAUf,UACxDA,CAAAA,EAAAA,UAAAA,CAAAA;QAGF,OAAOa,iCAAAA;KAGT,CAAA;;AAEC,SACAd,EAAE,CAAC,mCAAA,EAAqC,CAAC,EAAEC,UAAU,EAAE,GAAA;AACtD,QAAA,MAAM,EAAEkB,MAAM,EAAE,GAAGlB,WAAWM,UAAU;QAExC,IAAIa,OAAAA,CAAQD,MAAWE,CAAAA,IAAAA,OAAAA,CAAQF,MAAS,CAAA,EAAA;YACtC,OAAO,KAAA;AACT;AACF,KAAA,CAAA;IAEF,OAAO;AACL,QAAA,IAAIG,KAAQ,CAAA,GAAA;AACV,YAAA,OAAOzB,OAAOyB,KAAK;AACrB,SAAA;AAEA;;;QAIA,MAAMC,qBAAoBC,IAAe,EAAA;AACvC,YAAA,MAAM1B,WAAe,GAAA,MAAM2B,UAAW,CAAA,YAAA,CAAA,CAAcC,mBAAmB,CAACF,IAAAA,CAAAA;YAExE,OAAO3B,MAAAA,CAAO8B,eAAe,CAAC7B,WAAa0B,EAAAA,IAAAA,CAAAA;AAC7C,SAAA;AAEA;;QAGAI,SAAAA,EAAWC,KAAM,CAAA,CAACC,OAAkBhC,EAAAA,WAAAA,GAAAA;;AAElC,YAAA,OAAOA,YAAYiC,GAAG,CAAC,CAAC,EAAE7B,MAAM,EAAE8B,OAAO,EAAEC,KAAK,EAAE,GAAKH,OAAAA,CAAQI,GAAG,CAAChC,QAAQ8B,OAASC,EAAAA,KAAAA,CAAAA,CAAAA;AACtF,SAAA;AACF,KAAA;AACF,CAAA;;;;"}