{"version":3,"file":"action.js","sources":["../../../../../server/src/services/action.ts"],"sourcesContent":["import { isNil } from 'lodash/fp';\nimport { errors } from '@strapi/utils';\nimport { getService } from '../utils';\nimport constants from './constants';\nimport type { AdminRole } from '../../../shared/contracts/shared';\n\nconst { AUTHOR_CODE, PUBLISH_ACTION } = constants;\n\nconst { NotFoundError } = errors;\n// TODO: move actionProvider here instead of in the permission service\n\n/**\n * Returns actions available for a role.\n * @param {string|number} roleId\n * @returns {object[]}\n */\nconst getAllowedActionsForRole = async (roleId?: string) => {\n  const { actionProvider } = getService('permission');\n\n  if (!isNil(roleId)) {\n    const role: AdminRole = await getService('role').findOne({ id: roleId });\n\n    if (!role) {\n      throw new NotFoundError('role.notFound');\n    }\n\n    if (role.code === AUTHOR_CODE) {\n      return actionProvider.values().filter(({ actionId }: any) => actionId !== PUBLISH_ACTION);\n    }\n  }\n\n  return actionProvider.values();\n};\n\nexport { getAllowedActionsForRole };\n"],"names":["AUTHOR_CODE","PUBLISH_ACTION","constants","NotFoundError","errors","getAllowedActionsForRole","roleId","actionProvider","getService","isNil","role","findOne","id","code","values","filter","actionId"],"mappings":";;;;;;;AAMA,MAAM,EAAEA,WAAW,EAAEC,cAAc,EAAE,GAAGC,SAAAA;AAExC,MAAM,EAAEC,aAAa,EAAE,GAAGC,YAAAA;AAC1B;AAEA;;;;IAKA,MAAMC,2BAA2B,OAAOC,MAAAA,GAAAA;AACtC,IAAA,MAAM,EAAEC,cAAc,EAAE,GAAGC,gBAAW,CAAA,YAAA,CAAA;IAEtC,IAAI,CAACC,SAAMH,MAAS,CAAA,EAAA;AAClB,QAAA,MAAMI,IAAkB,GAAA,MAAMF,gBAAW,CAAA,MAAA,CAAA,CAAQG,OAAO,CAAC;YAAEC,EAAIN,EAAAA;AAAO,SAAA,CAAA;AAEtE,QAAA,IAAI,CAACI,IAAM,EAAA;AACT,YAAA,MAAM,IAAIP,aAAc,CAAA,eAAA,CAAA;AAC1B;QAEA,IAAIO,IAAAA,CAAKG,IAAI,KAAKb,WAAa,EAAA;YAC7B,OAAOO,cAAAA,CAAeO,MAAM,EAAA,CAAGC,MAAM,CAAC,CAAC,EAAEC,QAAQ,EAAO,GAAKA,QAAaf,KAAAA,cAAAA,CAAAA;AAC5E;AACF;AAEA,IAAA,OAAOM,eAAeO,MAAM,EAAA;AAC9B;;;;"}