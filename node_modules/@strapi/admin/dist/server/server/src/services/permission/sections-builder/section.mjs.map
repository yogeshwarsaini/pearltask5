{"version":3,"file":"section.mjs","sources":["../../../../../../../server/src/services/permission/sections-builder/section.ts"],"sourcesContent":["import { eq } from 'lodash/fp';\nimport { hooks } from '@strapi/utils';\nimport type { Action } from '../../../domain/action';\n\nexport type SectionOptions = {\n  initialStateFactory?: (...args: any) => unknown; // A factory function that returns the default shape of the section\n  handlers?: ((...args: any) => unknown)[]; // An initial collection of handlers which will be registered in the handlers hook\n  matchers?: ((...args: any) => unknown)[]; // An initial collection of matchers which will be registered in the matchers hook\n};\n\nconst emptyObjectFactory = () => ({});\n\n/**\n * Upon call, creates a new section object\n */\nconst createSection = (\n  { initialStateFactory = emptyObjectFactory, handlers = [], matchers = [] } = {} as SectionOptions\n) => {\n  const state = {\n    hooks: {\n      handlers: hooks.createAsyncSeriesHook(),\n      matchers: hooks.createAsyncParallelHook(),\n    },\n  };\n\n  // Register initial hooks\n  handlers.forEach((handler) => state.hooks.handlers.register(handler));\n  matchers.forEach((matcher) => state.hooks.matchers.register(matcher));\n\n  return {\n    hooks: state.hooks,\n\n    /**\n     * Verifies if an action can be applied to the section by running the matchers hook.\n     * If any of the registered matcher functions returns true, then the condition applies.\n     */\n    async appliesToAction(action: Action): Promise<boolean> {\n      const results = await state.hooks.matchers.call(action);\n\n      return results.some(eq(true));\n    },\n\n    /**\n     * Init, build and returns a section object based on the given actions\n     * @param  actions - A list of actions used to populate the section\n     */\n    async build(actions = [] as Action[]) {\n      const section = initialStateFactory();\n\n      for (const action of actions) {\n        const applies = await this.appliesToAction(action);\n\n        if (applies) {\n          await state.hooks.handlers.call({ action, section });\n        }\n      }\n\n      return section;\n    },\n  };\n};\n\nexport default createSection;\n"],"names":["emptyObjectFactory","createSection","initialStateFactory","handlers","matchers","state","hooks","createAsyncSeriesHook","createAsyncParallelHook","forEach","handler","register","matcher","appliesToAction","action","results","call","some","eq","build","actions","section","applies"],"mappings":";;;AAUA,MAAMA,kBAAqB,GAAA,KAAO,EAAC,CAAA;AAEnC;;AAEC,IACKC,MAAAA,aAAAA,GAAgB,CACpB,EAAEC,sBAAsBF,kBAAkB,EAAEG,QAAW,GAAA,EAAE,EAAEC,QAAW,GAAA,EAAE,EAAE,GAAG,EAAoB,GAAA;AAEjG,IAAA,MAAMC,KAAQ,GAAA;QACZC,KAAO,EAAA;AACLH,YAAAA,QAAAA,EAAUG,MAAMC,qBAAqB,EAAA;AACrCH,YAAAA,QAAAA,EAAUE,MAAME,uBAAuB;AACzC;AACF,KAAA;;IAGAL,QAASM,CAAAA,OAAO,CAAC,CAACC,OAAYL,GAAAA,KAAAA,CAAMC,KAAK,CAACH,QAAQ,CAACQ,QAAQ,CAACD,OAAAA,CAAAA,CAAAA;IAC5DN,QAASK,CAAAA,OAAO,CAAC,CAACG,OAAYP,GAAAA,KAAAA,CAAMC,KAAK,CAACF,QAAQ,CAACO,QAAQ,CAACC,OAAAA,CAAAA,CAAAA;IAE5D,OAAO;AACLN,QAAAA,KAAAA,EAAOD,MAAMC,KAAK;AAElB;;;QAIA,MAAMO,iBAAgBC,MAAc,EAAA;YAClC,MAAMC,OAAAA,GAAU,MAAMV,KAAMC,CAAAA,KAAK,CAACF,QAAQ,CAACY,IAAI,CAACF,MAAAA,CAAAA;YAEhD,OAAOC,OAAAA,CAAQE,IAAI,CAACC,EAAG,CAAA,IAAA,CAAA,CAAA;AACzB,SAAA;AAEA;;;AAGC,QACD,MAAMC,KAAAA,CAAAA,CAAMC,OAAU,GAAA,EAAE,EAAY;AAClC,YAAA,MAAMC,OAAUnB,GAAAA,mBAAAA,EAAAA;YAEhB,KAAK,MAAMY,UAAUM,OAAS,CAAA;AAC5B,gBAAA,MAAME,OAAU,GAAA,MAAM,IAAI,CAACT,eAAe,CAACC,MAAAA,CAAAA;AAE3C,gBAAA,IAAIQ,OAAS,EAAA;AACX,oBAAA,MAAMjB,MAAMC,KAAK,CAACH,QAAQ,CAACa,IAAI,CAAC;AAAEF,wBAAAA,MAAAA;AAAQO,wBAAAA;AAAQ,qBAAA,CAAA;AACpD;AACF;YAEA,OAAOA,OAAAA;AACT;AACF,KAAA;AACF;;;;"}