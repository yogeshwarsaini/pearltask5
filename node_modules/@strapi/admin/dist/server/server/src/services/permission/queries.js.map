{"version":3,"file":"queries.js","sources":["../../../../../../server/src/services/permission/queries.ts"],"sourcesContent":["import { isNil, isArray, prop, xor, eq, map, differenceWith } from 'lodash/fp';\nimport pmap from 'p-map';\nimport type { Data } from '@strapi/types';\nimport { getService } from '../../utils';\nimport permissionDomain, { CreatePermissionPayload } from '../../domain/permission';\nimport type { AdminUser, Permission } from '../../../../shared/contracts/shared';\nimport { Action } from '../../domain/action';\n\n/**\n * Delete permissions of roles in database\n * @param rolesIds ids of roles\n */\nexport const deleteByRolesIds = async (rolesIds: Data.ID[]): Promise<void> => {\n  const permissionsToDelete = await strapi.db.query('admin::permission').findMany({\n    select: ['id'],\n    where: {\n      role: { id: rolesIds },\n    },\n  });\n\n  if (permissionsToDelete.length > 0) {\n    await deleteByIds(permissionsToDelete.map(prop('id')));\n  }\n};\n\n/**\n * Delete permissions\n * @param ids ids of permissions\n */\nexport const deleteByIds = async (ids: Data.ID[]): Promise<void> => {\n  const result: unknown[] = [];\n  for (const id of ids) {\n    const queryResult = await strapi.db.query('admin::permission').delete({ where: { id } });\n    result.push(queryResult);\n  }\n  strapi.eventHub.emit('permission.delete', { permissions: result });\n};\n\n/**\n * Create many permissions\n * @param permissions\n */\nexport const createMany = async (permissions: CreatePermissionPayload[]): Promise<Permission[]> => {\n  const createdPermissions: CreatePermissionPayload[] = [];\n  for (const permission of permissions) {\n    const newPerm = await strapi.db.query('admin::permission').create({ data: permission });\n    createdPermissions.push(newPerm);\n  }\n\n  const permissionsToReturn = permissionDomain.toPermission(createdPermissions);\n  strapi.eventHub.emit('permission.create', { permissions: permissionsToReturn });\n\n  return permissionsToReturn;\n};\n\n/**\n * Update a permission\n * @param params\n * @param attributes\n */\nconst update = async (params: unknown, attributes: Partial<Permission>) => {\n  const updatedPermission = (await strapi.db\n    .query('admin::permission')\n    .update({ where: params, data: attributes })) as Permission;\n\n  const permissionToReturn = permissionDomain.toPermission(updatedPermission);\n  strapi.eventHub.emit('permission.update', { permissions: permissionToReturn });\n\n  return permissionToReturn;\n};\n\n/**\n * Find assigned permissions in the database\n * @param params query params to find the permissions\n */\nexport const findMany = async (params = {}): Promise<Permission[]> => {\n  const rawPermissions = await strapi.db.query('admin::permission').findMany(params);\n\n  return permissionDomain.toPermission(rawPermissions);\n};\n\n/**\n * Find all permissions for a user\n * @param user - user\n */\nexport const findUserPermissions = async (user: AdminUser): Promise<Permission[]> => {\n  return findMany({ where: { role: { users: { id: user.id } } } });\n};\n\nconst filterPermissionsToRemove = async (permissions: Permission[]) => {\n  const { actionProvider } = getService('permission');\n\n  const permissionsToRemove: Permission[] = [];\n\n  for (const permission of permissions) {\n    const { subjects, options = {} as Action['options'] } =\n      (actionProvider.get(permission.action) as Action) || {};\n    const { applyToProperties } = options;\n\n    const invalidProperties = await Promise.all(\n      (applyToProperties || []).map(async (property) => {\n        const applies = await actionProvider.appliesToProperty(\n          property,\n          permission.action,\n          permission.subject\n        );\n\n        return applies && isNil(permissionDomain.getProperty(property, permission));\n      })\n    );\n\n    const isRegisteredAction = actionProvider.has(permission.action);\n    const hasInvalidProperties = isArray(applyToProperties) && invalidProperties.every(eq(true));\n    const isInvalidSubject = isArray(subjects) && !subjects.includes(permission.subject as string);\n\n    // If the permission has an invalid action, an invalid subject or invalid properties, then add it to the toBeRemoved collection\n    if (!isRegisteredAction || isInvalidSubject || hasInvalidProperties) {\n      permissionsToRemove.push(permission);\n    }\n  }\n\n  return permissionsToRemove;\n};\n\n/**\n * Removes permissions in database that don't exist anymore\n */\nexport const cleanPermissionsInDatabase = async (): Promise<void> => {\n  const pageSize = 200;\n\n  const contentTypeService = getService('content-type');\n\n  const total = await strapi.db.query('admin::permission').count();\n  const pageCount = Math.ceil(total / pageSize);\n\n  for (let page = 0; page < pageCount; page += 1) {\n    // 1. Find invalid permissions and collect their ID to delete them later\n    const results = (await strapi.db\n      .query('admin::permission')\n      .findMany({ limit: pageSize, offset: page * pageSize })) as Permission[];\n\n    const permissions = permissionDomain.toPermission(results);\n    const permissionsToRemove = await filterPermissionsToRemove(permissions);\n    const permissionsIdToRemove = map(prop('id'), permissionsToRemove);\n\n    // 2. Clean permissions' fields (add required ones, remove the non-existing ones)\n    const remainingPermissions = permissions.filter(\n      (permission: Permission) => !permissionsIdToRemove.includes(permission.id)\n    );\n\n    const permissionsWithCleanFields = contentTypeService.cleanPermissionFields(\n      remainingPermissions\n    ) as Permission[];\n\n    // Update only the ones that need to be updated\n    const permissionsNeedingToBeUpdated = differenceWith(\n      (a: Permission, b: Permission) => {\n        return a.id === b.id && xor(a.properties.fields, b.properties.fields).length === 0;\n      },\n      permissionsWithCleanFields,\n      remainingPermissions\n    );\n\n    const updatePromiseProvider = (permission: Permission) => {\n      return update({ id: permission.id }, permission);\n    };\n\n    // Execute all the queries, update the database\n    await Promise.all([\n      deleteByIds(permissionsIdToRemove),\n      pmap(permissionsNeedingToBeUpdated, updatePromiseProvider, {\n        concurrency: 100,\n        stopOnError: true,\n      }),\n    ]);\n  }\n};\n\nexport default {\n  createMany,\n  findMany,\n  deleteByRolesIds,\n  deleteByIds,\n  findUserPermissions,\n  cleanPermissionsInDatabase,\n};\n"],"names":["deleteByRolesIds","rolesIds","permissionsToDelete","strapi","db","query","findMany","select","where","role","id","length","deleteByIds","map","prop","ids","result","queryResult","delete","push","eventHub","emit","permissions","createMany","createdPermissions","permission","newPerm","create","data","permissionsToReturn","permissionDomain","toPermission","update","params","attributes","updatedPermission","permissionToReturn","rawPermissions","findUserPermissions","user","users","filterPermissionsToRemove","actionProvider","getService","permissionsToRemove","subjects","options","get","action","applyToProperties","invalidProperties","Promise","all","property","applies","appliesToProperty","subject","isNil","getProperty","isRegisteredAction","has","hasInvalidProperties","isArray","every","eq","isInvalidSubject","includes","cleanPermissionsInDatabase","pageSize","contentTypeService","total","count","pageCount","Math","ceil","page","results","limit","offset","permissionsIdToRemove","remainingPermissions","filter","permissionsWithCleanFields","cleanPermissionFields","permissionsNeedingToBeUpdated","differenceWith","a","b","xor","properties","fields","updatePromiseProvider","pmap","concurrency","stopOnError"],"mappings":";;;;;;;AAQA;;;IAIaA,MAAAA,gBAAAA,GAAmB,OAAOC,QAAAA,GAAAA;IACrC,MAAMC,mBAAAA,GAAsB,MAAMC,MAAOC,CAAAA,EAAE,CAACC,KAAK,CAAC,mBAAqBC,CAAAA,CAAAA,QAAQ,CAAC;QAC9EC,MAAQ,EAAA;AAAC,YAAA;AAAK,SAAA;QACdC,KAAO,EAAA;YACLC,IAAM,EAAA;gBAAEC,EAAIT,EAAAA;AAAS;AACvB;AACF,KAAA,CAAA;IAEA,IAAIC,mBAAAA,CAAoBS,MAAM,GAAG,CAAG,EAAA;AAClC,QAAA,MAAMC,WAAYV,CAAAA,mBAAAA,CAAoBW,GAAG,CAACC,OAAK,CAAA,IAAA,CAAA,CAAA,CAAA;AACjD;AACF;AAEA;;;IAIaF,MAAAA,WAAAA,GAAc,OAAOG,GAAAA,GAAAA;AAChC,IAAA,MAAMC,SAAoB,EAAE;IAC5B,KAAK,MAAMN,MAAMK,GAAK,CAAA;QACpB,MAAME,WAAAA,GAAc,MAAMd,MAAOC,CAAAA,EAAE,CAACC,KAAK,CAAC,mBAAqBa,CAAAA,CAAAA,MAAM,CAAC;YAAEV,KAAO,EAAA;AAAEE,gBAAAA;AAAG;AAAE,SAAA,CAAA;AACtFM,QAAAA,MAAAA,CAAOG,IAAI,CAACF,WAAAA,CAAAA;AACd;AACAd,IAAAA,MAAAA,CAAOiB,QAAQ,CAACC,IAAI,CAAC,mBAAqB,EAAA;QAAEC,WAAaN,EAAAA;AAAO,KAAA,CAAA;AAClE;AAEA;;;IAIaO,MAAAA,UAAAA,GAAa,OAAOD,WAAAA,GAAAA;AAC/B,IAAA,MAAME,qBAAgD,EAAE;IACxD,KAAK,MAAMC,cAAcH,WAAa,CAAA;QACpC,MAAMI,OAAAA,GAAU,MAAMvB,MAAOC,CAAAA,EAAE,CAACC,KAAK,CAAC,mBAAqBsB,CAAAA,CAAAA,MAAM,CAAC;YAAEC,IAAMH,EAAAA;AAAW,SAAA,CAAA;AACrFD,QAAAA,kBAAAA,CAAmBL,IAAI,CAACO,OAAAA,CAAAA;AAC1B;IAEA,MAAMG,mBAAAA,GAAsBC,aAAiBC,CAAAA,YAAY,CAACP,kBAAAA,CAAAA;AAC1DrB,IAAAA,MAAAA,CAAOiB,QAAQ,CAACC,IAAI,CAAC,mBAAqB,EAAA;QAAEC,WAAaO,EAAAA;AAAoB,KAAA,CAAA;IAE7E,OAAOA,mBAAAA;AACT;AAEA;;;;IAKA,MAAMG,MAAS,GAAA,OAAOC,MAAiBC,EAAAA,UAAAA,GAAAA;IACrC,MAAMC,iBAAAA,GAAqB,MAAMhC,MAAOC,CAAAA,EAAE,CACvCC,KAAK,CAAC,mBACN2B,CAAAA,CAAAA,MAAM,CAAC;QAAExB,KAAOyB,EAAAA,MAAAA;QAAQL,IAAMM,EAAAA;AAAW,KAAA,CAAA;IAE5C,MAAME,kBAAAA,GAAqBN,aAAiBC,CAAAA,YAAY,CAACI,iBAAAA,CAAAA;AACzDhC,IAAAA,MAAAA,CAAOiB,QAAQ,CAACC,IAAI,CAAC,mBAAqB,EAAA;QAAEC,WAAac,EAAAA;AAAmB,KAAA,CAAA;IAE5E,OAAOA,kBAAAA;AACT,CAAA;AAEA;;;AAGC,IACY9B,MAAAA,QAAAA,GAAW,OAAO2B,MAAAA,GAAS,EAAE,GAAA;IACxC,MAAMI,cAAAA,GAAiB,MAAMlC,MAAOC,CAAAA,EAAE,CAACC,KAAK,CAAC,mBAAqBC,CAAAA,CAAAA,QAAQ,CAAC2B,MAAAA,CAAAA;IAE3E,OAAOH,aAAAA,CAAiBC,YAAY,CAACM,cAAAA,CAAAA;AACvC;AAEA;;;IAIaC,MAAAA,mBAAAA,GAAsB,OAAOC,IAAAA,GAAAA;AACxC,IAAA,OAAOjC,QAAS,CAAA;QAAEE,KAAO,EAAA;YAAEC,IAAM,EAAA;gBAAE+B,KAAO,EAAA;AAAE9B,oBAAAA,EAAAA,EAAI6B,KAAK7B;AAAG;AAAE;AAAE;AAAE,KAAA,CAAA;AAChE;AAEA,MAAM+B,4BAA4B,OAAOnB,WAAAA,GAAAA;AACvC,IAAA,MAAM,EAAEoB,cAAc,EAAE,GAAGC,kBAAW,CAAA,YAAA,CAAA;AAEtC,IAAA,MAAMC,sBAAoC,EAAE;IAE5C,KAAK,MAAMnB,cAAcH,WAAa,CAAA;AACpC,QAAA,MAAM,EAAEuB,QAAQ,EAAEC,OAAAA,GAAU,EAAuB,EAAE,GAClDJ,eAAeK,GAAG,CAACtB,UAAWuB,CAAAA,MAAM,KAAgB,EAAC;QACxD,MAAM,EAAEC,iBAAiB,EAAE,GAAGH,OAAAA;AAE9B,QAAA,MAAMI,iBAAoB,GAAA,MAAMC,OAAQC,CAAAA,GAAG,CACxCH,CAAAA,iBAAAA,IAAqB,EAAC,EAAGpC,GAAG,CAAC,OAAOwC,QAAAA,GAAAA;YACnC,MAAMC,OAAAA,GAAU,MAAMZ,cAAAA,CAAea,iBAAiB,CACpDF,UACA5B,UAAWuB,CAAAA,MAAM,EACjBvB,UAAAA,CAAW+B,OAAO,CAAA;AAGpB,YAAA,OAAOF,OAAWG,IAAAA,QAAAA,CAAM3B,aAAiB4B,CAAAA,WAAW,CAACL,QAAU5B,EAAAA,UAAAA,CAAAA,CAAAA;AACjE,SAAA,CAAA,CAAA;AAGF,QAAA,MAAMkC,kBAAqBjB,GAAAA,cAAAA,CAAekB,GAAG,CAACnC,WAAWuB,MAAM,CAAA;AAC/D,QAAA,MAAMa,uBAAuBC,UAAQb,CAAAA,iBAAAA,CAAAA,IAAsBC,iBAAkBa,CAAAA,KAAK,CAACC,KAAG,CAAA,IAAA,CAAA,CAAA;QACtF,MAAMC,gBAAAA,GAAmBH,WAAQjB,QAAa,CAAA,IAAA,CAACA,SAASqB,QAAQ,CAACzC,WAAW+B,OAAO,CAAA;;QAGnF,IAAI,CAACG,kBAAsBM,IAAAA,gBAAAA,IAAoBJ,oBAAsB,EAAA;AACnEjB,YAAAA,mBAAAA,CAAoBzB,IAAI,CAACM,UAAAA,CAAAA;AAC3B;AACF;IAEA,OAAOmB,mBAAAA;AACT,CAAA;AAEA;;UAGauB,0BAA6B,GAAA,UAAA;AACxC,IAAA,MAAMC,QAAW,GAAA,GAAA;AAEjB,IAAA,MAAMC,qBAAqB1B,kBAAW,CAAA,cAAA,CAAA;IAEtC,MAAM2B,KAAAA,GAAQ,MAAMnE,MAAOC,CAAAA,EAAE,CAACC,KAAK,CAAC,qBAAqBkE,KAAK,EAAA;AAC9D,IAAA,MAAMC,SAAYC,GAAAA,IAAAA,CAAKC,IAAI,CAACJ,KAAQF,GAAAA,QAAAA,CAAAA;AAEpC,IAAA,IAAK,IAAIO,IAAO,GAAA,CAAA,EAAGA,IAAOH,GAAAA,SAAAA,EAAWG,QAAQ,CAAG,CAAA;;QAE9C,MAAMC,OAAAA,GAAW,MAAMzE,MAAOC,CAAAA,EAAE,CAC7BC,KAAK,CAAC,mBACNC,CAAAA,CAAAA,QAAQ,CAAC;YAAEuE,KAAOT,EAAAA,QAAAA;AAAUU,YAAAA,MAAAA,EAAQH,IAAOP,GAAAA;AAAS,SAAA,CAAA;QAEvD,MAAM9C,WAAAA,GAAcQ,aAAiBC,CAAAA,YAAY,CAAC6C,OAAAA,CAAAA;QAClD,MAAMhC,mBAAAA,GAAsB,MAAMH,yBAA0BnB,CAAAA,WAAAA,CAAAA;QAC5D,MAAMyD,qBAAAA,GAAwBlE,MAAIC,CAAAA,OAAAA,CAAK,IAAO8B,CAAAA,EAAAA,mBAAAA,CAAAA;;QAG9C,MAAMoC,oBAAAA,GAAuB1D,WAAY2D,CAAAA,MAAM,CAC7C,CAACxD,UAA2B,GAAA,CAACsD,qBAAsBb,CAAAA,QAAQ,CAACzC,UAAAA,CAAWf,EAAE,CAAA,CAAA;QAG3E,MAAMwE,0BAAAA,GAA6Bb,kBAAmBc,CAAAA,qBAAqB,CACzEH,oBAAAA,CAAAA;;QAIF,MAAMI,6BAAAA,GAAgCC,iBACpC,CAAA,CAACC,CAAeC,EAAAA,CAAAA,GAAAA;AACd,YAAA,OAAOD,EAAE5E,EAAE,KAAK6E,EAAE7E,EAAE,IAAI8E,OAAIF,CAAEG,CAAAA,UAAU,CAACC,MAAM,EAAEH,CAAEE,CAAAA,UAAU,CAACC,MAAM,CAAA,CAAE/E,MAAM,KAAK,CAAA;AACnF,SAAA,EACAuE,0BACAF,EAAAA,oBAAAA,CAAAA;AAGF,QAAA,MAAMW,wBAAwB,CAAClE,UAAAA,GAAAA;AAC7B,YAAA,OAAOO,MAAO,CAAA;AAAEtB,gBAAAA,EAAAA,EAAIe,WAAWf;aAAMe,EAAAA,UAAAA,CAAAA;AACvC,SAAA;;QAGA,MAAM0B,OAAAA,CAAQC,GAAG,CAAC;YAChBxC,WAAYmE,CAAAA,qBAAAA,CAAAA;AACZa,YAAAA,IAAAA,CAAKR,+BAA+BO,qBAAuB,EAAA;gBACzDE,WAAa,EAAA,GAAA;gBACbC,WAAa,EAAA;AACf,aAAA;AACD,SAAA,CAAA;AACH;AACF;;;;;;;;;"}