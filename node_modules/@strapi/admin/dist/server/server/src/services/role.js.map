{"version":3,"file":"role.js","sources":["../../../../../server/src/services/role.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */ // TODO: TS - Use database parameters interface when they are ready\n/* eslint-disable @typescript-eslint/default-param-last */\nimport _ from 'lodash';\nimport { set, omit, pick, prop, isArray, differenceWith, differenceBy, isEqual } from 'lodash/fp';\n\nimport { dates, arrays, hooks as hooksUtils, errors } from '@strapi/utils';\nimport type { Data } from '@strapi/types';\n\nimport permissionDomain from '../domain/permission';\nimport type { AdminUser, AdminRole, Permission } from '../../../shared/contracts/shared';\nimport type { Action } from '../domain/action';\n\nimport { validatePermissionsExist } from '../validation/permission';\nimport roleConstants from './constants';\nimport { getService } from '../utils';\n\nconst { SUPER_ADMIN_CODE, CONTENT_TYPE_SECTION } = roleConstants;\n\nconst { createAsyncSeriesWaterfallHook } = hooksUtils;\nconst { ApplicationError } = errors;\n\nconst hooks = {\n  willResetSuperAdminPermissions: createAsyncSeriesWaterfallHook(),\n};\n\nconst ACTIONS = {\n  publish: 'plugin::content-manager.explorer.publish',\n};\n\n// @ts-expect-error lodash types\nconst sanitizeRole: <T extends object>(obj: T) => Omit<T, 'users' | 'permissions'> = omit([\n  'users',\n  'permissions',\n] as const);\n\nexport type AdminRoleWithUsersCount = AdminRole & { usersCount: number };\n\nconst COMPARABLE_FIELDS = ['conditions', 'properties', 'subject', 'action', 'actionParameters'];\nconst pickComparableFields = pick(COMPARABLE_FIELDS);\n\nconst jsonClean = <T extends object>(data: T): T => JSON.parse(JSON.stringify(data));\n\n/**\n * Compare two permissions\n */\nconst arePermissionsEqual = (p1: Permission, p2: Permission): boolean => {\n  if (p1.action === p2.action) {\n    return isEqual(jsonClean(pickComparableFields(p1)), jsonClean(pickComparableFields(p2)));\n  }\n\n  return false;\n};\n\n/**\n * Create and save a role in database\n * @param attributes A partial role object\n */\nconst create = async (attributes: Partial<AdminRole>): Promise<AdminRole> => {\n  const alreadyExists = await exists({ name: attributes.name });\n\n  if (alreadyExists) {\n    throw new ApplicationError(\n      `The name must be unique and a role with name \\`${attributes.name}\\` already exists.`\n    );\n  }\n  const autoGeneratedCode = `${_.kebabCase(attributes.name)}-${dates.timestampCode()}`;\n\n  const rolesWithCode = {\n    ...attributes,\n    code: attributes.code || autoGeneratedCode,\n  };\n\n  const result = await strapi.db.query('admin::role').create({ data: rolesWithCode });\n  strapi.eventHub.emit('role.create', { role: sanitizeRole(result) });\n\n  return result;\n};\n\n/**\n * Find a role in database\n * @param params query params to find the role\n * @param populate\n */\nconst findOne = (params = {}, populate?: unknown): Promise<AdminRole> => {\n  return strapi.db.query('admin::role').findOne({ where: params, populate });\n};\n\n/**\n * Find a role in database with usersCounts\n * @param params query params to find the role\n * @param populate\n */\nconst findOneWithUsersCount = async (\n  params = {},\n  populate?: unknown\n): Promise<AdminRoleWithUsersCount> => {\n  const role = await strapi.db.query('admin::role').findOne({ where: params, populate });\n\n  if (role) {\n    role.usersCount = await getUsersCount(role.id);\n  }\n\n  return role;\n};\n\n/**\n * Find roles in database\n * @param params query params to find the roles\n * @param populate\n */\nconst find = (params = {}, populate: unknown): Promise<AdminRole[]> => {\n  return strapi.db.query('admin::role').findMany({ where: params, populate });\n};\n\n/**\n * Find all roles in database\n */\nconst findAllWithUsersCount = async (params: any): Promise<AdminRoleWithUsersCount[]> => {\n  const roles: AdminRoleWithUsersCount[] = await strapi.db\n    .query('admin::role')\n    .findMany(strapi.get('query-params').transform('admin::role', params));\n\n  for (const role of roles) {\n    role.usersCount = await getUsersCount(role.id);\n  }\n\n  return roles;\n};\n\n/**\n * Update a role in database\n * @param params query params to find the role to update\n * @param attributes A partial role object\n */\nconst update = async (params: any, attributes: Partial<AdminRole>): Promise<AdminRole> => {\n  const sanitizedAttributes = _.omit(attributes, ['code']);\n\n  if (_.has(params, 'id') && _.has(sanitizedAttributes, 'name')) {\n    const alreadyExists = await exists({\n      name: sanitizedAttributes.name,\n      id: { $ne: params.id },\n    });\n    if (alreadyExists) {\n      throw new ApplicationError(\n        `The name must be unique and a role with name \\`${sanitizedAttributes.name}\\` already exists.`\n      );\n    }\n  }\n\n  const result = await strapi.db\n    .query('admin::role')\n    .update({ where: params, data: sanitizedAttributes });\n\n  strapi.eventHub.emit('role.update', { role: sanitizeRole(result) });\n\n  return result;\n};\n\n/**\n * Check if a role exists in database\n * @param params query params to find the role\n */\nconst exists = async (params = {} as unknown): Promise<boolean> => {\n  const count = await strapi.db.query('admin::role').count({ where: params });\n  return count > 0;\n};\n\n/**\n * Count the number of roles based on search params\n * @param params params used for the query\n */\nconst count = async (params = {} as any): Promise<number> => {\n  return strapi.db.query('admin::role').count(params);\n};\n\n/**\n * Check if the given roles id can be deleted safely, throw otherwise\n * @param ids\n */\nconst checkRolesIdForDeletion = async (ids = [] as Data.ID[]) => {\n  const superAdminRole = await getSuperAdmin();\n\n  if (superAdminRole && arrays.includesString(ids, superAdminRole.id)) {\n    throw new ApplicationError('You cannot delete the super admin role');\n  }\n\n  for (const roleId of ids) {\n    const usersCount = await getUsersCount(roleId);\n    if (usersCount !== 0) {\n      throw new ApplicationError('Some roles are still assigned to some users');\n    }\n  }\n};\n\n/**\n * Delete roles in database if they have no user assigned\n * @param ids query params to find the roles\n */\nconst deleteByIds = async (ids = [] as Data.ID[]): Promise<AdminRole[]> => {\n  await checkRolesIdForDeletion(ids);\n\n  await getService('permission').deleteByRolesIds(ids);\n\n  const deletedRoles: AdminRole[] = [];\n  for (const id of ids) {\n    const deletedRole = await strapi.db.query('admin::role').delete({ where: { id } });\n\n    if (deletedRole) {\n      strapi.eventHub.emit('role.delete', { role: deletedRole });\n      deletedRoles.push(deletedRole);\n    }\n  }\n\n  return deletedRoles;\n};\n\n/** Count the number of users for some roles\n */\nconst getUsersCount = async (roleId: Data.ID): Promise<number> => {\n  return strapi.db.query('admin::user').count({ where: { roles: { id: roleId } } });\n};\n\n/** Returns admin role\n */\nconst getSuperAdmin = (): Promise<AdminRole | undefined> => findOne({ code: SUPER_ADMIN_CODE });\n\n/** Returns admin role with userCount\n * @returns {Promise<role>}\n */\nconst getSuperAdminWithUsersCount = () => findOneWithUsersCount({ code: SUPER_ADMIN_CODE });\n\n/** Create superAdmin, Author and Editor role is no role already exist\n */\nconst createRolesIfNoneExist = async () => {\n  const someRolesExist = await exists();\n  if (someRolesExist) {\n    return;\n  }\n\n  const { actionProvider } = getService('permission');\n\n  const allActions = actionProvider.values();\n  const contentTypesActions = allActions.filter((a) => a.section === 'contentTypes');\n\n  // create 3 roles\n  const superAdminRole = await create({\n    name: 'Super Admin',\n    code: 'strapi-super-admin',\n    description: 'Super Admins can access and manage all features and settings.',\n  });\n\n  await getService('user').assignARoleToAll(superAdminRole.id);\n\n  const editorRole = await create({\n    name: 'Editor',\n    code: 'strapi-editor',\n    description: 'Editors can manage and publish contents including those of other users.',\n  });\n\n  const authorRole = await create({\n    name: 'Author',\n    code: 'strapi-author',\n    description: 'Authors can manage the content they have created.',\n  });\n\n  // create content-type permissions for each role\n  const editorPermissions = getService('content-type').getPermissionsWithNestedFields(\n    contentTypesActions,\n    {\n      restrictedSubjects: ['plugin::users-permissions.user'],\n    }\n  );\n\n  const authorPermissions = editorPermissions\n    .filter(({ action }: any) => action !== ACTIONS.publish)\n    .map((permission: any) =>\n      permissionDomain.create({ ...permission, conditions: ['admin::is-creator'] })\n    );\n\n  editorPermissions.push(...getDefaultPluginPermissions());\n  authorPermissions.push(...getDefaultPluginPermissions({ isAuthor: true }));\n\n  // assign permissions to roles\n  await addPermissions(editorRole.id, editorPermissions);\n  await addPermissions(authorRole.id, authorPermissions);\n};\n\nconst getDefaultPluginPermissions = ({ isAuthor = false } = {}) => {\n  const conditions = isAuthor ? ['admin::is-creator'] : [];\n\n  // add plugin permissions for each role\n  return [\n    { action: 'plugin::upload.read', conditions },\n    { action: 'plugin::upload.configure-view' },\n    { action: 'plugin::upload.assets.create' },\n    { action: 'plugin::upload.assets.update', conditions },\n    { action: 'plugin::upload.assets.download' },\n    { action: 'plugin::upload.assets.copy-link' },\n  ].map(permissionDomain.create);\n};\n\n/** Display a warning if the role superAdmin doesn't exist\n *  or if the role is not assigned to at least one user\n */\nconst displayWarningIfNoSuperAdmin = async () => {\n  const superAdminRole = await getSuperAdminWithUsersCount();\n  const someUsersExists = await getService('user').exists();\n\n  if (!superAdminRole) {\n    strapi.log.warn(\"Your application doesn't have a super admin role.\");\n  } else if (someUsersExists && superAdminRole.usersCount === 0) {\n    strapi.log.warn(\"Your application doesn't have a super admin user.\");\n  }\n};\n\n/**\n * Assign permissions to a role\n * @param roleId - role Data.ID\n * @param {Array<Permission{action,subject,fields,conditions}>} permissions - permissions to assign to the role\n */\nconst assignPermissions = async (\n  roleId: Data.ID,\n  permissions: Array<Pick<Permission, 'action' | 'subject' | 'conditions'>> = []\n) => {\n  await validatePermissionsExist(permissions);\n\n  // Internal actions are not handled by the role service, so any permission\n  // with an internal action is filtered out\n  const internalActions = getService('permission')\n    .actionProvider.values()\n    .filter((action) => action.section === 'internal')\n    .map((action) => action.actionId);\n\n  const superAdmin = await getService('role').getSuperAdmin();\n  const isSuperAdmin = superAdmin && superAdmin.id === roleId;\n  const assignRole = set('role', roleId);\n\n  const permissionsWithRole = permissions\n    // Add the role attribute to every permission\n    .map(assignRole)\n    // Transform each permission into a Permission instance\n    // @ts-expect-error - lodash set doesn't resolve the type appropriately\n    .map(permissionDomain.create);\n\n  const existingPermissions = await getService('permission').findMany({\n    where: { role: { id: roleId } },\n    populate: ['role'],\n  });\n\n  const permissionsToAdd = differenceWith(\n    arePermissionsEqual,\n    permissionsWithRole,\n    existingPermissions\n  ).filter((permission: Permission) => !internalActions.includes(permission.action));\n\n  const permissionsToDelete = differenceWith(\n    arePermissionsEqual,\n    existingPermissions,\n    permissionsWithRole\n  ).filter((permission: Permission) => !internalActions.includes(permission.action));\n\n  const permissionsToReturn = differenceBy('id', permissionsToDelete, existingPermissions);\n\n  if (permissionsToDelete.length > 0) {\n    // @ts-expect-error - lodash prop doesn't resolve the type appropriately\n    await getService('permission').deleteByIds(permissionsToDelete.map(prop('id')));\n  }\n\n  if (permissionsToAdd.length > 0) {\n    const newPermissions = await addPermissions(roleId, permissionsToAdd);\n    permissionsToReturn.push(...newPermissions);\n  }\n\n  if (!isSuperAdmin && (permissionsToAdd.length || permissionsToDelete.length)) {\n    await getService('metrics').sendDidUpdateRolePermissions();\n  }\n\n  return permissionsToReturn;\n};\n\nconst addPermissions = async (roleId: Data.ID, permissions: any) => {\n  const { conditionProvider, createMany } = getService('permission');\n  const { sanitizeConditions } = permissionDomain;\n\n  const permissionsWithRole = permissions\n    .map(set('role', roleId))\n    // @ts-expect-error - refactor domain/permission Condition type, as it's now expecting\n    // a string but it should be a Condition interface\n    .map(sanitizeConditions(conditionProvider))\n    .map(permissionDomain.create);\n\n  return createMany(permissionsWithRole);\n};\n\nconst isContentTypeAction = (action: Action) => action.section === CONTENT_TYPE_SECTION;\n\n/**\n * Reset super admin permissions (giving it all permissions)\n */\nconst resetSuperAdminPermissions = async () => {\n  const superAdminRole = await getService('role').getSuperAdmin();\n  if (!superAdminRole) {\n    return;\n  }\n\n  const permissionService = getService('permission');\n  const contentTypeService = getService('content-type');\n\n  const allActions = permissionService.actionProvider.values() as Action[];\n\n  const contentTypesActions = allActions.filter((action) => isContentTypeAction(action));\n  const otherActions = allActions.filter((action) => !isContentTypeAction(action));\n\n  // First, get the content-types permissions\n  const permissions = contentTypeService.getPermissionsWithNestedFields(\n    contentTypesActions\n  ) as Permission[];\n\n  // Then add every other permission\n  const otherPermissions = otherActions.reduce((acc, action) => {\n    const { actionId, subjects } = action;\n\n    if (isArray(subjects)) {\n      acc.push(\n        ...subjects.map((subject) => permissionDomain.create({ action: actionId, subject }))\n      );\n    } else {\n      acc.push(permissionDomain.create({ action: actionId }));\n    }\n\n    return acc;\n  }, [] as Permission[]);\n\n  permissions.push(...otherPermissions);\n\n  const transformedPermissions = (await hooks.willResetSuperAdminPermissions.call(\n    permissions\n  )) as Permission[];\n\n  await assignPermissions(superAdminRole.id, transformedPermissions);\n};\n\n/**\n * Check if a user object includes the super admin role\n */\nconst hasSuperAdminRole = (user: AdminUser): boolean => {\n  const roles = _.get(user, 'roles', []) as AdminRole[];\n\n  return roles.map(prop('code')).includes(SUPER_ADMIN_CODE);\n};\n\nconst constants = {\n  superAdminCode: SUPER_ADMIN_CODE,\n};\n\nexport default {\n  hooks,\n  sanitizeRole,\n  create,\n  findOne,\n  findOneWithUsersCount,\n  find,\n  findAllWithUsersCount,\n  update,\n  exists,\n  count,\n  deleteByIds,\n  getUsersCount,\n  getSuperAdmin,\n  getSuperAdminWithUsersCount,\n  createRolesIfNoneExist,\n  displayWarningIfNoSuperAdmin,\n  addPermissions,\n  hasSuperAdminRole,\n  assignPermissions,\n  resetSuperAdminPermissions,\n  checkRolesIdForDeletion,\n  constants,\n};\n"],"names":["SUPER_ADMIN_CODE","CONTENT_TYPE_SECTION","roleConstants","createAsyncSeriesWaterfallHook","hooksUtils","ApplicationError","errors","hooks","willResetSuperAdminPermissions","ACTIONS","publish","sanitizeRole","omit","COMPARABLE_FIELDS","pickComparableFields","pick","jsonClean","data","JSON","parse","stringify","arePermissionsEqual","p1","p2","action","isEqual","create","attributes","alreadyExists","exists","name","autoGeneratedCode","_","kebabCase","dates","timestampCode","rolesWithCode","code","result","strapi","db","query","eventHub","emit","role","findOne","params","populate","where","findOneWithUsersCount","usersCount","getUsersCount","id","find","findMany","findAllWithUsersCount","roles","get","transform","update","sanitizedAttributes","has","$ne","count","checkRolesIdForDeletion","ids","superAdminRole","getSuperAdmin","arrays","includesString","roleId","deleteByIds","getService","deleteByRolesIds","deletedRoles","deletedRole","delete","push","getSuperAdminWithUsersCount","createRolesIfNoneExist","someRolesExist","actionProvider","allActions","values","contentTypesActions","filter","a","section","description","assignARoleToAll","editorRole","authorRole","editorPermissions","getPermissionsWithNestedFields","restrictedSubjects","authorPermissions","map","permission","permissionDomain","conditions","getDefaultPluginPermissions","isAuthor","addPermissions","displayWarningIfNoSuperAdmin","someUsersExists","log","warn","assignPermissions","permissions","validatePermissionsExist","internalActions","actionId","superAdmin","isSuperAdmin","assignRole","set","permissionsWithRole","existingPermissions","permissionsToAdd","differenceWith","includes","permissionsToDelete","permissionsToReturn","differenceBy","length","prop","newPermissions","sendDidUpdateRolePermissions","conditionProvider","createMany","sanitizeConditions","isContentTypeAction","resetSuperAdminPermissions","permissionService","contentTypeService","otherActions","otherPermissions","reduce","acc","subjects","isArray","subject","transformedPermissions","call","hasSuperAdminRole","user","constants","superAdminCode"],"mappings":"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"}