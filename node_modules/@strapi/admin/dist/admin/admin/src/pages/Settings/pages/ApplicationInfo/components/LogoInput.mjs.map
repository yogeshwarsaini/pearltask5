{"version":3,"file":"LogoInput.mjs","sources":["../../../../../../../../../admin/src/pages/Settings/pages/ApplicationInfo/components/LogoInput.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { createContext } from '@radix-ui/react-context';\nimport {\n  Box,\n  Button,\n  ButtonProps,\n  Card,\n  CardAsset,\n  CardBadge,\n  CardBody,\n  CardContent,\n  CardHeader,\n  CardSubtitle,\n  CardTitle,\n  CarouselActions,\n  CarouselInput,\n  CarouselInputProps,\n  CarouselSlide,\n  Field,\n  Flex,\n  IconButton,\n  Modal,\n  Tabs,\n  TextInput,\n  TextInputProps,\n  Typography,\n} from '@strapi/design-system';\nimport { PlusCircle, Plus, ArrowClockwise } from '@strapi/icons';\nimport axios, { AxiosError } from 'axios';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport { ConfigurationContextValue } from '../../../../../features/Configuration';\nimport { ACCEPTED_FORMAT, DIMENSION, SIZE } from '../utils/constants';\nimport { ImageAsset, ParsingFileError, parseFileMetadatas } from '../utils/files';\n\n/* -------------------------------------------------------------------------------------------------\n * LogoInputContext\n * -----------------------------------------------------------------------------------------------*/\n\ninterface LogoInputContextValue {\n  localImage: ImageAsset | undefined;\n  goToStep: (step: Step) => void;\n  onClose: () => void;\n  setLocalImage: (asset: ImageAsset | undefined) => void;\n}\n\nconst [LogoInputContextProvider, useLogoInputContext] =\n  createContext<LogoInputContextValue>('LogoInput');\n\n/* -------------------------------------------------------------------------------------------------\n * LogoInput\n * -----------------------------------------------------------------------------------------------*/\n\ninterface LogoInputProps\n  extends Pick<PendingLogoDialogProps, 'onChangeLogo'>,\n    Pick<CarouselInputProps, 'label' | 'hint'> {\n  canUpdate: boolean;\n  customLogo?: ConfigurationContextValue['logos']['auth']['custom'];\n  defaultLogo: string;\n}\n\ntype Step = 'pending' | 'upload' | undefined;\n\nconst LogoInput = ({\n  canUpdate,\n  customLogo,\n  defaultLogo,\n  hint,\n  label,\n  onChangeLogo,\n}: LogoInputProps) => {\n  const [localImage, setLocalImage] = React.useState<ImageAsset | undefined>();\n  const [currentStep, setCurrentStep] = React.useState<Step>();\n  const { formatMessage } = useIntl();\n\n  const handleClose = () => {\n    setLocalImage(undefined);\n    setCurrentStep(undefined);\n  };\n\n  return (\n    <Modal.Root\n      open={!!currentStep}\n      onOpenChange={(state) => {\n        if (state === false) {\n          handleClose();\n        }\n      }}\n    >\n      <LogoInputContextProvider\n        setLocalImage={setLocalImage}\n        localImage={localImage}\n        goToStep={setCurrentStep}\n        onClose={handleClose}\n      >\n        <CarouselInput\n          label={label}\n          selectedSlide={0}\n          hint={hint}\n          // Carousel is used here for a single media,\n          // we don't need previous and next labels but these props are required\n          previousLabel=\"\"\n          nextLabel=\"\"\n          onNext={() => {}}\n          onPrevious={() => {}}\n          secondaryLabel={customLogo?.name || 'logo.png'}\n          actions={\n            <CarouselActions>\n              <Modal.Trigger>\n                <IconButton\n                  disabled={!canUpdate}\n                  onClick={() => setCurrentStep('upload')}\n                  label={formatMessage({\n                    id: 'Settings.application.customization.carousel.change-action',\n                    defaultMessage: 'Change logo',\n                  })}\n                >\n                  <Plus />\n                </IconButton>\n              </Modal.Trigger>\n              {customLogo?.url && (\n                <IconButton\n                  disabled={!canUpdate}\n                  onClick={() => onChangeLogo(null)}\n                  label={formatMessage({\n                    id: 'Settings.application.customization.carousel.reset-action',\n                    defaultMessage: 'Reset logo',\n                  })}\n                >\n                  <ArrowClockwise />\n                </IconButton>\n              )}\n            </CarouselActions>\n          }\n        >\n          <CarouselSlide\n            label={formatMessage({\n              id: 'Settings.application.customization.carousel-slide.label',\n              defaultMessage: 'Logo slide',\n            })}\n          >\n            <Box\n              maxHeight=\"40%\"\n              maxWidth=\"40%\"\n              tag=\"img\"\n              src={customLogo?.url || defaultLogo}\n              alt={formatMessage({\n                id: 'Settings.application.customization.carousel.title',\n                defaultMessage: 'Logo',\n              })}\n            />\n          </CarouselSlide>\n        </CarouselInput>\n        <Modal.Content>\n          <Modal.Header>\n            <Modal.Title>\n              {formatMessage(\n                currentStep === 'upload'\n                  ? {\n                      id: 'Settings.application.customization.modal.upload',\n                      defaultMessage: 'Upload logo',\n                    }\n                  : {\n                      id: 'Settings.application.customization.modal.pending',\n                      defaultMessage: 'Pending logo',\n                    }\n              )}\n            </Modal.Title>\n          </Modal.Header>\n          {currentStep === 'upload' ? (\n            <AddLogoDialog />\n          ) : (\n            <PendingLogoDialog onChangeLogo={onChangeLogo} />\n          )}\n        </Modal.Content>\n      </LogoInputContextProvider>\n    </Modal.Root>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * AddLogoDialog\n * -----------------------------------------------------------------------------------------------*/\n\nconst AddLogoDialog = () => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Tabs.Root variant=\"simple\" defaultValue=\"computer\">\n      <Box paddingLeft={8} paddingRight={8}>\n        <Tabs.List\n          aria-label={formatMessage({\n            id: 'Settings.application.customization.modal.tab.label',\n            defaultMessage: 'How do you want to upload your assets?',\n          })}\n        >\n          <Tabs.Trigger value=\"computer\">\n            {formatMessage({\n              id: 'Settings.application.customization.modal.upload.from-computer',\n              defaultMessage: 'From computer',\n            })}\n          </Tabs.Trigger>\n          <Tabs.Trigger value=\"url\">\n            {formatMessage({\n              id: 'Settings.application.customization.modal.upload.from-url',\n              defaultMessage: 'From url',\n            })}\n          </Tabs.Trigger>\n        </Tabs.List>\n      </Box>\n      <Tabs.Content value=\"computer\">\n        <ComputerForm />\n      </Tabs.Content>\n      <Tabs.Content value=\"url\">\n        <URLForm />\n      </Tabs.Content>\n    </Tabs.Root>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * URLForm\n * -----------------------------------------------------------------------------------------------*/\n\nconst URLForm = () => {\n  const { formatMessage } = useIntl();\n  const [logoUrl, setLogoUrl] = React.useState('');\n  const [error, setError] = React.useState<string>();\n  const { setLocalImage, goToStep, onClose } = useLogoInputContext('URLForm');\n\n  const handleChange: TextInputProps['onChange'] = (e) => {\n    setLogoUrl(e.target.value);\n  };\n\n  const handleSubmit: React.FormEventHandler<HTMLFormElement> = async (event) => {\n    event.preventDefault();\n\n    const data = new FormData(event.target as HTMLFormElement);\n\n    const url = data.get('logo-url');\n\n    if (!url) {\n      return;\n    }\n\n    try {\n      const res = await axios.get(url.toString(), { responseType: 'blob', timeout: 8000 });\n\n      const file = new File([res.data], res.config.url ?? '', {\n        type: res.headers['content-type'],\n      });\n\n      const asset = await parseFileMetadatas(file);\n\n      setLocalImage(asset);\n      goToStep('pending');\n    } catch (err) {\n      if (err instanceof AxiosError) {\n        setError(\n          formatMessage({\n            id: 'Settings.application.customization.modal.upload.error-network',\n            defaultMessage: 'Network error',\n          })\n        );\n      } else if (err instanceof ParsingFileError) {\n        setError(formatMessage(err.displayMessage, { size: SIZE, dimension: DIMENSION }));\n      } else {\n        throw err;\n      }\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Box paddingLeft={8} paddingRight={8} paddingTop={6} paddingBottom={6}>\n        <Field.Root error={error} name=\"logo-url\">\n          <Field.Label>\n            {formatMessage({\n              id: 'Settings.application.customization.modal.upload.from-url.input-label',\n              defaultMessage: 'URL',\n            })}\n          </Field.Label>\n          <TextInput onChange={handleChange} value={logoUrl} />\n          <Field.Error />\n        </Field.Root>\n      </Box>\n      <Modal.Footer>\n        <Button onClick={onClose} variant=\"tertiary\">\n          {formatMessage({ id: 'app.components.Button.cancel', defaultMessage: 'Cancel' })}\n        </Button>\n        <Button type=\"submit\">\n          {formatMessage({\n            id: 'Settings.application.customization.modal.upload.next',\n            defaultMessage: 'Next',\n          })}\n        </Button>\n      </Modal.Footer>\n    </form>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ComputerForm\n * -----------------------------------------------------------------------------------------------*/\n\nconst ComputerForm = () => {\n  const { formatMessage } = useIntl();\n  const [dragOver, setDragOver] = React.useState(false);\n  const [fileError, setFileError] = React.useState<string>();\n  const inputRef = React.useRef<HTMLInputElement>(null!);\n  const id = React.useId();\n\n  const { setLocalImage, goToStep, onClose } = useLogoInputContext('ComputerForm');\n\n  const handleDragEnter = () => {\n    setDragOver(true);\n  };\n  const handleDragLeave = () => {\n    setDragOver(false);\n  };\n\n  const handleClick: ButtonProps['onClick'] = (e) => {\n    e.preventDefault();\n    inputRef.current.click();\n  };\n\n  const handleChange = async () => {\n    handleDragLeave();\n\n    if (!inputRef.current.files) {\n      return;\n    }\n\n    const [file] = inputRef.current.files;\n\n    try {\n      const asset = await parseFileMetadatas(file);\n      setLocalImage(asset);\n      goToStep('pending');\n    } catch (err) {\n      if (err instanceof ParsingFileError) {\n        setFileError(formatMessage(err.displayMessage, { size: SIZE, dimension: DIMENSION }));\n        inputRef.current.focus();\n      } else {\n        throw err;\n      }\n    }\n  };\n\n  return (\n    <>\n      <form>\n        <Box paddingLeft={8} paddingRight={8} paddingTop={6} paddingBottom={6}>\n          <Field.Root name={id} error={fileError}>\n            <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\n              <Flex\n                paddingTop={9}\n                paddingBottom={7}\n                hasRadius\n                justifyContent=\"center\"\n                direction=\"column\"\n                background={dragOver ? 'primary100' : 'neutral100'}\n                borderColor={dragOver ? 'primary500' : fileError ? 'danger600' : 'neutral300'}\n                borderStyle=\"dashed\"\n                borderWidth=\"1px\"\n                position=\"relative\"\n                onDragEnter={handleDragEnter}\n                onDragLeave={handleDragLeave}\n              >\n                <PlusCircle fill=\"primary600\" width=\"6rem\" height=\"6rem\" aria-hidden />\n                <Box paddingTop={3} paddingBottom={5}>\n                  <Typography variant=\"delta\" tag=\"label\" htmlFor={id}>\n                    {formatMessage({\n                      id: 'Settings.application.customization.modal.upload.drag-drop',\n                      defaultMessage: 'Drag and Drop here or',\n                    })}\n                  </Typography>\n                </Box>\n                <Box position=\"relative\">\n                  <FileInput\n                    accept={ACCEPTED_FORMAT.join(', ')}\n                    type=\"file\"\n                    name=\"files\"\n                    tabIndex={-1}\n                    onChange={handleChange}\n                    ref={inputRef}\n                    id={id}\n                  />\n                </Box>\n                <Button type=\"button\" onClick={handleClick}>\n                  {formatMessage({\n                    id: 'Settings.application.customization.modal.upload.cta.browse',\n                    defaultMessage: 'Browse files',\n                  })}\n                </Button>\n                <Box paddingTop={6}>\n                  <Typography variant=\"pi\" textColor=\"neutral600\">\n                    {formatMessage(\n                      {\n                        id: 'Settings.application.customization.modal.upload.file-validation',\n                        defaultMessage:\n                          'Max dimension: {dimension}x{dimension}, Max size: {size}KB',\n                      },\n                      { size: SIZE, dimension: DIMENSION }\n                    )}\n                  </Typography>\n                </Box>\n              </Flex>\n              <Field.Error />\n            </Flex>\n          </Field.Root>\n        </Box>\n      </form>\n      <Modal.Footer>\n        <Button onClick={onClose} variant=\"tertiary\">\n          {formatMessage({ id: 'app.components.Button.cancel', defaultMessage: 'Cancel' })}\n        </Button>\n      </Modal.Footer>\n    </>\n  );\n};\n\nconst FileInput = styled(Field.Input)`\n  opacity: 0;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  z-index: 1;\n`;\n\n/* -------------------------------------------------------------------------------------------------\n * PendingLogoDialog\n * -----------------------------------------------------------------------------------------------*/\n\ninterface PendingLogoDialogProps {\n  onChangeLogo: (file: ImageAsset | null) => void;\n}\n\nconst PendingLogoDialog = ({ onChangeLogo }: PendingLogoDialogProps) => {\n  const { formatMessage } = useIntl();\n  const { localImage, setLocalImage, goToStep, onClose } = useLogoInputContext('PendingLogoDialog');\n\n  const handleGoBack = () => {\n    setLocalImage(undefined);\n    goToStep('upload');\n  };\n\n  const handleUpload = () => {\n    if (localImage) {\n      onChangeLogo(localImage);\n    }\n    onClose();\n  };\n\n  return (\n    <>\n      <Modal.Body>\n        <Box paddingLeft={8} paddingRight={8} paddingTop={6} paddingBottom={6}>\n          <Flex justifyContent=\"space-between\" paddingBottom={6}>\n            <Flex direction=\"column\" alignItems=\"flex-start\">\n              <Typography variant=\"pi\" fontWeight=\"bold\">\n                {formatMessage({\n                  id: 'Settings.application.customization.modal.pending.title',\n                  defaultMessage: 'Logo ready to upload',\n                })}\n              </Typography>\n              <Typography variant=\"pi\" textColor=\"neutral500\">\n                {formatMessage({\n                  id: 'Settings.application.customization.modal.pending.subtitle',\n                  defaultMessage: 'Manage the chosen logo before uploading it',\n                })}\n              </Typography>\n            </Flex>\n            <Button onClick={handleGoBack} variant=\"secondary\">\n              {formatMessage({\n                id: 'Settings.application.customization.modal.pending.choose-another',\n                defaultMessage: 'Choose another logo',\n              })}\n            </Button>\n          </Flex>\n          <Box maxWidth={`18rem`}>\n            {localImage?.url ? <ImageCardAsset asset={localImage} /> : null}\n          </Box>\n        </Box>\n      </Modal.Body>\n      <Modal.Footer>\n        <Modal.Close>\n          <Button onClick={onClose} variant=\"tertiary\">\n            {formatMessage({\n              id: 'Settings.application.customization.modal.cancel',\n              defaultMessage: 'Cancel',\n            })}\n          </Button>\n        </Modal.Close>\n        <Button onClick={handleUpload}>\n          {formatMessage({\n            id: 'Settings.application.customization.modal.pending.upload',\n            defaultMessage: 'Upload logo',\n          })}\n        </Button>\n      </Modal.Footer>\n    </>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ImageCardAsset\n * -----------------------------------------------------------------------------------------------*/\n\ninterface ImageCardAssetProps {\n  asset: ImageAsset;\n}\n\nconst ImageCardAsset = ({ asset }: ImageCardAssetProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardAsset size=\"S\" src={asset.url} />\n      </CardHeader>\n      <CardBody>\n        <CardContent>\n          <CardTitle>{asset.name}</CardTitle>\n          <CardSubtitle>\n            {`${asset.ext?.toUpperCase()} - ${asset.width}✕${asset.height}`}\n          </CardSubtitle>\n        </CardContent>\n        <CardBadge>\n          {formatMessage({\n            id: 'Settings.application.customization.modal.pending.card-badge',\n            defaultMessage: 'image',\n          })}\n        </CardBadge>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport { LogoInput };\nexport type { LogoInputProps };\n"],"names":["LogoInputContextProvider","useLogoInputContext","createContext","LogoInput","canUpdate","customLogo","defaultLogo","hint","label","onChangeLogo","localImage","setLocalImage","React","useState","currentStep","setCurrentStep","formatMessage","useIntl","handleClose","undefined","_jsx","Modal","Root","open","onOpenChange","state","_jsxs","goToStep","onClose","CarouselInput","selectedSlide","previousLabel","nextLabel","onNext","onPrevious","secondaryLabel","name","actions","CarouselActions","Trigger","IconButton","disabled","onClick","id","defaultMessage","Plus","url","ArrowClockwise","CarouselSlide","Box","maxHeight","maxWidth","tag","src","alt","Content","Header","Title","AddLogoDialog","PendingLogoDialog","Tabs","variant","defaultValue","paddingLeft","paddingRight","List","aria-label","value","ComputerForm","URLForm","logoUrl","setLogoUrl","error","setError","handleChange","e","target","handleSubmit","event","preventDefault","data","FormData","get","res","axios","toString","responseType","timeout","file","File","config","type","headers","asset","parseFileMetadatas","err","AxiosError","ParsingFileError","displayMessage","size","SIZE","dimension","DIMENSION","form","onSubmit","paddingTop","paddingBottom","Field","Label","TextInput","onChange","Error","Footer","Button","dragOver","setDragOver","fileError","setFileError","inputRef","useRef","useId","handleDragEnter","handleDragLeave","handleClick","current","click","files","focus","_Fragment","Flex","direction","alignItems","gap","hasRadius","justifyContent","background","borderColor","borderStyle","borderWidth","position","onDragEnter","onDragLeave","PlusCircle","fill","width","height","aria-hidden","Typography","htmlFor","FileInput","accept","ACCEPTED_FORMAT","join","tabIndex","ref","textColor","styled","Input","handleGoBack","handleUpload","Body","fontWeight","ImageCardAsset","Close","Card","CardHeader","CardAsset","CardBody","CardContent","CardTitle","CardSubtitle","ext","toUpperCase","CardBadge"],"mappings":";;;;;;;;;;;AAgDA,MAAM,CAACA,wBAAAA,EAA0BC,mBAAoB,CAAA,GACnDC,aAAqC,CAAA,WAAA,CAAA;AAgBvC,MAAMC,SAAY,GAAA,CAAC,EACjBC,SAAS,EACTC,UAAU,EACVC,WAAW,EACXC,IAAI,EACJC,KAAK,EACLC,YAAY,EACG,GAAA;AACf,IAAA,MAAM,CAACC,UAAAA,EAAYC,aAAc,CAAA,GAAGC,MAAMC,QAAQ,EAAA;AAClD,IAAA,MAAM,CAACC,WAAAA,EAAaC,cAAe,CAAA,GAAGH,MAAMC,QAAQ,EAAA;IACpD,MAAM,EAAEG,aAAa,EAAE,GAAGC,OAAAA,EAAAA;AAE1B,IAAA,MAAMC,WAAc,GAAA,IAAA;QAClBP,aAAcQ,CAAAA,SAAAA,CAAAA;QACdJ,cAAeI,CAAAA,SAAAA,CAAAA;AACjB,KAAA;IAEA,qBACEC,GAAA,CAACC,MAAMC,IAAI,EAAA;AACTC,QAAAA,IAAAA,EAAM,CAAC,CAACT,WAAAA;AACRU,QAAAA,YAAAA,EAAc,CAACC,KAAAA,GAAAA;AACb,YAAA,IAAIA,UAAU,KAAO,EAAA;AACnBP,gBAAAA,WAAAA,EAAAA;AACF;AACF,SAAA;AAEA,QAAA,QAAA,gBAAAQ,IAAC1B,CAAAA,wBAAAA,EAAAA;YACCW,aAAeA,EAAAA,aAAAA;YACfD,UAAYA,EAAAA,UAAAA;YACZiB,QAAUZ,EAAAA,cAAAA;YACVa,OAASV,EAAAA,WAAAA;;8BAETE,GAACS,CAAAA,aAAAA,EAAAA;oBACCrB,KAAOA,EAAAA,KAAAA;oBACPsB,aAAe,EAAA,CAAA;oBACfvB,IAAMA,EAAAA,IAAAA;;;oBAGNwB,aAAc,EAAA,EAAA;oBACdC,SAAU,EAAA,EAAA;AACVC,oBAAAA,MAAAA,EAAQ,IAAO,EAAA;AACfC,oBAAAA,UAAAA,EAAY,IAAO,EAAA;AACnBC,oBAAAA,cAAAA,EAAgB9B,YAAY+B,IAAQ,IAAA,UAAA;AACpCC,oBAAAA,OAAAA,gBACEX,IAACY,CAAAA,eAAAA,EAAAA;;AACC,0CAAAlB,GAAA,CAACC,MAAMkB,OAAO,EAAA;AACZ,gCAAA,QAAA,gBAAAnB,GAACoB,CAAAA,UAAAA,EAAAA;AACCC,oCAAAA,QAAAA,EAAU,CAACrC,SAAAA;AACXsC,oCAAAA,OAAAA,EAAS,IAAM3B,cAAe,CAAA,QAAA,CAAA;AAC9BP,oCAAAA,KAAAA,EAAOQ,aAAc,CAAA;wCACnB2B,EAAI,EAAA,2DAAA;wCACJC,cAAgB,EAAA;AAClB,qCAAA,CAAA;AAEA,oCAAA,QAAA,gBAAAxB,GAACyB,CAAAA,IAAAA,EAAAA,EAAAA;;;AAGJxC,4BAAAA,UAAAA,EAAYyC,qBACX1B,GAACoB,CAAAA,UAAAA,EAAAA;AACCC,gCAAAA,QAAAA,EAAU,CAACrC,SAAAA;AACXsC,gCAAAA,OAAAA,EAAS,IAAMjC,YAAa,CAAA,IAAA,CAAA;AAC5BD,gCAAAA,KAAAA,EAAOQ,aAAc,CAAA;oCACnB2B,EAAI,EAAA,0DAAA;oCACJC,cAAgB,EAAA;AAClB,iCAAA,CAAA;AAEA,gCAAA,QAAA,gBAAAxB,GAAC2B,CAAAA,cAAAA,EAAAA,EAAAA;;;;AAMT,oBAAA,QAAA,gBAAA3B,GAAC4B,CAAAA,aAAAA,EAAAA;AACCxC,wBAAAA,KAAAA,EAAOQ,aAAc,CAAA;4BACnB2B,EAAI,EAAA,yDAAA;4BACJC,cAAgB,EAAA;AAClB,yBAAA,CAAA;AAEA,wBAAA,QAAA,gBAAAxB,GAAC6B,CAAAA,GAAAA,EAAAA;4BACCC,SAAU,EAAA,KAAA;4BACVC,QAAS,EAAA,KAAA;4BACTC,GAAI,EAAA,KAAA;AACJC,4BAAAA,GAAAA,EAAKhD,YAAYyC,GAAOxC,IAAAA,WAAAA;AACxBgD,4BAAAA,GAAAA,EAAKtC,aAAc,CAAA;gCACjB2B,EAAI,EAAA,mDAAA;gCACJC,cAAgB,EAAA;AAClB,6BAAA;;;;AAIN,8BAAAlB,IAAA,CAACL,MAAMkC,OAAO,EAAA;;AACZ,sCAAAnC,GAAA,CAACC,MAAMmC,MAAM,EAAA;oDACXpC,GAAA,CAACC,MAAMoC,KAAK,EAAA;AACTzC,gCAAAA,QAAAA,EAAAA,aAAAA,CACCF,gBAAgB,QACZ,GAAA;oCACE6B,EAAI,EAAA,iDAAA;oCACJC,cAAgB,EAAA;iCAElB,GAAA;oCACED,EAAI,EAAA,kDAAA;oCACJC,cAAgB,EAAA;AAClB,iCAAA;;;wBAIT9B,WAAgB,KAAA,QAAA,iBACfM,GAACsC,CAAAA,aAAAA,EAAAA,EAAAA,CAAAA,iBAEDtC,GAACuC,CAAAA,iBAAAA,EAAAA;4BAAkBlD,YAAcA,EAAAA;;;;;;;AAM7C;AAEA;;AAEkG,qGAElG,MAAMiD,aAAgB,GAAA,IAAA;IACpB,MAAM,EAAE1C,aAAa,EAAE,GAAGC,OAAAA,EAAAA;IAE1B,qBACES,IAAA,CAACkC,KAAKtC,IAAI,EAAA;QAACuC,OAAQ,EAAA,QAAA;QAASC,YAAa,EAAA,UAAA;;0BACvC1C,GAAC6B,CAAAA,GAAAA,EAAAA;gBAAIc,WAAa,EAAA,CAAA;gBAAGC,YAAc,EAAA,CAAA;wCACjCtC,IAAA,CAACkC,KAAKK,IAAI,EAAA;AACRC,oBAAAA,YAAAA,EAAYlD,aAAc,CAAA;wBACxB2B,EAAI,EAAA,oDAAA;wBACJC,cAAgB,EAAA;AAClB,qBAAA,CAAA;;AAEA,sCAAAxB,GAAA,CAACwC,KAAKrB,OAAO,EAAA;4BAAC4B,KAAM,EAAA,UAAA;sCACjBnD,aAAc,CAAA;gCACb2B,EAAI,EAAA,+DAAA;gCACJC,cAAgB,EAAA;AAClB,6BAAA;;AAEF,sCAAAxB,GAAA,CAACwC,KAAKrB,OAAO,EAAA;4BAAC4B,KAAM,EAAA,KAAA;sCACjBnD,aAAc,CAAA;gCACb2B,EAAI,EAAA,0DAAA;gCACJC,cAAgB,EAAA;AAClB,6BAAA;;;;;AAIN,0BAAAxB,GAAA,CAACwC,KAAKL,OAAO,EAAA;gBAACY,KAAM,EAAA,UAAA;AAClB,gBAAA,QAAA,gBAAA/C,GAACgD,CAAAA,YAAAA,EAAAA,EAAAA;;AAEH,0BAAAhD,GAAA,CAACwC,KAAKL,OAAO,EAAA;gBAACY,KAAM,EAAA,KAAA;AAClB,gBAAA,QAAA,gBAAA/C,GAACiD,CAAAA,OAAAA,EAAAA,EAAAA;;;;AAIT,CAAA;AAEA;;AAEkG,qGAElG,MAAMA,OAAU,GAAA,IAAA;IACd,MAAM,EAAErD,aAAa,EAAE,GAAGC,OAAAA,EAAAA;AAC1B,IAAA,MAAM,CAACqD,OAASC,EAAAA,UAAAA,CAAW,GAAG3D,KAAAA,CAAMC,QAAQ,CAAC,EAAA,CAAA;AAC7C,IAAA,MAAM,CAAC2D,KAAAA,EAAOC,QAAS,CAAA,GAAG7D,MAAMC,QAAQ,EAAA;IACxC,MAAM,EAAEF,aAAa,EAAEgB,QAAQ,EAAEC,OAAO,EAAE,GAAG3B,mBAAoB,CAAA,SAAA,CAAA;AAEjE,IAAA,MAAMyE,eAA2C,CAACC,CAAAA,GAAAA;QAChDJ,UAAWI,CAAAA,CAAAA,CAAEC,MAAM,CAACT,KAAK,CAAA;AAC3B,KAAA;AAEA,IAAA,MAAMU,eAAwD,OAAOC,KAAAA,GAAAA;AACnEA,QAAAA,KAAAA,CAAMC,cAAc,EAAA;AAEpB,QAAA,MAAMC,IAAO,GAAA,IAAIC,QAASH,CAAAA,KAAAA,CAAMF,MAAM,CAAA;QAEtC,MAAM9B,GAAAA,GAAMkC,IAAKE,CAAAA,GAAG,CAAC,UAAA,CAAA;AAErB,QAAA,IAAI,CAACpC,GAAK,EAAA;AACR,YAAA;AACF;QAEA,IAAI;AACF,YAAA,MAAMqC,MAAM,MAAMC,KAAAA,CAAMF,GAAG,CAACpC,GAAAA,CAAIuC,QAAQ,EAAI,EAAA;gBAAEC,YAAc,EAAA,MAAA;gBAAQC,OAAS,EAAA;AAAK,aAAA,CAAA;YAElF,MAAMC,IAAAA,GAAO,IAAIC,IAAK,CAAA;AAACN,gBAAAA,GAAAA,CAAIH;AAAK,aAAA,EAAEG,GAAIO,CAAAA,MAAM,CAAC5C,GAAG,IAAI,EAAI,EAAA;gBACtD6C,IAAMR,EAAAA,GAAAA,CAAIS,OAAO,CAAC,cAAe;AACnC,aAAA,CAAA;YAEA,MAAMC,KAAAA,GAAQ,MAAMC,kBAAmBN,CAAAA,IAAAA,CAAAA;YAEvC7E,aAAckF,CAAAA,KAAAA,CAAAA;YACdlE,QAAS,CAAA,SAAA,CAAA;AACX,SAAA,CAAE,OAAOoE,GAAK,EAAA;AACZ,YAAA,IAAIA,eAAeC,UAAY,EAAA;AAC7BvB,gBAAAA,QAAAA,CACEzD,aAAc,CAAA;oBACZ2B,EAAI,EAAA,+DAAA;oBACJC,cAAgB,EAAA;AAClB,iBAAA,CAAA,CAAA;aAEG,MAAA,IAAImD,eAAeE,gBAAkB,EAAA;gBAC1CxB,QAASzD,CAAAA,aAAAA,CAAc+E,GAAIG,CAAAA,cAAc,EAAE;oBAAEC,IAAMC,EAAAA,IAAAA;oBAAMC,SAAWC,EAAAA;AAAU,iBAAA,CAAA,CAAA;aACzE,MAAA;gBACL,MAAMP,GAAAA;AACR;AACF;AACF,KAAA;AAEA,IAAA,qBACErE,IAAC6E,CAAAA,MAAAA,EAAAA;QAAKC,QAAU3B,EAAAA,YAAAA;;0BACdzD,GAAC6B,CAAAA,GAAAA,EAAAA;gBAAIc,WAAa,EAAA,CAAA;gBAAGC,YAAc,EAAA,CAAA;gBAAGyC,UAAY,EAAA,CAAA;gBAAGC,aAAe,EAAA,CAAA;wCAClEhF,IAAA,CAACiF,MAAMrF,IAAI,EAAA;oBAACkD,KAAOA,EAAAA,KAAAA;oBAAOpC,IAAK,EAAA,UAAA;;AAC7B,sCAAAhB,GAAA,CAACuF,MAAMC,KAAK,EAAA;sCACT5F,aAAc,CAAA;gCACb2B,EAAI,EAAA,sEAAA;gCACJC,cAAgB,EAAA;AAClB,6BAAA;;sCAEFxB,GAACyF,CAAAA,SAAAA,EAAAA;4BAAUC,QAAUpC,EAAAA,YAAAA;4BAAcP,KAAOG,EAAAA;;AAC1C,sCAAAlD,GAAA,CAACuF,MAAMI,KAAK,EAAA,EAAA;;;;AAGhB,0BAAArF,IAAA,CAACL,MAAM2F,MAAM,EAAA;;kCACX5F,GAAC6F,CAAAA,MAAAA,EAAAA;wBAAOvE,OAASd,EAAAA,OAAAA;wBAASiC,OAAQ,EAAA,UAAA;kCAC/B7C,aAAc,CAAA;4BAAE2B,EAAI,EAAA,8BAAA;4BAAgCC,cAAgB,EAAA;AAAS,yBAAA;;kCAEhFxB,GAAC6F,CAAAA,MAAAA,EAAAA;wBAAOtB,IAAK,EAAA,QAAA;kCACV3E,aAAc,CAAA;4BACb2B,EAAI,EAAA,sDAAA;4BACJC,cAAgB,EAAA;AAClB,yBAAA;;;;;;AAKV,CAAA;AAEA;;AAEkG,qGAElG,MAAMwB,YAAe,GAAA,IAAA;IACnB,MAAM,EAAEpD,aAAa,EAAE,GAAGC,OAAAA,EAAAA;AAC1B,IAAA,MAAM,CAACiG,QAAUC,EAAAA,WAAAA,CAAY,GAAGvG,KAAAA,CAAMC,QAAQ,CAAC,KAAA,CAAA;AAC/C,IAAA,MAAM,CAACuG,SAAAA,EAAWC,YAAa,CAAA,GAAGzG,MAAMC,QAAQ,EAAA;IAChD,MAAMyG,QAAAA,GAAW1G,KAAM2G,CAAAA,MAAM,CAAmB,IAAA,CAAA;IAChD,MAAM5E,EAAAA,GAAK/B,MAAM4G,KAAK,EAAA;IAEtB,MAAM,EAAE7G,aAAa,EAAEgB,QAAQ,EAAEC,OAAO,EAAE,GAAG3B,mBAAoB,CAAA,cAAA,CAAA;AAEjE,IAAA,MAAMwH,eAAkB,GAAA,IAAA;QACtBN,WAAY,CAAA,IAAA,CAAA;AACd,KAAA;AACA,IAAA,MAAMO,eAAkB,GAAA,IAAA;QACtBP,WAAY,CAAA,KAAA,CAAA;AACd,KAAA;AAEA,IAAA,MAAMQ,cAAsC,CAAChD,CAAAA,GAAAA;AAC3CA,QAAAA,CAAAA,CAAEI,cAAc,EAAA;QAChBuC,QAASM,CAAAA,OAAO,CAACC,KAAK,EAAA;AACxB,KAAA;AAEA,IAAA,MAAMnD,YAAe,GAAA,UAAA;AACnBgD,QAAAA,eAAAA,EAAAA;AAEA,QAAA,IAAI,CAACJ,QAAAA,CAASM,OAAO,CAACE,KAAK,EAAE;AAC3B,YAAA;AACF;AAEA,QAAA,MAAM,CAACtC,IAAK,CAAA,GAAG8B,QAASM,CAAAA,OAAO,CAACE,KAAK;QAErC,IAAI;YACF,MAAMjC,KAAAA,GAAQ,MAAMC,kBAAmBN,CAAAA,IAAAA,CAAAA;YACvC7E,aAAckF,CAAAA,KAAAA,CAAAA;YACdlE,QAAS,CAAA,SAAA,CAAA;AACX,SAAA,CAAE,OAAOoE,GAAK,EAAA;AACZ,YAAA,IAAIA,eAAeE,gBAAkB,EAAA;gBACnCoB,YAAarG,CAAAA,aAAAA,CAAc+E,GAAIG,CAAAA,cAAc,EAAE;oBAAEC,IAAMC,EAAAA,IAAAA;oBAAMC,SAAWC,EAAAA;AAAU,iBAAA,CAAA,CAAA;gBAClFgB,QAASM,CAAAA,OAAO,CAACG,KAAK,EAAA;aACjB,MAAA;gBACL,MAAMhC,GAAAA;AACR;AACF;AACF,KAAA;IAEA,qBACErE,IAAA,CAAAsG,QAAA,EAAA;;0BACE5G,GAACmF,CAAAA,MAAAA,EAAAA;AACC,gBAAA,QAAA,gBAAAnF,GAAC6B,CAAAA,GAAAA,EAAAA;oBAAIc,WAAa,EAAA,CAAA;oBAAGC,YAAc,EAAA,CAAA;oBAAGyC,UAAY,EAAA,CAAA;oBAAGC,aAAe,EAAA,CAAA;4CAClEtF,GAAA,CAACuF,MAAMrF,IAAI,EAAA;wBAACc,IAAMO,EAAAA,EAAAA;wBAAI6B,KAAO4C,EAAAA,SAAAA;AAC3B,wBAAA,QAAA,gBAAA1F,IAACuG,CAAAA,IAAAA,EAAAA;4BAAKC,SAAU,EAAA,QAAA;4BAASC,UAAW,EAAA,SAAA;4BAAUC,GAAK,EAAA,CAAA;;8CACjD1G,IAACuG,CAAAA,IAAAA,EAAAA;oCACCxB,UAAY,EAAA,CAAA;oCACZC,aAAe,EAAA,CAAA;oCACf2B,SAAS,EAAA,IAAA;oCACTC,cAAe,EAAA,QAAA;oCACfJ,SAAU,EAAA,QAAA;AACVK,oCAAAA,UAAAA,EAAYrB,WAAW,YAAe,GAAA,YAAA;oCACtCsB,WAAatB,EAAAA,QAAAA,GAAW,YAAeE,GAAAA,SAAAA,GAAY,WAAc,GAAA,YAAA;oCACjEqB,WAAY,EAAA,QAAA;oCACZC,WAAY,EAAA,KAAA;oCACZC,QAAS,EAAA,UAAA;oCACTC,WAAanB,EAAAA,eAAAA;oCACboB,WAAanB,EAAAA,eAAAA;;sDAEbtG,GAAC0H,CAAAA,UAAAA,EAAAA;4CAAWC,IAAK,EAAA,YAAA;4CAAaC,KAAM,EAAA,MAAA;4CAAOC,MAAO,EAAA,MAAA;4CAAOC,aAAW,EAAA;;sDACpE9H,GAAC6B,CAAAA,GAAAA,EAAAA;4CAAIwD,UAAY,EAAA,CAAA;4CAAGC,aAAe,EAAA,CAAA;AACjC,4CAAA,QAAA,gBAAAtF,GAAC+H,CAAAA,UAAAA,EAAAA;gDAAWtF,OAAQ,EAAA,OAAA;gDAAQT,GAAI,EAAA,OAAA;gDAAQgG,OAASzG,EAAAA,EAAAA;0DAC9C3B,aAAc,CAAA;oDACb2B,EAAI,EAAA,2DAAA;oDACJC,cAAgB,EAAA;AAClB,iDAAA;;;sDAGJxB,GAAC6B,CAAAA,GAAAA,EAAAA;4CAAI0F,QAAS,EAAA,UAAA;AACZ,4CAAA,QAAA,gBAAAvH,GAACiI,CAAAA,SAAAA,EAAAA;gDACCC,MAAQC,EAAAA,eAAAA,CAAgBC,IAAI,CAAC,IAAA,CAAA;gDAC7B7D,IAAK,EAAA,MAAA;gDACLvD,IAAK,EAAA,OAAA;AACLqH,gDAAAA,QAAAA,EAAU,CAAC,CAAA;gDACX3C,QAAUpC,EAAAA,YAAAA;gDACVgF,GAAKpC,EAAAA,QAAAA;gDACL3E,EAAIA,EAAAA;;;sDAGRvB,GAAC6F,CAAAA,MAAAA,EAAAA;4CAAOtB,IAAK,EAAA,QAAA;4CAASjD,OAASiF,EAAAA,WAAAA;sDAC5B3G,aAAc,CAAA;gDACb2B,EAAI,EAAA,4DAAA;gDACJC,cAAgB,EAAA;AAClB,6CAAA;;sDAEFxB,GAAC6B,CAAAA,GAAAA,EAAAA;4CAAIwD,UAAY,EAAA,CAAA;AACf,4CAAA,QAAA,gBAAArF,GAAC+H,CAAAA,UAAAA,EAAAA;gDAAWtF,OAAQ,EAAA,IAAA;gDAAK8F,SAAU,EAAA,YAAA;0DAChC3I,aACC,CAAA;oDACE2B,EAAI,EAAA,iEAAA;oDACJC,cACE,EAAA;iDAEJ,EAAA;oDAAEuD,IAAMC,EAAAA,IAAAA;oDAAMC,SAAWC,EAAAA;AAAU,iDAAA;;;;;AAK3C,8CAAAlF,GAAA,CAACuF,MAAMI,KAAK,EAAA,EAAA;;;;;;AAKpB,0BAAA3F,GAAA,CAACC,MAAM2F,MAAM,EAAA;AACX,gBAAA,QAAA,gBAAA5F,GAAC6F,CAAAA,MAAAA,EAAAA;oBAAOvE,OAASd,EAAAA,OAAAA;oBAASiC,OAAQ,EAAA,UAAA;8BAC/B7C,aAAc,CAAA;wBAAE2B,EAAI,EAAA,8BAAA;wBAAgCC,cAAgB,EAAA;AAAS,qBAAA;;;;;AAKxF,CAAA;AAEA,MAAMyG,SAAYO,GAAAA,MAAAA,CAAOjD,KAAMkD,CAAAA,KAAK,CAAC;;;;;;;;AAQrC,CAAC;AAUD,MAAMlG,iBAAoB,GAAA,CAAC,EAAElD,YAAY,EAA0B,GAAA;IACjE,MAAM,EAAEO,aAAa,EAAE,GAAGC,OAAAA,EAAAA;IAC1B,MAAM,EAAEP,UAAU,EAAEC,aAAa,EAAEgB,QAAQ,EAAEC,OAAO,EAAE,GAAG3B,mBAAoB,CAAA,mBAAA,CAAA;AAE7E,IAAA,MAAM6J,YAAe,GAAA,IAAA;QACnBnJ,aAAcQ,CAAAA,SAAAA,CAAAA;QACdQ,QAAS,CAAA,QAAA,CAAA;AACX,KAAA;AAEA,IAAA,MAAMoI,YAAe,GAAA,IAAA;AACnB,QAAA,IAAIrJ,UAAY,EAAA;YACdD,YAAaC,CAAAA,UAAAA,CAAAA;AACf;AACAkB,QAAAA,OAAAA,EAAAA;AACF,KAAA;IAEA,qBACEF,IAAA,CAAAsG,QAAA,EAAA;;AACE,0BAAA5G,GAAA,CAACC,MAAM2I,IAAI,EAAA;AACT,gBAAA,QAAA,gBAAAtI,IAACuB,CAAAA,GAAAA,EAAAA;oBAAIc,WAAa,EAAA,CAAA;oBAAGC,YAAc,EAAA,CAAA;oBAAGyC,UAAY,EAAA,CAAA;oBAAGC,aAAe,EAAA,CAAA;;sCAClEhF,IAACuG,CAAAA,IAAAA,EAAAA;4BAAKK,cAAe,EAAA,eAAA;4BAAgB5B,aAAe,EAAA,CAAA;;8CAClDhF,IAACuG,CAAAA,IAAAA,EAAAA;oCAAKC,SAAU,EAAA,QAAA;oCAASC,UAAW,EAAA,YAAA;;sDAClC/G,GAAC+H,CAAAA,UAAAA,EAAAA;4CAAWtF,OAAQ,EAAA,IAAA;4CAAKoG,UAAW,EAAA,MAAA;sDACjCjJ,aAAc,CAAA;gDACb2B,EAAI,EAAA,wDAAA;gDACJC,cAAgB,EAAA;AAClB,6CAAA;;sDAEFxB,GAAC+H,CAAAA,UAAAA,EAAAA;4CAAWtF,OAAQ,EAAA,IAAA;4CAAK8F,SAAU,EAAA,YAAA;sDAChC3I,aAAc,CAAA;gDACb2B,EAAI,EAAA,2DAAA;gDACJC,cAAgB,EAAA;AAClB,6CAAA;;;;8CAGJxB,GAAC6F,CAAAA,MAAAA,EAAAA;oCAAOvE,OAASoH,EAAAA,YAAAA;oCAAcjG,OAAQ,EAAA,WAAA;8CACpC7C,aAAc,CAAA;wCACb2B,EAAI,EAAA,iEAAA;wCACJC,cAAgB,EAAA;AAClB,qCAAA;;;;sCAGJxB,GAAC6B,CAAAA,GAAAA,EAAAA;4BAAIE,QAAU,EAAA,CAAC,KAAK,CAAC;AACnBzC,4BAAAA,QAAAA,EAAAA,UAAAA,EAAYoC,oBAAM1B,GAAC8I,CAAAA,cAAAA,EAAAA;gCAAerE,KAAOnF,EAAAA;AAAiB,6BAAA,CAAA,GAAA;;;;;AAIjE,0BAAAgB,IAAA,CAACL,MAAM2F,MAAM,EAAA;;AACX,kCAAA5F,GAAA,CAACC,MAAM8I,KAAK,EAAA;AACV,wBAAA,QAAA,gBAAA/I,GAAC6F,CAAAA,MAAAA,EAAAA;4BAAOvE,OAASd,EAAAA,OAAAA;4BAASiC,OAAQ,EAAA,UAAA;sCAC/B7C,aAAc,CAAA;gCACb2B,EAAI,EAAA,iDAAA;gCACJC,cAAgB,EAAA;AAClB,6BAAA;;;kCAGJxB,GAAC6F,CAAAA,MAAAA,EAAAA;wBAAOvE,OAASqH,EAAAA,YAAAA;kCACd/I,aAAc,CAAA;4BACb2B,EAAI,EAAA,yDAAA;4BACJC,cAAgB,EAAA;AAClB,yBAAA;;;;;;AAKV,CAAA;AAUA,MAAMsH,cAAiB,GAAA,CAAC,EAAErE,KAAK,EAAuB,GAAA;IACpD,MAAM,EAAE7E,aAAa,EAAE,GAAGC,OAAAA,EAAAA;AAE1B,IAAA,qBACES,IAAC0I,CAAAA,IAAAA,EAAAA;;0BACChJ,GAACiJ,CAAAA,UAAAA,EAAAA;AACC,gBAAA,QAAA,gBAAAjJ,GAACkJ,CAAAA,SAAAA,EAAAA;oBAAUnE,IAAK,EAAA,GAAA;AAAI9C,oBAAAA,GAAAA,EAAKwC,MAAM/C;;;0BAEjCpB,IAAC6I,CAAAA,QAAAA,EAAAA;;kCACC7I,IAAC8I,CAAAA,WAAAA,EAAAA;;0CACCpJ,GAACqJ,CAAAA,SAAAA,EAAAA;AAAW5E,gCAAAA,QAAAA,EAAAA,KAAAA,CAAMzD;;0CAClBhB,GAACsJ,CAAAA,YAAAA,EAAAA;AACE,gCAAA,QAAA,EAAA,CAAC,EAAE7E,KAAAA,CAAM8E,GAAG,EAAEC,cAAc,GAAG,EAAE/E,KAAMmD,CAAAA,KAAK,CAAC,CAAC,EAAEnD,KAAMoD,CAAAA,MAAM,CAAC;;;;kCAGlE7H,GAACyJ,CAAAA,SAAAA,EAAAA;kCACE7J,aAAc,CAAA;4BACb2B,EAAI,EAAA,6DAAA;4BACJC,cAAgB,EAAA;AAClB,yBAAA;;;;;;AAKV,CAAA;;;;"}