{"version":3,"file":"GlobalActions.mjs","sources":["../../../../../../../../../admin/src/pages/Settings/pages/Roles/components/GlobalActions.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { Checkbox, Box, Flex, Typography } from '@strapi/design-system';\nimport get from 'lodash/get';\nimport { useIntl } from 'react-intl';\n\nimport { Action } from '../../../../../../../shared/contracts/permissions';\nimport {\n  PermissionsDataManagerContextValue,\n  usePermissionsDataManager,\n} from '../hooks/usePermissionsDataManager';\nimport { cellWidth, firstRowWidth } from '../utils/constants';\nimport { RecursiveRecordOfBooleans, getCheckboxState } from '../utils/getCheckboxState';\nimport { removeConditionKeyFromData } from '../utils/removeConditionKeyFromData';\n\ninterface GlobalActionsProps {\n  actions: Action[];\n  isFormDisabled?: boolean;\n  kind: Extract<keyof PermissionsDataManagerContextValue['modifiedData'], `${string}Types`>;\n}\n\nconst GlobalActions = ({ actions = [], isFormDisabled, kind }: GlobalActionsProps) => {\n  const { formatMessage } = useIntl();\n  const { modifiedData, onChangeCollectionTypeGlobalActionCheckbox } = usePermissionsDataManager();\n\n  const displayedActions = actions.filter(({ subjects }) => subjects && subjects.length);\n\n  const checkboxesState = React.useMemo(() => {\n    const actionsIds = displayedActions.map(({ actionId }) => actionId);\n\n    const data = modifiedData[kind];\n\n    const relatedActionsData = actionsIds.reduce<Record<string, RecursiveRecordOfBooleans>>(\n      (acc, actionId) => {\n        Object.keys(data).forEach((ctUid) => {\n          const actionIdData = get(data, [ctUid, actionId]);\n\n          const actionIdState = { [ctUid]: removeConditionKeyFromData(actionIdData)! };\n\n          if (!acc[actionId]) {\n            acc[actionId] = actionIdState;\n          } else {\n            acc[actionId] = { ...acc[actionId], ...actionIdState };\n          }\n        });\n\n        return acc;\n      },\n      {}\n    );\n\n    const checkboxesState = Object.keys(relatedActionsData).reduce<\n      Record<\n        string,\n        {\n          hasAllActionsSelected: boolean;\n          hasSomeActionsSelected: boolean;\n        }\n      >\n    >((acc, current) => {\n      acc[current] = getCheckboxState(relatedActionsData[current]);\n\n      return acc;\n    }, {});\n\n    return checkboxesState;\n  }, [modifiedData, displayedActions, kind]);\n\n  return (\n    <Box paddingBottom={4} paddingTop={6} style={{ paddingLeft: firstRowWidth }}>\n      <Flex gap={0}>\n        {displayedActions.map(({ label, actionId }) => {\n          return (\n            <Flex\n              shrink={0}\n              width={cellWidth}\n              direction=\"column\"\n              alignItems=\"center\"\n              justifyContent=\"center\"\n              key={actionId}\n              gap={3}\n            >\n              <Typography variant=\"sigma\" textColor=\"neutral500\">\n                {formatMessage({\n                  id: `Settings.roles.form.permissions.${label.toLowerCase()}`,\n                  defaultMessage: label,\n                })}\n              </Typography>\n              <Checkbox\n                disabled={isFormDisabled}\n                onCheckedChange={(value) => {\n                  onChangeCollectionTypeGlobalActionCheckbox(kind, actionId, !!value);\n                }}\n                name={actionId}\n                aria-label={formatMessage(\n                  {\n                    id: `Settings.permissions.select-all-by-permission`,\n                    defaultMessage: 'Select all {label} permissions',\n                  },\n                  {\n                    label: formatMessage({\n                      id: `Settings.roles.form.permissions.${label.toLowerCase()}`,\n                      defaultMessage: label,\n                    }),\n                  }\n                )}\n                checked={\n                  get(checkboxesState, [actionId, 'hasSomeActionsSelected'], false)\n                    ? 'indeterminate'\n                    : get(checkboxesState, [actionId, 'hasAllActionsSelected'], false)\n                }\n              />\n            </Flex>\n          );\n        })}\n      </Flex>\n    </Box>\n  );\n};\n\nexport { GlobalActions };\nexport type { GlobalActionsProps };\n"],"names":["GlobalActions","actions","isFormDisabled","kind","formatMessage","useIntl","modifiedData","onChangeCollectionTypeGlobalActionCheckbox","usePermissionsDataManager","displayedActions","filter","subjects","length","checkboxesState","React","useMemo","actionsIds","map","actionId","data","relatedActionsData","reduce","acc","Object","keys","forEach","ctUid","actionIdData","get","actionIdState","removeConditionKeyFromData","current","getCheckboxState","_jsx","Box","paddingBottom","paddingTop","style","paddingLeft","firstRowWidth","Flex","gap","label","_jsxs","shrink","width","cellWidth","direction","alignItems","justifyContent","Typography","variant","textColor","id","toLowerCase","defaultMessage","Checkbox","disabled","onCheckedChange","value","name","aria-label","checked"],"mappings":"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"}