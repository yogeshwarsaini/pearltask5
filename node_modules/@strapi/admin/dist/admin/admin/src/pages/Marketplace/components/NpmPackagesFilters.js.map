{"version":3,"file":"NpmPackagesFilters.js","sources":["../../../../../../../admin/src/pages/Marketplace/components/NpmPackagesFilters.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {\n  Box,\n  Button,\n  Tag,\n  MultiSelect,\n  MultiSelectOption,\n  MultiSelectProps,\n  Popover,\n  Flex,\n} from '@strapi/design-system';\nimport { Cross, Filter } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\nimport type { Categories, Collections, FilterTypes } from '../hooks/useMarketplaceData';\nimport type { NpmPackageType, MarketplacePageQuery } from '../MarketplacePage';\n\ninterface NpmPackagesFiltersProps {\n  handleSelectClear: (type: FilterTypes) => void;\n  handleSelectChange: (update: Partial<MarketplacePageQuery>) => void;\n  npmPackageType: NpmPackageType;\n  possibleCategories: Partial<Record<Categories, number>>;\n  possibleCollections: Partial<Record<Collections, number>>;\n  query: MarketplacePageQuery;\n}\n\nconst NpmPackagesFilters = ({\n  handleSelectClear,\n  handleSelectChange,\n  npmPackageType,\n  possibleCategories,\n  possibleCollections,\n  query,\n}: NpmPackagesFiltersProps) => {\n  const { formatMessage } = useIntl();\n\n  const handleTagRemove = (tagToRemove: string, filterType: FilterTypes) => {\n    const update = {\n      [filterType]: (query[filterType] ?? []).filter((previousTag) => previousTag !== tagToRemove),\n    };\n\n    handleSelectChange(update);\n  };\n\n  return (\n    <Popover.Root>\n      <Popover.Trigger>\n        <Button variant=\"tertiary\" startIcon={<Filter />}>\n          {formatMessage({ id: 'app.utils.filters', defaultMessage: 'Filters' })}\n        </Button>\n      </Popover.Trigger>\n      <Popover.Content sideOffset={4}>\n        <Flex padding={3} direction=\"column\" alignItems=\"stretch\" gap={1}>\n          <FilterSelect\n            message={formatMessage({\n              id: 'admin.pages.MarketPlacePage.filters.collections',\n              defaultMessage: 'Collections',\n            })}\n            value={query?.collections || []}\n            onChange={(newCollections) => {\n              const update = { collections: newCollections };\n              handleSelectChange(update);\n            }}\n            onClear={() => handleSelectClear('collections')}\n            possibleFilters={possibleCollections}\n            customizeContent={(values) =>\n              formatMessage(\n                {\n                  id: 'admin.pages.MarketPlacePage.filters.collectionsSelected',\n                  defaultMessage:\n                    '{count, plural, =0 {No collections} one {# collection} other {# collections}} selected',\n                },\n                { count: values?.length ?? 0 }\n              )\n            }\n          />\n          {npmPackageType === 'plugin' && (\n            <FilterSelect\n              message={formatMessage({\n                id: 'admin.pages.MarketPlacePage.filters.categories',\n                defaultMessage: 'Categories',\n              })}\n              value={query?.categories || []}\n              onChange={(newCategories) => {\n                const update = { categories: newCategories };\n                handleSelectChange(update);\n              }}\n              onClear={() => handleSelectClear('categories')}\n              possibleFilters={possibleCategories}\n              customizeContent={(values) =>\n                formatMessage(\n                  {\n                    id: 'admin.pages.MarketPlacePage.filters.categoriesSelected',\n                    defaultMessage:\n                      '{count, plural, =0 {No categories} one {# category} other {# categories}} selected',\n                  },\n                  { count: values?.length ?? 0 }\n                )\n              }\n            />\n          )}\n        </Flex>\n      </Popover.Content>\n\n      {query.collections?.map((collection) => (\n        <Box key={collection} padding={1}>\n          <Tag icon={<Cross />} onClick={() => handleTagRemove(collection, 'collections')}>\n            {collection}\n          </Tag>\n        </Box>\n      ))}\n      {npmPackageType === 'plugin' &&\n        query.categories?.map((category) => (\n          <Box key={category} padding={1}>\n            <Tag icon={<Cross />} onClick={() => handleTagRemove(category, 'categories')}>\n              {category}\n            </Tag>\n          </Box>\n        ))}\n    </Popover.Root>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * FilterSelect\n * -----------------------------------------------------------------------------------------------*/\n\ninterface FilterSelectProps\n  extends Pick<MultiSelectProps, 'customizeContent' | 'onClear' | 'onChange' | 'value'> {\n  message: string;\n  possibleFilters:\n    | NpmPackagesFiltersProps['possibleCategories']\n    | NpmPackagesFiltersProps['possibleCollections'];\n}\n\nconst FilterSelect = ({\n  message,\n  value,\n  onChange,\n  possibleFilters,\n  onClear,\n  customizeContent,\n}: FilterSelectProps) => {\n  return (\n    <MultiSelect\n      data-testid={`${message}-button`}\n      aria-label={message}\n      placeholder={message}\n      onChange={onChange}\n      onClear={onClear}\n      value={value}\n      customizeContent={customizeContent}\n    >\n      {Object.entries(possibleFilters).map(([filterName, count]) => {\n        return (\n          <MultiSelectOption\n            data-testid={`${filterName}-${count}`}\n            key={filterName}\n            value={filterName}\n          >\n            {`${filterName} (${count})`}\n          </MultiSelectOption>\n        );\n      })}\n    </MultiSelect>\n  );\n};\n\nexport { NpmPackagesFilters };\nexport type { NpmPackagesFiltersProps };\n"],"names":["NpmPackagesFilters","handleSelectClear","handleSelectChange","npmPackageType","possibleCategories","possibleCollections","query","formatMessage","useIntl","handleTagRemove","tagToRemove","filterType","update","filter","previousTag","_jsxs","Popover","Root","_jsx","Trigger","Button","variant","startIcon","Filter","id","defaultMessage","Content","sideOffset","Flex","padding","direction","alignItems","gap","FilterSelect","message","value","collections","onChange","newCollections","onClear","possibleFilters","customizeContent","values","count","length","categories","newCategories","map","collection","Box","Tag","icon","Cross","onClick","category","MultiSelect","data-testid","aria-label","placeholder","Object","entries","filterName","MultiSelectOption"],"mappings":"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"}