{"version":3,"file":"ListPage.mjs","sources":["../../../../../../../../admin/src/pages/Settings/pages/Roles/ListPage.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {\n  Button,\n  Dialog,\n  Table,\n  Tbody,\n  TFooter,\n  Th,\n  Thead,\n  Tr,\n  Typography,\n  VisuallyHidden,\n} from '@strapi/design-system';\nimport { Duplicate, Pencil, Plus, Trash } from '@strapi/icons';\nimport { produce } from 'immer';\nimport { useIntl } from 'react-intl';\nimport { useNavigate } from 'react-router-dom';\n\nimport { ConfirmDialog } from '../../../../components/ConfirmDialog';\nimport { Layouts } from '../../../../components/Layouts/Layout';\nimport { Page } from '../../../../components/PageHelpers';\nimport { SearchInput } from '../../../../components/SearchInput';\nimport { useTypedSelector } from '../../../../core/store/hooks';\nimport { useNotification } from '../../../../features/Notifications';\nimport { useAdminRoles, AdminRole } from '../../../../hooks/useAdminRoles';\nimport { useAPIErrorHandler } from '../../../../hooks/useAPIErrorHandler';\nimport { useFetchClient } from '../../../../hooks/useFetchClient';\nimport { useQueryParams } from '../../../../hooks/useQueryParams';\nimport { useRBAC } from '../../../../hooks/useRBAC';\nimport { selectAdminPermissions } from '../../../../selectors';\nimport { isFetchError } from '../../../../utils/getFetchClient';\n\nimport { RoleRow, RoleRowProps } from './components/RoleRow';\n\nconst ListPage = () => {\n  const { formatMessage } = useIntl();\n  const permissions = useTypedSelector(selectAdminPermissions);\n  const { formatAPIError } = useAPIErrorHandler();\n  const { toggleNotification } = useNotification();\n  const [isWarningDeleteAllOpened, setIsWarningDeleteAllOpenend] = React.useState(false);\n  const [{ query }] = useQueryParams<{ _q?: string }>();\n  const {\n    isLoading: isLoadingForPermissions,\n    allowedActions: { canCreate, canDelete, canRead, canUpdate },\n  } = useRBAC(permissions.settings?.roles);\n\n  const { roles, refetch: refetchRoles } = useAdminRoles(\n    { filters: query?._q ? { name: { $containsi: query._q } } : undefined },\n    {\n      refetchOnMountOrArgChange: true,\n      skip: isLoadingForPermissions || !canRead,\n    }\n  );\n\n  const navigate = useNavigate();\n  const [{ roleToDelete }, dispatch] = React.useReducer(reducer, initialState);\n  const { post } = useFetchClient();\n\n  const handleDeleteData = async () => {\n    try {\n      dispatch({\n        type: 'ON_REMOVE_ROLES',\n      });\n\n      await post('/admin/roles/batch-delete', {\n        ids: [roleToDelete],\n      });\n\n      await refetchRoles();\n\n      dispatch({\n        type: 'RESET_DATA_TO_DELETE',\n      });\n    } catch (error) {\n      if (isFetchError(error)) {\n        toggleNotification({\n          type: 'danger',\n          message: formatAPIError(error),\n        });\n      }\n    }\n  };\n\n  const handleNewRoleClick = () => navigate('new');\n\n  const handleToggleModal = () => setIsWarningDeleteAllOpenend((prev) => !prev);\n\n  const handleClickDelete = (role: AdminRole) => (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (role.usersCount) {\n      toggleNotification({\n        type: 'info',\n        message: formatMessage({ id: 'Roles.ListPage.notification.delete-not-allowed' }),\n      });\n    } else {\n      dispatch({\n        type: 'SET_ROLE_TO_DELETE',\n        id: role.id,\n      });\n\n      handleToggleModal();\n    }\n  };\n\n  const handleClickDuplicate = (role: AdminRole) => (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    navigate(`duplicate/${role.id}`);\n  };\n\n  const rowCount = roles.length + 1;\n  const colCount = 6;\n\n  if (isLoadingForPermissions) {\n    return <Page.Loading />;\n  }\n\n  return (\n    <Page.Main>\n      <Page.Title>\n        {formatMessage(\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\n          {\n            name: 'Roles',\n          }\n        )}\n      </Page.Title>\n      <Layouts.Header\n        primaryAction={\n          canCreate ? (\n            <Button onClick={handleNewRoleClick} startIcon={<Plus />} size=\"S\">\n              {formatMessage({\n                id: 'Settings.roles.list.button.add',\n                defaultMessage: 'Add new role',\n              })}\n            </Button>\n          ) : null\n        }\n        title={formatMessage({\n          id: 'global.roles',\n          defaultMessage: 'roles',\n        })}\n        subtitle={formatMessage({\n          id: 'Settings.roles.list.description',\n          defaultMessage: 'List of roles',\n        })}\n      />\n      {canRead && (\n        <Layouts.Action\n          startActions={\n            <SearchInput\n              label={formatMessage(\n                { id: 'app.component.search.label', defaultMessage: 'Search for {target}' },\n                {\n                  target: formatMessage({\n                    id: 'global.roles',\n                    defaultMessage: 'roles',\n                  }),\n                }\n              )}\n            />\n          }\n        />\n      )}\n      {canRead && (\n        <Layouts.Content>\n          <Table\n            colCount={colCount}\n            rowCount={rowCount}\n            footer={\n              canCreate ? (\n                <TFooter cursor=\"pointer\" onClick={handleNewRoleClick} icon={<Plus />}>\n                  {formatMessage({\n                    id: 'Settings.roles.list.button.add',\n                    defaultMessage: 'Add new role',\n                  })}\n                </TFooter>\n              ) : null\n            }\n          >\n            <Thead>\n              <Tr aria-rowindex={1}>\n                <Th>\n                  <Typography variant=\"sigma\" textColor=\"neutral600\">\n                    {formatMessage({\n                      id: 'global.name',\n                      defaultMessage: 'Name',\n                    })}\n                  </Typography>\n                </Th>\n                <Th>\n                  <Typography variant=\"sigma\" textColor=\"neutral600\">\n                    {formatMessage({\n                      id: 'global.description',\n                      defaultMessage: 'Description',\n                    })}\n                  </Typography>\n                </Th>\n                <Th>\n                  <Typography variant=\"sigma\" textColor=\"neutral600\">\n                    {formatMessage({\n                      id: 'global.users',\n                      defaultMessage: 'Users',\n                    })}\n                  </Typography>\n                </Th>\n                <Th>\n                  <VisuallyHidden>\n                    {formatMessage({\n                      id: 'global.actions',\n                      defaultMessage: 'Actions',\n                    })}\n                  </VisuallyHidden>\n                </Th>\n              </Tr>\n            </Thead>\n            <Tbody>\n              {roles?.map((role, index) => (\n                <RoleRow\n                  cursor=\"pointer\"\n                  key={role.id}\n                  id={role.id}\n                  name={role.name}\n                  description={role.description}\n                  usersCount={role.usersCount}\n                  icons={\n                    [\n                      canCreate &&\n                        ({\n                          onClick: handleClickDuplicate(role),\n                          label: formatMessage({\n                            id: 'app.utils.duplicate',\n                            defaultMessage: 'Duplicate',\n                          }),\n                          children: <Duplicate />,\n                        } satisfies RoleRowProps['icons'][number]),\n                      canUpdate &&\n                        ({\n                          onClick: () => navigate(role.id.toString()),\n                          label: formatMessage({ id: 'app.utils.edit', defaultMessage: 'Edit' }),\n                          children: <Pencil />,\n                        } satisfies RoleRowProps['icons'][number]),\n                      canDelete &&\n                        ({\n                          onClick: handleClickDelete(role),\n                          label: formatMessage({ id: 'global.delete', defaultMessage: 'Delete' }),\n                          children: <Trash />,\n                        } satisfies RoleRowProps['icons'][number]),\n                    ].filter(Boolean) as RoleRowProps['icons']\n                  }\n                  rowIndex={index + 2}\n                  canUpdate={canUpdate}\n                />\n              ))}\n            </Tbody>\n          </Table>\n        </Layouts.Content>\n      )}\n      <Dialog.Root open={isWarningDeleteAllOpened} onOpenChange={handleToggleModal}>\n        <ConfirmDialog onConfirm={handleDeleteData} />\n      </Dialog.Root>\n    </Page.Main>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Reducer\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * TODO: do we actually need this reducer? It's not doing a lot...\n */\n\ninterface State {\n  roleToDelete: null | AdminRole['id'];\n  showModalConfirmButtonLoading: boolean;\n  shouldRefetchData: boolean;\n}\n\nconst initialState = {\n  roleToDelete: null,\n  showModalConfirmButtonLoading: false,\n  shouldRefetchData: false,\n} satisfies State;\n\ninterface SetRoleToDeleteAction extends Pick<AdminRole, 'id'> {\n  type: 'SET_ROLE_TO_DELETE';\n}\n\ninterface ResetDataToDeleteAction {\n  type: 'RESET_DATA_TO_DELETE';\n}\n\ninterface OnRemoveRolesAction {\n  type: 'ON_REMOVE_ROLES';\n}\n\ninterface OnRemoveRolesSucceededAction {\n  type: 'ON_REMOVE_ROLES_SUCCEEDED';\n}\n\ntype Action =\n  | SetRoleToDeleteAction\n  | ResetDataToDeleteAction\n  | OnRemoveRolesAction\n  | OnRemoveRolesSucceededAction;\n\nconst reducer = (state: State, action: Action) =>\n  produce(state, (draftState) => {\n    switch (action.type) {\n      case 'ON_REMOVE_ROLES': {\n        draftState.showModalConfirmButtonLoading = true;\n        break;\n      }\n      case 'ON_REMOVE_ROLES_SUCCEEDED': {\n        draftState.shouldRefetchData = true;\n        draftState.roleToDelete = null;\n        break;\n      }\n      case 'RESET_DATA_TO_DELETE': {\n        draftState.shouldRefetchData = false;\n        draftState.roleToDelete = null;\n        draftState.showModalConfirmButtonLoading = false;\n        break;\n      }\n      case 'SET_ROLE_TO_DELETE': {\n        draftState.roleToDelete = action.id;\n\n        break;\n      }\n      default:\n        return draftState;\n    }\n  });\n\n/* -------------------------------------------------------------------------------------------------\n * ProtectedListPage\n * -----------------------------------------------------------------------------------------------*/\n\nconst ProtectedListPage = () => {\n  const permissions = useTypedSelector((state) => state.admin_app.permissions.settings?.roles.read);\n\n  return (\n    <Page.Protect permissions={permissions}>\n      <ListPage />\n    </Page.Protect>\n  );\n};\n\nexport { ProtectedListPage, ListPage };\n"],"names":["ListPage","formatMessage","useIntl","permissions","useTypedSelector","selectAdminPermissions","formatAPIError","useAPIErrorHandler","toggleNotification","useNotification","isWarningDeleteAllOpened","setIsWarningDeleteAllOpenend","React","useState","query","useQueryParams","isLoading","isLoadingForPermissions","allowedActions","canCreate","canDelete","canRead","canUpdate","useRBAC","settings","roles","refetch","refetchRoles","useAdminRoles","filters","_q","name","$containsi","undefined","refetchOnMountOrArgChange","skip","navigate","useNavigate","roleToDelete","dispatch","useReducer","reducer","initialState","post","useFetchClient","handleDeleteData","type","ids","error","isFetchError","message","handleNewRoleClick","handleToggleModal","prev","handleClickDelete","role","e","preventDefault","stopPropagation","usersCount","id","handleClickDuplicate","rowCount","length","colCount","_jsx","Page","Loading","_jsxs","Main","Title","defaultMessage","Layouts","Header","primaryAction","Button","onClick","startIcon","Plus","size","title","subtitle","Action","startActions","SearchInput","label","target","Content","Table","footer","TFooter","cursor","icon","Thead","Tr","aria-rowindex","Th","Typography","variant","textColor","VisuallyHidden","Tbody","map","index","RoleRow","description","icons","children","Duplicate","toString","Pencil","Trash","filter","Boolean","rowIndex","Dialog","Root","open","onOpenChange","ConfirmDialog","onConfirm","showModalConfirmButtonLoading","shouldRefetchData","state","action","produce","draftState","ProtectedListPage","admin_app","read","Protect"],"mappings":"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"}