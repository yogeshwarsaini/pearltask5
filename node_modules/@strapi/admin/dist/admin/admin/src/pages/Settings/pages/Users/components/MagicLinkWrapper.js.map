{"version":3,"file":"MagicLinkWrapper.js","sources":["../../../../../../../../../admin/src/pages/Settings/pages/Users/components/MagicLinkWrapper.tsx"],"sourcesContent":["import { IconButton } from '@strapi/design-system';\nimport { Duplicate } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\nimport { ContentBox } from '../../../../../components/ContentBox';\nimport { useNotification } from '../../../../../features/Notifications';\nimport { useClipboard } from '../../../../../hooks/useClipboard';\n\ninterface MagicLinkWrapperProps {\n  children: string;\n  target: string;\n}\n\nconst MagicLinkWrapper = ({ children, target }: MagicLinkWrapperProps) => {\n  const { toggleNotification } = useNotification();\n  const { formatMessage } = useIntl();\n  const { copy } = useClipboard();\n\n  const copyLabel = formatMessage({\n    id: 'app.component.CopyToClipboard.label',\n    defaultMessage: 'Copy to clipboard',\n  });\n\n  const handleClick = async (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n\n    const didCopy = await copy(target);\n\n    if (didCopy) {\n      toggleNotification({\n        type: 'info',\n        message: formatMessage({ id: 'notification.link-copied' }),\n      });\n    }\n  };\n\n  return (\n    <ContentBox\n      endAction={\n        <IconButton label={copyLabel} variant=\"ghost\" onClick={handleClick}>\n          <Duplicate />\n        </IconButton>\n      }\n      title={target}\n      titleEllipsis\n      subtitle={children}\n      icon={<span style={{ fontSize: 32 }}>✉️</span>}\n      iconBackground=\"neutral100\"\n    />\n  );\n};\n\nexport { MagicLinkWrapper };\nexport type { MagicLinkWrapperProps };\n"],"names":["MagicLinkWrapper","children","target","toggleNotification","useNotification","formatMessage","useIntl","copy","useClipboard","copyLabel","id","defaultMessage","handleClick","e","preventDefault","didCopy","type","message","_jsx","ContentBox","endAction","IconButton","label","variant","onClick","Duplicate","title","titleEllipsis","subtitle","icon","span","style","fontSize","iconBackground"],"mappings":";;;;;;;;;;AAaA,MAAMA,mBAAmB,CAAC,EAAEC,QAAQ,EAAEC,MAAM,EAAyB,GAAA;IACnE,MAAM,EAAEC,kBAAkB,EAAE,GAAGC,6BAAAA,EAAAA;IAC/B,MAAM,EAAEC,aAAa,EAAE,GAAGC,iBAAAA,EAAAA;IAC1B,MAAM,EAAEC,IAAI,EAAE,GAAGC,yBAAAA,EAAAA;AAEjB,IAAA,MAAMC,YAAYJ,aAAc,CAAA;QAC9BK,EAAI,EAAA,qCAAA;QACJC,cAAgB,EAAA;AAClB,KAAA,CAAA;AAEA,IAAA,MAAMC,cAAc,OAAOC,CAAAA,GAAAA;AACzBA,QAAAA,CAAAA,CAAEC,cAAc,EAAA;QAEhB,MAAMC,OAAAA,GAAU,MAAMR,IAAKL,CAAAA,MAAAA,CAAAA;AAE3B,QAAA,IAAIa,OAAS,EAAA;YACXZ,kBAAmB,CAAA;gBACjBa,IAAM,EAAA,MAAA;AACNC,gBAAAA,OAAAA,EAASZ,aAAc,CAAA;oBAAEK,EAAI,EAAA;AAA2B,iBAAA;AAC1D,aAAA,CAAA;AACF;AACF,KAAA;AAEA,IAAA,qBACEQ,cAACC,CAAAA,qBAAAA,EAAAA;AACCC,QAAAA,SAAAA,gBACEF,cAACG,CAAAA,uBAAAA,EAAAA;YAAWC,KAAOb,EAAAA,SAAAA;YAAWc,OAAQ,EAAA,OAAA;YAAQC,OAASZ,EAAAA,WAAAA;AACrD,YAAA,QAAA,gBAAAM,cAACO,CAAAA,eAAAA,EAAAA,EAAAA;;QAGLC,KAAOxB,EAAAA,MAAAA;QACPyB,aAAa,EAAA,IAAA;QACbC,QAAU3B,EAAAA,QAAAA;AACV4B,QAAAA,IAAAA,gBAAMX,cAACY,CAAAA,MAAAA,EAAAA;YAAKC,KAAO,EAAA;gBAAEC,QAAU,EAAA;AAAG,aAAA;AAAG,YAAA,QAAA,EAAA;;QACrCC,cAAe,EAAA;;AAGrB;;;;"}