{"version":3,"file":"CollapsableContentType.mjs","sources":["../../../../../../../../../../admin/src/pages/Settings/pages/ApiTokens/EditView/components/CollapsableContentType.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {\n  Accordion,\n  Box,\n  BoxComponent,\n  Checkbox,\n  Flex,\n  Grid,\n  Typography,\n} from '@strapi/design-system';\nimport { Cog } from '@strapi/icons';\nimport capitalize from 'lodash/capitalize';\nimport { useIntl } from 'react-intl';\nimport { styled, css } from 'styled-components';\n\nimport { ContentApiPermission } from '../../../../../../../../shared/contracts/content-api/permissions';\nimport { useApiTokenPermissions } from '../apiTokenPermissions';\n\nconst activeCheckboxWrapperStyles = css`\n  background: ${(props) => props.theme.colors.primary100};\n\n  #cog {\n    opacity: 1;\n  }\n`;\n\nconst CheckboxWrapper = styled<BoxComponent>(Box)<{ $isActive: boolean }>`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  #cog {\n    opacity: 0;\n    path {\n      fill: ${(props) => props.theme.colors.primary600};\n    }\n  }\n\n  /* Show active style both on hover and when the action is selected */\n  ${(props) => props.$isActive && activeCheckboxWrapperStyles}\n  &:hover {\n    ${activeCheckboxWrapperStyles}\n  }\n`;\n\nconst Border = styled.div`\n  flex: 1;\n  align-self: center;\n  border-top: 1px solid ${({ theme }) => theme.colors.neutral150};\n`;\n\ninterface CollapsableContentTypeProps {\n  controllers?: ContentApiPermission['controllers'];\n  label: ContentApiPermission['label'];\n  orderNumber?: number;\n  disabled?: boolean;\n}\n\nexport const CollapsableContentType = ({\n  controllers = [],\n  label,\n  orderNumber = 0,\n  disabled = false,\n}: CollapsableContentTypeProps) => {\n  const {\n    value: { onChangeSelectAll, onChange, selectedActions, setSelectedAction, selectedAction },\n  } = useApiTokenPermissions();\n  const { formatMessage } = useIntl();\n\n  const isActionSelected = (actionId: string) => actionId === selectedAction;\n\n  return (\n    <Accordion.Item value={`${label}-${orderNumber}`}>\n      <Accordion.Header variant={orderNumber % 2 ? 'primary' : 'secondary'}>\n        <Accordion.Trigger>{capitalize(label)}</Accordion.Trigger>\n      </Accordion.Header>\n      <Accordion.Content>\n        {controllers?.map((controller) => {\n          const allActionsSelected = controller.actions.every((action) =>\n            selectedActions.includes(action.actionId)\n          );\n\n          const someActionsSelected = controller.actions.some((action) =>\n            selectedActions.includes(action.actionId)\n          );\n\n          return (\n            <Box key={`${label}.${controller?.controller}`}>\n              <Flex justifyContent=\"space-between\" alignItems=\"center\" padding={4}>\n                <Box paddingRight={4}>\n                  <Typography variant=\"sigma\" textColor=\"neutral600\">\n                    {controller?.controller}\n                  </Typography>\n                </Box>\n                <Border />\n                <Box paddingLeft={4}>\n                  <Checkbox\n                    checked={\n                      !allActionsSelected && someActionsSelected\n                        ? 'indeterminate'\n                        : allActionsSelected\n                    }\n                    onCheckedChange={() => {\n                      onChangeSelectAll({ target: { value: [...controller.actions] } });\n                    }}\n                    disabled={disabled}\n                  >\n                    {formatMessage({ id: 'app.utils.select-all', defaultMessage: 'Select all' })}\n                  </Checkbox>\n                </Box>\n              </Flex>\n              <Grid.Root gap={4} padding={4}>\n                {controller?.actions &&\n                  controller?.actions.map((action) => {\n                    return (\n                      <Grid.Item\n                        col={6}\n                        key={action.actionId}\n                        direction=\"column\"\n                        alignItems=\"stretch\"\n                      >\n                        <CheckboxWrapper\n                          $isActive={isActionSelected(action.actionId)}\n                          padding={2}\n                          hasRadius\n                        >\n                          <Checkbox\n                            checked={selectedActions.includes(action.actionId)}\n                            name={action.actionId}\n                            onCheckedChange={() => {\n                              onChange({ target: { value: action.actionId } });\n                            }}\n                            disabled={disabled}\n                          >\n                            <span style={{ overflowWrap: 'anywhere' }}>{action.action}</span>\n                          </Checkbox>\n                          <button\n                            type=\"button\"\n                            data-testid=\"action-cog\"\n                            onClick={() =>\n                              setSelectedAction({ target: { value: action.actionId } })\n                            }\n                            style={{ display: 'inline-flex', alignItems: 'center' }}\n                          >\n                            <Cog id=\"cog\" />\n                          </button>\n                        </CheckboxWrapper>\n                      </Grid.Item>\n                    );\n                  })}\n              </Grid.Root>\n            </Box>\n          );\n        })}\n      </Accordion.Content>\n    </Accordion.Item>\n  );\n};\n"],"names":["activeCheckboxWrapperStyles","css","props","theme","colors","primary100","CheckboxWrapper","styled","Box","primary600","$isActive","Border","div","neutral150","CollapsableContentType","controllers","label","orderNumber","disabled","value","onChangeSelectAll","onChange","selectedActions","setSelectedAction","selectedAction","useApiTokenPermissions","formatMessage","useIntl","isActionSelected","actionId","_jsxs","Accordion","Item","_jsx","Header","variant","Trigger","capitalize","Content","map","controller","allActionsSelected","actions","every","action","includes","someActionsSelected","some","Flex","justifyContent","alignItems","padding","paddingRight","Typography","textColor","paddingLeft","Checkbox","checked","onCheckedChange","target","id","defaultMessage","Grid","Root","gap","col","direction","hasRadius","name","span","style","overflowWrap","button","type","data-testid","onClick","display","Cog"],"mappings":"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"}