{"version":3,"file":"ContentTypeCollapses.mjs","sources":["../../../../../../../../../admin/src/pages/Settings/pages/Roles/components/ContentTypeCollapses.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { Checkbox, Box, BoxComponent, Flex, FlexComponent, Modal } from '@strapi/design-system';\nimport { ChevronDown, ChevronUp } from '@strapi/icons';\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\nimport omit from 'lodash/omit';\nimport { useIntl } from 'react-intl';\nimport { styled, DefaultTheme } from 'styled-components';\n\nimport { Action, Subject } from '../../../../../../../shared/contracts/permissions';\nimport { capitalise } from '../../../../../utils/strings';\nimport {\n  PermissionsDataManagerContextValue,\n  usePermissionsDataManager,\n} from '../hooks/usePermissionsDataManager';\nimport { cellWidth, rowHeight } from '../utils/constants';\nimport { createArrayOfValues } from '../utils/createArrayOfValues';\nimport { ConditionForm } from '../utils/forms';\nimport { getCheckboxState } from '../utils/getCheckboxState';\n\nimport { CollapsePropertyMatrix } from './CollapsePropertyMatrix';\nimport { ConditionsButton } from './ConditionsButton';\nimport { ConditionsModal } from './ConditionsModal';\nimport { HiddenAction } from './HiddenAction';\nimport { RowLabelWithCheckbox, RowLabelWithCheckboxProps } from './RowLabelWithCheckbox';\n\n/* -------------------------------------------------------------------------------------------------\n * ContentTypeCollapses\n * -----------------------------------------------------------------------------------------------*/\n\ninterface ContentTypeCollapsesProps extends Pick<CollapseProps, 'pathToData'> {\n  actions?: Action[];\n  isFormDisabled?: boolean;\n  subjects?: Subject[];\n}\n\nconst ContentTypeCollapses = ({\n  actions = [],\n  isFormDisabled,\n  pathToData,\n  subjects = [],\n}: ContentTypeCollapsesProps) => {\n  const [collapseToOpen, setCollapseToOpen] = React.useState<string | null>(null);\n\n  const handleClickToggleCollapse = (collapseName: string) => () => {\n    const nextCollapseToOpen = collapseToOpen === collapseName ? null : collapseName;\n\n    setCollapseToOpen(nextCollapseToOpen);\n  };\n\n  return (\n    <>\n      {subjects.map(({ uid, label, properties }, index) => {\n        const isActive = collapseToOpen === uid;\n        const availableActions = actions.map((action) => ({\n          ...action,\n          isDisplayed: Array.isArray(action.subjects) && action.subjects.indexOf(uid) !== -1,\n        }));\n        return (\n          <Flex\n            key={uid}\n            direction=\"column\"\n            display=\"inline-flex\"\n            alignItems=\"stretch\"\n            minWidth=\"100%\"\n            borderColor={isActive ? 'primary600' : undefined}\n          >\n            <Collapse\n              availableActions={availableActions}\n              isActive={isActive}\n              isGrey={index % 2 === 0}\n              isFormDisabled={isFormDisabled}\n              label={label}\n              onClickToggle={handleClickToggleCollapse(uid)}\n              pathToData={[pathToData, uid].join('..')}\n            />\n            {isActive &&\n              properties.map(({ label: propertyLabel, value, children: childrenForm }) => {\n                return (\n                  <CollapsePropertyMatrix\n                    availableActions={availableActions}\n                    childrenForm={childrenForm}\n                    isFormDisabled={isFormDisabled}\n                    label={propertyLabel}\n                    pathToData={[pathToData, uid].join('..')}\n                    propertyName={value}\n                    key={value}\n                  />\n                );\n              })}\n          </Flex>\n        );\n      })}\n    </>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Collapse\n * -----------------------------------------------------------------------------------------------*/\n\ninterface CollapseProps\n  extends Pick<RowLabelWithCheckboxProps, 'isActive' | 'isFormDisabled' | 'label'> {\n  availableActions?: Array<Action & { isDisplayed: boolean }>;\n  isGrey?: boolean;\n  onClickToggle: RowLabelWithCheckboxProps['onClick'];\n  pathToData: string;\n}\n\nconst Collapse = ({\n  availableActions = [],\n  isActive = false,\n  isGrey = false,\n  isFormDisabled = false,\n  label,\n  onClickToggle,\n  pathToData,\n}: CollapseProps) => {\n  const { formatMessage } = useIntl();\n  const { modifiedData, onChangeParentCheckbox, onChangeSimpleCheckbox } =\n    usePermissionsDataManager();\n  const [isConditionModalOpen, setIsConditionModalOpen] = React.useState(false);\n\n  // This corresponds to the data related to the CT left checkbox\n  // modifiedData: { collectionTypes: { [ctuid]: {create: {properties: { fields: {f1: true} }, update: {}, ... } } } }\n  const mainData = get(modifiedData, pathToData.split('..'), {});\n  // The utils we are using: getCheckboxState, retrieves all the boolean leafs of an object in order\n  // to return the state of checkbox. Since the conditions are not related to the property we need to remove the key from the object.\n  const dataWithoutCondition = React.useMemo(() => {\n    return Object.keys(mainData).reduce<Record<string, ConditionForm>>((acc, current) => {\n      acc[current] = omit(mainData[current], 'conditions');\n\n      return acc;\n    }, {});\n  }, [mainData]);\n\n  const { hasAllActionsSelected, hasSomeActionsSelected } = getCheckboxState(dataWithoutCondition);\n\n  // Here we create an array of <checkbox>, since the state of each one of them is used in\n  // order to know if whether or not we need to display the associated action in\n  // the <ConditionsModal />\n  const checkboxesActions = React.useMemo(() => {\n    return generateCheckboxesActions(availableActions, modifiedData, pathToData);\n  }, [availableActions, modifiedData, pathToData]);\n\n  // @ts-expect-error â€“ hasConditions does not exist on all versions of checkboxesActions.\n  const doesConditionButtonHasConditions = checkboxesActions.some((action) => action.hasConditions);\n\n  return (\n    <BoxWrapper $isActive={isActive}>\n      <Wrapper\n        height={rowHeight}\n        flex={1}\n        alignItems=\"center\"\n        background={isGrey ? 'neutral100' : 'neutral0'}\n      >\n        <RowLabelWithCheckbox\n          isCollapsable\n          isFormDisabled={isFormDisabled}\n          label={capitalise(label)}\n          checkboxName={pathToData}\n          onChange={onChangeParentCheckbox}\n          onClick={onClickToggle}\n          someChecked={hasSomeActionsSelected}\n          value={hasAllActionsSelected}\n          isActive={isActive}\n        >\n          <Chevron paddingLeft={2}>{isActive ? <ChevronUp /> : <ChevronDown />}</Chevron>\n        </RowLabelWithCheckbox>\n\n        <Flex style={{ flex: 1 }}>\n          {checkboxesActions.map(\n            ({ actionId, hasSomeActionsSelected, isDisplayed, ...restAction }) => {\n              if (!isDisplayed) {\n                return <HiddenAction key={actionId} />;\n              }\n\n              const {\n                hasConditions,\n                hasAllActionsSelected,\n                isParentCheckbox,\n                checkboxName,\n                label: permissionLabel,\n              } = restAction as VisibleCheckboxAction;\n\n              if (isParentCheckbox) {\n                return (\n                  <Cell key={actionId} justifyContent=\"center\" alignItems=\"center\">\n                    {hasConditions && (\n                      <Box\n                        tag=\"span\"\n                        position=\"absolute\"\n                        top=\"-6px\"\n                        left=\"37px\"\n                        width=\"6px\"\n                        height=\"6px\"\n                        borderRadius=\"20px\"\n                        background=\"primary600\"\n                      />\n                    )}\n                    <Checkbox\n                      disabled={isFormDisabled}\n                      name={checkboxName}\n                      aria-label={formatMessage(\n                        {\n                          id: `Settings.permissions.select-by-permission`,\n                          defaultMessage: 'Select {label} permission',\n                        },\n                        { label: `${permissionLabel} ${label}` }\n                      )}\n                      // Keep same signature as packages/core/admin/admin/src/components/Roles/Permissions/index.js l.91\n                      onCheckedChange={(value) => {\n                        onChangeParentCheckbox({\n                          target: {\n                            name: checkboxName,\n                            value: !!value,\n                          },\n                        });\n                      }}\n                      checked={hasSomeActionsSelected ? 'indeterminate' : hasAllActionsSelected}\n                    />\n                  </Cell>\n                );\n              }\n\n              return (\n                <Cell key={actionId} justifyContent=\"center\" alignItems=\"center\">\n                  {hasConditions && (\n                    <Box\n                      tag=\"span\"\n                      position=\"absolute\"\n                      top=\"-6px\"\n                      left=\"37px\"\n                      width=\"6px\"\n                      height=\"6px\"\n                      borderRadius=\"20px\"\n                      background=\"primary600\"\n                    />\n                  )}\n                  <Checkbox\n                    disabled={isFormDisabled}\n                    name={checkboxName}\n                    // Keep same signature as packages/core/admin/admin/src/components/Roles/Permissions/index.js l.91\n                    onCheckedChange={(value) => {\n                      onChangeSimpleCheckbox({\n                        target: {\n                          name: checkboxName,\n                          value: !!value,\n                        },\n                      });\n                    }}\n                    checked={hasConditions ? 'indeterminate' : hasAllActionsSelected}\n                  />\n                </Cell>\n              );\n            }\n          )}\n        </Flex>\n      </Wrapper>\n      <Box bottom=\"10px\" right=\"9px\" position=\"absolute\">\n        <Modal.Root\n          open={isConditionModalOpen}\n          onOpenChange={() => {\n            setIsConditionModalOpen((prev) => !prev);\n          }}\n        >\n          <Modal.Trigger>\n            <ConditionsButton hasConditions={doesConditionButtonHasConditions} />\n          </Modal.Trigger>\n          <ConditionsModal\n            headerBreadCrumbs={[label, 'Settings.permissions.conditions.conditions']}\n            actions={checkboxesActions}\n            isFormDisabled={isFormDisabled}\n            onClose={() => {\n              setIsConditionModalOpen(false);\n            }}\n          />\n        </Modal.Root>\n      </Box>\n    </BoxWrapper>\n  );\n};\n\ninterface VisibleCheckboxAction {\n  actionId: string;\n  hasAllActionsSelected: boolean;\n  hasSomeActionsSelected: boolean;\n  isDisplayed: true;\n  isParentCheckbox: boolean;\n  checkboxName: string;\n  label: string;\n  hasConditions: boolean;\n  pathToConditionsObject: string[];\n}\n\ninterface HiddenCheckboxAction {\n  actionId: string;\n  isDisplayed: false;\n  hasAllActionsSelected?: never;\n  hasSomeActionsSelected: boolean;\n}\n\nconst generateCheckboxesActions = (\n  availableActions: Array<Action & { isDisplayed: boolean }>,\n  modifiedData: PermissionsDataManagerContextValue['modifiedData'],\n  pathToData: string\n): Array<VisibleCheckboxAction | HiddenCheckboxAction> => {\n  return availableActions.map(({ actionId, isDisplayed, applyToProperties, label }) => {\n    if (!isDisplayed) {\n      return { actionId, hasSomeActionsSelected: false, isDisplayed };\n    }\n\n    const baseCheckboxNameArray = [...pathToData.split('..'), actionId];\n    const checkboxNameArray = isEmpty(applyToProperties)\n      ? [...baseCheckboxNameArray, 'properties', 'enabled']\n      : baseCheckboxNameArray;\n    const conditionsValue = get(modifiedData, [...baseCheckboxNameArray, 'conditions'], null);\n\n    const baseCheckboxAction = {\n      actionId,\n      checkboxName: checkboxNameArray.join('..'),\n      hasConditions: createArrayOfValues(conditionsValue).some((val) => val),\n      isDisplayed,\n      label,\n      pathToConditionsObject: baseCheckboxNameArray,\n    };\n\n    if (isEmpty(applyToProperties)) {\n      const value = get(modifiedData, checkboxNameArray, false);\n\n      // Since applyToProperties is empty it is not a parent checkbox, therefore hasAllActionsSelected is\n      // equal to hasSomeActionsSelected\n      return {\n        ...baseCheckboxAction,\n        hasAllActionsSelected: value,\n        hasSomeActionsSelected: value,\n        isParentCheckbox: false,\n      };\n    }\n\n    const mainData = get(modifiedData, checkboxNameArray, null);\n\n    const { hasAllActionsSelected, hasSomeActionsSelected } = getCheckboxState(mainData);\n\n    return {\n      ...baseCheckboxAction,\n      hasAllActionsSelected,\n      hasSomeActionsSelected,\n      isParentCheckbox: true,\n    };\n  });\n};\n\nconst activeRowStyle = (theme: DefaultTheme, isActive?: boolean): string => `\n  ${Wrapper} {\n    background-color: ${theme.colors.primary100};\n    color: ${theme.colors.primary600};\n    border-radius: ${isActive ? '2px 2px 0 0' : '2px'};\n    font-weight: ${theme.fontWeights.bold};\n  }\n\n  ${Chevron} {\n    display: flex;\n  }\n  ${ConditionsButton} {\n    display: block;\n  }\n\n  &:focus-within {\n    ${() => activeRowStyle(theme, isActive)}\n  }\n`;\n\nconst Wrapper = styled<FlexComponent>(Flex)`\n  border: 1px solid transparent;\n`;\n\nconst BoxWrapper = styled.div<{ $isActive: boolean }>`\n  display: inline-flex;\n  min-width: 100%;\n  position: relative;\n\n  ${ConditionsButton} {\n    display: none;\n  }\n\n  ${({ $isActive, theme }) => $isActive && activeRowStyle(theme, $isActive)}\n\n  &:hover {\n    ${({ theme, $isActive }) => activeRowStyle(theme, $isActive)}\n  }\n`;\n\nconst Cell = styled<FlexComponent>(Flex)`\n  width: ${cellWidth};\n  position: relative;\n`;\n\nconst Chevron = styled<BoxComponent>(Box)`\n  display: none;\n\n  svg {\n    width: 1.4rem;\n  }\n\n  path {\n    fill: ${({ theme }) => theme.colors.primary600};\n  }\n`;\n\nexport { ContentTypeCollapses };\nexport type { ContentTypeCollapsesProps, HiddenCheckboxAction, VisibleCheckboxAction };\n"],"names":["ContentTypeCollapses","actions","isFormDisabled","pathToData","subjects","collapseToOpen","setCollapseToOpen","React","useState","handleClickToggleCollapse","collapseName","nextCollapseToOpen","_jsx","_Fragment","map","uid","label","properties","index","isActive","availableActions","action","isDisplayed","Array","isArray","indexOf","_jsxs","Flex","direction","display","alignItems","minWidth","borderColor","undefined","Collapse","isGrey","onClickToggle","join","propertyLabel","value","children","childrenForm","CollapsePropertyMatrix","propertyName","formatMessage","useIntl","modifiedData","onChangeParentCheckbox","onChangeSimpleCheckbox","usePermissionsDataManager","isConditionModalOpen","setIsConditionModalOpen","mainData","get","split","dataWithoutCondition","useMemo","Object","keys","reduce","acc","current","omit","hasAllActionsSelected","hasSomeActionsSelected","getCheckboxState","checkboxesActions","generateCheckboxesActions","doesConditionButtonHasConditions","some","hasConditions","BoxWrapper","$isActive","Wrapper","height","rowHeight","flex","background","RowLabelWithCheckbox","isCollapsable","capitalise","checkboxName","onChange","onClick","someChecked","Chevron","paddingLeft","ChevronUp","ChevronDown","style","actionId","restAction","HiddenAction","isParentCheckbox","permissionLabel","Cell","justifyContent","Box","tag","position","top","left","width","borderRadius","Checkbox","disabled","name","aria-label","id","defaultMessage","onCheckedChange","target","checked","bottom","right","Modal","Root","open","onOpenChange","prev","Trigger","ConditionsButton","ConditionsModal","headerBreadCrumbs","onClose","applyToProperties","baseCheckboxNameArray","checkboxNameArray","isEmpty","conditionsValue","baseCheckboxAction","createArrayOfValues","val","pathToConditionsObject","activeRowStyle","theme","colors","primary100","primary600","fontWeights","bold","styled","div","cellWidth"],"mappings":"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"}