{"version":3,"file":"ResetPassword.mjs","sources":["../../../../../../../admin/src/pages/Auth/components/ResetPassword.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { Box, Button, Flex, Main, Typography, Link } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\nimport { NavLink, useNavigate, Navigate, useLocation } from 'react-router-dom';\nimport * as yup from 'yup';\n\nimport { ResetPassword } from '../../../../../shared/contracts/authentication';\nimport { Form } from '../../../components/Form';\nimport { InputRenderer } from '../../../components/FormInputs/Renderer';\nimport { Logo } from '../../../components/UnauthenticatedLogo';\nimport { useTypedDispatch } from '../../../core/store/hooks';\nimport { useAPIErrorHandler } from '../../../hooks/useAPIErrorHandler';\nimport {\n  Column,\n  LayoutContent,\n  UnauthenticatedLayout,\n} from '../../../layouts/UnauthenticatedLayout';\nimport { login } from '../../../reducer';\nimport { useResetPasswordMutation } from '../../../services/auth';\nimport { isBaseQueryError } from '../../../utils/baseQuery';\nimport { getByteSize } from '../../../utils/strings';\nimport { translatedErrors } from '../../../utils/translatedErrors';\n\nconst RESET_PASSWORD_SCHEMA = yup.object().shape({\n  password: yup\n    .string()\n    .min(8, {\n      id: translatedErrors.minLength.id,\n      defaultMessage: 'Password must be at least 8 characters',\n      values: { min: 8 },\n    })\n    // bcrypt has a max length of 72 bytes (not characters!)\n    .test(\n      'required-byte-size',\n      {\n        id: 'components.Input.error.contain.maxBytes',\n        defaultMessage: 'Password must be less than 73 bytes',\n      },\n      function (value) {\n        if (!value || typeof value !== 'string') return true; // validated elsewhere\n\n        const byteSize = getByteSize(value);\n        return byteSize <= 72;\n      }\n    )\n    .matches(/[a-z]/, {\n      message: {\n        id: 'components.Input.error.contain.lowercase',\n        defaultMessage: 'Password must contain at least 1 lowercase letter',\n      },\n    })\n    .matches(/[A-Z]/, {\n      message: {\n        id: 'components.Input.error.contain.uppercase',\n        defaultMessage: 'Password must contain at least 1 uppercase letter',\n      },\n    })\n    .matches(/\\d/, {\n      message: {\n        id: 'components.Input.error.contain.number',\n        defaultMessage: 'Password must contain at least 1 number',\n      },\n    })\n    .required({\n      id: translatedErrors.required.id,\n      defaultMessage: 'Password is required',\n    })\n    .nullable(),\n  confirmPassword: yup\n    .string()\n    .required({\n      id: translatedErrors.required.id,\n      defaultMessage: 'Confirm password is required',\n    })\n    .oneOf([yup.ref('password'), null], {\n      id: 'components.Input.error.password.noMatch',\n      defaultMessage: 'Passwords must match',\n    })\n    .nullable(),\n});\n\nconst ResetPassword = () => {\n  const { formatMessage } = useIntl();\n  const dispatch = useTypedDispatch();\n  const navigate = useNavigate();\n  const { search: searchString } = useLocation();\n  const query = React.useMemo(() => new URLSearchParams(searchString), [searchString]);\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\n\n  const [resetPassword, { error }] = useResetPasswordMutation();\n\n  const handleSubmit = async (body: ResetPassword.Request['body']) => {\n    const res = await resetPassword(body);\n\n    if ('data' in res) {\n      dispatch(login({ token: res.data.token }));\n      navigate('/');\n    }\n  };\n  /**\n   * If someone doesn't have a reset password token\n   * then they should just be redirected back to the login page.\n   */\n  if (!query.get('code')) {\n    return <Navigate to=\"/auth/login\" />;\n  }\n\n  return (\n    <UnauthenticatedLayout>\n      <Main>\n        <LayoutContent>\n          <Column>\n            <Logo />\n            <Box paddingTop={6} paddingBottom={7}>\n              <Typography tag=\"h1\" variant=\"alpha\">\n                {formatMessage({\n                  id: 'global.reset-password',\n                  defaultMessage: 'Reset password',\n                })}\n              </Typography>\n            </Box>\n            {error ? (\n              <Typography id=\"global-form-error\" role=\"alert\" tabIndex={-1} textColor=\"danger600\">\n                {isBaseQueryError(error)\n                  ? formatAPIError(error)\n                  : formatMessage({\n                      id: 'notification.error',\n                      defaultMessage: 'An error occurred',\n                    })}\n              </Typography>\n            ) : null}\n          </Column>\n          <Form\n            method=\"POST\"\n            initialValues={{\n              password: '',\n              confirmPassword: '',\n            }}\n            onSubmit={(values) => {\n              // We know query.code is defined because we check for it above.\n              handleSubmit({ password: values.password, resetPasswordToken: query.get('code')! });\n            }}\n            validationSchema={RESET_PASSWORD_SCHEMA}\n          >\n            <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\n              {[\n                {\n                  hint: formatMessage({\n                    id: 'Auth.form.password.hint',\n                    defaultMessage:\n                      'Password must contain at least 8 characters, 1 uppercase, 1 lowercase and 1 number',\n                  }),\n                  label: formatMessage({\n                    id: 'global.password',\n                    defaultMessage: 'Password',\n                  }),\n                  name: 'password',\n                  required: true,\n                  type: 'password' as const,\n                },\n                {\n                  label: formatMessage({\n                    id: 'Auth.form.confirmPassword.label',\n                    defaultMessage: 'Confirm Password',\n                  }),\n                  name: 'confirmPassword',\n                  required: true,\n                  type: 'password' as const,\n                },\n              ].map((field) => (\n                <InputRenderer key={field.name} {...field} />\n              ))}\n              <Button fullWidth type=\"submit\">\n                {formatMessage({\n                  id: 'global.change-password',\n                  defaultMessage: 'Change password',\n                })}\n              </Button>\n            </Flex>\n          </Form>\n        </LayoutContent>\n        <Flex justifyContent=\"center\">\n          <Box paddingTop={4}>\n            <Link tag={NavLink} to=\"/auth/login\">\n              {formatMessage({ id: 'Auth.link.ready', defaultMessage: 'Ready to sign in?' })}\n            </Link>\n          </Box>\n        </Flex>\n      </Main>\n    </UnauthenticatedLayout>\n  );\n};\n\nexport { ResetPassword };\n"],"names":["RESET_PASSWORD_SCHEMA","yup","object","shape","password","string","min","id","translatedErrors","minLength","defaultMessage","values","test","value","byteSize","getByteSize","matches","message","required","nullable","confirmPassword","oneOf","ref","ResetPassword","formatMessage","useIntl","dispatch","useTypedDispatch","navigate","useNavigate","search","searchString","useLocation","query","React","useMemo","URLSearchParams","_unstableFormatAPIError","formatAPIError","useAPIErrorHandler","resetPassword","error","useResetPasswordMutation","handleSubmit","body","res","login","token","data","get","_jsx","Navigate","to","UnauthenticatedLayout","_jsxs","Main","LayoutContent","Column","Logo","Box","paddingTop","paddingBottom","Typography","tag","variant","role","tabIndex","textColor","isBaseQueryError","Form","method","initialValues","onSubmit","resetPasswordToken","validationSchema","Flex","direction","alignItems","gap","hint","label","name","type","map","field","InputRenderer","Button","fullWidth","justifyContent","Link","NavLink"],"mappings":";;;;;;;;;;;;;;;;;;AAwBA,MAAMA,qBAAwBC,GAAAA,GAAAA,CAAIC,MAAM,EAAA,CAAGC,KAAK,CAAC;AAC/CC,IAAAA,QAAAA,EAAUH,GACPI,CAAAA,MAAM,EACNC,CAAAA,GAAG,CAAC,CAAG,EAAA;QACNC,EAAIC,EAAAA,WAAAA,CAAiBC,SAAS,CAACF,EAAE;QACjCG,cAAgB,EAAA,wCAAA;QAChBC,MAAQ,EAAA;YAAEL,GAAK,EAAA;AAAE;AACnB,KAAA,CACA;AACCM,KAAAA,IAAI,CACH,oBACA,EAAA;QACEL,EAAI,EAAA,yCAAA;QACJG,cAAgB,EAAA;AAClB,KAAA,EACA,SAAUG,KAAK,EAAA;AACb,QAAA,IAAI,CAACA,KAAS,IAAA,OAAOA,UAAU,QAAU,EAAA,OAAO;AAEhD,QAAA,MAAMC,WAAWC,WAAYF,CAAAA,KAAAA,CAAAA;AAC7B,QAAA,OAAOC,QAAY,IAAA,EAAA;KAGtBE,CAAAA,CAAAA,OAAO,CAAC,OAAS,EAAA;QAChBC,OAAS,EAAA;YACPV,EAAI,EAAA,0CAAA;YACJG,cAAgB,EAAA;AAClB;KAEDM,CAAAA,CAAAA,OAAO,CAAC,OAAS,EAAA;QAChBC,OAAS,EAAA;YACPV,EAAI,EAAA,0CAAA;YACJG,cAAgB,EAAA;AAClB;KAEDM,CAAAA,CAAAA,OAAO,CAAC,IAAM,EAAA;QACbC,OAAS,EAAA;YACPV,EAAI,EAAA,uCAAA;YACJG,cAAgB,EAAA;AAClB;AACF,KAAA,CAAA,CACCQ,QAAQ,CAAC;QACRX,EAAIC,EAAAA,WAAAA,CAAiBU,QAAQ,CAACX,EAAE;QAChCG,cAAgB,EAAA;AAClB,KAAA,CAAA,CACCS,QAAQ,EAAA;AACXC,IAAAA,eAAAA,EAAiBnB,GACdI,CAAAA,MAAM,EACNa,CAAAA,QAAQ,CAAC;QACRX,EAAIC,EAAAA,WAAAA,CAAiBU,QAAQ,CAACX,EAAE;QAChCG,cAAgB,EAAA;AAClB,KAAA,CAAA,CACCW,KAAK,CAAC;AAACpB,QAAAA,GAAAA,CAAIqB,GAAG,CAAC,UAAA,CAAA;AAAa,QAAA;KAAK,EAAE;QAClCf,EAAI,EAAA,yCAAA;QACJG,cAAgB,EAAA;AAClB,KAAA,CAAA,CACCS,QAAQ;AACb,CAAA,CAAA;AAEA,MAAMI,aAAgB,GAAA,IAAA;IACpB,MAAM,EAAEC,aAAa,EAAE,GAAGC,OAAAA,EAAAA;AAC1B,IAAA,MAAMC,QAAWC,GAAAA,gBAAAA,EAAAA;AACjB,IAAA,MAAMC,QAAWC,GAAAA,WAAAA,EAAAA;AACjB,IAAA,MAAM,EAAEC,MAAAA,EAAQC,YAAY,EAAE,GAAGC,WAAAA,EAAAA;AACjC,IAAA,MAAMC,QAAQC,KAAMC,CAAAA,OAAO,CAAC,IAAM,IAAIC,gBAAgBL,YAAe,CAAA,EAAA;AAACA,QAAAA;AAAa,KAAA,CAAA;AACnF,IAAA,MAAM,EAAEM,uBAAAA,EAAyBC,cAAc,EAAE,GAAGC,kBAAAA,EAAAA;AAEpD,IAAA,MAAM,CAACC,aAAe,EAAA,EAAEC,KAAK,EAAE,CAAC,GAAGC,wBAAAA,EAAAA;AAEnC,IAAA,MAAMC,eAAe,OAAOC,IAAAA,GAAAA;QAC1B,MAAMC,GAAAA,GAAM,MAAML,aAAcI,CAAAA,IAAAA,CAAAA;AAEhC,QAAA,IAAI,UAAUC,GAAK,EAAA;AACjBnB,YAAAA,QAAAA,CAASoB,KAAM,CAAA;gBAAEC,KAAOF,EAAAA,GAAAA,CAAIG,IAAI,CAACD;AAAM,aAAA,CAAA,CAAA;YACvCnB,QAAS,CAAA,GAAA,CAAA;AACX;AACF,KAAA;AACA;;;AAGC,MACD,IAAI,CAACK,KAAMgB,CAAAA,GAAG,CAAC,MAAS,CAAA,EAAA;AACtB,QAAA,qBAAOC,GAACC,CAAAA,QAAAA,EAAAA;YAASC,EAAG,EAAA;;AACtB;AAEA,IAAA,qBACEF,GAACG,CAAAA,qBAAAA,EAAAA;AACC,QAAA,QAAA,gBAAAC,IAACC,CAAAA,IAAAA,EAAAA;;8BACCD,IAACE,CAAAA,aAAAA,EAAAA;;sCACCF,IAACG,CAAAA,MAAAA,EAAAA;;8CACCP,GAACQ,CAAAA,IAAAA,EAAAA,EAAAA,CAAAA;8CACDR,GAACS,CAAAA,GAAAA,EAAAA;oCAAIC,UAAY,EAAA,CAAA;oCAAGC,aAAe,EAAA,CAAA;AACjC,oCAAA,QAAA,gBAAAX,GAACY,CAAAA,UAAAA,EAAAA;wCAAWC,GAAI,EAAA,IAAA;wCAAKC,OAAQ,EAAA,OAAA;kDAC1BxC,aAAc,CAAA;4CACbjB,EAAI,EAAA,uBAAA;4CACJG,cAAgB,EAAA;AAClB,yCAAA;;;AAGH+B,gCAAAA,KAAAA,iBACCS,GAACY,CAAAA,UAAAA,EAAAA;oCAAWvD,EAAG,EAAA,mBAAA;oCAAoB0D,IAAK,EAAA,OAAA;AAAQC,oCAAAA,QAAAA,EAAU,CAAC,CAAA;oCAAGC,SAAU,EAAA,WAAA;8CACrEC,gBAAiB3B,CAAAA,KAAAA,CAAAA,GACdH,cAAeG,CAAAA,KAAAA,CAAAA,GACfjB,aAAc,CAAA;wCACZjB,EAAI,EAAA,oBAAA;wCACJG,cAAgB,EAAA;AAClB,qCAAA;AAEJ,iCAAA,CAAA,GAAA;;;sCAENwC,GAACmB,CAAAA,IAAAA,EAAAA;4BACCC,MAAO,EAAA,MAAA;4BACPC,aAAe,EAAA;gCACbnE,QAAU,EAAA,EAAA;gCACVgB,eAAiB,EAAA;AACnB,6BAAA;AACAoD,4BAAAA,QAAAA,EAAU,CAAC7D,MAAAA,GAAAA;;gCAETgC,YAAa,CAAA;AAAEvC,oCAAAA,QAAAA,EAAUO,OAAOP,QAAQ;oCAAEqE,kBAAoBxC,EAAAA,KAAAA,CAAMgB,GAAG,CAAC,MAAA;AAAS,iCAAA,CAAA;AACnF,6BAAA;4BACAyB,gBAAkB1E,EAAAA,qBAAAA;AAElB,4BAAA,QAAA,gBAAAsD,IAACqB,CAAAA,IAAAA,EAAAA;gCAAKC,SAAU,EAAA,QAAA;gCAASC,UAAW,EAAA,SAAA;gCAAUC,GAAK,EAAA,CAAA;;AAChD,oCAAA;AACC,wCAAA;AACEC,4CAAAA,IAAAA,EAAMvD,aAAc,CAAA;gDAClBjB,EAAI,EAAA,yBAAA;gDACJG,cACE,EAAA;AACJ,6CAAA,CAAA;AACAsE,4CAAAA,KAAAA,EAAOxD,aAAc,CAAA;gDACnBjB,EAAI,EAAA,iBAAA;gDACJG,cAAgB,EAAA;AAClB,6CAAA,CAAA;4CACAuE,IAAM,EAAA,UAAA;4CACN/D,QAAU,EAAA,IAAA;4CACVgE,IAAM,EAAA;AACR,yCAAA;AACA,wCAAA;AACEF,4CAAAA,KAAAA,EAAOxD,aAAc,CAAA;gDACnBjB,EAAI,EAAA,iCAAA;gDACJG,cAAgB,EAAA;AAClB,6CAAA,CAAA;4CACAuE,IAAM,EAAA,iBAAA;4CACN/D,QAAU,EAAA,IAAA;4CACVgE,IAAM,EAAA;AACR;AACD,qCAAA,CAACC,GAAG,CAAC,CAACC,KAAAA,iBACLlC,GAACmC,CAAAA,qBAAAA,EAAAA;AAAgC,4CAAA,GAAGD;AAAhBA,yCAAAA,EAAAA,KAAAA,CAAMH,IAAI,CAAA,CAAA;kDAEhC/B,GAACoC,CAAAA,MAAAA,EAAAA;wCAAOC,SAAS,EAAA,IAAA;wCAACL,IAAK,EAAA,QAAA;kDACpB1D,aAAc,CAAA;4CACbjB,EAAI,EAAA,wBAAA;4CACJG,cAAgB,EAAA;AAClB,yCAAA;;;;;;;8BAKRwC,GAACyB,CAAAA,IAAAA,EAAAA;oBAAKa,cAAe,EAAA,QAAA;AACnB,oBAAA,QAAA,gBAAAtC,GAACS,CAAAA,GAAAA,EAAAA;wBAAIC,UAAY,EAAA,CAAA;AACf,wBAAA,QAAA,gBAAAV,GAACuC,CAAAA,IAAAA,EAAAA;4BAAK1B,GAAK2B,EAAAA,OAAAA;4BAAStC,EAAG,EAAA,aAAA;sCACpB5B,aAAc,CAAA;gCAAEjB,EAAI,EAAA,iBAAA;gCAAmBG,cAAgB,EAAA;AAAoB,6BAAA;;;;;;;AAO1F;;;;"}