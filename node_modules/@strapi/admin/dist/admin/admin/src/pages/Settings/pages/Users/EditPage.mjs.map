{"version":3,"file":"EditPage.mjs","sources":["../../../../../../../../admin/src/pages/Settings/pages/Users/EditPage.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { Box, Button, Flex, Grid, Typography } from '@strapi/design-system';\nimport { Check } from '@strapi/icons';\nimport pick from 'lodash/pick';\nimport { useIntl } from 'react-intl';\nimport { useMatch, useNavigate } from 'react-router-dom';\nimport * as yup from 'yup';\n\nimport { Update } from '../../../../../../shared/contracts/user';\nimport { Form, FormHelpers } from '../../../../components/Form';\nimport { InputRenderer } from '../../../../components/FormInputs/Renderer';\nimport { Layouts } from '../../../../components/Layouts/Layout';\nimport { Page } from '../../../../components/PageHelpers';\nimport { useTypedSelector } from '../../../../core/store/hooks';\nimport { BackButton } from '../../../../features/BackButton';\nimport { useNotification } from '../../../../features/Notifications';\nimport { useAPIErrorHandler } from '../../../../hooks/useAPIErrorHandler';\nimport { useEnterprise } from '../../../../hooks/useEnterprise';\nimport { useRBAC } from '../../../../hooks/useRBAC';\nimport { selectAdminPermissions } from '../../../../selectors';\nimport { useAdminUsers, useUpdateUserMutation } from '../../../../services/users';\nimport { isBaseQueryError } from '../../../../utils/baseQuery';\nimport { translatedErrors } from '../../../../utils/translatedErrors';\nimport { getDisplayName } from '../../../../utils/users';\n\nimport { MagicLinkCE } from './components/MagicLinkCE';\nimport { SelectRoles } from './components/SelectRoles';\nimport { COMMON_USER_SCHEMA } from './utils/validation';\n\nconst EDIT_VALIDATION_SCHEMA = yup.object().shape({\n  ...COMMON_USER_SCHEMA,\n  isActive: yup.bool(),\n  roles: yup\n    .array()\n    .min(1, {\n      id: translatedErrors.required.id,\n      defaultMessage: 'This field is required',\n    })\n    .required({\n      id: translatedErrors.required.id,\n      defaultMessage: 'This field is required',\n    }),\n});\n\nconst fieldsToPick = ['email', 'firstname', 'lastname', 'username', 'isActive', 'roles'] as const;\n\n/* -------------------------------------------------------------------------------------------------\n * EditPage\n * -----------------------------------------------------------------------------------------------*/\n\nconst EditPage = () => {\n  const { formatMessage } = useIntl();\n  const match = useMatch('/settings/users/:id');\n  const id = match?.params?.id ?? '';\n  const navigate = useNavigate();\n  const { toggleNotification } = useNotification();\n  const MagicLink = useEnterprise(\n    MagicLinkCE,\n    async () =>\n      (\n        await import(\n          '../../../../../../ee/admin/src/pages/SettingsPage/pages/Users/components/MagicLinkEE'\n        )\n      ).MagicLinkEE\n  );\n  const {\n    _unstableFormatAPIError: formatAPIError,\n    _unstableFormatValidationErrors: formatValidationErrors,\n  } = useAPIErrorHandler();\n\n  const permissions = useTypedSelector(selectAdminPermissions);\n\n  const {\n    isLoading: isLoadingRBAC,\n    allowedActions: { canUpdate },\n  } = useRBAC({\n    read: permissions.settings?.users.read ?? [],\n    update: permissions.settings?.users.update ?? [],\n  });\n\n  const [updateUser] = useUpdateUserMutation();\n\n  const {\n    data,\n    error,\n    isLoading: isLoadingAdminUsers,\n  } = useAdminUsers(\n    { id },\n    {\n      refetchOnMountOrArgChange: true,\n    }\n  );\n\n  const [user] = data?.users ?? [];\n\n  React.useEffect(() => {\n    if (error) {\n      // Redirect the user to the homepage if is not allowed to read\n      if (error.name === 'UnauthorizedError') {\n        toggleNotification({\n          type: 'info',\n          message: formatMessage({\n            id: 'notification.permission.not-allowed-read',\n            defaultMessage: 'You are not allowed to see this document',\n          }),\n        });\n\n        navigate('/');\n      } else {\n        toggleNotification({\n          type: 'danger',\n          message: formatAPIError(error),\n        });\n      }\n    }\n  }, [error, formatAPIError, formatMessage, navigate, toggleNotification]);\n\n  const isLoading = isLoadingAdminUsers || !MagicLink || isLoadingRBAC;\n\n  if (isLoading) {\n    return <Page.Loading />;\n  }\n\n  type InitialData = Pick<Update.Request['body'], (typeof fieldsToPick)[number]> & {\n    confirmPassword: string;\n    password: string;\n  };\n\n  const initialData = {\n    ...pick(user, fieldsToPick),\n    roles: user.roles.map(({ id }) => id),\n    password: '',\n    confirmPassword: '',\n  } satisfies InitialData;\n\n  const handleSubmit = async (body: InitialData, actions: FormHelpers<InitialData>) => {\n    const { confirmPassword: _confirmPassword, ...bodyRest } = body;\n\n    const res = await updateUser({\n      id,\n      ...bodyRest,\n    });\n\n    if ('error' in res && isBaseQueryError(res.error)) {\n      if (res.error.name === 'ValidationError') {\n        actions.setErrors(formatValidationErrors(res.error));\n      }\n\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(res.error),\n      });\n    } else {\n      toggleNotification({\n        type: 'success',\n        message: formatMessage({ id: 'notification.success.saved', defaultMessage: 'Saved' }),\n      });\n\n      actions.setValues({\n        ...pick(body, fieldsToPick),\n        password: '',\n        confirmPassword: '',\n      });\n    }\n  };\n\n  return (\n    <Page.Main>\n      <Page.Title>\n        {formatMessage(\n          { id: 'Settings.PageTitle', defaultMessage: 'Settings - {name}' },\n          {\n            name: 'Users',\n          }\n        )}\n      </Page.Title>\n      <Form\n        method=\"PUT\"\n        onSubmit={handleSubmit}\n        initialValues={initialData}\n        validationSchema={EDIT_VALIDATION_SCHEMA}\n      >\n        {({ isSubmitting, modified }) => {\n          return (\n            <>\n              <Layouts.Header\n                primaryAction={\n                  <Button\n                    disabled={isSubmitting || !canUpdate || !modified}\n                    startIcon={<Check />}\n                    loading={isSubmitting}\n                    type=\"submit\"\n                  >\n                    {formatMessage({ id: 'global.save', defaultMessage: 'Save' })}\n                  </Button>\n                }\n                title={formatMessage(\n                  {\n                    id: 'app.containers.Users.EditPage.header.label',\n                    defaultMessage: 'Edit {name}',\n                  },\n                  {\n                    // @ts-expect-error â€“ issues with the Entity ID type, still.\n                    name: getDisplayName(initialData),\n                  }\n                )}\n                navigationAction={<BackButton fallback=\"../users\" />}\n              />\n              <Layouts.Content>\n                {user?.registrationToken && (\n                  <Box paddingBottom={6}>\n                    <MagicLink registrationToken={user.registrationToken} />\n                  </Box>\n                )}\n                <Flex direction=\"column\" alignItems=\"stretch\" gap={7}>\n                  <Box\n                    background=\"neutral0\"\n                    hasRadius\n                    shadow=\"filterShadow\"\n                    paddingTop={6}\n                    paddingBottom={6}\n                    paddingLeft={7}\n                    paddingRight={7}\n                  >\n                    <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\n                      <Typography variant=\"delta\" tag=\"h2\">\n                        {formatMessage({\n                          id: 'app.components.Users.ModalCreateBody.block-title.details',\n                          defaultMessage: 'Details',\n                        })}\n                      </Typography>\n                      <Grid.Root gap={5}>\n                        {LAYOUT.map((row) =>\n                          row.map(({ size, label, ...field }) => {\n                            return (\n                              <Grid.Item\n                                key={field.name}\n                                col={size}\n                                direction=\"column\"\n                                alignItems=\"stretch\"\n                              >\n                                <InputRenderer\n                                  {...field}\n                                  disabled={!canUpdate}\n                                  label={formatMessage(label)}\n                                  placeholder={\n                                    'placeholder' in field\n                                      ? formatMessage(field.placeholder)\n                                      : undefined\n                                  }\n                                />\n                              </Grid.Item>\n                            );\n                          })\n                        )}\n                      </Grid.Root>\n                    </Flex>\n                  </Box>\n                  <Box\n                    background=\"neutral0\"\n                    hasRadius\n                    shadow=\"filterShadow\"\n                    paddingTop={6}\n                    paddingBottom={6}\n                    paddingLeft={7}\n                    paddingRight={7}\n                  >\n                    <Flex direction=\"column\" alignItems=\"stretch\" gap={4}>\n                      <Typography variant=\"delta\" tag=\"h2\">\n                        {formatMessage({\n                          id: 'global.roles',\n                          defaultMessage: \"User's role\",\n                        })}\n                      </Typography>\n                      <Grid.Root gap={5}>\n                        <Grid.Item col={6} xs={12} direction=\"column\" alignItems=\"stretch\">\n                          <SelectRoles disabled={!canUpdate} />\n                        </Grid.Item>\n                      </Grid.Root>\n                    </Flex>\n                  </Box>\n                </Flex>\n              </Layouts.Content>\n            </>\n          );\n        }}\n      </Form>\n    </Page.Main>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * EditPage LAYOUT\n * -----------------------------------------------------------------------------------------------*/\n\nconst LAYOUT = [\n  [\n    {\n      label: {\n        id: 'Auth.form.firstname.label',\n        defaultMessage: 'First name',\n      },\n      name: 'firstname',\n      placeholder: {\n        id: 'Auth.form.firstname.placeholder',\n        defaultMessage: 'e.g. Kai',\n      },\n      type: 'string' as const,\n      size: 6,\n      required: true,\n    },\n    {\n      label: {\n        id: 'Auth.form.lastname.label',\n        defaultMessage: 'Last name',\n      },\n      name: 'lastname',\n      placeholder: {\n        id: 'Auth.form.lastname.placeholder',\n        defaultMessage: 'e.g. Doe',\n      },\n      type: 'string' as const,\n      size: 6,\n    },\n  ],\n  [\n    {\n      label: {\n        id: 'Auth.form.email.label',\n        defaultMessage: 'Email',\n      },\n      name: 'email',\n      placeholder: {\n        id: 'Auth.form.email.placeholder',\n        defaultMessage: 'e.g. kai.doe@strapi.io',\n      },\n      type: 'email' as const,\n      size: 6,\n      required: true,\n    },\n    {\n      label: {\n        id: 'Auth.form.username.label',\n        defaultMessage: 'Username',\n      },\n      name: 'username',\n      placeholder: {\n        id: 'Auth.form.username.placeholder',\n        defaultMessage: 'e.g. Kai_Doe',\n      },\n      type: 'string' as const,\n      size: 6,\n    },\n  ],\n  [\n    {\n      autoComplete: 'new-password',\n      label: {\n        id: 'global.password',\n        defaultMessage: 'Password',\n      },\n      name: 'password',\n      type: 'password' as const,\n      size: 6,\n    },\n    {\n      autoComplete: 'new-password',\n      label: {\n        id: 'Auth.form.confirmPassword.label',\n        defaultMessage: 'Password confirmation',\n      },\n      name: 'confirmPassword',\n      type: 'password' as const,\n      size: 6,\n    },\n  ],\n  [\n    {\n      label: {\n        id: 'Auth.form.active.label',\n        defaultMessage: 'Active',\n      },\n      name: 'isActive',\n      type: 'boolean' as const,\n      size: 6,\n    },\n  ],\n];\n\nconst ProtectedEditPage = () => {\n  const permissions = useTypedSelector((state) => state.admin_app.permissions.settings?.users.read);\n\n  return (\n    <Page.Protect permissions={permissions}>\n      <EditPage />\n    </Page.Protect>\n  );\n};\n\nexport { EditPage, ProtectedEditPage };\n"],"names":["EDIT_VALIDATION_SCHEMA","yup","object","shape","COMMON_USER_SCHEMA","isActive","bool","roles","array","min","id","translatedErrors","required","defaultMessage","fieldsToPick","EditPage","formatMessage","useIntl","match","useMatch","params","navigate","useNavigate","toggleNotification","useNotification","MagicLink","useEnterprise","MagicLinkCE","MagicLinkEE","_unstableFormatAPIError","formatAPIError","_unstableFormatValidationErrors","formatValidationErrors","useAPIErrorHandler","permissions","useTypedSelector","selectAdminPermissions","isLoading","isLoadingRBAC","allowedActions","canUpdate","useRBAC","read","settings","users","update","updateUser","useUpdateUserMutation","data","error","isLoadingAdminUsers","useAdminUsers","refetchOnMountOrArgChange","user","React","useEffect","name","type","message","_jsx","Page","Loading","initialData","pick","map","password","confirmPassword","handleSubmit","body","actions","_confirmPassword","bodyRest","res","isBaseQueryError","setErrors","setValues","_jsxs","Main","Title","Form","method","onSubmit","initialValues","validationSchema","isSubmitting","modified","_Fragment","Layouts","Header","primaryAction","Button","disabled","startIcon","Check","loading","title","getDisplayName","navigationAction","BackButton","fallback","Content","registrationToken","Box","paddingBottom","Flex","direction","alignItems","gap","background","hasRadius","shadow","paddingTop","paddingLeft","paddingRight","Typography","variant","tag","Grid","Root","LAYOUT","row","size","label","field","Item","col","InputRenderer","placeholder","undefined","xs","SelectRoles","autoComplete","ProtectedEditPage","state","admin_app","Protect"],"mappings":"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"}