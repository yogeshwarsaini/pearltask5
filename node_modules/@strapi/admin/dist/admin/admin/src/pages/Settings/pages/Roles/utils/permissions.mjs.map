{"version":3,"file":"permissions.mjs","sources":["../../../../../../../../../admin/src/pages/Settings/pages/Roles/utils/permissions.ts"],"sourcesContent":["import { isObject } from '../../../../../utils/objects';\n\nimport { createArrayOfValues } from './createArrayOfValues';\n\nimport type { ConditionForm, Form, PropertyChildForm } from './forms';\nimport type { UpdatePermissions } from '../../../../../../../shared/contracts/roles';\nimport type { Permission } from '../../../../../../../shared/contracts/shared';\nimport type { PermissionsDataManagerContextValue } from '../hooks/usePermissionsDataManager';\n\ntype PermissionApiBody = UpdatePermissions.Request['body']['permissions'];\n\n/**\n * @description Given a users permissions array we find the first one that matches a provided subject & action\n */\nconst findMatchingPermission = (\n  permissions: Permission[],\n  action: string,\n  subject: string | null\n) => permissions.find((perm) => perm.action === action && perm.subject === subject);\n\nconst formatPermissionsForAPI = (\n  modifiedData: PermissionsDataManagerContextValue['modifiedData']\n): PermissionApiBody => {\n  const pluginsPermissions = formatSettingsPermissions(modifiedData.plugins);\n  const settingsPermissions = formatSettingsPermissions(modifiedData.settings);\n  const collectionTypesPermissions = formatContentTypesPermissions(modifiedData.collectionTypes);\n  const singleTypesPermissions = formatContentTypesPermissions(modifiedData.singleTypes);\n\n  return [\n    ...pluginsPermissions,\n    ...settingsPermissions,\n    ...collectionTypesPermissions,\n    ...singleTypesPermissions,\n  ];\n};\n\nconst formatSettingsPermissions = (\n  settingsPermissionsObject:\n    | PermissionsDataManagerContextValue['modifiedData']['plugins']\n    | PermissionsDataManagerContextValue['modifiedData']['settings']\n): PermissionApiBody => {\n  return Object.values(settingsPermissionsObject).reduce<PermissionApiBody>((formAcc, form) => {\n    const currentCategoryPermissions = Object.values(form).reduce<PermissionApiBody>(\n      (childFormAcc, childForm) => {\n        const permissions = Object.entries(childForm).reduce<PermissionApiBody>(\n          (\n            responsesAcc,\n            [\n              actionName,\n              {\n                conditions,\n                properties: { enabled },\n              },\n            ]\n          ) => {\n            if (!enabled) {\n              return responsesAcc;\n            }\n\n            responsesAcc.push({\n              action: actionName,\n              subject: null,\n              conditions: createConditionsArray(conditions),\n              properties: {},\n            });\n\n            return responsesAcc;\n          },\n          []\n        );\n\n        return [...childFormAcc, ...permissions];\n      },\n      []\n    );\n\n    return [...formAcc, ...currentCategoryPermissions];\n  }, []);\n};\n\nconst formatContentTypesPermissions = (contentTypesPermissions: Form): PermissionApiBody => {\n  const permissions = Object.entries(contentTypesPermissions).reduce<PermissionApiBody>(\n    (allPermissions, current) => {\n      const [subject, currentSubjectActions] = current;\n\n      const permissions = Object.entries(currentSubjectActions).reduce<PermissionApiBody>(\n        (acc, current) => {\n          const [actionName, permissions] = current;\n          const shouldCreatePermission = createArrayOfValues(permissions).some((val) => val);\n\n          if (!shouldCreatePermission) {\n            return acc;\n          }\n\n          if (!permissions?.properties?.enabled) {\n            const createdPermissionsArray = Object.entries(permissions.properties).reduce<\n              PermissionApiBody[number]\n            >(\n              (acc, current) => {\n                const [propertyName, propertyValue] = current;\n\n                // @ts-expect-error â€“ `propertyValue` can be boolean or an object, but we don't account for it...\n                acc.properties[propertyName] = createPropertyArray(propertyValue);\n\n                return acc;\n              },\n              {\n                action: actionName,\n                subject,\n                conditions: createConditionsArray(permissions.conditions),\n                properties: {},\n              }\n            );\n\n            return [...acc, createdPermissionsArray];\n          }\n\n          if (!permissions.properties.enabled) {\n            return acc;\n          }\n\n          acc.push({\n            action: actionName,\n            subject,\n            properties: {},\n            conditions: createConditionsArray(permissions.conditions),\n          });\n\n          return acc;\n        },\n        []\n      );\n\n      return [...allPermissions, ...permissions];\n    },\n    []\n  );\n\n  return permissions;\n};\n\nconst createPropertyArray = (propertyValue: PropertyChildForm, prefix = ''): string[] => {\n  return Object.entries(propertyValue).reduce<string[]>((acc, current) => {\n    const [name, value] = current;\n\n    if (isObject(value)) {\n      return [...acc, ...createPropertyArray(value, `${prefix}${name}.`)];\n    }\n\n    if (value && !isObject(value)) {\n      acc.push(`${prefix}${name}`);\n    }\n\n    return acc;\n  }, []);\n};\n\nconst createConditionsArray = (conditions: ConditionForm) =>\n  Object.entries(conditions)\n    .filter(([, conditionValue]) => {\n      return conditionValue;\n    })\n    .map(([conditionName]) => conditionName);\n\nexport { findMatchingPermission, formatPermissionsForAPI };\n"],"names":["findMatchingPermission","permissions","action","subject","find","perm","formatPermissionsForAPI","modifiedData","pluginsPermissions","formatSettingsPermissions","plugins","settingsPermissions","settings","collectionTypesPermissions","formatContentTypesPermissions","collectionTypes","singleTypesPermissions","singleTypes","settingsPermissionsObject","Object","values","reduce","formAcc","form","currentCategoryPermissions","childFormAcc","childForm","entries","responsesAcc","actionName","conditions","properties","enabled","push","createConditionsArray","contentTypesPermissions","allPermissions","current","currentSubjectActions","acc","shouldCreatePermission","createArrayOfValues","some","val","createdPermissionsArray","propertyName","propertyValue","createPropertyArray","prefix","name","value","isObject","filter","conditionValue","map","conditionName"],"mappings":";;;AAWA;;AAEC,UACKA,sBAAyB,GAAA,CAC7BC,WACAC,EAAAA,MAAAA,EACAC,UACGF,WAAYG,CAAAA,IAAI,CAAC,CAACC,OAASA,IAAKH,CAAAA,MAAM,KAAKA,MAAUG,IAAAA,IAAAA,CAAKF,OAAO,KAAKA,OAAAA;AAE3E,MAAMG,0BAA0B,CAC9BC,YAAAA,GAAAA;IAEA,MAAMC,kBAAAA,GAAqBC,yBAA0BF,CAAAA,YAAAA,CAAaG,OAAO,CAAA;IACzE,MAAMC,mBAAAA,GAAsBF,yBAA0BF,CAAAA,YAAAA,CAAaK,QAAQ,CAAA;IAC3E,MAAMC,0BAAAA,GAA6BC,6BAA8BP,CAAAA,YAAAA,CAAaQ,eAAe,CAAA;IAC7F,MAAMC,sBAAAA,GAAyBF,6BAA8BP,CAAAA,YAAAA,CAAaU,WAAW,CAAA;IAErF,OAAO;AACFT,QAAAA,GAAAA,kBAAAA;AACAG,QAAAA,GAAAA,mBAAAA;AACAE,QAAAA,GAAAA,0BAAAA;AACAG,QAAAA,GAAAA;AACJ,KAAA;AACH;AAEA,MAAMP,4BAA4B,CAChCS,yBAAAA,GAAAA;AAIA,IAAA,OAAOC,OAAOC,MAAM,CAACF,2BAA2BG,MAAM,CAAoB,CAACC,OAASC,EAAAA,IAAAA,GAAAA;QAClF,MAAMC,0BAAAA,GAA6BL,OAAOC,MAAM,CAACG,MAAMF,MAAM,CAC3D,CAACI,YAAcC,EAAAA,SAAAA,GAAAA;AACb,YAAA,MAAMzB,cAAckB,MAAOQ,CAAAA,OAAO,CAACD,SAAWL,CAAAA,CAAAA,MAAM,CAClD,CACEO,YAAAA,EACA,CACEC,UACA,EAAA,EACEC,UAAU,EACVC,UAAAA,EAAY,EAAEC,OAAO,EAAE,EACxB,CACF,GAAA;AAED,gBAAA,IAAI,CAACA,OAAS,EAAA;oBACZ,OAAOJ,YAAAA;AACT;AAEAA,gBAAAA,YAAAA,CAAaK,IAAI,CAAC;oBAChB/B,MAAQ2B,EAAAA,UAAAA;oBACR1B,OAAS,EAAA,IAAA;AACT2B,oBAAAA,UAAAA,EAAYI,qBAAsBJ,CAAAA,UAAAA,CAAAA;AAClCC,oBAAAA,UAAAA,EAAY;AACd,iBAAA,CAAA;gBAEA,OAAOH,YAAAA;AACT,aAAA,EACA,EAAE,CAAA;YAGJ,OAAO;AAAIH,gBAAAA,GAAAA,YAAAA;AAAiBxB,gBAAAA,GAAAA;AAAY,aAAA;AAC1C,SAAA,EACA,EAAE,CAAA;QAGJ,OAAO;AAAIqB,YAAAA,GAAAA,OAAAA;AAAYE,YAAAA,GAAAA;AAA2B,SAAA;AACpD,KAAA,EAAG,EAAE,CAAA;AACP,CAAA;AAEA,MAAMV,gCAAgC,CAACqB,uBAAAA,GAAAA;IACrC,MAAMlC,WAAAA,GAAckB,OAAOQ,OAAO,CAACQ,yBAAyBd,MAAM,CAChE,CAACe,cAAgBC,EAAAA,OAAAA,GAAAA;QACf,MAAM,CAAClC,OAASmC,EAAAA,qBAAAA,CAAsB,GAAGD,OAAAA;QAEzC,MAAMpC,WAAAA,GAAckB,OAAOQ,OAAO,CAACW,uBAAuBjB,MAAM,CAC9D,CAACkB,GAAKF,EAAAA,OAAAA,GAAAA;YACJ,MAAM,CAACR,UAAY5B,EAAAA,WAAAA,CAAY,GAAGoC,OAAAA;AAClC,YAAA,MAAMG,yBAAyBC,mBAAoBxC,CAAAA,WAAAA,CAAAA,CAAayC,IAAI,CAAC,CAACC,GAAQA,GAAAA,GAAAA,CAAAA;AAE9E,YAAA,IAAI,CAACH,sBAAwB,EAAA;gBAC3B,OAAOD,GAAAA;AACT;YAEA,IAAI,CAACtC,WAAa8B,EAAAA,UAAAA,EAAYC,OAAS,EAAA;gBACrC,MAAMY,uBAAAA,GAA0BzB,MAAOQ,CAAAA,OAAO,CAAC1B,WAAAA,CAAY8B,UAAU,CAAEV,CAAAA,MAAM,CAG3E,CAACkB,GAAKF,EAAAA,OAAAA,GAAAA;oBACJ,MAAM,CAACQ,YAAcC,EAAAA,aAAAA,CAAc,GAAGT,OAAAA;;AAGtCE,oBAAAA,GAAAA,CAAIR,UAAU,CAACc,YAAa,CAAA,GAAGE,mBAAoBD,CAAAA,aAAAA,CAAAA;oBAEnD,OAAOP,GAAAA;iBAET,EAAA;oBACErC,MAAQ2B,EAAAA,UAAAA;AACR1B,oBAAAA,OAAAA;oBACA2B,UAAYI,EAAAA,qBAAAA,CAAsBjC,YAAY6B,UAAU,CAAA;AACxDC,oBAAAA,UAAAA,EAAY;AACd,iBAAA,CAAA;gBAGF,OAAO;AAAIQ,oBAAAA,GAAAA,GAAAA;AAAKK,oBAAAA;AAAwB,iBAAA;AAC1C;AAEA,YAAA,IAAI,CAAC3C,WAAAA,CAAY8B,UAAU,CAACC,OAAO,EAAE;gBACnC,OAAOO,GAAAA;AACT;AAEAA,YAAAA,GAAAA,CAAIN,IAAI,CAAC;gBACP/B,MAAQ2B,EAAAA,UAAAA;AACR1B,gBAAAA,OAAAA;AACA4B,gBAAAA,UAAAA,EAAY,EAAC;gBACbD,UAAYI,EAAAA,qBAAAA,CAAsBjC,YAAY6B,UAAU;AAC1D,aAAA,CAAA;YAEA,OAAOS,GAAAA;AACT,SAAA,EACA,EAAE,CAAA;QAGJ,OAAO;AAAIH,YAAAA,GAAAA,cAAAA;AAAmBnC,YAAAA,GAAAA;AAAY,SAAA;AAC5C,KAAA,EACA,EAAE,CAAA;IAGJ,OAAOA,WAAAA;AACT,CAAA;AAEA,MAAM8C,mBAAsB,GAAA,CAACD,aAAkCE,EAAAA,MAAAA,GAAS,EAAE,GAAA;AACxE,IAAA,OAAO7B,OAAOQ,OAAO,CAACmB,eAAezB,MAAM,CAAW,CAACkB,GAAKF,EAAAA,OAAAA,GAAAA;QAC1D,MAAM,CAACY,IAAMC,EAAAA,KAAAA,CAAM,GAAGb,OAAAA;AAEtB,QAAA,IAAIc,SAASD,KAAQ,CAAA,EAAA;YACnB,OAAO;AAAIX,gBAAAA,GAAAA,GAAAA;AAAQQ,gBAAAA,GAAAA,mBAAAA,CAAoBG,OAAO,CAAC,EAAEF,OAAO,EAAEC,IAAAA,CAAK,CAAC,CAAC;AAAE,aAAA;AACrE;QAEA,IAAIC,KAAAA,IAAS,CAACC,QAAAA,CAASD,KAAQ,CAAA,EAAA;AAC7BX,YAAAA,GAAAA,CAAIN,IAAI,CAAC,CAAC,EAAEe,MAAO,CAAA,EAAEC,KAAK,CAAC,CAAA;AAC7B;QAEA,OAAOV,GAAAA;AACT,KAAA,EAAG,EAAE,CAAA;AACP,CAAA;AAEA,MAAML,qBAAAA,GAAwB,CAACJ,UAAAA,GAC7BX,MAAOQ,CAAAA,OAAO,CAACG,UAAAA,CAAAA,CACZsB,MAAM,CAAC,CAAC,GAAGC,cAAe,CAAA,GAAA;QACzB,OAAOA,cAAAA;AACT,KAAA,CAAA,CACCC,GAAG,CAAC,CAAC,CAACC,cAAc,GAAKA,aAAAA,CAAAA;;;;"}