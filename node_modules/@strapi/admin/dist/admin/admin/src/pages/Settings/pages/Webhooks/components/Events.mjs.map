{"version":3,"file":"Events.mjs","sources":["../../../../../../../../../admin/src/pages/Settings/pages/Webhooks/components/Events.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {\n  Checkbox,\n  Flex,\n  RawTable as Table,\n  RawTbody as Tbody,\n  RawTd as Td,\n  RawTh as Th,\n  RawThead as Thead,\n  RawTr as Tr,\n  Typography,\n  VisuallyHidden,\n  Field,\n  CheckboxProps,\n} from '@strapi/design-system';\nimport { MessageDescriptor, useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport { useField } from '../../../../../components/Form';\n\n/* -------------------------------------------------------------------------------------------------\n * EventsRoot\n * -----------------------------------------------------------------------------------------------*/\n\ninterface EventsRootProps {\n  children: React.ReactNode;\n}\n\nconst EventsRoot = ({ children }: EventsRootProps) => {\n  const { formatMessage } = useIntl();\n\n  const label = formatMessage({\n    id: 'Settings.webhooks.form.events',\n    defaultMessage: 'Events',\n  });\n\n  return (\n    <Flex direction=\"column\" alignItems=\"stretch\" gap={1}>\n      <Field.Label aria-hidden>{label}</Field.Label>\n      {/* @ts-expect-error â€“ TODO: add colCount & rowCount */}\n      <StyledTable aria-label={label}>{children}</StyledTable>\n    </Flex>\n  );\n};\n\n// TODO check whether we want to move alternating background colour tables to the design system\nconst StyledTable = styled(Table)`\n  tbody tr:nth-child(odd) {\n    background: ${({ theme }) => theme.colors.neutral100};\n  }\n\n  thead th span {\n    color: ${({ theme }) => theme.colors.neutral500};\n  }\n\n  td,\n  th {\n    padding-block-start: ${({ theme }) => theme.spaces[3]};\n    padding-block-end: ${({ theme }) => theme.spaces[3]};\n    width: 6%;\n    vertical-align: middle;\n  }\n\n  tbody tr td:first-child {\n    /**\n     * Add padding to the start of the first column to avoid the checkbox appearing\n     * too close to the edge of the table\n     */\n    padding-inline-start: ${({ theme }) => theme.spaces[2]};\n  }\n`;\n\n/* -------------------------------------------------------------------------------------------------\n * EventsHeaders\n * -----------------------------------------------------------------------------------------------*/\n\ninterface EventsHeadersProps {\n  getHeaders?: typeof getCEHeaders;\n}\n\nconst getCEHeaders = (): MessageDescriptor[] => {\n  const headers = [\n    { id: 'Settings.webhooks.events.create', defaultMessage: 'Create' },\n    { id: 'Settings.webhooks.events.update', defaultMessage: 'Update' },\n    { id: 'app.utils.delete', defaultMessage: 'Delete' },\n    { id: 'app.utils.publish', defaultMessage: 'Publish' },\n    { id: 'app.utils.unpublish', defaultMessage: 'Unpublish' },\n  ];\n\n  return headers;\n};\n\nconst EventsHeaders = ({ getHeaders = getCEHeaders }: EventsHeadersProps) => {\n  const { formatMessage } = useIntl();\n  const headers = getHeaders();\n\n  return (\n    <Thead>\n      <Tr>\n        <Th>\n          <VisuallyHidden>\n            {formatMessage({\n              id: 'Settings.webhooks.event.select',\n              defaultMessage: 'Select event',\n            })}\n          </VisuallyHidden>\n        </Th>\n        {headers.map((header) => {\n          if (['app.utils.publish', 'app.utils.unpublish'].includes(header?.id ?? '')) {\n            return (\n              <Th\n                key={header.id}\n                title={formatMessage({\n                  id: 'Settings.webhooks.event.publish-tooltip',\n                  defaultMessage: 'This event only exists for content with draft & publish enabled',\n                })}\n              >\n                <Typography variant=\"sigma\" textColor=\"neutral600\">\n                  {formatMessage(header)}\n                </Typography>\n              </Th>\n            );\n          }\n\n          return (\n            <Th key={header.id}>\n              <Typography variant=\"sigma\" textColor=\"neutral600\">\n                {formatMessage(header)}\n              </Typography>\n            </Th>\n          );\n        })}\n      </Tr>\n    </Thead>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * EventsBody\n * -----------------------------------------------------------------------------------------------*/\ninterface FormikContextValue {\n  events: string[];\n}\n\ninterface EventsBodyProps {\n  providedEvents?: Record<string, FormikContextValue['events']>;\n}\n\nconst EventsBody = ({ providedEvents }: EventsBodyProps) => {\n  const events = providedEvents || getCEEvents();\n  const { value = [], onChange } = useField<string[]>('events');\n\n  const inputName = 'events';\n  const inputValue = value;\n  const disabledEvents: string[] = [];\n\n  const formattedValue = inputValue.reduce<Record<string, string[]>>((acc, curr) => {\n    const key = curr.split('.')[0];\n\n    if (!acc[key]) {\n      acc[key] = [];\n    }\n    acc[key].push(curr);\n\n    return acc;\n  }, {});\n\n  const handleSelect: EventsRowProps['handleSelect'] = (name, value) => {\n    const set = new Set(inputValue);\n\n    if (value) {\n      set.add(name);\n    } else {\n      set.delete(name);\n    }\n\n    onChange(inputName, Array.from(set));\n  };\n\n  const handleSelectAll: EventsRowProps['handleSelectAll'] = (name, value) => {\n    const set = new Set(inputValue);\n\n    if (value) {\n      events[name].forEach((event) => {\n        if (!disabledEvents.includes(event)) {\n          set.add(event);\n        }\n      });\n    } else {\n      events[name].forEach((event) => set.delete(event));\n    }\n\n    onChange(inputName, Array.from(set));\n  };\n\n  return (\n    <Tbody>\n      {Object.entries(events).map(([event, value]) => {\n        return (\n          <EventsRow\n            disabledEvents={disabledEvents}\n            key={event}\n            name={event}\n            events={value}\n            inputValue={formattedValue[event]}\n            handleSelect={handleSelect}\n            handleSelectAll={handleSelectAll}\n          />\n        );\n      })}\n    </Tbody>\n  );\n};\n\nconst getCEEvents = (): Required<Pick<EventsBodyProps, 'providedEvents'>>['providedEvents'] => {\n  const entryEvents: FormikContextValue['events'] = [\n    'entry.create',\n    'entry.update',\n    'entry.delete',\n    'entry.publish',\n    'entry.unpublish',\n  ];\n\n  return {\n    entry: entryEvents,\n    media: ['media.create', 'media.update', 'media.delete'],\n  };\n};\n\n/* -------------------------------------------------------------------------------------------------\n * EventsRow\n * -----------------------------------------------------------------------------------------------*/\n\ninterface EventsRowProps {\n  disabledEvents?: string[];\n  events?: string[];\n  inputValue?: string[];\n  handleSelect: (name: string, value: boolean) => void;\n  handleSelectAll: (name: string, value: boolean) => void;\n  name: string;\n}\n\nconst EventsRow = ({\n  disabledEvents = [],\n  name,\n  events = [],\n  inputValue = [],\n  handleSelect,\n  handleSelectAll,\n}: EventsRowProps) => {\n  const { formatMessage } = useIntl();\n  const enabledCheckboxes = events.filter((event) => !disabledEvents.includes(event));\n\n  const hasSomeCheckboxSelected = inputValue.length > 0;\n  const areAllCheckboxesSelected = inputValue.length === enabledCheckboxes.length;\n\n  const onChangeAll: CheckboxProps['onCheckedChange'] = () => {\n    const valueToSet = !areAllCheckboxesSelected;\n\n    handleSelectAll(name, valueToSet);\n  };\n\n  const targetColumns = 5;\n\n  return (\n    <Tr>\n      <Td>\n        <Checkbox\n          aria-label={formatMessage({\n            id: 'global.select-all-entries',\n            defaultMessage: 'Select all entries',\n          })}\n          name={name}\n          checked={\n            hasSomeCheckboxSelected && !areAllCheckboxesSelected\n              ? 'indeterminate'\n              : areAllCheckboxesSelected\n          }\n          onCheckedChange={onChangeAll}\n        >\n          {removeHyphensAndTitleCase(name)}\n        </Checkbox>\n      </Td>\n\n      {events.map((event) => {\n        return (\n          <Td key={event} textAlign=\"center\">\n            <Flex width=\"100%\" justifyContent=\"center\">\n              <Checkbox\n                disabled={disabledEvents.includes(event)}\n                aria-label={event}\n                name={event}\n                checked={inputValue.includes(event)}\n                onCheckedChange={(value) => handleSelect(event, !!value)}\n              />\n            </Flex>\n          </Td>\n        );\n      })}\n      {events.length < targetColumns && <Td colSpan={targetColumns - events.length} />}\n    </Tr>\n  );\n};\n\n/**\n * Converts a string to title case and removes hyphens.\n */\nconst removeHyphensAndTitleCase = (str: string): string =>\n  str\n    .replace(/-/g, ' ')\n    .split(' ')\n    .map((word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n    .join(' ');\n\nconst Events = { Root: EventsRoot, Headers: EventsHeaders, Body: EventsBody, Row: EventsRow };\n\nexport { Events };\nexport type { EventsRowProps, EventsHeadersProps, EventsRootProps, EventsBodyProps };\n"],"names":["EventsRoot","children","formatMessage","useIntl","label","id","defaultMessage","_jsxs","Flex","direction","alignItems","gap","_jsx","Field","Label","aria-hidden","StyledTable","aria-label","styled","Table","theme","colors","neutral100","neutral500","spaces","getCEHeaders","headers","EventsHeaders","getHeaders","Thead","Tr","Th","VisuallyHidden","map","header","includes","title","Typography","variant","textColor","EventsBody","providedEvents","events","getCEEvents","value","onChange","useField","inputName","inputValue","disabledEvents","formattedValue","reduce","acc","curr","key","split","push","handleSelect","name","set","Set","add","delete","Array","from","handleSelectAll","forEach","event","Tbody","Object","entries","EventsRow","entryEvents","entry","media","enabledCheckboxes","filter","hasSomeCheckboxSelected","length","areAllCheckboxesSelected","onChangeAll","valueToSet","targetColumns","Td","Checkbox","checked","onCheckedChange","removeHyphensAndTitleCase","textAlign","width","justifyContent","disabled","colSpan","str","replace","word","charAt","toUpperCase","slice","toLowerCase","join","Events","Root","Headers","Body","Row"],"mappings":"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"}