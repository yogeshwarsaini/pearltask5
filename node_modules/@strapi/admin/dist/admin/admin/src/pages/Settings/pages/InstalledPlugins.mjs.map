{"version":3,"file":"InstalledPlugins.mjs","sources":["../../../../../../../admin/src/pages/Settings/pages/InstalledPlugins.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { Table, Tbody, Td, Th, Thead, Tr, Typography, useNotifyAT } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { Layouts } from '../../../components/Layouts/Layout';\nimport { Page } from '../../../components/PageHelpers';\nimport { useTypedSelector } from '../../../core/store/hooks';\nimport { useNotification } from '../../../features/Notifications';\nimport { useAPIErrorHandler } from '../../../hooks/useAPIErrorHandler';\nimport { useGetPluginsQuery } from '../../../services/admin';\n\nconst InstalledPlugins = () => {\n  const { formatMessage } = useIntl();\n  const { notifyStatus } = useNotifyAT();\n  const { toggleNotification } = useNotification();\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\n\n  const { isLoading, data, error } = useGetPluginsQuery();\n\n  React.useEffect(() => {\n    if (data) {\n      notifyStatus(\n        formatMessage(\n          {\n            id: 'app.utils.notify.data-loaded',\n            defaultMessage: 'The {target} has loaded',\n          },\n          {\n            target: formatMessage({\n              id: 'global.plugins',\n              defaultMessage: 'Plugins',\n            }),\n          }\n        )\n      );\n    }\n\n    if (error) {\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(error),\n      });\n    }\n  }, [data, error, formatAPIError, formatMessage, notifyStatus, toggleNotification]);\n\n  if (isLoading) {\n    return <Page.Loading />;\n  }\n\n  return (\n    <Layouts.Root>\n      <Page.Main>\n        <Layouts.Header\n          title={formatMessage({\n            id: 'global.plugins',\n            defaultMessage: 'Plugins',\n          })}\n          subtitle={formatMessage({\n            id: 'app.components.ListPluginsPage.description',\n            defaultMessage: 'List of the installed plugins in the project.',\n          })}\n        />\n        <Layouts.Content>\n          <Table colCount={2} rowCount={data?.plugins?.length ?? 0 + 1}>\n            <Thead>\n              <Tr>\n                <Th>\n                  <Typography variant=\"sigma\" textColor=\"neutral600\">\n                    {formatMessage({\n                      id: 'global.name',\n                      defaultMessage: 'Name',\n                    })}\n                  </Typography>\n                </Th>\n                <Th>\n                  <Typography variant=\"sigma\" textColor=\"neutral600\">\n                    {formatMessage({\n                      id: 'global.description',\n                      defaultMessage: 'description',\n                    })}\n                  </Typography>\n                </Th>\n              </Tr>\n            </Thead>\n            <Tbody>\n              {data?.plugins.map(({ name, displayName, description }) => {\n                return (\n                  <Tr key={name}>\n                    <Td>\n                      <Typography textColor=\"neutral800\" variant=\"omega\" fontWeight=\"bold\">\n                        {formatMessage({\n                          id: `global.plugins.${name}`,\n                          defaultMessage: displayName,\n                        })}\n                      </Typography>\n                    </Td>\n                    <Td>\n                      <Typography textColor=\"neutral800\">\n                        {formatMessage({\n                          id: `global.plugins.${name}.description`,\n                          defaultMessage: description,\n                        })}\n                      </Typography>\n                    </Td>\n                  </Tr>\n                );\n              })}\n            </Tbody>\n          </Table>\n        </Layouts.Content>\n      </Page.Main>\n    </Layouts.Root>\n  );\n};\n\nconst ProtectedInstalledPlugins = () => {\n  const { formatMessage } = useIntl();\n  const permissions = useTypedSelector((state) => state.admin_app.permissions);\n\n  return (\n    <Page.Protect permissions={permissions.marketplace?.main}>\n      <Page.Title>\n        {formatMessage({\n          id: 'global.plugins',\n          defaultMessage: 'Plugins',\n        })}\n      </Page.Title>\n      <InstalledPlugins />\n    </Page.Protect>\n  );\n};\n\nexport { ProtectedInstalledPlugins, InstalledPlugins };\n"],"names":["InstalledPlugins","formatMessage","useIntl","notifyStatus","useNotifyAT","toggleNotification","useNotification","_unstableFormatAPIError","formatAPIError","useAPIErrorHandler","isLoading","data","error","useGetPluginsQuery","React","useEffect","id","defaultMessage","target","type","message","_jsx","Page","Loading","Layouts","Root","_jsxs","Main","Header","title","subtitle","Content","Table","colCount","rowCount","plugins","length","Thead","Tr","Th","Typography","variant","textColor","Tbody","map","name","displayName","description","Td","fontWeight","ProtectedInstalledPlugins","permissions","useTypedSelector","state","admin_app","Protect","marketplace","main","Title"],"mappings":"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"}