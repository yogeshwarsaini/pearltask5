{"version":3,"file":"ActionBoundRoutes.js","sources":["../../../../../../../../../../admin/src/pages/Settings/pages/ApiTokens/EditView/components/ActionBoundRoutes.tsx"],"sourcesContent":["import { Grid, Flex, Typography } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { useApiTokenPermissions } from '../apiTokenPermissions';\n\nimport { BoundRoute } from './BoundRoute';\n\nexport const ActionBoundRoutes = () => {\n  const {\n    value: { selectedAction, routes },\n  } = useApiTokenPermissions();\n  const { formatMessage } = useIntl();\n  const actionSection = selectedAction?.split('.')[0];\n\n  return (\n    <Grid.Item\n      col={5}\n      background=\"neutral150\"\n      paddingTop={6}\n      paddingBottom={6}\n      paddingLeft={7}\n      paddingRight={7}\n      style={{ minHeight: '100%' }}\n      direction=\"column\"\n      alignItems=\"stretch\"\n    >\n      {selectedAction ? (\n        <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\n          {actionSection &&\n            actionSection in routes &&\n            routes[actionSection].map((route) => {\n              return route.config.auth?.scope?.includes(selectedAction) ||\n                route.handler === selectedAction ? (\n                <BoundRoute key={route.handler} route={route} />\n              ) : null;\n            })}\n        </Flex>\n      ) : (\n        <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\n          <Typography variant=\"delta\" tag=\"h3\">\n            {formatMessage({\n              id: 'Settings.apiTokens.createPage.permissions.header.title',\n              defaultMessage: 'Advanced settings',\n            })}\n          </Typography>\n          <Typography tag=\"p\" textColor=\"neutral600\">\n            {formatMessage({\n              id: 'Settings.apiTokens.createPage.permissions.header.hint',\n              defaultMessage:\n                \"Select the application's actions or the plugin's actions and click on the cog icon to display the bound route\",\n            })}\n          </Typography>\n        </Flex>\n      )}\n    </Grid.Item>\n  );\n};\n"],"names":["ActionBoundRoutes","value","selectedAction","routes","useApiTokenPermissions","formatMessage","useIntl","actionSection","split","_jsx","Grid","Item","col","background","paddingTop","paddingBottom","paddingLeft","paddingRight","style","minHeight","direction","alignItems","Flex","gap","map","route","config","auth","scope","includes","handler","BoundRoute","_jsxs","Typography","variant","tag","id","defaultMessage","textColor"],"mappings":";;;;;;;;MAOaA,iBAAoB,GAAA,IAAA;IAC/B,MAAM,EACJC,OAAO,EAAEC,cAAc,EAAEC,MAAM,EAAE,EAClC,GAAGC,0CAAAA,EAAAA;IACJ,MAAM,EAAEC,aAAa,EAAE,GAAGC,iBAAAA,EAAAA;AAC1B,IAAA,MAAMC,aAAgBL,GAAAA,cAAAA,EAAgBM,KAAM,CAAA,GAAA,CAAI,CAAC,CAAE,CAAA;IAEnD,qBACEC,cAAA,CAACC,kBAAKC,IAAI,EAAA;QACRC,GAAK,EAAA,CAAA;QACLC,UAAW,EAAA,YAAA;QACXC,UAAY,EAAA,CAAA;QACZC,aAAe,EAAA,CAAA;QACfC,WAAa,EAAA,CAAA;QACbC,YAAc,EAAA,CAAA;QACdC,KAAO,EAAA;YAAEC,SAAW,EAAA;AAAO,SAAA;QAC3BC,SAAU,EAAA,QAAA;QACVC,UAAW,EAAA,SAAA;AAEVnB,QAAAA,QAAAA,EAAAA,cAAAA,iBACCO,cAACa,CAAAA,iBAAAA,EAAAA;YAAKF,SAAU,EAAA,QAAA;YAASC,UAAW,EAAA,SAAA;YAAUE,GAAK,EAAA,CAAA;sBAChDhB,aACCA,IAAAA,aAAAA,IAAiBJ,UACjBA,MAAM,CAACI,cAAc,CAACiB,GAAG,CAAC,CAACC,KAAAA,GAAAA;AACzB,gBAAA,OAAOA,KAAMC,CAAAA,MAAM,CAACC,IAAI,EAAEC,KAAAA,EAAOC,QAAS3B,CAAAA,cAAAA,CAAAA,IACxCuB,KAAMK,CAAAA,OAAO,KAAK5B,cAAAA,iBAClBO,cAACsB,CAAAA,qBAAAA,EAAAA;oBAA+BN,KAAOA,EAAAA;AAAtBA,iBAAAA,EAAAA,KAAAA,CAAMK,OAAO,CAC5B,GAAA,IAAA;AACN,aAAA;2BAGJE,eAACV,CAAAA,iBAAAA,EAAAA;YAAKF,SAAU,EAAA,QAAA;YAASC,UAAW,EAAA,SAAA;YAAUE,GAAK,EAAA,CAAA;;8BACjDd,cAACwB,CAAAA,uBAAAA,EAAAA;oBAAWC,OAAQ,EAAA,OAAA;oBAAQC,GAAI,EAAA,IAAA;8BAC7B9B,aAAc,CAAA;wBACb+B,EAAI,EAAA,wDAAA;wBACJC,cAAgB,EAAA;AAClB,qBAAA;;8BAEF5B,cAACwB,CAAAA,uBAAAA,EAAAA;oBAAWE,GAAI,EAAA,GAAA;oBAAIG,SAAU,EAAA,YAAA;8BAC3BjC,aAAc,CAAA;wBACb+B,EAAI,EAAA,uDAAA;wBACJC,cACE,EAAA;AACJ,qBAAA;;;;;AAMZ;;;;"}