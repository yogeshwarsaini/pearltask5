{"version":3,"file":"Permissions.mjs","sources":["../../../../../../../../../admin/src/pages/Settings/pages/Roles/components/Permissions.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { Tabs } from '@strapi/design-system';\nimport { produce } from 'immer';\nimport cloneDeep from 'lodash/cloneDeep';\nimport get from 'lodash/get';\nimport has from 'lodash/has';\nimport isEmpty from 'lodash/isEmpty';\nimport set from 'lodash/set';\nimport { useIntl } from 'react-intl';\n\nimport * as PermissonContracts from '../../../../../../../shared/contracts/permissions';\nimport { Permission } from '../../../../../../../shared/contracts/shared';\nimport { isObject } from '../../../../../utils/objects';\nimport {\n  PermissionsDataManagerContextValue,\n  PermissionsDataManagerProvider,\n} from '../hooks/usePermissionsDataManager';\nimport { difference } from '../utils/difference';\nimport { ConditionForm, Form, createDefaultCTForm, createDefaultForm } from '../utils/forms';\nimport { GenericLayout, formatLayout } from '../utils/layouts';\nimport { formatPermissionsForAPI } from '../utils/permissions';\nimport { updateConditionsToFalse } from '../utils/updateConditionsToFalse';\nimport { updateValues } from '../utils/updateValues';\n\nimport { ContentTypes } from './ContentTypes';\nimport { PluginsAndSettingsPermissions } from './PluginsAndSettings';\n\nconst TAB_LABELS = [\n  {\n    labelId: 'app.components.LeftMenuLinkContainer.collectionTypes',\n    defaultMessage: 'Collection Types',\n    id: 'collectionTypes',\n  },\n  {\n    labelId: 'app.components.LeftMenuLinkContainer.singleTypes',\n    id: 'singleTypes',\n    defaultMessage: 'Single Types',\n  },\n  {\n    labelId: 'app.components.LeftMenuLinkContainer.plugins',\n    defaultMessage: 'Plugins',\n    id: 'plugins',\n  },\n  {\n    labelId: 'app.components.LeftMenuLinkContainer.settings',\n    defaultMessage: 'Settings',\n    id: 'settings',\n  },\n] as const;\n\n/* -------------------------------------------------------------------------------------------------\n * Permissions\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface PermissionsAPI {\n  getPermissions: () => {\n    didUpdateConditions: boolean;\n    permissionsToSend: Omit<Permission, 'id' | 'createdAt' | 'updatedAt' | 'actionParameters'>[];\n  };\n  resetForm: () => void;\n  setFormAfterSubmit: () => void;\n}\n\ninterface PermissionsProps {\n  isFormDisabled?: boolean;\n  permissions?: Permission[];\n  layout: PermissonContracts.GetAll.Response['data'];\n}\n\nconst Permissions = React.forwardRef<PermissionsAPI, PermissionsProps>(\n  ({ layout, isFormDisabled, permissions = [] }, api) => {\n    const [{ initialData, layouts, modifiedData }, dispatch] = React.useReducer(\n      reducer,\n      initialState,\n      () => init(layout, permissions)\n    );\n    const { formatMessage } = useIntl();\n\n    React.useImperativeHandle(api, () => {\n      return {\n        getPermissions() {\n          const collectionTypesDiff = difference(\n            initialData.collectionTypes,\n            modifiedData.collectionTypes\n          );\n          const singleTypesDiff = difference(initialData.singleTypes, modifiedData.singleTypes);\n\n          const contentTypesDiff = { ...collectionTypesDiff, ...singleTypesDiff };\n\n          let didUpdateConditions;\n\n          if (isEmpty(contentTypesDiff)) {\n            didUpdateConditions = false;\n          } else {\n            didUpdateConditions = Object.values(contentTypesDiff).some((permission = {}) => {\n              return Object.values(permission).some((permissionValue) =>\n                has(permissionValue, 'conditions')\n              );\n            });\n          }\n\n          return { permissionsToSend: formatPermissionsForAPI(modifiedData), didUpdateConditions };\n        },\n        resetForm() {\n          dispatch({ type: 'RESET_FORM' });\n        },\n        setFormAfterSubmit() {\n          dispatch({ type: 'SET_FORM_AFTER_SUBMIT' });\n        },\n      } satisfies PermissionsAPI;\n    });\n\n    const handleChangeCollectionTypeLeftActionRowCheckbox = (\n      pathToCollectionType: OnChangeCollectionTypeRowLeftCheckboxAction['pathToCollectionType'],\n      propertyName: OnChangeCollectionTypeRowLeftCheckboxAction['propertyName'],\n      rowName: OnChangeCollectionTypeRowLeftCheckboxAction['rowName'],\n      value: OnChangeCollectionTypeRowLeftCheckboxAction['value']\n    ) => {\n      dispatch({\n        type: 'ON_CHANGE_COLLECTION_TYPE_ROW_LEFT_CHECKBOX',\n        pathToCollectionType,\n        propertyName,\n        rowName,\n        value,\n      });\n    };\n\n    const handleChangeCollectionTypeGlobalActionCheckbox = (\n      collectionTypeKind: OnChangeCollectionTypeGlobalActionCheckboxAction['collectionTypeKind'],\n      actionId: OnChangeCollectionTypeGlobalActionCheckboxAction['actionId'],\n      value: OnChangeCollectionTypeGlobalActionCheckboxAction['value']\n    ) => {\n      dispatch({\n        type: 'ON_CHANGE_COLLECTION_TYPE_GLOBAL_ACTION_CHECKBOX',\n        collectionTypeKind,\n        actionId,\n        value,\n      });\n    };\n\n    const handleChangeConditions = (conditions: OnChangeConditionsAction['conditions']) => {\n      dispatch({ type: 'ON_CHANGE_CONDITIONS', conditions });\n    };\n\n    const handleChangeSimpleCheckbox: PermissionsDataManagerContextValue['onChangeSimpleCheckbox'] =\n      React.useCallback(({ target: { name, value } }) => {\n        dispatch({\n          type: 'ON_CHANGE_SIMPLE_CHECKBOX',\n          keys: name,\n          value,\n        });\n      }, []);\n\n    const handleChangeParentCheckbox: PermissionsDataManagerContextValue['onChangeParentCheckbox'] =\n      React.useCallback(({ target: { name, value } }) => {\n        dispatch({\n          type: 'ON_CHANGE_TOGGLE_PARENT_CHECKBOX',\n          keys: name,\n          value,\n        });\n      }, []);\n\n    return (\n      <PermissionsDataManagerProvider\n        availableConditions={layout.conditions}\n        modifiedData={modifiedData}\n        onChangeConditions={handleChangeConditions}\n        onChangeSimpleCheckbox={handleChangeSimpleCheckbox}\n        onChangeParentCheckbox={handleChangeParentCheckbox}\n        onChangeCollectionTypeLeftActionRowCheckbox={\n          handleChangeCollectionTypeLeftActionRowCheckbox\n        }\n        onChangeCollectionTypeGlobalActionCheckbox={handleChangeCollectionTypeGlobalActionCheckbox}\n      >\n        <Tabs.Root defaultValue={TAB_LABELS[0].id}>\n          <Tabs.List\n            aria-label={formatMessage({\n              id: 'Settings.permissions.users.tabs.label',\n              defaultMessage: 'Tabs Permissions',\n            })}\n          >\n            {TAB_LABELS.map((tabLabel) => (\n              <Tabs.Trigger key={tabLabel.id} value={tabLabel.id}>\n                {formatMessage({ id: tabLabel.labelId, defaultMessage: tabLabel.defaultMessage })}\n              </Tabs.Trigger>\n            ))}\n          </Tabs.List>\n          <Tabs.Content value={TAB_LABELS[0].id}>\n            <ContentTypes\n              layout={layouts.collectionTypes}\n              kind=\"collectionTypes\"\n              isFormDisabled={isFormDisabled}\n            />\n          </Tabs.Content>\n          <Tabs.Content value={TAB_LABELS[1].id}>\n            <ContentTypes\n              layout={layouts.singleTypes}\n              kind=\"singleTypes\"\n              isFormDisabled={isFormDisabled}\n            />\n          </Tabs.Content>\n          <Tabs.Content value={TAB_LABELS[2].id}>\n            <PluginsAndSettingsPermissions\n              layout={layouts.plugins}\n              kind=\"plugins\"\n              isFormDisabled={isFormDisabled}\n            />\n          </Tabs.Content>\n          <Tabs.Content value={TAB_LABELS[3].id}>\n            <PluginsAndSettingsPermissions\n              layout={layouts.settings}\n              kind=\"settings\"\n              isFormDisabled={isFormDisabled}\n            />\n          </Tabs.Content>\n        </Tabs.Root>\n      </PermissionsDataManagerProvider>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * reducer\n * -----------------------------------------------------------------------------------------------*/\n\ninterface PermissionForms {\n  collectionTypes: Form;\n  plugins: Record<string, Form>;\n  settings: Record<string, Form>;\n  singleTypes: Form;\n}\n\ninterface State {\n  initialData: PermissionForms;\n  modifiedData: PermissionForms;\n  layouts: {\n    collectionTypes: PermissonContracts.ContentPermission;\n    singleTypes: PermissonContracts.ContentPermission;\n    plugins: GenericLayout<PermissonContracts.PluginPermission>[];\n    settings: GenericLayout<PermissonContracts.SettingPermission>[];\n  };\n}\n\nconst initialState = {\n  initialData: {},\n  modifiedData: {},\n  layouts: {},\n};\n\ninterface OnChangeCollectionTypeGlobalActionCheckboxAction {\n  type: 'ON_CHANGE_COLLECTION_TYPE_GLOBAL_ACTION_CHECKBOX';\n  collectionTypeKind: keyof PermissionForms;\n  actionId: string;\n  value: boolean;\n}\n\ninterface OnChangeCollectionTypeRowLeftCheckboxAction {\n  type: 'ON_CHANGE_COLLECTION_TYPE_ROW_LEFT_CHECKBOX';\n  pathToCollectionType: string;\n  propertyName: string;\n  rowName: string;\n  value: boolean;\n}\n\ninterface OnChangeConditionsAction {\n  type: 'ON_CHANGE_CONDITIONS';\n  conditions: Record<string, ConditionForm>;\n}\n\ninterface OnChangeSimpleCheckboxAction {\n  type: 'ON_CHANGE_SIMPLE_CHECKBOX';\n  keys: string;\n  value: boolean;\n}\n\ninterface OnChangeToggleParentCheckbox {\n  type: 'ON_CHANGE_TOGGLE_PARENT_CHECKBOX';\n  keys: string;\n  value: boolean;\n}\n\ninterface ResetFormAction {\n  type: 'RESET_FORM';\n}\n\ninterface SetFormAfterSubmitAction {\n  type: 'SET_FORM_AFTER_SUBMIT';\n}\n\ntype Action =\n  | OnChangeCollectionTypeGlobalActionCheckboxAction\n  | OnChangeCollectionTypeRowLeftCheckboxAction\n  | OnChangeConditionsAction\n  | OnChangeSimpleCheckboxAction\n  | OnChangeToggleParentCheckbox\n  | ResetFormAction\n  | SetFormAfterSubmitAction;\n\n/* eslint-disable consistent-return */\nconst reducer = (state: State, action: Action) =>\n  produce(state, (draftState) => {\n    switch (action.type) {\n      // This action is called when a checkbox in the <GlobalActions />\n      // changes\n      case 'ON_CHANGE_COLLECTION_TYPE_GLOBAL_ACTION_CHECKBOX': {\n        const { collectionTypeKind, actionId, value } = action;\n        const pathToData = ['modifiedData', collectionTypeKind];\n\n        Object.keys(get(state, pathToData)).forEach((collectionType) => {\n          const collectionTypeActionData = get(\n            state,\n            [...pathToData, collectionType, actionId],\n            undefined\n          );\n\n          if (collectionTypeActionData) {\n            let updatedValues = updateValues(collectionTypeActionData, value);\n\n            // We need to remove the applied conditions\n            // @ts-expect-error – TODO: type better\n            if (!value && updatedValues.conditions) {\n              // @ts-expect-error – TODO: type better\n              const updatedConditions = updateValues(updatedValues.conditions, false);\n\n              updatedValues = { ...updatedValues, conditions: updatedConditions };\n            }\n\n            set(draftState, [...pathToData, collectionType, actionId], updatedValues);\n          }\n        });\n\n        break;\n      }\n      case 'ON_CHANGE_COLLECTION_TYPE_ROW_LEFT_CHECKBOX': {\n        const { pathToCollectionType, propertyName, rowName, value } = action;\n        let nextModifiedDataState = cloneDeep(state.modifiedData);\n        const pathToModifiedDataCollectionType = pathToCollectionType.split('..');\n\n        const objToUpdate = get(nextModifiedDataState, pathToModifiedDataCollectionType, {});\n\n        Object.keys(objToUpdate).forEach((actionId) => {\n          // When a ct has multiple properties (ex: locales, field)\n          // We need to make sure that we add any new property to the modifiedData\n          // object.\n          if (has(objToUpdate[actionId], `properties.${propertyName}`)) {\n            const objValue = get(objToUpdate, [actionId, 'properties', propertyName, rowName]);\n            const pathToDataToSet = [\n              ...pathToModifiedDataCollectionType,\n              actionId,\n              'properties',\n              propertyName,\n              rowName,\n            ];\n\n            if (!isObject(objValue)) {\n              set(nextModifiedDataState, pathToDataToSet, value);\n            } else {\n              const updatedValue = updateValues(objValue, value);\n\n              set(nextModifiedDataState, pathToDataToSet, updatedValue);\n            }\n          }\n        });\n\n        // When we uncheck a row, we need to check if we also need to disable the conditions\n        if (!value) {\n          // @ts-expect-error – TODO: type better\n          nextModifiedDataState = updateConditionsToFalse(nextModifiedDataState);\n        }\n\n        set(draftState, 'modifiedData', nextModifiedDataState);\n\n        break;\n      }\n      case 'ON_CHANGE_CONDITIONS': {\n        Object.entries(action.conditions).forEach((array) => {\n          const [stringPathToData, conditionsToUpdate] = array;\n\n          set(\n            draftState,\n            ['modifiedData', ...stringPathToData.split('..'), 'conditions'],\n            conditionsToUpdate\n          );\n        });\n\n        break;\n      }\n      case 'ON_CHANGE_SIMPLE_CHECKBOX': {\n        let nextModifiedDataState = cloneDeep(state.modifiedData);\n\n        set(nextModifiedDataState, [...action.keys.split('..')], action.value);\n\n        // When we uncheck a single checkbox we need to remove the conditions from the parent\n        if (!action.value) {\n          // @ts-expect-error – TODO: type better\n          nextModifiedDataState = updateConditionsToFalse(nextModifiedDataState);\n        }\n\n        set(draftState, 'modifiedData', nextModifiedDataState);\n\n        break;\n      }\n      /*\n       * Here the idea is to retrieve a specific value of the modifiedObject\n       * then update all the boolean values of the retrieved one\n       * and update the drafState.\n       *\n       * For instance in order to enable create action for all the fields and locales\n       * of the restaurant content type we need to :\n       * 1. Retrieve the modifiedData.collectionTypes.restaurant.create object\n       * 2. Toggle all the end boolean values to the desired one\n       * 3. Update the draftState\n       *\n       * Since the case works well in order to update what we called \"parent\" checkbox. We can\n       * reuse the action when we need to toggle change all the values that depends on this one.\n       * A parent checkbox is a checkbox which value is not a boolean but depends on its children ones, therefore,\n       * a parent checkbox does not have a represented value in the draftState, they are just helpers.\n       *\n       * Given the following data:\n       *\n       * const data = {\n       *  restaurant: {\n       *   create: {\n       *     fields: { name: true },\n       *     locales: { en: false }\n       *   }\n       *  }\n       * }\n       *\n       * The value of the create checkbox for the restaurant will be ƒalse since not all its children have\n       * truthy values and in order to set its value to true when need to have all the values of its children set to true.\n       *\n       * Similarly, we can reuse the logic for the components attributes\n       *\n       */\n      case 'ON_CHANGE_TOGGLE_PARENT_CHECKBOX': {\n        const { keys, value } = action;\n        const pathToValue = [...keys.split('..')];\n        let nextModifiedDataState = cloneDeep(state.modifiedData);\n        const oldValues = get(nextModifiedDataState, pathToValue, {});\n\n        const updatedValues = updateValues(oldValues, value);\n        set(nextModifiedDataState, pathToValue, updatedValues);\n\n        // When we uncheck a parent checkbox we need to remove the associated conditions\n        if (!value) {\n          // @ts-expect-error – TODO: type better\n          nextModifiedDataState = updateConditionsToFalse(nextModifiedDataState);\n        }\n\n        set(draftState, ['modifiedData'], nextModifiedDataState);\n\n        break;\n      }\n      case 'RESET_FORM': {\n        draftState.modifiedData = state.initialData;\n        break;\n      }\n      case 'SET_FORM_AFTER_SUBMIT': {\n        draftState.initialData = state.modifiedData;\n        break;\n      }\n      default:\n        return draftState;\n    }\n  });\n\n/* -------------------------------------------------------------------------------------------------\n * init (reducer)\n * -----------------------------------------------------------------------------------------------*/\n\nconst init = (\n  layout: PermissionsProps['layout'],\n  permissions: PermissionsProps['permissions']\n): State => {\n  const {\n    conditions,\n    sections: { collectionTypes, singleTypes, plugins, settings },\n  } = layout;\n\n  const layouts = {\n    collectionTypes,\n    singleTypes,\n    plugins: formatLayout(plugins, 'plugin'),\n    settings: formatLayout(settings, 'category'),\n  };\n\n  const defaultForm = {\n    collectionTypes: createDefaultCTForm(collectionTypes, conditions, permissions),\n    singleTypes: createDefaultCTForm(singleTypes, conditions, permissions),\n    plugins: createDefaultForm(layouts.plugins, conditions, permissions),\n    settings: createDefaultForm(layouts.settings, conditions, permissions),\n  };\n\n  return {\n    initialData: defaultForm,\n    modifiedData: defaultForm,\n    layouts,\n  };\n};\n\nexport { Permissions };\nexport type {\n  State,\n  OnChangeCollectionTypeRowLeftCheckboxAction,\n  OnChangeConditionsAction,\n  OnChangeCollectionTypeGlobalActionCheckboxAction,\n};\n"],"names":["TAB_LABELS","labelId","defaultMessage","id","Permissions","React","forwardRef","layout","isFormDisabled","permissions","api","initialData","layouts","modifiedData","dispatch","useReducer","reducer","initialState","init","formatMessage","useIntl","useImperativeHandle","getPermissions","collectionTypesDiff","difference","collectionTypes","singleTypesDiff","singleTypes","contentTypesDiff","didUpdateConditions","isEmpty","Object","values","some","permission","permissionValue","has","permissionsToSend","formatPermissionsForAPI","resetForm","type","setFormAfterSubmit","handleChangeCollectionTypeLeftActionRowCheckbox","pathToCollectionType","propertyName","rowName","value","handleChangeCollectionTypeGlobalActionCheckbox","collectionTypeKind","actionId","handleChangeConditions","conditions","handleChangeSimpleCheckbox","useCallback","target","name","keys","handleChangeParentCheckbox","_jsx","PermissionsDataManagerProvider","availableConditions","onChangeConditions","onChangeSimpleCheckbox","onChangeParentCheckbox","onChangeCollectionTypeLeftActionRowCheckbox","onChangeCollectionTypeGlobalActionCheckbox","_jsxs","Tabs","Root","defaultValue","List","aria-label","map","tabLabel","Trigger","Content","ContentTypes","kind","PluginsAndSettingsPermissions","plugins","settings","state","action","produce","draftState","pathToData","get","forEach","collectionType","collectionTypeActionData","undefined","updatedValues","updateValues","updatedConditions","set","nextModifiedDataState","cloneDeep","pathToModifiedDataCollectionType","split","objToUpdate","objValue","pathToDataToSet","isObject","updatedValue","updateConditionsToFalse","entries","array","stringPathToData","conditionsToUpdate","pathToValue","oldValues","sections","formatLayout","defaultForm","createDefaultCTForm","createDefaultForm"],"mappings":"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"}