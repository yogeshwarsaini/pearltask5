{"version":3,"file":"CollapsePropertyMatrix.mjs","sources":["../../../../../../../../../admin/src/pages/Settings/pages/Roles/components/CollapsePropertyMatrix.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {\n  Checkbox,\n  Box,\n  BoxComponent,\n  Flex,\n  FlexComponent,\n  Typography,\n  TypographyComponent,\n} from '@strapi/design-system';\nimport { CaretDown } from '@strapi/icons';\nimport get from 'lodash/get';\nimport { useIntl } from 'react-intl';\nimport { styled, DefaultTheme, css } from 'styled-components';\n\nimport { Action, SubjectProperty } from '../../../../../../../shared/contracts/permissions';\nimport {\n  PermissionsDataManagerContextValue,\n  usePermissionsDataManager,\n} from '../hooks/usePermissionsDataManager';\nimport { cellWidth, firstRowWidth, rowHeight } from '../utils/constants';\nimport { getCheckboxState } from '../utils/getCheckboxState';\n\nimport { CollapseLabel } from './CollapseLabel';\nimport { HiddenAction } from './HiddenAction';\nimport { RequiredSign } from './RequiredSign';\nimport { RowLabelWithCheckbox, RowLabelWithCheckboxProps } from './RowLabelWithCheckbox';\n\n/* -------------------------------------------------------------------------------------------------\n * CollapsePropertyMatrix\n * -----------------------------------------------------------------------------------------------*/\n\ninterface CollapsePropertyMatrixProps\n  extends Pick<\n    ActionRowProps,\n    'childrenForm' | 'isFormDisabled' | 'label' | 'pathToData' | 'propertyName'\n  > {\n  availableActions?: Array<Action & { isDisplayed: boolean }>;\n}\n\ninterface PropertyAction {\n  label: string;\n  actionId: string;\n  isActionRelatedToCurrentProperty: boolean;\n}\n\nconst CollapsePropertyMatrix = ({\n  availableActions = [],\n  childrenForm = [],\n  isFormDisabled,\n  label,\n  pathToData,\n  propertyName,\n}: CollapsePropertyMatrixProps) => {\n  const propertyActions = React.useMemo(\n    () =>\n      availableActions.map((action) => {\n        const isActionRelatedToCurrentProperty =\n          Array.isArray(action.applyToProperties) &&\n          action.applyToProperties.indexOf(propertyName) !== -1 &&\n          action.isDisplayed;\n\n        return { label: action.label, actionId: action.actionId, isActionRelatedToCurrentProperty };\n      }) satisfies PropertyAction[],\n    [availableActions, propertyName]\n  );\n\n  return (\n    <Flex display=\"inline-flex\" direction=\"column\" alignItems=\"stretch\" minWidth={0}>\n      <Header label={label} headers={propertyActions} />\n      <Box>\n        {childrenForm.map(({ children: childrenForm, label, value, required }, i) => (\n          <ActionRow\n            childrenForm={childrenForm}\n            key={value}\n            label={label}\n            isFormDisabled={isFormDisabled}\n            name={value}\n            required={required}\n            propertyActions={propertyActions}\n            pathToData={pathToData}\n            propertyName={propertyName}\n            isOdd={i % 2 === 0}\n          />\n        ))}\n      </Box>\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ActionRow\n * -----------------------------------------------------------------------------------------------*/\n\ninterface ActionRowProps\n  extends Pick<\n    SubActionRowProps,\n    'childrenForm' | 'isFormDisabled' | 'propertyActions' | 'propertyName'\n  > {\n  label: string;\n  name: string;\n  required?: boolean;\n  pathToData: string;\n  isOdd?: boolean;\n}\n\nconst ActionRow = ({\n  childrenForm = [],\n  label,\n  isFormDisabled = false,\n  name,\n  required = false,\n  pathToData,\n  propertyActions,\n  propertyName,\n  isOdd = false,\n}: ActionRowProps) => {\n  const { formatMessage } = useIntl();\n  const [rowToOpen, setRowToOpen] = React.useState<string | null>(null);\n  const {\n    modifiedData,\n    onChangeCollectionTypeLeftActionRowCheckbox,\n    onChangeParentCheckbox,\n    onChangeSimpleCheckbox,\n  } = usePermissionsDataManager();\n\n  const isActive = rowToOpen === name;\n\n  const recursiveChildren = React.useMemo(() => {\n    if (!Array.isArray(childrenForm)) {\n      return [];\n    }\n\n    return childrenForm;\n  }, [childrenForm]);\n\n  const isCollapsable = recursiveChildren.length > 0;\n\n  const handleClick = React.useCallback(() => {\n    if (isCollapsable) {\n      setRowToOpen((prev) => {\n        if (prev === name) {\n          return null;\n        }\n\n        return name;\n      });\n    }\n  }, [isCollapsable, name]);\n\n  const handleChangeLeftRowCheckbox: RowLabelWithCheckboxProps['onChange'] = ({\n    target: { value },\n  }) => {\n    onChangeCollectionTypeLeftActionRowCheckbox(pathToData, propertyName, name, value);\n  };\n\n  const { hasAllActionsSelected, hasSomeActionsSelected } = React.useMemo(() => {\n    return getRowLabelCheckboxState(propertyActions, modifiedData, pathToData, propertyName, name);\n  }, [propertyActions, modifiedData, pathToData, propertyName, name]);\n\n  return (\n    <>\n      <Wrapper\n        alignItems=\"center\"\n        $isCollapsable={isCollapsable}\n        $isActive={isActive}\n        background={isOdd ? 'neutral100' : 'neutral0'}\n      >\n        <Flex>\n          <RowLabelWithCheckbox\n            onChange={handleChangeLeftRowCheckbox}\n            onClick={handleClick}\n            isCollapsable={isCollapsable}\n            isFormDisabled={isFormDisabled}\n            label={label}\n            someChecked={hasSomeActionsSelected}\n            value={hasAllActionsSelected}\n            isActive={isActive}\n          >\n            {required && <RequiredSign />}\n            <CarretIcon $isActive={isActive} />\n          </RowLabelWithCheckbox>\n          <Flex>\n            {propertyActions.map(({ label, isActionRelatedToCurrentProperty, actionId }) => {\n              if (!isActionRelatedToCurrentProperty) {\n                return <HiddenAction key={label} />;\n              }\n\n              const checkboxName = [\n                ...pathToData.split('..'),\n                actionId,\n                'properties',\n                propertyName,\n                name,\n              ];\n\n              if (!isCollapsable) {\n                const checkboxValue = get(modifiedData, checkboxName, false);\n\n                return (\n                  <Flex\n                    key={actionId}\n                    width={cellWidth}\n                    position=\"relative\"\n                    justifyContent=\"center\"\n                    alignItems=\"center\"\n                  >\n                    <Checkbox\n                      disabled={isFormDisabled}\n                      name={checkboxName.join('..')}\n                      aria-label={formatMessage(\n                        {\n                          id: `Settings.permissions.select-by-permission`,\n                          defaultMessage: 'Select {label} permission',\n                        },\n                        { label: `${name} ${label}` }\n                      )}\n                      onCheckedChange={(value) => {\n                        onChangeSimpleCheckbox({\n                          target: {\n                            name: checkboxName.join('..'),\n                            value: !!value,\n                          },\n                        });\n                      }}\n                      checked={checkboxValue}\n                    />\n                  </Flex>\n                );\n              }\n\n              const data = get(modifiedData, checkboxName, {});\n\n              const { hasAllActionsSelected, hasSomeActionsSelected } = getCheckboxState(data);\n\n              return (\n                <Flex\n                  key={label}\n                  width={cellWidth}\n                  position=\"relative\"\n                  justifyContent=\"center\"\n                  alignItems=\"center\"\n                >\n                  <Checkbox\n                    disabled={isFormDisabled}\n                    name={checkboxName.join('..')}\n                    onCheckedChange={(value) => {\n                      onChangeParentCheckbox({\n                        target: {\n                          name: checkboxName.join('..'),\n                          value: !!value,\n                        },\n                      });\n                    }}\n                    aria-label={formatMessage(\n                      {\n                        id: `Settings.permissions.select-by-permission`,\n                        defaultMessage: 'Select {label} permission',\n                      },\n                      { label: `${name} ${label}` }\n                    )}\n                    checked={hasSomeActionsSelected ? 'indeterminate' : hasAllActionsSelected}\n                  />\n                </Flex>\n              );\n            })}\n          </Flex>\n        </Flex>\n      </Wrapper>\n      {isActive && (\n        <SubActionRow\n          childrenForm={recursiveChildren}\n          isFormDisabled={isFormDisabled}\n          parentName={name}\n          pathToDataFromActionRow={pathToData}\n          propertyName={propertyName}\n          propertyActions={propertyActions}\n          recursiveLevel={0}\n        />\n      )}\n    </>\n  );\n};\n\n/**\n *\n * Returns the state of the left checkbox of a ActionRow main checkbox\n */\nconst getRowLabelCheckboxState = (\n  propertyActions: PropertyAction[],\n  modifiedData: PermissionsDataManagerContextValue['modifiedData'],\n  pathToContentType: string,\n  propertyToCheck: string,\n  targetKey: string\n) => {\n  const actionIds = propertyActions.reduce<string[]>((acc, current) => {\n    if (current.isActionRelatedToCurrentProperty) {\n      acc.push(current.actionId);\n    }\n\n    return acc;\n  }, []);\n\n  const data = actionIds.reduce<Record<string, boolean>>((acc, current) => {\n    const mainData = get(\n      modifiedData,\n      [...pathToContentType.split('..'), current, 'properties', propertyToCheck, targetKey],\n      false\n    );\n\n    acc[current] = mainData;\n\n    return acc;\n  }, {});\n\n  return getCheckboxState(data);\n};\n\nconst Wrapper = styled<FlexComponent>(Flex)<{ $isCollapsable?: boolean; $isActive?: boolean }>`\n  height: ${rowHeight};\n  flex: 1;\n\n  &:hover {\n    ${({ $isCollapsable, theme }) => $isCollapsable && activeStyle(theme)}\n  }\n\n  ${({ $isCollapsable }) =>\n    $isCollapsable &&\n    `\n      ${CarretIcon} {\n        display: flex;\n      }\n  `}\n  ${({ $isActive, theme }) => $isActive && activeStyle(theme)};\n`;\n\nconst CarretIcon = styled(CaretDown)<{ $isActive: boolean }>`\n  display: none;\n\n  svg {\n    width: 1.4rem;\n  }\n\n  path {\n    fill: ${({ theme }) => theme.colors.neutral200};\n  }\n\n  transform: rotate(${({ $isActive }) => ($isActive ? '180' : '0')}deg);\n  margin-left: ${({ theme }) => theme.spaces[2]};\n`;\n\n/* -------------------------------------------------------------------------------------------------\n * SubActionRow\n * -----------------------------------------------------------------------------------------------*/\n\ninterface SubActionRowProps {\n  childrenForm: SubjectProperty['children'];\n  isFormDisabled?: boolean;\n  parentName: string;\n  pathToDataFromActionRow: string;\n  propertyActions: PropertyAction[];\n  propertyName: string;\n  recursiveLevel: number;\n}\n\nconst SubActionRow = ({\n  childrenForm = [],\n  isFormDisabled,\n  recursiveLevel,\n  pathToDataFromActionRow,\n  propertyActions,\n  parentName,\n  propertyName,\n}: SubActionRowProps) => {\n  const { formatMessage } = useIntl();\n  const { modifiedData, onChangeParentCheckbox, onChangeSimpleCheckbox } =\n    usePermissionsDataManager();\n  const [rowToOpen, setRowToOpen] = React.useState<string | null>(null);\n\n  const handleClickToggleSubLevel = (name: string) => {\n    setRowToOpen((prev) => {\n      if (prev === name) {\n        return null;\n      }\n\n      return name;\n    });\n  };\n\n  const displayedRecursiveChildren = React.useMemo(() => {\n    if (!rowToOpen) {\n      return null;\n    }\n\n    return childrenForm.find(({ value }) => value === rowToOpen);\n  }, [rowToOpen, childrenForm]);\n\n  return (\n    <Box paddingLeft={`3.2rem`}>\n      <TopTimeline />\n      {childrenForm.map(({ label, value, required, children: subChildrenForm }, index) => {\n        const isVisible = index + 1 < childrenForm.length;\n        const isArrayType = Array.isArray(subChildrenForm);\n        const isActive = rowToOpen === value;\n\n        return (\n          <LeftBorderTimeline key={value} $isVisible={isVisible}>\n            <Flex height={rowHeight}>\n              <StyledBox>\n                <Svg\n                  width=\"20\"\n                  height=\"23\"\n                  viewBox=\"0 0 20 23\"\n                  fill=\"none\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  $color=\"primary200\"\n                >\n                  <path\n                    fillRule=\"evenodd\"\n                    clipRule=\"evenodd\"\n                    d=\"M7.02477 14.7513C8.65865 17.0594 11.6046 18.6059 17.5596 18.8856C18.6836 18.9384 19.5976 19.8435 19.5976 20.9688V20.9688C19.5976 22.0941 18.6841 23.0125 17.5599 22.9643C10.9409 22.6805 6.454 20.9387 3.75496 17.1258C0.937988 13.1464 0.486328 7.39309 0.486328 0.593262H4.50974C4.50974 7.54693 5.06394 11.9813 7.02477 14.7513Z\"\n                    fill=\"#D9D8FF\"\n                  />\n                </Svg>\n              </StyledBox>\n              <Flex style={{ flex: 1 }}>\n                <RowStyle $level={recursiveLevel} $isActive={isActive} $isCollapsable={isArrayType}>\n                  <CollapseLabel\n                    alignItems=\"center\"\n                    $isCollapsable={isArrayType}\n                    {...(isArrayType && {\n                      onClick: () => handleClickToggleSubLevel(value),\n                      'aria-expanded': isActive,\n                      onKeyDown: ({ key }: React.KeyboardEvent<HTMLDivElement>) =>\n                        (key === 'Enter' || key === ' ') && handleClickToggleSubLevel(value),\n                      tabIndex: 0,\n                      role: 'button',\n                    })}\n                    title={label}\n                  >\n                    <RowLabel ellipsis>{label}</RowLabel>\n                    {required && <RequiredSign />}\n                    <CarretIcon $isActive={isActive} />\n                  </CollapseLabel>\n                </RowStyle>\n                <Flex style={{ flex: 1 }}>\n                  {propertyActions.map(\n                    ({ actionId, label: propertyLabel, isActionRelatedToCurrentProperty }) => {\n                      if (!isActionRelatedToCurrentProperty) {\n                        return <HiddenAction key={actionId} />;\n                      }\n                      /*\n                       * Usually we use a 'dot' in order to know the key path of an object for which we want to change the value.\n                       * Since an action and a subject are both separated by '.' or '::' we chose to use the '..' separators\n                       */\n                      const checkboxName = [\n                        ...pathToDataFromActionRow.split('..'),\n                        actionId,\n                        'properties',\n                        propertyName,\n                        ...parentName.split('..'),\n                        value,\n                      ];\n\n                      const checkboxValue = get(modifiedData, checkboxName, false);\n\n                      if (!subChildrenForm) {\n                        return (\n                          <Flex\n                            key={propertyLabel}\n                            position=\"relative\"\n                            width={cellWidth}\n                            justifyContent=\"center\"\n                            alignItems=\"center\"\n                          >\n                            <Checkbox\n                              disabled={isFormDisabled}\n                              name={checkboxName.join('..')}\n                              aria-label={formatMessage(\n                                {\n                                  id: `Settings.permissions.select-by-permission`,\n                                  defaultMessage: 'Select {label} permission',\n                                },\n                                { label: `${parentName} ${label} ${propertyLabel}` }\n                              )}\n                              onCheckedChange={(value) => {\n                                onChangeSimpleCheckbox({\n                                  target: {\n                                    name: checkboxName.join('..'),\n                                    value: !!value,\n                                  },\n                                });\n                              }}\n                              checked={checkboxValue}\n                            />\n                          </Flex>\n                        );\n                      }\n\n                      const { hasAllActionsSelected, hasSomeActionsSelected } =\n                        getCheckboxState(checkboxValue);\n\n                      return (\n                        <Flex\n                          key={propertyLabel}\n                          position=\"relative\"\n                          width={cellWidth}\n                          justifyContent=\"center\"\n                          alignItems=\"center\"\n                        >\n                          <Checkbox\n                            key={propertyLabel}\n                            disabled={isFormDisabled}\n                            name={checkboxName.join('..')}\n                            aria-label={formatMessage(\n                              {\n                                id: `Settings.permissions.select-by-permission`,\n                                defaultMessage: 'Select {label} permission',\n                              },\n                              { label: `${parentName} ${label} ${propertyLabel}` }\n                            )}\n                            // Keep same signature as packages/core/admin/admin/src/components/Roles/Permissions/index.js l.91\n                            onCheckedChange={(value) => {\n                              onChangeParentCheckbox({\n                                target: {\n                                  name: checkboxName.join('..'),\n                                  value: !!value,\n                                },\n                              });\n                            }}\n                            checked={\n                              hasSomeActionsSelected ? 'indeterminate' : hasAllActionsSelected\n                            }\n                          />\n                        </Flex>\n                      );\n                    }\n                  )}\n                </Flex>\n              </Flex>\n            </Flex>\n            {displayedRecursiveChildren && isActive && (\n              <Box paddingBottom={2}>\n                <SubActionRow\n                  isFormDisabled={isFormDisabled}\n                  parentName={`${parentName}..${value}`}\n                  pathToDataFromActionRow={pathToDataFromActionRow}\n                  propertyActions={propertyActions}\n                  propertyName={propertyName}\n                  recursiveLevel={recursiveLevel + 1}\n                  childrenForm={displayedRecursiveChildren.children}\n                />\n              </Box>\n            )}\n          </LeftBorderTimeline>\n        );\n      })}\n    </Box>\n  );\n};\n\nconst LeftBorderTimeline = styled<BoxComponent>(Box)<{ $isVisible?: boolean }>`\n  border-left: ${({ $isVisible, theme }) =>\n    $isVisible ? `4px solid ${theme.colors.primary200}` : '4px solid transparent'};\n`;\n\nconst RowStyle = styled<FlexComponent>(Flex)<{\n  $level: number;\n  $isCollapsable?: boolean;\n  $isActive?: boolean;\n}>`\n  padding-left: ${({ theme }) => theme.spaces[4]};\n  width: ${({ $level }) => 145 - $level * 36}px;\n\n  &:hover {\n    ${({ $isCollapsable, theme }) => $isCollapsable && activeStyle(theme)}\n  }\n\n  ${({ $isCollapsable }) =>\n    $isCollapsable &&\n    `\n      ${CarretIcon} {\n        display: flex;\n      }\n  `}\n  ${({ $isActive, theme }) => $isActive && activeStyle(theme)};\n`;\n\nconst RowLabel = styled<TypographyComponent>(Typography)``;\n\nconst TopTimeline = styled.div`\n  padding-top: ${({ theme }) => theme.spaces[2]};\n  margin-top: ${({ theme }) => theme.spaces[2]};\n  width: 0.4rem;\n  background-color: ${({ theme }) => theme.colors.primary200};\n  border-top-left-radius: 2px;\n  border-top-right-radius: 2px;\n`;\n\nconst StyledBox = styled<BoxComponent>(Box)`\n  transform: translate(-4px, -12px);\n\n  &:before {\n    content: '';\n    width: 0.4rem;\n    height: 1.2rem;\n    background: ${({ theme }) => theme.colors.primary200};\n    display: block;\n  }\n`;\n\nconst Svg = styled.svg<{ $color: keyof DefaultTheme['colors'] }>`\n  position: relative;\n  flex-shrink: 0;\n  transform: translate(-0.5px, -1px);\n\n  * {\n    fill: ${({ theme, $color }) => theme.colors[$color]};\n  }\n`;\n\n/* -------------------------------------------------------------------------------------------------\n * Header\n * -----------------------------------------------------------------------------------------------*/\n\ninterface HeaderProps {\n  headers?: PropertyAction[];\n  label: string;\n}\n\nconst Header = ({ headers = [], label }: HeaderProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <Flex>\n      <Flex width={firstRowWidth} height={rowHeight} shrink={0} alignItems=\"center\" paddingLeft={6}>\n        <Typography variant=\"sigma\" textColor=\"neutral500\">\n          {formatMessage(\n            {\n              id: 'Settings.roles.form.permission.property-label',\n              defaultMessage: '{label} permissions',\n            },\n            { label }\n          )}\n        </Typography>\n      </Flex>\n      {headers.map((header) => {\n        if (!header.isActionRelatedToCurrentProperty) {\n          return <Flex width={cellWidth} shrink={0} key={header.label} />;\n        }\n\n        return (\n          <Flex width={cellWidth} shrink={0} justifyContent=\"center\" key={header.label}>\n            <Typography variant=\"sigma\" textColor=\"neutral500\">\n              {formatMessage({\n                id: `Settings.roles.form.permissions.${header.label.toLowerCase()}`,\n                defaultMessage: header.label,\n              })}\n            </Typography>\n          </Flex>\n        );\n      })}\n    </Flex>\n  );\n};\n\nconst activeStyle = (theme: DefaultTheme) => css`\n  color: ${theme.colors.primary600};\n  font-weight: ${theme.fontWeights.bold};\n\n  ${CarretIcon} {\n    path {\n      fill: ${theme.colors.primary600};\n    }\n  }\n`;\n\nexport { CollapsePropertyMatrix };\n"],"names":["CollapsePropertyMatrix","availableActions","childrenForm","isFormDisabled","label","pathToData","propertyName","propertyActions","React","useMemo","map","action","isActionRelatedToCurrentProperty","Array","isArray","applyToProperties","indexOf","isDisplayed","actionId","_jsxs","Flex","display","direction","alignItems","minWidth","_jsx","Header","headers","Box","children","value","required","i","ActionRow","name","isOdd","formatMessage","useIntl","rowToOpen","setRowToOpen","useState","modifiedData","onChangeCollectionTypeLeftActionRowCheckbox","onChangeParentCheckbox","onChangeSimpleCheckbox","usePermissionsDataManager","isActive","recursiveChildren","isCollapsable","length","handleClick","useCallback","prev","handleChangeLeftRowCheckbox","target","hasAllActionsSelected","hasSomeActionsSelected","getRowLabelCheckboxState","_Fragment","Wrapper","$isCollapsable","$isActive","background","RowLabelWithCheckbox","onChange","onClick","someChecked","RequiredSign","CarretIcon","HiddenAction","checkboxName","split","checkboxValue","get","width","cellWidth","position","justifyContent","Checkbox","disabled","join","aria-label","id","defaultMessage","onCheckedChange","checked","data","getCheckboxState","SubActionRow","parentName","pathToDataFromActionRow","recursiveLevel","pathToContentType","propertyToCheck","targetKey","actionIds","reduce","acc","current","push","mainData","styled","rowHeight","theme","activeStyle","CaretDown","colors","neutral200","spaces","handleClickToggleSubLevel","displayedRecursiveChildren","find","paddingLeft","TopTimeline","subChildrenForm","index","isVisible","isArrayType","LeftBorderTimeline","$isVisible","height","StyledBox","Svg","viewBox","fill","xmlns","$color","path","fillRule","clipRule","d","style","flex","RowStyle","$level","CollapseLabel","onKeyDown","key","tabIndex","role","title","RowLabel","ellipsis","propertyLabel","paddingBottom","primary200","Typography","div","svg","firstRowWidth","shrink","variant","textColor","header","toLowerCase","css","primary600","fontWeights","bold"],"mappings":"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"}