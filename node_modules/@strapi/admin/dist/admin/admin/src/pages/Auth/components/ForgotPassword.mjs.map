{"version":3,"file":"ForgotPassword.mjs","sources":["../../../../../../../admin/src/pages/Auth/components/ForgotPassword.tsx"],"sourcesContent":["import { Box, Button, Flex, Main, Typography, Link } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\nimport { NavLink, useNavigate } from 'react-router-dom';\nimport * as yup from 'yup';\n\nimport { Form } from '../../../components/Form';\nimport { InputRenderer } from '../../../components/FormInputs/Renderer';\nimport { Logo } from '../../../components/UnauthenticatedLogo';\nimport { useAPIErrorHandler } from '../../../hooks/useAPIErrorHandler';\nimport {\n  Column,\n  LayoutContent,\n  UnauthenticatedLayout,\n} from '../../../layouts/UnauthenticatedLayout';\nimport { useForgotPasswordMutation } from '../../../services/auth';\nimport { isBaseQueryError } from '../../../utils/baseQuery';\nimport { translatedErrors } from '../../../utils/translatedErrors';\n\nimport type { ForgotPassword } from '../../../../../shared/contracts/authentication';\n\nconst ForgotPassword = () => {\n  const navigate = useNavigate();\n  const { formatMessage } = useIntl();\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\n\n  const [forgotPassword, { error }] = useForgotPasswordMutation();\n\n  return (\n    <UnauthenticatedLayout>\n      <Main>\n        <LayoutContent>\n          <Column>\n            <Logo />\n            <Box paddingTop={6} paddingBottom={7}>\n              <Typography tag=\"h1\" variant=\"alpha\">\n                {formatMessage({\n                  id: 'Auth.form.button.password-recovery',\n                  defaultMessage: 'Password Recovery',\n                })}\n              </Typography>\n            </Box>\n            {error ? (\n              <Typography id=\"global-form-error\" role=\"alert\" tabIndex={-1} textColor=\"danger600\">\n                {isBaseQueryError(error)\n                  ? formatAPIError(error)\n                  : formatMessage({\n                      id: 'notification.error',\n                      defaultMessage: 'An error occurred',\n                    })}\n              </Typography>\n            ) : null}\n          </Column>\n          <Form\n            method=\"POST\"\n            initialValues={{\n              email: '',\n            }}\n            onSubmit={async (body) => {\n              const res = await forgotPassword(body);\n\n              if (!('error' in res)) {\n                navigate('/auth/forgot-password-success');\n              }\n            }}\n            validationSchema={yup.object().shape({\n              email: yup\n                .string()\n                .email(translatedErrors.email)\n                .required({\n                  id: translatedErrors.required.id,\n                  defaultMessage: 'This field is required.',\n                })\n                .nullable(),\n            })}\n          >\n            <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\n              {[\n                {\n                  label: formatMessage({ id: 'Auth.form.email.label', defaultMessage: 'Email' }),\n                  name: 'email',\n                  placeholder: formatMessage({\n                    id: 'Auth.form.email.placeholder',\n                    defaultMessage: 'kai@doe.com',\n                  }),\n                  required: true,\n                  type: 'string' as const,\n                },\n              ].map((field) => (\n                <InputRenderer key={field.name} {...field} />\n              ))}\n              <Button type=\"submit\" fullWidth>\n                {formatMessage({\n                  id: 'Auth.form.button.forgot-password',\n                  defaultMessage: 'Send Email',\n                })}\n              </Button>\n            </Flex>\n          </Form>\n        </LayoutContent>\n        <Flex justifyContent=\"center\">\n          <Box paddingTop={4}>\n            <Link tag={NavLink} to=\"/auth/login\">\n              {formatMessage({ id: 'Auth.link.ready', defaultMessage: 'Ready to sign in?' })}\n            </Link>\n          </Box>\n        </Flex>\n      </Main>\n    </UnauthenticatedLayout>\n  );\n};\n\nexport { ForgotPassword };\n"],"names":["ForgotPassword","navigate","useNavigate","formatMessage","useIntl","_unstableFormatAPIError","formatAPIError","useAPIErrorHandler","forgotPassword","error","useForgotPasswordMutation","_jsx","UnauthenticatedLayout","_jsxs","Main","LayoutContent","Column","Logo","Box","paddingTop","paddingBottom","Typography","tag","variant","id","defaultMessage","role","tabIndex","textColor","isBaseQueryError","Form","method","initialValues","email","onSubmit","body","res","validationSchema","yup","object","shape","string","translatedErrors","required","nullable","Flex","direction","alignItems","gap","label","name","placeholder","type","map","field","InputRenderer","Button","fullWidth","justifyContent","Link","NavLink","to"],"mappings":"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"}