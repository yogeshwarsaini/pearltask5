{"version":3,"file":"ConditionsModal.js","sources":["../../../../../../../../../admin/src/pages/Settings/pages/Roles/components/ConditionsModal.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {\n  Box,\n  Button,\n  Flex,\n  Modal,\n  MultiSelectNested,\n  MultiSelectNestedProps,\n  Typography,\n  Breadcrumbs,\n  Crumb,\n} from '@strapi/design-system';\nimport { produce } from 'immer';\nimport get from 'lodash/get';\nimport groupBy from 'lodash/groupBy';\nimport upperFirst from 'lodash/upperFirst';\nimport { useIntl } from 'react-intl';\n\nimport { capitalise } from '../../../../../utils/strings';\nimport {\n  PermissionsDataManagerContextValue,\n  usePermissionsDataManager,\n} from '../hooks/usePermissionsDataManager';\n\nimport type { HiddenCheckboxAction, VisibleCheckboxAction } from './ContentTypeCollapses';\nimport type { ConditionForm } from '../utils/forms';\n\n/* -------------------------------------------------------------------------------------------------\n * ConditionsModal\n * -----------------------------------------------------------------------------------------------*/\n\ninterface ConditionAction extends Pick<ActionRowProps, 'label'> {\n  actionId: string;\n  isDisplayed: boolean;\n  hasSomeActionsSelected?: boolean;\n  hasAllActionsSelected?: boolean;\n  pathToConditionsObject: string[];\n}\n\ninterface ConditionsModalProps extends Pick<ActionRowProps, 'isFormDisabled'> {\n  actions?: Array<ConditionAction | HiddenCheckboxAction | VisibleCheckboxAction>;\n  headerBreadCrumbs?: string[];\n  onClose?: () => void;\n}\n\nconst ConditionsModal = ({\n  actions = [],\n  headerBreadCrumbs = [],\n  isFormDisabled,\n  onClose,\n}: ConditionsModalProps) => {\n  const { formatMessage } = useIntl();\n  const { availableConditions, modifiedData, onChangeConditions } = usePermissionsDataManager();\n\n  const arrayOfOptionsGroupedByCategory = React.useMemo(() => {\n    return Object.entries(groupBy(availableConditions, 'category'));\n  }, [availableConditions]);\n\n  const actionsToDisplay = actions.filter<VisibleCheckboxAction | ConditionAction>(\n    // @ts-expect-error â€“ TODO: fix this type issue\n    ({ isDisplayed, hasSomeActionsSelected, hasAllActionsSelected }) =>\n      isDisplayed && Boolean(hasSomeActionsSelected || hasAllActionsSelected)\n  );\n\n  const [state, setState] = React.useState(\n    createDefaultConditionsForm(actionsToDisplay, modifiedData, arrayOfOptionsGroupedByCategory)\n  );\n\n  const handleChange = (name: string, values: ConditionForm) => {\n    setState(\n      produce((draft) => {\n        if (!draft[name]) {\n          draft[name] = {};\n        }\n\n        if (!draft[name].default) {\n          draft[name].default = {};\n        }\n\n        draft[name].default = values;\n      })\n    );\n  };\n\n  const handleSubmit = () => {\n    const conditionsWithoutCategory = Object.entries(state).reduce<Record<string, ConditionForm>>(\n      (acc, current) => {\n        const [key, value] = current;\n\n        const merged = Object.values(value).reduce((acc1, current1) => {\n          return { ...acc1, ...current1 };\n        }, {});\n\n        acc[key] = merged;\n\n        return acc;\n      },\n      {}\n    );\n\n    onChangeConditions(conditionsWithoutCategory);\n    onClose && onClose();\n  };\n\n  const onCloseModal = () => {\n    setState(\n      createDefaultConditionsForm(actionsToDisplay, modifiedData, arrayOfOptionsGroupedByCategory)\n    );\n\n    onClose && onClose();\n  };\n\n  return (\n    <Modal.Content>\n      <Modal.Header>\n        <Breadcrumbs id=\"condition-modal-breadcrumbs\" label={headerBreadCrumbs.join(', ')}>\n          {headerBreadCrumbs.map((label, index, arr) => (\n            <Crumb isCurrent={index === arr.length - 1} key={label}>\n              {upperFirst(\n                formatMessage({\n                  id: label,\n                  defaultMessage: label,\n                })\n              )}\n            </Crumb>\n          ))}\n        </Breadcrumbs>\n      </Modal.Header>\n      <Modal.Body>\n        {actionsToDisplay.length === 0 && (\n          <Typography>\n            {formatMessage({\n              id: 'Settings.permissions.conditions.no-actions',\n              defaultMessage:\n                'You first need to select actions (create, read, update, ...) before defining conditions on them.',\n            })}\n          </Typography>\n        )}\n        <ul>\n          {actionsToDisplay.map(({ actionId, label, pathToConditionsObject }, index) => {\n            const name = pathToConditionsObject.join('..');\n\n            return (\n              <ActionRow\n                key={actionId}\n                arrayOfOptionsGroupedByCategory={arrayOfOptionsGroupedByCategory}\n                label={label}\n                isFormDisabled={isFormDisabled}\n                isGrey={index % 2 === 0}\n                name={name}\n                onChange={handleChange}\n                value={get(state, name, {})}\n              />\n            );\n          })}\n        </ul>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"tertiary\" onClick={() => onCloseModal()}>\n          {formatMessage({ id: 'app.components.Button.cancel', defaultMessage: 'Cancel' })}\n        </Button>\n        <Button onClick={handleSubmit}>\n          {formatMessage({\n            id: 'Settings.permissions.conditions.apply',\n            defaultMessage: 'Apply',\n          })}\n        </Button>\n      </Modal.Footer>\n    </Modal.Content>\n  );\n};\n\nconst createDefaultConditionsForm = (\n  actionsToDisplay: Array<ConditionAction | VisibleCheckboxAction>,\n  modifiedData: PermissionsDataManagerContextValue['modifiedData'],\n  arrayOfOptionsGroupedByCategory: ActionRowProps['arrayOfOptionsGroupedByCategory']\n) => {\n  return actionsToDisplay.reduce<Record<string, Record<string, ConditionForm>>>((acc, current) => {\n    const valueFromModifiedData: ConditionForm = get(\n      modifiedData,\n      [...current.pathToConditionsObject, 'conditions'],\n      {}\n    );\n\n    const categoryDefaultForm = arrayOfOptionsGroupedByCategory.reduce<\n      Record<string, ConditionForm>\n    >((acc, current) => {\n      const [categoryName, relatedConditions] = current;\n\n      const conditionsForm = relatedConditions.reduce<ConditionForm>((acc, current) => {\n        acc[current.id] = get(valueFromModifiedData, current.id, false);\n\n        return acc;\n      }, {});\n\n      acc[categoryName] = conditionsForm;\n\n      return acc;\n    }, {});\n\n    acc[current.pathToConditionsObject.join('..')] = categoryDefaultForm;\n\n    return acc;\n  }, {});\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ActionRow\n * -----------------------------------------------------------------------------------------------*/\n\ninterface ActionRowProps {\n  arrayOfOptionsGroupedByCategory: Array<\n    [string, PermissionsDataManagerContextValue['availableConditions']]\n  >;\n  isFormDisabled?: boolean;\n  isGrey?: boolean;\n  label: string;\n  name: string;\n  onChange?: (name: string, values: Record<string, boolean>) => void;\n  value: Record<string, ConditionForm>;\n}\n\nconst ActionRow = ({\n  arrayOfOptionsGroupedByCategory,\n  isFormDisabled = false,\n  isGrey = false,\n  label,\n  name,\n  onChange,\n  value,\n}: ActionRowProps) => {\n  const { formatMessage } = useIntl();\n\n  const handleChange: MultiSelectNestedProps['onChange'] = (val) => {\n    if (onChange) {\n      onChange(name, getNewStateFromChangedValues(arrayOfOptionsGroupedByCategory, val));\n    }\n  };\n\n  return (\n    <Flex\n      tag=\"li\"\n      background={isGrey ? 'neutral100' : 'neutral0'}\n      paddingBottom={3}\n      paddingTop={3}\n      justifyContent={'space-evenly'}\n    >\n      <Flex style={{ width: 180 }}>\n        <Typography variant=\"sigma\" textColor=\"neutral600\">\n          {formatMessage({\n            id: 'Settings.permissions.conditions.can',\n            defaultMessage: 'Can',\n          })}\n          &nbsp;\n        </Typography>\n        <Typography variant=\"sigma\" title={label} textColor=\"primary600\" ellipsis>\n          {formatMessage({\n            id: `Settings.roles.form.permissions.${label.toLowerCase()}`,\n            defaultMessage: label,\n          })}\n        </Typography>\n        <Typography variant=\"sigma\" textColor=\"neutral600\">\n          &nbsp;\n          {formatMessage({\n            id: 'Settings.permissions.conditions.when',\n            defaultMessage: 'When',\n          })}\n        </Typography>\n      </Flex>\n      <Box style={{ maxWidth: 430, width: '100%' }}>\n        <MultiSelectNested\n          id={name}\n          customizeContent={(values = []) => `${values.length} currently selected`}\n          onChange={handleChange}\n          value={getSelectedValues(value)}\n          options={getNestedOptions(arrayOfOptionsGroupedByCategory)}\n          disabled={isFormDisabled}\n        />\n      </Box>\n    </Flex>\n  );\n};\n\nconst getSelectedValues = (rawValue: Record<string, ConditionForm>): string[] =>\n  Object.values(rawValue)\n    .map((x) =>\n      Object.entries(x)\n        .filter(([, value]) => value)\n        .map(([key]) => key)\n    )\n    .flat();\n\nconst getNestedOptions = (options: ActionRowProps['arrayOfOptionsGroupedByCategory']) =>\n  options.reduce<MultiSelectNestedProps['options']>((acc, [label, children]) => {\n    acc.push({\n      label: capitalise(label),\n      children: children.map((child) => ({\n        label: child.displayName,\n        value: child.id,\n      })),\n    });\n\n    return acc;\n  }, []);\n\nconst getNewStateFromChangedValues = (\n  options: ActionRowProps['arrayOfOptionsGroupedByCategory'],\n  changedValues: string[]\n) =>\n  options\n    .map(([, values]) => values)\n    .flat()\n    .reduce<Record<string, boolean>>(\n      (acc, curr) => ({ [curr.id]: changedValues.includes(curr.id), ...acc }),\n      {}\n    );\n\nexport { ConditionsModal };\nexport type { ConditionsModalProps };\n"],"names":["ConditionsModal","actions","headerBreadCrumbs","isFormDisabled","onClose","formatMessage","useIntl","availableConditions","modifiedData","onChangeConditions","usePermissionsDataManager","arrayOfOptionsGroupedByCategory","React","useMemo","Object","entries","groupBy","actionsToDisplay","filter","isDisplayed","hasSomeActionsSelected","hasAllActionsSelected","Boolean","state","setState","useState","createDefaultConditionsForm","handleChange","name","values","produce","draft","default","handleSubmit","conditionsWithoutCategory","reduce","acc","current","key","value","merged","acc1","current1","onCloseModal","_jsxs","Modal","Content","_jsx","Header","Breadcrumbs","id","label","join","map","index","arr","Crumb","isCurrent","length","upperFirst","defaultMessage","Body","Typography","ul","actionId","pathToConditionsObject","ActionRow","isGrey","onChange","get","Footer","Button","variant","onClick","valueFromModifiedData","categoryDefaultForm","categoryName","relatedConditions","conditionsForm","val","getNewStateFromChangedValues","Flex","tag","background","paddingBottom","paddingTop","justifyContent","style","width","textColor","title","ellipsis","toLowerCase","Box","maxWidth","MultiSelectNested","customizeContent","getSelectedValues","options","getNestedOptions","disabled","rawValue","x","flat","children","push","capitalise","child","displayName","changedValues","curr","includes"],"mappings":"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"}