{"version":3,"file":"useElementOnScreen.js","sources":["../../../../../admin/src/hooks/useElementOnScreen.ts"],"sourcesContent":["import * as React from 'react';\n\n/**\n * Hook that returns a ref to an element and a boolean indicating if the element is in the viewport\n * or in the element specified in `options.root`.\n */\nconst useElementOnScreen = <TElement extends HTMLElement = HTMLElement>(\n  onVisiblityChange: (isVisible: boolean) => void,\n  options?: IntersectionObserverInit\n): React.RefObject<TElement> => {\n  const containerRef = React.useRef<TElement>(null);\n\n  React.useEffect(() => {\n    const containerEl = containerRef.current;\n    const observer = new IntersectionObserver(([entry]) => {\n      onVisiblityChange(entry.isIntersecting);\n    }, options);\n\n    if (containerEl) {\n      observer.observe(containerRef.current);\n    }\n\n    return () => {\n      if (containerEl) {\n        observer.disconnect();\n      }\n    };\n  }, [containerRef, options, onVisiblityChange]);\n\n  return containerRef;\n};\n\nexport { useElementOnScreen };\n"],"names":["useElementOnScreen","onVisiblityChange","options","containerRef","React","useRef","useEffect","containerEl","current","observer","IntersectionObserver","entry","isIntersecting","observe","disconnect"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAEA;;;IAIA,MAAMA,kBAAqB,GAAA,CACzBC,iBACAC,EAAAA,OAAAA,GAAAA;IAEA,MAAMC,YAAAA,GAAeC,gBAAMC,CAAAA,MAAM,CAAW,IAAA,CAAA;AAE5CD,IAAAA,gBAAAA,CAAME,SAAS,CAAC,IAAA;QACd,MAAMC,WAAAA,GAAcJ,aAAaK,OAAO;AACxC,QAAA,MAAMC,QAAW,GAAA,IAAIC,oBAAqB,CAAA,CAAC,CAACC,KAAM,CAAA,GAAA;AAChDV,YAAAA,iBAAAA,CAAkBU,MAAMC,cAAc,CAAA;SACrCV,EAAAA,OAAAA,CAAAA;AAEH,QAAA,IAAIK,WAAa,EAAA;YACfE,QAASI,CAAAA,OAAO,CAACV,YAAAA,CAAaK,OAAO,CAAA;AACvC;QAEA,OAAO,IAAA;AACL,YAAA,IAAID,WAAa,EAAA;AACfE,gBAAAA,QAAAA,CAASK,UAAU,EAAA;AACrB;AACF,SAAA;KACC,EAAA;AAACX,QAAAA,YAAAA;AAAcD,QAAAA,OAAAA;AAASD,QAAAA;AAAkB,KAAA,CAAA;IAE7C,OAAOE,YAAAA;AACT;;;;"}