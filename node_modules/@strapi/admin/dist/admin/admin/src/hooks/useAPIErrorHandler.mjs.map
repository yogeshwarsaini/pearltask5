{"version":3,"file":"useAPIErrorHandler.mjs","sources":["../../../../../admin/src/hooks/useAPIErrorHandler.ts"],"sourcesContent":["import * as React from 'react';\n\nimport { IntlFormatters, useIntl } from 'react-intl';\n\nimport { FetchError, ApiError } from '../utils/getFetchClient';\nimport { getPrefixedId } from '../utils/getPrefixedId';\nimport { NormalizeErrorOptions, normalizeAPIError } from '../utils/normalizeAPIError';\nimport { setIn } from '../utils/objects';\n\ninterface UnknownApiError {\n  /**\n   * The name of the ApiError, is always a static value.\n   */\n  name: 'UnknownError';\n  /**\n   * The error message.\n   */\n  message: string;\n  /**\n   * The error details.\n   */\n  details?: unknown;\n  /**\n   * The HTTP status code of the error.\n   */\n  status?: number;\n}\n\n/**\n * The last item is the fallback error SerializedError which\n * typically comes from redux-toolkit itself.\n */\ninterface SerializedError {\n  /**\n   * The name of the error.\n   */\n  name?: string;\n  /**\n   * The error message that explains what went wrong.\n   */\n  message?: string;\n  /**\n   * The stack trace of the error.\n   */\n  stack?: string;\n  /**\n   * A specific error code associated with the error.\n   */\n  code?: string;\n}\n\n/**\n * These are the types or errors we return\n * from the redux-toolkit data-fetching setup.\n */\ntype BaseQueryError = ApiError | UnknownApiError | SerializedError;\n\ninterface YupFormattedError {\n  /**\n   * An array representing the path to the field where the validation error occurred.\n   */\n  path: string[];\n  /**\n   * The error message describing the validation failure.\n   */\n  message: string;\n  /**\n   * The name of the error, typically identifies the type of validation error that occurred.\n   */\n  name: string;\n\n  value: string;\n}\n\n/**\n * @public\n * @description The purpose of this hook is to offer a unified way to handle errors thrown by API endpoints, regardless of the type of error (`ValidationError`, `ApplicationErrror` ...)\nthat has been thrown.\n * @example\n * ```tsx\n * import * as React from 'react';\n * import { useFetchClient, useAPIErrorHandler, useNotification } from '@strapi/admin/admin';\n *\n * const MyComponent = () => {\n *   const { get } = useFetchClient();\n *   const { formatAPIError } = useAPIErrorHandler(getTrad);\n *   const { toggleNotification } = useNotification();\n *\n *   const handleDeleteItem = async () => {\n *     try {\n *       return await get('/admin');\n *     } catch (error) {\n *       toggleNotification({\n *         type: 'danger',\n *         message: formatAPIError(error),\n *       });\n *     }\n *   };\n *   return <button onClick={handleDeleteItem}>Delete item</button>;\n * };\n * ```\n */\nexport function useAPIErrorHandler(\n  intlMessagePrefixCallback?: FormatAPIErrorOptions['intlMessagePrefixCallback']\n) {\n  const { formatMessage } = useIntl();\n\n  /**\n   * @description This method try to normalize the passed error\n   * and then call formatAPIError to stringify the ResponseObject\n   * into a string. If it fails it will call formatFetchError and\n   * return the error message.\n   */\n  const formatError = React.useCallback(\n    (error: FetchError) => {\n      // Try to normalize the passed error first. This will fail for e.g. network\n      // errors which are thrown by fetchClient directly.\n      try {\n        const formattedErr = formatAPIError(error, { intlMessagePrefixCallback, formatMessage });\n\n        if (!formattedErr) {\n          return formatFetchError(error, { intlMessagePrefixCallback, formatMessage });\n        }\n\n        return formattedErr;\n      } catch (_) {\n        throw new Error('formatAPIError: Unknown error:', error);\n      }\n    },\n    [formatMessage, intlMessagePrefixCallback]\n  );\n\n  return {\n    /**\n     * @alpha\n     * Convert ValidationErrors from the API into an object that can be used by forms.\n     */\n    _unstableFormatValidationErrors: React.useCallback(\n      (error: Extract<BaseQueryError, { name: 'ValidationError' }>): Record<string, string> => {\n        if (typeof error.details === 'object' && error.details !== null) {\n          if ('errors' in error.details && Array.isArray(error.details.errors)) {\n            const validationErrors = error.details.errors as YupFormattedError[];\n\n            return validationErrors.reduce((acc, err) => {\n              const { path, message } = err;\n\n              return setIn(acc, path.join('.'), message);\n            }, {});\n          } else {\n            const details = error.details as Record<string, string[]>;\n\n            return Object.keys(details).reduce((acc, key) => {\n              const messages = details[key];\n\n              return {\n                ...acc,\n                [key]: messages.join(', '),\n              };\n            }, {});\n          }\n        } else {\n          return {};\n        }\n      },\n      []\n    ),\n    /**\n     * @alpha\n     * This handles the errors given from `redux-toolkit`'s axios based baseQuery function.\n     */\n    _unstableFormatAPIError: React.useCallback(\n      (error: BaseQueryError) => {\n        const err = {\n          response: {\n            data: {\n              error,\n            },\n          },\n        } as FetchError;\n\n        /**\n         * There's a chance with SerializedErrors that the message is not set.\n         * In that case we return a generic error message.\n         */\n        if (!error.message) {\n          return 'Unknown error occured.';\n        }\n\n        return formatError(err);\n      },\n      [formatError]\n    ),\n    formatAPIError: formatError,\n  };\n}\n\nfunction formatFetchError(\n  error: FetchError,\n  { intlMessagePrefixCallback, formatMessage }: FormatAPIErrorOptions\n) {\n  const { code, message } = error;\n\n  return formatMessage(\n    {\n      id: getPrefixedId(message, intlMessagePrefixCallback),\n      defaultMessage: message,\n    },\n    {\n      code,\n    }\n  );\n}\n\ntype FormatAPIErrorOptions = Partial<Pick<NormalizeErrorOptions, 'intlMessagePrefixCallback'>> &\n  Pick<IntlFormatters, 'formatMessage'>;\n\n/**\n * @description This method stringifies the `ResponseObject` into\n * a string. If multiple errors are thrown by the API, which\n * happens e.g.in the case of a `ValidationError`, all errors\n * will bo concatenated into a single string.\n */\nfunction formatAPIError(\n  error: FetchError,\n  { formatMessage, intlMessagePrefixCallback }: FormatAPIErrorOptions\n) {\n  if (!formatMessage) {\n    throw new Error('The formatMessage callback is a mandatory argument.');\n  }\n\n  const normalizedError = normalizeAPIError(error, intlMessagePrefixCallback);\n\n  if (!normalizedError) {\n    return null;\n  }\n\n  if ('message' in normalizedError && normalizedError.message !== null) {\n    return normalizedError.message;\n  }\n\n  // stringify multiple errors\n  if ('errors' in normalizedError) {\n    return normalizedError.errors\n      .map(({ id, defaultMessage, values }) => formatMessage({ id, defaultMessage }, values))\n      .join('\\n');\n  }\n\n  return formatMessage(normalizedError);\n}\n\nexport type { ApiError };\n"],"names":["useAPIErrorHandler","intlMessagePrefixCallback","formatMessage","useIntl","formatError","React","useCallback","error","formattedErr","formatAPIError","formatFetchError","_","Error","_unstableFormatValidationErrors","details","Array","isArray","errors","validationErrors","reduce","acc","err","path","message","setIn","join","Object","keys","key","messages","_unstableFormatAPIError","response","data","code","id","getPrefixedId","defaultMessage","normalizedError","normalizeAPIError","map","values"],"mappings":"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"}