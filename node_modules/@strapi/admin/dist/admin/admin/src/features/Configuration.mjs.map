{"version":3,"file":"Configuration.mjs","sources":["../../../../../admin/src/features/Configuration.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { createContext } from '@radix-ui/react-context';\nimport { useIntl } from 'react-intl';\n\nimport { UpdateProjectSettings } from '../../../shared/contracts/admin';\nimport { Page } from '../components/PageHelpers';\nimport { useTypedSelector } from '../core/store/hooks';\nimport { useAPIErrorHandler } from '../hooks/useAPIErrorHandler';\nimport { useRBAC } from '../hooks/useRBAC';\nimport {\n  ConfigurationLogo,\n  useInitQuery,\n  useProjectSettingsQuery,\n  useUpdateProjectSettingsMutation,\n} from '../services/admin';\n\nimport { useAuth } from './Auth';\nimport { useNotification } from './Notifications';\nimport { useTracking } from './Tracking';\n\nimport type { StrapiApp } from '../StrapiApp';\n\n/* -------------------------------------------------------------------------------------------------\n * Configuration Context\n * -----------------------------------------------------------------------------------------------*/\n\ninterface UpdateProjectSettingsBody {\n  authLogo:\n    | ((UpdateProjectSettings.Request['body']['authLogo'] | ConfigurationLogo['custom']) & {\n        rawFile?: File;\n      })\n    | null;\n  menuLogo:\n    | ((UpdateProjectSettings.Request['body']['menuLogo'] | ConfigurationLogo['custom']) & {\n        rawFile?: File;\n      })\n    | null;\n}\n\ninterface ConfigurationContextValue {\n  logos: {\n    auth: ConfigurationLogo;\n    menu: ConfigurationLogo;\n  };\n  showReleaseNotification: boolean;\n  updateProjectSettings: (body: UpdateProjectSettingsBody) => Promise<void>;\n}\n\nconst [ConfigurationContextProvider, useConfiguration] =\n  createContext<ConfigurationContextValue>('ConfigurationContext');\n\n/* -------------------------------------------------------------------------------------------------\n * ConfigurationProvider\n * -----------------------------------------------------------------------------------------------*/\n\ninterface ConfigurationProviderProps {\n  children: React.ReactNode;\n  defaultAuthLogo: StrapiApp['configurations']['authLogo'];\n  defaultMenuLogo: StrapiApp['configurations']['menuLogo'];\n  showReleaseNotification?: boolean;\n}\n\nconst ConfigurationProvider = ({\n  children,\n  defaultAuthLogo,\n  defaultMenuLogo,\n  showReleaseNotification = false,\n}: ConfigurationProviderProps) => {\n  const { trackUsage } = useTracking();\n  const { formatMessage } = useIntl();\n  const { toggleNotification } = useNotification();\n  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();\n  const permissions = useTypedSelector(\n    (state) => state.admin_app.permissions.settings?.['project-settings']\n  );\n  const token = useAuth('ConfigurationProvider', (state) => state.token);\n\n  const {\n    allowedActions: { canRead },\n  } = useRBAC(permissions);\n\n  const {\n    data: { authLogo: customAuthLogo, menuLogo: customMenuLogo } = {},\n    error,\n    isLoading,\n  } = useInitQuery();\n\n  React.useEffect(() => {\n    if (error) {\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({ id: 'app.containers.App.notification.error.init' }),\n      });\n    }\n  }, [error, formatMessage, toggleNotification]);\n\n  const { data, isSuccess } = useProjectSettingsQuery(undefined, {\n    skip: !token || !canRead,\n  });\n\n  const [updateProjectSettingsMutation] = useUpdateProjectSettingsMutation();\n\n  const updateProjectSettings = React.useCallback(\n    async (body: UpdateProjectSettingsBody) => {\n      const formData = new FormData();\n\n      /**\n       * We either only send files or we send null values.\n       * Null removes the logo. If you don't want to effect\n       * an existing logo, don't send anything.\n       */\n      Object.entries(body).forEach(([key, value]) => {\n        if (value?.rawFile) {\n          formData.append(key, value.rawFile);\n        } else if (value === null) {\n          formData.append(key, JSON.stringify(value));\n        }\n      });\n\n      const res = await updateProjectSettingsMutation(formData);\n\n      if ('data' in res) {\n        const updatedMenuLogo = !!res.data.menuLogo && !!body.menuLogo?.rawFile;\n        const updatedAuthLogo = !!res.data.authLogo && !!body.authLogo?.rawFile;\n\n        if (updatedMenuLogo) {\n          trackUsage('didChangeLogo', {\n            logo: 'menu',\n          });\n        }\n\n        if (updatedAuthLogo) {\n          trackUsage('didChangeLogo', {\n            logo: 'auth',\n          });\n        }\n\n        toggleNotification({\n          type: 'success',\n          message: formatMessage({ id: 'app', defaultMessage: 'Saved' }),\n        });\n      } else {\n        toggleNotification({\n          type: 'danger',\n          message: formatAPIError(res.error),\n        });\n      }\n    },\n    [formatAPIError, formatMessage, toggleNotification, trackUsage, updateProjectSettingsMutation]\n  );\n\n  if (isLoading) {\n    return <Page.Loading />;\n  }\n\n  return (\n    <ConfigurationContextProvider\n      showReleaseNotification={showReleaseNotification}\n      logos={{\n        menu: {\n          custom: isSuccess\n            ? data?.menuLogo\n            : {\n                url: customMenuLogo ?? '',\n              },\n          default: defaultMenuLogo,\n        },\n        auth: {\n          custom: isSuccess\n            ? data?.authLogo\n            : {\n                url: customAuthLogo ?? '',\n              },\n          default: defaultAuthLogo,\n        },\n      }}\n      updateProjectSettings={updateProjectSettings}\n    >\n      {children}\n    </ConfigurationContextProvider>\n  );\n};\n\nexport {\n  ConfigurationContextProvider as _internalConfigurationContextProvider,\n  ConfigurationProvider,\n  useConfiguration,\n};\nexport type {\n  ConfigurationProviderProps,\n  ConfigurationContextValue,\n  ConfigurationLogo,\n  UpdateProjectSettingsBody,\n};\n"],"names":["ConfigurationContextProvider","useConfiguration","createContext","ConfigurationProvider","children","defaultAuthLogo","defaultMenuLogo","showReleaseNotification","trackUsage","useTracking","formatMessage","useIntl","toggleNotification","useNotification","_unstableFormatAPIError","formatAPIError","useAPIErrorHandler","permissions","useTypedSelector","state","admin_app","settings","token","useAuth","allowedActions","canRead","useRBAC","data","authLogo","customAuthLogo","menuLogo","customMenuLogo","error","isLoading","useInitQuery","React","useEffect","type","message","id","isSuccess","useProjectSettingsQuery","undefined","skip","updateProjectSettingsMutation","useUpdateProjectSettingsMutation","updateProjectSettings","useCallback","body","formData","FormData","Object","entries","forEach","key","value","rawFile","append","JSON","stringify","res","updatedMenuLogo","updatedAuthLogo","logo","defaultMessage","_jsx","Page","Loading","logos","menu","custom","url","default","auth"],"mappings":"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"}