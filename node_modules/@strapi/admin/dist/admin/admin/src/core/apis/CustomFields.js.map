{"version":3,"file":"CustomFields.js","sources":["../../../../../../admin/src/core/apis/CustomFields.ts"],"sourcesContent":["/* eslint-disable check-file/filename-naming-convention */\nimport { ComponentType } from 'react';\n\nimport { Internal, Utils } from '@strapi/types';\nimport invariant from 'invariant';\n\nimport type { MessageDescriptor, PrimitiveType } from 'react-intl';\nimport type { AnySchema } from 'yup';\n\ntype CustomFieldUID = Utils.String.Suffix<\n  | Internal.Namespace.WithSeparator<Internal.Namespace.Plugin>\n  | Internal.Namespace.WithSeparator<Internal.Namespace.Global>,\n  string\n>;\n\ntype CustomFieldOptionInput =\n  | 'text'\n  | 'checkbox'\n  | 'checkbox-with-number-field'\n  | 'select-default-boolean'\n  | 'date'\n  | 'select'\n  | 'number'\n  | 'boolean-radio-group'\n  | 'select-date'\n  | 'text-area-enum'\n  | 'select-number'\n  | 'radio-group';\n\ntype CustomFieldOptionName =\n  | 'min'\n  | 'minLength'\n  | 'max'\n  | 'maxLength'\n  | 'required'\n  | 'regex'\n  | 'enum'\n  | 'unique'\n  | 'private'\n  | 'default';\n\ninterface CustomFieldOption {\n  intlLabel: MessageDescriptor & {\n    values?: Record<string, PrimitiveType>;\n  };\n  description: MessageDescriptor & {\n    values?: Record<string, PrimitiveType>;\n  };\n  name: CustomFieldOptionName;\n  type: CustomFieldOptionInput;\n  defaultValue?: string | number | boolean | Date;\n}\n\ninterface CustomFieldOptionSection {\n  sectionTitle:\n    | (MessageDescriptor & {\n        values?: Record<string, PrimitiveType>;\n      })\n    | null;\n  items: CustomFieldOption[];\n}\n\ninterface CustomFieldOptions {\n  base?: (CustomFieldOptionSection | CustomFieldOption)[];\n  advanced?: (CustomFieldOptionSection | CustomFieldOption)[];\n  validator?: () => Record<string, AnySchema>;\n}\n\ninterface CustomField {\n  name: string;\n  pluginId?: string;\n  type: (typeof ALLOWED_TYPES)[number];\n  intlLabel: MessageDescriptor & {\n    values?: Record<string, PrimitiveType>;\n  };\n  intlDescription: MessageDescriptor & {\n    values?: Record<string, PrimitiveType>;\n  };\n  icon?: ComponentType;\n  components: {\n    Input: () => Promise<{ default?: ComponentType }>;\n  };\n  options?: CustomFieldOptions;\n}\n\nconst ALLOWED_TYPES = [\n  'biginteger',\n  'boolean',\n  'date',\n  'datetime',\n  'decimal',\n  'email',\n  'enumeration',\n  'float',\n  'integer',\n  'json',\n  'password',\n  'richtext',\n  'string',\n  'text',\n  'time',\n  'uid',\n] as const;\n\nconst ALLOWED_ROOT_LEVEL_OPTIONS = [\n  'min',\n  'minLength',\n  'max',\n  'maxLength',\n  'required',\n  'regex',\n  'enum',\n  'unique',\n  'private',\n  'default',\n] as const;\n\nclass CustomFields {\n  customFields: Record<string, CustomField>;\n\n  constructor() {\n    this.customFields = {};\n  }\n\n  register = (customFields: CustomField | CustomField[]) => {\n    if (Array.isArray(customFields)) {\n      // If several custom fields are passed, register them one by one\n      customFields.forEach((customField) => {\n        this.register(customField);\n      });\n    } else {\n      // Handle individual custom field\n      const { name, pluginId, type, intlLabel, intlDescription, components, options } =\n        customFields;\n\n      // Ensure required attributes are provided\n      invariant(name, 'A name must be provided');\n      invariant(type, 'A type must be provided');\n      invariant(intlLabel, 'An intlLabel must be provided');\n      invariant(intlDescription, 'An intlDescription must be provided');\n      invariant(components, 'A components object must be provided');\n      invariant(components.Input, 'An Input component must be provided');\n\n      // Ensure the type is valid\n      invariant(\n        ALLOWED_TYPES.includes(type),\n        `Custom field type: '${type}' is not a valid Strapi type or it can't be used with a Custom Field`\n      );\n\n      // Ensure name has no special characters\n      const isValidObjectKey = /^(?![0-9])[a-zA-Z0-9$_-]+$/g;\n      invariant(\n        isValidObjectKey.test(name),\n        `Custom field name: '${name}' is not a valid object key`\n      );\n\n      // Ensure options have valid name paths\n      const allFormOptions = [...(options?.base || []), ...(options?.advanced || [])];\n\n      if (allFormOptions.length) {\n        const optionPathValidations = allFormOptions.reduce(optionsValidationReducer, []);\n\n        optionPathValidations.forEach(({ isValidOptionPath, errorMessage }) => {\n          invariant(isValidOptionPath, errorMessage);\n        });\n      }\n\n      // When no plugin is specified, default to the global namespace\n      const uid: CustomFieldUID = pluginId ? `plugin::${pluginId}.${name}` : `global::${name}`;\n\n      // Ensure the uid is unique\n      const uidAlreadyUsed = Object.prototype.hasOwnProperty.call(this.customFields, uid);\n      invariant(!uidAlreadyUsed, `Custom field: '${uid}' has already been registered`);\n\n      this.customFields[uid] = customFields;\n    }\n  };\n\n  getAll = () => {\n    return this.customFields;\n  };\n\n  get = (uid: string): CustomField | undefined => {\n    return this.customFields[uid];\n  };\n}\n\ninterface OptionValidation {\n  isValidOptionPath: boolean;\n  errorMessage: string;\n}\n\nconst optionsValidationReducer = (\n  acc: OptionValidation[],\n  option: CustomFieldOptionSection | CustomFieldOption\n): OptionValidation[] => {\n  if ('items' in option) {\n    return option.items.reduce(optionsValidationReducer, acc);\n  }\n\n  if (!option.name) {\n    acc.push({\n      isValidOptionPath: false,\n      errorMessage: \"The 'name' property is required on an options object\",\n    });\n  } else {\n    acc.push({\n      isValidOptionPath:\n        option.name.startsWith('options') || ALLOWED_ROOT_LEVEL_OPTIONS.includes(option.name),\n      errorMessage: `'${option.name}' must be prefixed with 'options.'`,\n    });\n  }\n\n  return acc;\n};\n\nexport { type CustomField, CustomFields };\n"],"names":["ALLOWED_TYPES","ALLOWED_ROOT_LEVEL_OPTIONS","CustomFields","constructor","register","customFields","Array","isArray","forEach","customField","name","pluginId","type","intlLabel","intlDescription","components","options","invariant","Input","includes","isValidObjectKey","test","allFormOptions","base","advanced","length","optionPathValidations","reduce","optionsValidationReducer","isValidOptionPath","errorMessage","uid","uidAlreadyUsed","Object","prototype","hasOwnProperty","call","getAll","get","acc","option","items","push","startsWith"],"mappings":"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"}