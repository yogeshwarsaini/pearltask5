{"version":3,"file":"configure.mjs","sources":["../../../../../../admin/src/core/store/configure.ts"],"sourcesContent":["import {\n  configureStore,\n  StoreEnhancer,\n  Middleware,\n  Reducer,\n  combineReducers,\n  MiddlewareAPI,\n  isRejected,\n} from '@reduxjs/toolkit';\n\nimport { reducer as appReducer, AppState, logout } from '../../reducer';\nimport { adminApi } from '../../services/api';\n\n/**\n * @description Static reducers are ones we know, they live in the admin package.\n */\nconst staticReducers = {\n  [adminApi.reducerPath]: adminApi.reducer,\n  admin_app: appReducer,\n} as const;\n\nconst injectReducerStoreEnhancer: (appReducers: Record<string, Reducer>) => StoreEnhancer =\n  (appReducers) =>\n  (next) =>\n  (...args) => {\n    const store = next(...args);\n\n    const asyncReducers: Record<string, Reducer> = {};\n\n    return {\n      ...store,\n      asyncReducers,\n      injectReducer: (key: string, asyncReducer: Reducer) => {\n        asyncReducers[key] = asyncReducer;\n        store.replaceReducer(\n          // @ts-expect-error we dynamically add reducers which makes the types uncomfortable.\n          combineReducers({\n            ...appReducers,\n            ...asyncReducers,\n          })\n        );\n      },\n    };\n  };\n\ntype PreloadState = Partial<{\n  admin_app: AppState;\n}>;\n\n/**\n * @description This is the main store configuration function, injected Reducers use our legacy app.addReducer API,\n * which we're trying to phase out. App Middlewares could potentially be improved...?\n */\nconst configureStoreImpl = (\n  preloadedState: PreloadState = {},\n  appMiddlewares: Array<() => Middleware> = [],\n  injectedReducers: Record<string, Reducer> = {}\n) => {\n  const coreReducers = { ...staticReducers, ...injectedReducers } as const;\n\n  const defaultMiddlewareOptions = {} as any;\n\n  // These are already disabled in 'production' env but we also need to disable it in test environments\n  // However, we want to leave them on for development so any issues can still be caught\n  if (process.env.NODE_ENV === 'test') {\n    defaultMiddlewareOptions.serializableCheck = false;\n    defaultMiddlewareOptions.immutableCheck = false;\n  }\n\n  const store = configureStore({\n    preloadedState: {\n      admin_app: preloadedState.admin_app,\n    },\n    reducer: coreReducers,\n    devTools: process.env.NODE_ENV !== 'production',\n    middleware: (getDefaultMiddleware) => [\n      ...getDefaultMiddleware(defaultMiddlewareOptions),\n      rtkQueryUnauthorizedMiddleware,\n      adminApi.middleware,\n      ...appMiddlewares.map((m) => m()),\n    ],\n    enhancers: [injectReducerStoreEnhancer(coreReducers)],\n  });\n\n  return store;\n};\n\nconst rtkQueryUnauthorizedMiddleware: Middleware =\n  ({ dispatch }: MiddlewareAPI) =>\n  (next) =>\n  (action) => {\n    // isRejectedWithValue Or isRejected\n    if (isRejected(action) && action.payload?.status === 401) {\n      dispatch(logout());\n      window.location.href = '/admin/auth/login';\n      return;\n    }\n\n    return next(action);\n  };\n\ntype Store = ReturnType<typeof configureStoreImpl> & {\n  asyncReducers: Record<string, Reducer>;\n  injectReducer: (key: string, asyncReducer: Reducer) => void;\n};\n\ntype RootState = ReturnType<Store['getState']>;\n\ntype Dispatch = Store['dispatch'];\n\nexport { configureStoreImpl as configureStore };\nexport type { RootState, Dispatch, AppState, Store, PreloadState };\n"],"names":["staticReducers","adminApi","reducerPath","reducer","admin_app","appReducer","injectReducerStoreEnhancer","appReducers","next","args","store","asyncReducers","injectReducer","key","asyncReducer","replaceReducer","combineReducers","configureStoreImpl","preloadedState","appMiddlewares","injectedReducers","coreReducers","defaultMiddlewareOptions","process","env","NODE_ENV","serializableCheck","immutableCheck","configureStore","devTools","middleware","getDefaultMiddleware","rtkQueryUnauthorizedMiddleware","map","m","enhancers","dispatch","action","isRejected","payload","status","logout","window","location","href"],"mappings":";;;;AAaA;;AAEC,IACD,MAAMA,cAAiB,GAAA;AACrB,IAAA,CAACC,QAASC,CAAAA,WAAW,GAAGD,SAASE,OAAO;IACxCC,SAAWC,EAAAA;AACb,CAAA;AAEA,MAAMC,6BACJ,CAACC,WAAAA,GACD,CAACC,IAAAA,GACD,CAAC,GAAGC,IAAAA,GAAAA;AACF,YAAA,MAAMC,QAAQF,IAAQC,CAAAA,GAAAA,IAAAA,CAAAA;AAEtB,YAAA,MAAME,gBAAyC,EAAC;YAEhD,OAAO;AACL,gBAAA,GAAGD,KAAK;AACRC,gBAAAA,aAAAA;AACAC,gBAAAA,aAAAA,EAAe,CAACC,GAAaC,EAAAA,YAAAA,GAAAA;oBAC3BH,aAAa,CAACE,IAAI,GAAGC,YAAAA;oBACrBJ,KAAMK,CAAAA,cAAc;oBAElBC,eAAgB,CAAA;AACd,wBAAA,GAAGT,WAAW;AACd,wBAAA,GAAGI;AACL,qBAAA,CAAA,CAAA;AAEJ;AACF,aAAA;AACF,SAAA;AAMF;;;AAGC,IACKM,MAAAA,kBAAAA,GAAqB,CACzBC,cAAAA,GAA+B,EAAE,EACjCC,cAAAA,GAA0C,EAAE,EAC5CC,gBAA4C,GAAA,EAAE,GAAA;AAE9C,IAAA,MAAMC,YAAe,GAAA;AAAE,QAAA,GAAGrB,cAAc;AAAE,QAAA,GAAGoB;AAAiB,KAAA;AAE9D,IAAA,MAAME,2BAA2B,EAAC;;;AAIlC,IAAA,IAAIC,OAAQC,CAAAA,GAAG,CAACC,QAAQ,KAAK,MAAQ,EAAA;AACnCH,QAAAA,wBAAAA,CAAyBI,iBAAiB,GAAG,KAAA;AAC7CJ,QAAAA,wBAAAA,CAAyBK,cAAc,GAAG,KAAA;AAC5C;AAEA,IAAA,MAAMjB,QAAQkB,cAAe,CAAA;QAC3BV,cAAgB,EAAA;AACdd,YAAAA,SAAAA,EAAWc,eAAed;AAC5B,SAAA;QACAD,OAASkB,EAAAA,YAAAA;AACTQ,QAAAA,QAAAA,EAAUN,OAAQC,CAAAA,GAAG,CAACC,QAAQ,KAAK,YAAA;AACnCK,QAAAA,UAAAA,EAAY,CAACC,oBAAyB,GAAA;mBACjCA,oBAAqBT,CAAAA,wBAAAA,CAAAA;AACxBU,gBAAAA,8BAAAA;AACA/B,gBAAAA,QAAAA,CAAS6B,UAAU;mBAChBX,cAAec,CAAAA,GAAG,CAAC,CAACC,CAAMA,GAAAA,CAAAA,EAAAA;AAC9B,aAAA;QACDC,SAAW,EAAA;YAAC7B,0BAA2Be,CAAAA,YAAAA;AAAc;AACvD,KAAA,CAAA;IAEA,OAAOX,KAAAA;AACT;AAEA,MAAMsB,8BAAAA,GACJ,CAAC,EAAEI,QAAQ,EAAiB,GAC5B,CAAC5B,OACD,CAAC6B,MAAAA,GAAAA;;AAEC,YAAA,IAAIC,WAAWD,MAAWA,CAAAA,IAAAA,MAAAA,CAAOE,OAAO,EAAEC,WAAW,GAAK,EAAA;gBACxDJ,QAASK,CAAAA,MAAAA,EAAAA,CAAAA;gBACTC,MAAOC,CAAAA,QAAQ,CAACC,IAAI,GAAG,mBAAA;AACvB,gBAAA;AACF;AAEA,YAAA,OAAOpC,IAAK6B,CAAAA,MAAAA,CAAAA;AACd,SAAA;;;;"}