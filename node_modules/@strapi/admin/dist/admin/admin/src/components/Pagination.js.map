{"version":3,"file":"Pagination.js","sources":["../../../../../admin/src/components/Pagination.tsx"],"sourcesContent":["/* eslint-disable import/export */\nimport * as React from 'react';\n\nimport {\n  Flex,\n  SingleSelectOption,\n  SingleSelect,\n  Typography,\n  Dots,\n  NextLink,\n  PageLink,\n  Pagination as PaginationImpl,\n  PreviousLink,\n} from '@strapi/design-system';\nimport { stringify } from 'qs';\nimport { useIntl } from 'react-intl';\nimport { Link } from 'react-router-dom';\n\nimport { useQueryParams } from '../hooks/useQueryParams';\n\nimport { createContext } from './Context';\n\nimport type { Pagination as PaginationApi } from '../../../shared/contracts/shared';\n\n/* -------------------------------------------------------------------------------------------------\n * Root\n * -----------------------------------------------------------------------------------------------*/\ninterface PaginationContextValue {\n  /**\n   * @description the complete query object, this could include query params\n   * injected by other plugins, if you're navigating to a different page you\n   * should ensure these are still passed.\n   */\n  currentQuery?: object;\n  pageCount: string;\n  pageSize: string;\n  page: string;\n  setPageSize: (pageSize: string) => void;\n  total: NonNullable<RootProps['total']>;\n}\n\nconst [PaginationProvider, usePagination] = createContext<PaginationContextValue>('Pagination');\n\ninterface RootProps {\n  children: React.ReactNode;\n  /**\n   * @default 0\n   * @description the total number of pages\n   * that exist in the dataset.\n   */\n  pageCount?: PaginationApi['pageCount'];\n  /**\n   * @default 1\n   * @description the initial page number.\n   */\n  defaultPage?: PaginationApi['page'];\n  /**\n   * @default 10\n   * @description the initial number of items to display\n   */\n  defaultPageSize?: PaginationApi['pageSize'];\n  /**\n   * @description a callback that is called when the page size changes.\n   */\n  onPageSizeChange?: (pageSize: string) => void;\n  /**\n   * @default 0\n   * @description the total number of items in the dataset.\n   */\n  total?: PaginationApi['total'];\n}\n\n/**\n * @description The root component for the composable pagination component.\n * It's advised to spread the entire pagination option object into this component.\n *\n * @example\n * ```tsx\n * const MyComponent = () => {\n *  return (\n *    <Pagination.Root {...response.pagination}>\n *      <Pagination.PageSize />\n *      <Pagination.Links />\n *    </Pagination.Root>\n *  );\n * };\n * ```\n */\nconst Root = React.forwardRef<HTMLDivElement, RootProps>(\n  (\n    { children, defaultPageSize = 10, pageCount = 0, defaultPage = 1, onPageSizeChange, total = 0 },\n    forwardedRef\n  ) => {\n    const [{ query }, setQuery] = useQueryParams<Pick<PaginationContextValue, 'page' | 'pageSize'>>(\n      {\n        pageSize: defaultPageSize.toString(),\n        page: defaultPage.toString(),\n      }\n    );\n\n    const setPageSize = (pageSize: string) => {\n      setQuery({ pageSize, page: '1' });\n\n      if (onPageSizeChange) {\n        onPageSizeChange(pageSize);\n      }\n    };\n\n    return (\n      <Flex\n        ref={forwardedRef}\n        paddingTop={4}\n        paddingBottom={4}\n        alignItems=\"flex-end\"\n        justifyContent=\"space-between\"\n      >\n        <PaginationProvider\n          currentQuery={query}\n          page={query.page}\n          pageSize={query.pageSize}\n          pageCount={pageCount.toString()}\n          setPageSize={setPageSize}\n          total={total}\n        >\n          {children}\n        </PaginationProvider>\n      </Flex>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * PageSize\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * @description The page size component is responsible for rendering the select input that allows\n * the user to change the number of items displayed per page.\n * If the total number of items is less than the minimum option, this component will not render.\n */\nconst PageSize = ({ options = ['10', '20', '50', '100'] }: Pagination.PageSizeProps) => {\n  const { formatMessage } = useIntl();\n\n  const pageSize = usePagination('PageSize', (state) => state.pageSize);\n  const totalCount = usePagination('PageSize', (state) => state.total);\n  const setPageSize = usePagination('PageSize', (state) => state.setPageSize);\n\n  const handleChange = (value: string) => {\n    setPageSize(value);\n  };\n\n  const minimumOption = parseInt(options[0], 10);\n\n  if (minimumOption >= totalCount) {\n    return null;\n  }\n\n  return (\n    <Flex gap={2}>\n      <SingleSelect\n        size=\"S\"\n        aria-label={formatMessage({\n          id: 'components.PageFooter.select',\n          defaultMessage: 'Entries per page',\n        })}\n        // @ts-expect-error from the DS V2 this won't be needed because we're only returning strings.\n        onChange={handleChange}\n        value={pageSize}\n      >\n        {options.map((option) => (\n          <SingleSelectOption key={option} value={option}>\n            {option}\n          </SingleSelectOption>\n        ))}\n      </SingleSelect>\n      <Typography textColor=\"neutral600\" tag=\"span\">\n        {formatMessage({\n          id: 'components.PageFooter.select',\n          defaultMessage: 'Entries per page',\n        })}\n      </Typography>\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Links\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * The component works as follows\n * `1` , 2, 3, ... 10\n * 1, `2`, 3, ... 10\n * 1, 2, `3`, 4, ... 10\n * 1, 2, 3, `4`, 5, ... 10\n * 1, ..,4, `5`, 6, ... 10\n *\n * 1, ...., 8, 9, `10`\n * 1, ...., 8, `9`, 10\n * 1, ...., 7, `8`, 9, 10\n * 1, ... 6, `7`, 8, 9, 10\n */\n\n/**\n * @description The links component is responsible for rendering the pagination links.\n * If the total number of pages is less than or equal to 1, this component will not render.\n */\nconst Links = ({ boundaryCount = 1, siblingCount = 1 }: Pagination.LinksProps) => {\n  const { formatMessage } = useIntl();\n\n  const query = usePagination('Links', (state) => state.currentQuery);\n  const currentPage = usePagination('Links', (state) => state.page);\n  const totalPages = usePagination('Links', (state) => state.pageCount);\n\n  const pageCount = parseInt(totalPages, 10);\n  const activePage = parseInt(currentPage, 10);\n\n  const range = (start: number, end: number) => {\n    const length = end - start + 1;\n\n    return Array.from({ length }, (_, i) => start + i);\n  };\n\n  const startPages = range(1, Math.min(boundaryCount, pageCount));\n  const endPages = range(Math.max(pageCount - boundaryCount + 1, boundaryCount + 1), pageCount);\n\n  const siblingsStart = Math.max(\n    Math.min(\n      // Natural start\n      activePage - siblingCount,\n      // Lower boundary when page is high\n      pageCount - boundaryCount - siblingCount * 2 - 1\n    ),\n    // Greater than startPages\n    boundaryCount + 2\n  );\n\n  const siblingsEnd = Math.min(\n    Math.max(\n      // Natural end\n      activePage + siblingCount,\n      // Upper boundary when page is low\n      boundaryCount + siblingCount * 2 + 2\n    ),\n    // Less than endPages\n    endPages.length > 0 ? endPages[0] - 2 : pageCount - 1\n  );\n\n  const items = [\n    ...startPages,\n\n    // Start ellipsis\n    // eslint-disable-next-line no-nested-ternary\n    ...(siblingsStart > boundaryCount + 2\n      ? ['start-ellipsis']\n      : boundaryCount + 1 < pageCount - boundaryCount\n        ? [boundaryCount + 1]\n        : []),\n\n    // Sibling pages\n    ...range(siblingsStart, siblingsEnd),\n\n    // End ellipsis\n    // eslint-disable-next-line no-nested-ternary\n    ...(siblingsEnd < pageCount - boundaryCount - 1\n      ? ['end-ellipsis']\n      : pageCount - boundaryCount > boundaryCount\n        ? [pageCount - boundaryCount]\n        : []),\n\n    ...endPages,\n  ];\n\n  if (pageCount <= 1) {\n    return null;\n  }\n\n  return (\n    <PaginationImpl activePage={activePage} pageCount={pageCount}>\n      <PreviousLink tag={Link} to={{ search: stringify({ ...query, page: activePage - 1 }) }}>\n        {formatMessage({\n          id: 'components.pagination.go-to-previous',\n          defaultMessage: 'Go to previous page',\n        })}\n      </PreviousLink>\n      {items.map((item) => {\n        if (typeof item === 'number') {\n          return (\n            <PageLink\n              tag={Link}\n              key={item}\n              number={item}\n              to={{ search: stringify({ ...query, page: item }) }}\n            >\n              {formatMessage(\n                { id: 'components.pagination.go-to', defaultMessage: 'Go to page {page}' },\n                { page: item }\n              )}\n            </PageLink>\n          );\n        }\n\n        return <Dots key={item} />;\n      })}\n\n      <NextLink tag={Link} to={{ search: stringify({ ...query, page: activePage + 1 }) }}>\n        {formatMessage({\n          id: 'components.pagination.go-to-next',\n          defaultMessage: 'Go to next page',\n        })}\n      </NextLink>\n    </PaginationImpl>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * EXPORTS\n * -----------------------------------------------------------------------------------------------*/\n\nconst Pagination = {\n  Root,\n  Links,\n  PageSize,\n};\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nnamespace Pagination {\n  export interface Props extends RootProps {}\n\n  export interface PageSizeProps {\n    options?: string[];\n  }\n\n  export interface LinksProps {\n    /**\n     * @default 1\n     * @description Number of always visible pages at the beginning and end.\n     */\n    boundaryCount?: number;\n    /**\n     * @default 1\n     * @description Number of always visible pages before and after the current page.\n     */\n    siblingCount?: number;\n  }\n}\n\nexport { Pagination };\n"],"names":["PaginationProvider","usePagination","createContext","Root","React","forwardRef","children","defaultPageSize","pageCount","defaultPage","onPageSizeChange","total","forwardedRef","query","setQuery","useQueryParams","pageSize","toString","page","setPageSize","_jsx","Flex","ref","paddingTop","paddingBottom","alignItems","justifyContent","currentQuery","PageSize","options","formatMessage","useIntl","state","totalCount","handleChange","value","minimumOption","parseInt","_jsxs","gap","SingleSelect","size","aria-label","id","defaultMessage","onChange","map","option","SingleSelectOption","Typography","textColor","tag","Links","boundaryCount","siblingCount","currentPage","totalPages","activePage","range","start","end","length","Array","from","_","i","startPages","Math","min","endPages","max","siblingsStart","siblingsEnd","items","PaginationImpl","PreviousLink","Link","to","search","stringify","item","PageLink","number","Dots","NextLink","Pagination"],"mappings":"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"}