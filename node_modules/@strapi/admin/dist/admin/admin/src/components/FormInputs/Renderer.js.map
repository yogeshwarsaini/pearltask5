{"version":3,"file":"Renderer.js","sources":["../../../../../../admin/src/components/FormInputs/Renderer.tsx"],"sourcesContent":["import { forwardRef, memo } from 'react';\n\nimport { TextInput, useComposedRefs, Field } from '@strapi/design-system';\n\nimport { useFocusInputField } from '../../hooks/useFocusInputField';\nimport { useField } from '../Form';\n\nimport { BooleanInput } from './Boolean';\nimport { CheckboxInput } from './Checkbox';\nimport { DateInput } from './Date';\nimport { DateTimeInput } from './DateTime';\nimport { EmailInput } from './Email';\nimport { EnumerationInput } from './Enumeration';\nimport { JsonInput } from './Json';\nimport { NumberInput } from './Number';\nimport { PasswordInput } from './Password';\nimport { StringInput } from './String';\nimport { TextareaInput } from './Textarea';\nimport { TimeInput } from './Time';\n\nimport type { InputProps } from '../Form';\n\n/* -------------------------------------------------------------------------------------------------\n * InputRenderer\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * @internal This needs to be tested before being exposed as a public API.\n * @experimental\n * @description A generic form renderer for Strapi forms. Similar to GenericInputs but with a different API.\n * The entire component is memoized to avoid re-renders in large forms.\n */\nconst InputRenderer = memo(\n  forwardRef<any, InputProps>((props, forwardRef) => {\n    switch (props.type) {\n      case 'biginteger':\n      case 'timestamp':\n      case 'string':\n      case 'uid':\n        return <StringInput ref={forwardRef} {...props} />;\n      case 'boolean':\n        return <BooleanInput ref={forwardRef} {...props} />;\n      case 'checkbox':\n        return <CheckboxInput ref={forwardRef} {...props} />;\n      case 'datetime':\n        return <DateTimeInput ref={forwardRef} {...props} />;\n      case 'date':\n        return <DateInput ref={forwardRef} {...props} />;\n      case 'decimal':\n      case 'float':\n      case 'integer':\n        return <NumberInput ref={forwardRef} {...props} />;\n      case 'json':\n        return <JsonInput ref={forwardRef} {...props} />;\n      case 'email':\n        return <EmailInput ref={forwardRef} {...props} />;\n      case 'enumeration':\n        return <EnumerationInput ref={forwardRef} {...props} />;\n      case 'password':\n        return <PasswordInput ref={forwardRef} {...props} />;\n      case 'text':\n        return <TextareaInput ref={forwardRef} {...props} />;\n      case 'time':\n        return <TimeInput ref={forwardRef} {...props} />;\n      default:\n        // This is cast because this renderer tackles all the possibilities of the InputProps, but this is for runtime catches.\n        return <NotSupportedField ref={forwardRef} {...(props as InputProps)} />;\n    }\n  })\n);\n\nconst NotSupportedField = forwardRef<any, InputProps>(\n  ({ label, hint, name, required, type, labelAction }, ref) => {\n    const { error } = useField(name);\n    const fieldRef = useFocusInputField(name);\n\n    const composedRefs = useComposedRefs(ref, fieldRef);\n\n    return (\n      <Field.Root error={error} name={name} hint={hint} required={required}>\n        <Field.Label action={labelAction}>{label}</Field.Label>\n        <TextInput\n          ref={composedRefs}\n          disabled\n          placeholder={`Unsupported field type: ${type}`}\n          required={required}\n          type=\"text\"\n          value=\"\"\n        />\n        <Field.Hint />\n        <Field.Error />\n      </Field.Root>\n    );\n  }\n);\n\nconst MemoizedInputRenderer = memo(InputRenderer);\n\nexport { MemoizedInputRenderer as InputRenderer };\n"],"names":["InputRenderer","memo","forwardRef","props","type","_jsx","StringInput","ref","BooleanInput","CheckboxInput","DateTimeInput","DateInput","NumberInput","JsonInput","EmailInput","EnumerationInput","PasswordInput","TextareaInput","TimeInput","NotSupportedField","label","hint","name","required","labelAction","error","useField","fieldRef","useFocusInputField","composedRefs","useComposedRefs","_jsxs","Field","Root","Label","action","TextInput","disabled","placeholder","value","Hint","Error","MemoizedInputRenderer"],"mappings":"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"}