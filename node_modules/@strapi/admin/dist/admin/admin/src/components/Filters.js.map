{"version":3,"file":"Filters.js","sources":["../../../../../admin/src/components/Filters.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { Box, Button, Flex, Popover, Tag } from '@strapi/design-system';\nimport { Plus, Filter as FilterIcon, Cross } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\nimport {\n  BASE_FILTERS,\n  CONTAINS_FILTERS,\n  FilterOption,\n  IS_SENSITIVE_FILTERS,\n  NUMERIC_FILTERS,\n  STRING_PARSE_FILTERS,\n  FILTERS_WITH_NO_VALUE,\n} from '../constants/filters';\nimport { useControllableState } from '../hooks/useControllableState';\nimport { useQueryParams } from '../hooks/useQueryParams';\n\nimport { createContext } from './Context';\nimport { Form, InputProps } from './Form';\nimport { InputRenderer } from './FormInputs/Renderer';\n\nimport type { Schema } from '@strapi/types';\n\n/* -------------------------------------------------------------------------------------------------\n * Root\n * -----------------------------------------------------------------------------------------------*/\n\ninterface FilterFormData {\n  name: string;\n  filter: string;\n  value?: string;\n}\n\ninterface FitlersContextValue {\n  disabled: boolean;\n  onChange: (data: FilterFormData) => void;\n  options: Filters.Filter[];\n  setOpen: (open: boolean) => void;\n}\n\nconst [FiltersProvider, useFilters] = createContext<FitlersContextValue>('Filters');\n\ninterface RootProps extends Partial<FitlersContextValue>, Popover.Props {\n  children: React.ReactNode;\n}\n\nconst Root = ({\n  children,\n  disabled = false,\n  onChange,\n  options = [],\n  onOpenChange,\n  open: openProp,\n  defaultOpen,\n  ...restProps\n}: RootProps) => {\n  const handleChange = (data: FilterFormData) => {\n    if (onChange) {\n      onChange(data);\n    }\n  };\n  const [open = false, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange,\n  });\n\n  return (\n    <Popover.Root open={open} onOpenChange={setOpen} {...restProps}>\n      <FiltersProvider\n        setOpen={setOpen}\n        disabled={disabled}\n        onChange={handleChange}\n        options={options}\n      >\n        {children}\n      </FiltersProvider>\n    </Popover.Root>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Trigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst Trigger = React.forwardRef<HTMLButtonElement, Filters.TriggerProps>(\n  ({ label }, forwardedRef) => {\n    const { formatMessage } = useIntl();\n    const disabled = useFilters('Trigger', ({ disabled }) => disabled);\n\n    return (\n      <Popover.Trigger>\n        <Button\n          variant=\"tertiary\"\n          ref={forwardedRef}\n          startIcon={<FilterIcon />}\n          size=\"S\"\n          disabled={disabled}\n        >\n          {label || formatMessage({ id: 'app.utils.filters', defaultMessage: 'Filters' })}\n        </Button>\n      </Popover.Trigger>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * Popover\n * -----------------------------------------------------------------------------------------------*/\n\nconst PopoverImpl = () => {\n  const [{ query }, setQuery] = useQueryParams<Filters.Query>();\n  const { formatMessage } = useIntl();\n  const options = useFilters('Popover', ({ options }) => options);\n  const onChange = useFilters('Popover', ({ onChange }) => onChange);\n  const setOpen = useFilters('Popover', ({ setOpen }) => setOpen);\n\n  if (options.length === 0) {\n    return null;\n  }\n\n  const handleSubmit = (data: FilterFormData) => {\n    const value = FILTERS_WITH_NO_VALUE.includes(data.filter)\n      ? 'true'\n      : encodeURIComponent(data.value ?? '');\n\n    if (!value) {\n      return;\n    }\n\n    if (onChange) {\n      onChange(data);\n    }\n\n    /**\n     * There will ALWAYS be an option because we use the options to create the form data.\n     */\n    const fieldOptions = options.find((filter) => filter.name === data.name)!;\n\n    /**\n     * If the filter is a relation, we need to nest the filter object,\n     * we filter based on the mainField of the relation, if there is no mainField, we use the id.\n     * At the end, we pass the operator & value. This value _could_ look like:\n     * ```json\n     * {\n     *  \"$eq\": \"1\",\n     * }\n     * ```\n     */\n    const operatorValuePairing = {\n      [data.filter]: value,\n    };\n\n    const newFilterQuery = {\n      ...query.filters,\n      $and: [\n        ...(query.filters?.$and ?? []),\n        {\n          [data.name]:\n            fieldOptions.type === 'relation'\n              ? {\n                  [fieldOptions.mainField?.name ?? 'id']: operatorValuePairing,\n                }\n              : operatorValuePairing,\n        },\n      ],\n    };\n\n    setQuery({ filters: newFilterQuery, page: 1 });\n    setOpen(false);\n  };\n\n  return (\n    <Popover.Content>\n      <Box padding={3}>\n        <Form\n          method=\"POST\"\n          initialValues={\n            {\n              name: options[0]?.name,\n              filter: BASE_FILTERS[0].value,\n            } satisfies FilterFormData\n          }\n          onSubmit={handleSubmit}\n        >\n          {({ values: formValues, modified, isSubmitting }) => {\n            const filter = options.find((filter) => filter.name === formValues.name);\n            const Input = filter?.input || InputRenderer;\n            return (\n              <Flex direction=\"column\" alignItems=\"stretch\" gap={2} style={{ minWidth: 184 }}>\n                {[\n                  {\n                    ['aria-label']: formatMessage({\n                      id: 'app.utils.select-field',\n                      defaultMessage: 'Select field',\n                    }),\n                    name: 'name',\n                    options: options.map((filter) => ({\n                      label: filter.label,\n                      value: filter.name,\n                    })),\n                    placholder: formatMessage({\n                      id: 'app.utils.select-field',\n                      defaultMessage: 'Select field',\n                    }),\n                    type: 'enumeration' as const,\n                  },\n                  {\n                    ['aria-label']: formatMessage({\n                      id: 'app.utils.select-filter',\n                      defaultMessage: 'Select filter',\n                    }),\n                    name: 'filter',\n                    options:\n                      filter?.operators ||\n                      getFilterList(filter).map((opt) => ({\n                        label: formatMessage(opt.label),\n                        value: opt.value,\n                      })),\n                    placeholder: formatMessage({\n                      id: 'app.utils.select-filter',\n                      defaultMessage: 'Select filter',\n                    }),\n                    type: 'enumeration' as const,\n                  },\n                ].map((field) => (\n                  <InputRenderer key={field.name} {...field} />\n                ))}\n                {filter &&\n                formValues.filter &&\n                formValues.filter !== '$null' &&\n                formValues.filter !== '$notNull' ? (\n                  <Input\n                    {...filter}\n                    label={null}\n                    aria-label={filter.label}\n                    name=\"value\"\n                    // @ts-expect-error â€“ if type is `custom` then `Input` will be a custom component.\n                    type={filter.mainField?.type ?? filter.type}\n                  />\n                ) : null}\n                <Button\n                  disabled={!modified || isSubmitting}\n                  size=\"L\"\n                  variant=\"secondary\"\n                  startIcon={<Plus />}\n                  type=\"submit\"\n                  fullWidth\n                >\n                  {formatMessage({ id: 'app.utils.add-filter', defaultMessage: 'Add filter' })}\n                </Button>\n              </Flex>\n            );\n          }}\n        </Form>\n      </Box>\n    </Popover.Content>\n  );\n};\n\n/**\n * Depending on the selected field find the possible filters to apply\n */\nconst getFilterList = (filter?: Filters.Filter): FilterOption[] => {\n  if (!filter) {\n    return [];\n  }\n\n  const type = filter.mainField?.type ? filter.mainField.type : filter.type;\n\n  switch (type) {\n    case 'email':\n    case 'text':\n    case 'string': {\n      return [\n        ...BASE_FILTERS,\n        ...IS_SENSITIVE_FILTERS,\n        ...CONTAINS_FILTERS,\n        ...STRING_PARSE_FILTERS,\n      ];\n    }\n\n    case 'float':\n    case 'integer':\n    case 'biginteger':\n    case 'decimal': {\n      return [...BASE_FILTERS, ...NUMERIC_FILTERS];\n    }\n    case 'time':\n    case 'date': {\n      return [...BASE_FILTERS, ...NUMERIC_FILTERS, ...CONTAINS_FILTERS];\n    }\n\n    case 'datetime': {\n      return [...BASE_FILTERS, ...NUMERIC_FILTERS];\n    }\n\n    case 'enumeration': {\n      return BASE_FILTERS;\n    }\n\n    default:\n      return [...BASE_FILTERS, ...IS_SENSITIVE_FILTERS];\n  }\n};\n\n/* -------------------------------------------------------------------------------------------------\n * List\n * -----------------------------------------------------------------------------------------------*/\n\nconst List = () => {\n  const [{ query }, setQuery] = useQueryParams<Filters.Query>();\n\n  const options = useFilters('List', ({ options }) => options);\n\n  const handleClick = (data: FilterFormData) => {\n    /**\n     * Check the name, operator and value to see if it already exists in the query\n     * if it does, remove it.\n     */\n    const nextFilters = (query?.filters?.$and ?? []).filter((filter) => {\n      const [attributeName] = Object.keys(filter);\n      if (attributeName !== data.name) {\n        return true;\n      }\n\n      const { type, mainField } = options.find(({ name }) => name === attributeName)!;\n\n      if (type === 'relation') {\n        const filterObj = filter[attributeName][mainField?.name ?? 'id'];\n\n        if (typeof filterObj === 'object') {\n          const [operator] = Object.keys(filterObj);\n          const value = filterObj[operator];\n\n          return !(operator === data.filter && value === data.value);\n        }\n\n        return true;\n      } else {\n        const filterObj = filter[attributeName];\n        const [operator] = Object.keys(filterObj);\n        const value = filterObj[operator];\n\n        return !(operator === data.filter && value === data.value);\n      }\n    });\n\n    setQuery({ filters: { $and: nextFilters }, page: 1 });\n  };\n\n  if (!query?.filters?.$and?.length) {\n    return null;\n  }\n\n  return (\n    <>\n      {query?.filters?.$and?.map((queryFilter) => {\n        const [attributeName] = Object.keys(queryFilter);\n        const filter = options.find(({ name }) => name === attributeName);\n        const filterObj = queryFilter[attributeName];\n\n        if (!filter || typeof filterObj !== 'object' || filterObj === null) {\n          return null;\n        }\n\n        if (filter.type === 'relation') {\n          const modelFilter = filterObj[filter.mainField?.name ?? 'id'];\n\n          if (typeof modelFilter === 'object') {\n            const [operator] = Object.keys(modelFilter);\n            const value = modelFilter[operator];\n            return (\n              <AttributeTag\n                key={`${attributeName}-${operator}-${value}`}\n                {...filter}\n                onClick={handleClick}\n                operator={operator}\n                value={value}\n              />\n            );\n          }\n\n          return null;\n        } else {\n          const [operator] = Object.keys(filterObj);\n          const value = filterObj[operator];\n\n          /**\n           * Something has gone wrong here, because the attribute is not a relation\n           * but we have a nested filter object.\n           */\n          if (typeof value === 'object') {\n            return null;\n          }\n\n          return (\n            <AttributeTag\n              key={`${attributeName}-${operator}-${value}`}\n              {...filter}\n              onClick={handleClick}\n              operator={operator}\n              value={value}\n            />\n          );\n        }\n      })}\n    </>\n  );\n};\n\ninterface AttributeTagProps extends Filters.Filter {\n  onClick: (data: FilterFormData) => void;\n  operator: string;\n  value: string;\n}\n\nconst AttributeTag = ({\n  input,\n  label,\n  mainField,\n  name,\n  onClick,\n  operator,\n  options,\n  value,\n  ...filter\n}: AttributeTagProps) => {\n  const { formatMessage, formatDate, formatTime, formatNumber } = useIntl();\n\n  const handleClick = () => {\n    onClick({ name, value, filter: operator });\n  };\n\n  const type = mainField?.type ? mainField.type : filter.type;\n\n  let formattedValue: string = value;\n\n  switch (type) {\n    case 'date':\n      formattedValue = formatDate(value, { dateStyle: 'full' });\n      break;\n    case 'datetime':\n      formattedValue = formatDate(value, { dateStyle: 'full', timeStyle: 'short' });\n      break;\n    case 'time':\n      const [hour, minute] = value.split(':');\n      const date = new Date();\n      date.setHours(Number(hour));\n      date.setMinutes(Number(minute));\n\n      formattedValue = formatTime(date, {\n        hour: 'numeric',\n        minute: 'numeric',\n      });\n      break;\n    case 'float':\n    case 'integer':\n    case 'biginteger':\n    case 'decimal':\n      formattedValue = formatNumber(Number(value));\n      break;\n  }\n\n  // Handle custom input\n  if (input && options) {\n    // If the custom input has an options array, find the option with a customValue matching the query value\n    const selectedOption = options.find((option) => {\n      return (typeof option === 'string' ? option : option.value) === value;\n    });\n\n    formattedValue = selectedOption\n      ? typeof selectedOption === 'string'\n        ? selectedOption\n        : (selectedOption.label ?? selectedOption.value)\n      : value;\n  }\n\n  const content = `${label} ${formatMessage({\n    id: `components.FilterOptions.FILTER_TYPES.${operator}`,\n    defaultMessage: operator,\n  })} ${operator !== '$null' && operator !== '$notNull' ? formattedValue : ''}`;\n\n  return (\n    <Tag padding={1} onClick={handleClick} icon={<Cross />}>\n      {content}\n    </Tag>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * EXPORTS\n * -----------------------------------------------------------------------------------------------*/\n\nconst Filters = {\n  List,\n  Popover: PopoverImpl,\n  Root,\n  Trigger,\n};\n\ninterface MainField {\n  name: string;\n  type: Schema.Attribute.Kind | 'custom';\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nnamespace Filters {\n  export interface Filter {\n    input?: React.ComponentType<ValueInputProps>;\n    label: string;\n    /**\n     * the name of the attribute we use to display the actual name e.g. relations\n     * are just ids, so we use the mainField to display something meaninginful by\n     * looking at the target's schema\n     */\n    mainField?: MainField;\n    name: string;\n    operators?: Array<{\n      label: string;\n      value: string;\n    }>;\n    options?: Array<{ label?: string; value: string }> | string[];\n    type: InputProps['type'] | 'relation' | 'custom';\n  }\n\n  export interface ValueInputProps extends Omit<Filter, 'label'> {\n    ['aria-label']: string;\n  }\n\n  export type Props = RootProps;\n\n  export interface TriggerProps {\n    label?: string;\n  }\n\n  export interface Query {\n    filters?: {\n      /**\n       * Typically, a filter will be:\n       * ```ts\n       * {\n       *  [attributeName]: {\n       *    [operator]: value\n       *  }\n       * }\n       * ```\n       * However, for relation items it becomes more nested.\n       * ```ts\n       * {\n       *  [attributeName]: {\n       *    [relationTargetAttribute]: {\n       *     [operator]: value\n       *    }\n       *  }\n       * }\n       * ```\n       */\n      $and?: Array<Record<string, Record<string, string | Record<string, string>>>>;\n    };\n    page?: number;\n  }\n}\n\nexport { Filters };\n"],"names":["FiltersProvider","useFilters","createContext","Root","children","disabled","onChange","options","onOpenChange","open","openProp","defaultOpen","restProps","handleChange","data","setOpen","useControllableState","prop","defaultProp","_jsx","Popover","Trigger","React","forwardRef","label","forwardedRef","formatMessage","useIntl","Button","variant","ref","startIcon","FilterIcon","size","id","defaultMessage","PopoverImpl","query","setQuery","useQueryParams","length","handleSubmit","value","FILTERS_WITH_NO_VALUE","includes","filter","encodeURIComponent","fieldOptions","find","name","operatorValuePairing","newFilterQuery","filters","$and","type","mainField","page","Content","Box","padding","Form","method","initialValues","BASE_FILTERS","onSubmit","values","formValues","modified","isSubmitting","Input","input","InputRenderer","_jsxs","Flex","direction","alignItems","gap","style","minWidth","map","placholder","operators","getFilterList","opt","placeholder","field","aria-label","Plus","fullWidth","IS_SENSITIVE_FILTERS","CONTAINS_FILTERS","STRING_PARSE_FILTERS","NUMERIC_FILTERS","List","handleClick","nextFilters","attributeName","Object","keys","filterObj","operator","_Fragment","queryFilter","modelFilter","AttributeTag","onClick","formatDate","formatTime","formatNumber","formattedValue","dateStyle","timeStyle","hour","minute","split","date","Date","setHours","Number","setMinutes","selectedOption","option","content","Tag","icon","Cross","Filters"],"mappings":"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"}