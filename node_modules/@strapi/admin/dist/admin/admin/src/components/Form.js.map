{"version":3,"file":"Form.js","sources":["../../../../../admin/src/components/Form.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {\n  Box,\n  type BoxProps,\n  Button,\n  Dialog,\n  useCallbackRef,\n  useComposedRefs,\n} from '@strapi/design-system';\nimport { WarningCircle } from '@strapi/icons';\nimport { generateNKeysBetween } from 'fractional-indexing';\nimport { produce } from 'immer';\nimport isEqual from 'lodash/isEqual';\nimport { useIntl, type MessageDescriptor, type PrimitiveType } from 'react-intl';\nimport { useBlocker } from 'react-router-dom';\n\nimport { getIn, setIn } from '../utils/objects';\n\nimport { createContext } from './Context';\n\nimport type {\n  InputProps as InputPropsImpl,\n  StringProps,\n  EnumerationProps,\n} from './FormInputs/types';\nimport type * as Yup from 'yup';\n\n/* -------------------------------------------------------------------------------------------------\n * FormContext\n * -----------------------------------------------------------------------------------------------*/\ntype InputProps = InputPropsImpl | StringProps | EnumerationProps;\n\ninterface TranslationMessage extends MessageDescriptor {\n  values?: Record<string, PrimitiveType>;\n}\n\ninterface FormValues {\n  [field: string]: any;\n}\n\ninterface FormContextValue<TFormValues extends FormValues = FormValues>\n  extends FormState<TFormValues> {\n  disabled: boolean;\n  initialValues: TFormValues;\n  modified: boolean;\n  /**\n   * The default behaviour is to add the row to the end of the array, if you want to add it to a\n   * specific index you can pass the index.\n   */\n  addFieldRow: (field: string, value: any, addAtIndex?: number) => void;\n  moveFieldRow: (field: string, fromIndex: number, toIndex: number) => void;\n  onChange: (eventOrPath: React.ChangeEvent<any> | string, value?: any) => void;\n  /*\n   * The default behaviour is to remove the last row, if you want to remove a specific index you can\n   * pass the index.\n   */\n  removeFieldRow: (field: string, removeAtIndex?: number) => void;\n  resetForm: () => void;\n  setErrors: (errors: FormErrors<TFormValues>) => void;\n  setSubmitting: (isSubmitting: boolean) => void;\n  setValues: (values: TFormValues) => void;\n  validate: (\n    shouldSetErrors?: boolean,\n    options?: Record<string, string>\n  ) => Promise<\n    { data: TFormValues; errors?: never } | { data?: never; errors: FormErrors<TFormValues> }\n  >;\n}\n\n/**\n * @internal\n * @description We use this just to warn people that they're using the useForm\n * methods outside of a Form component, but we don't want to throw an error\n * because otherwise the DocumentActions list cannot be rendered in our list-view.\n */\nconst ERR_MSG =\n  'The Form Component has not been initialised, ensure you are using this hook within a Form component';\n\nconst [FormProvider, useForm] = createContext<FormContextValue>('Form', {\n  disabled: false,\n  errors: {},\n  initialValues: {},\n  isSubmitting: false,\n  modified: false,\n  addFieldRow: () => {\n    throw new Error(ERR_MSG);\n  },\n  moveFieldRow: () => {\n    throw new Error(ERR_MSG);\n  },\n  onChange: () => {\n    throw new Error(ERR_MSG);\n  },\n  removeFieldRow: () => {\n    throw new Error(ERR_MSG);\n  },\n  resetForm: () => {\n    throw new Error(ERR_MSG);\n  },\n  setErrors: () => {\n    throw new Error(ERR_MSG);\n  },\n  setValues: () => {\n    throw new Error(ERR_MSG);\n  },\n  setSubmitting: () => {\n    throw new Error(ERR_MSG);\n  },\n  validate: async () => {\n    throw new Error(ERR_MSG);\n  },\n  values: {},\n});\n\n/* -------------------------------------------------------------------------------------------------\n * Form\n * -----------------------------------------------------------------------------------------------*/\n\ninterface FormHelpers<TFormValues extends FormValues = FormValues>\n  extends Pick<FormContextValue<TFormValues>, 'setErrors' | 'setValues' | 'resetForm'> {}\n\ninterface FormProps<TFormValues extends FormValues = FormValues>\n  extends Partial<Pick<FormContextValue<TFormValues>, 'disabled' | 'initialValues'>>,\n    Pick<BoxProps, 'width' | 'height'> {\n  children:\n    | React.ReactNode\n    | ((\n        props: Pick<\n          FormContextValue<TFormValues>,\n          | 'disabled'\n          | 'errors'\n          | 'isSubmitting'\n          | 'modified'\n          | 'values'\n          | 'resetForm'\n          | 'onChange'\n          | 'setErrors'\n        >\n      ) => React.ReactNode);\n  method: 'POST' | 'PUT';\n  onSubmit?: (values: TFormValues, helpers: FormHelpers<TFormValues>) => Promise<void> | void;\n  // TODO: type the return value for a validation schema func from Yup.\n  validationSchema?: Yup.AnySchema;\n  initialErrors?: FormErrors<TFormValues>;\n  // NOTE: we don't know what return type it can be here\n  validate?: (values: TFormValues, options: Record<string, string>) => Promise<any>;\n}\n\n/**\n * @alpha\n * @description A form component that handles form state, validation and submission.\n * It can additionally handle nested fields and arrays. To access the data you can either\n * use the generic useForm hook or the useField hook when providing the name of your field.\n */\nconst Form = React.forwardRef<HTMLFormElement, FormProps>(\n  ({ disabled = false, method, onSubmit, initialErrors, ...props }, ref) => {\n    const formRef = React.useRef<HTMLFormElement>(null!);\n    const initialValues = React.useRef(props.initialValues ?? {});\n    const [state, dispatch] = React.useReducer(reducer, {\n      errors: initialErrors ?? {},\n      isSubmitting: false,\n      values: props.initialValues ?? {},\n    });\n\n    React.useEffect(() => {\n      /**\n       * ONLY update the initialValues if the prop has changed.\n       */\n      if (!isEqual(initialValues.current, props.initialValues)) {\n        initialValues.current = props.initialValues ?? {};\n\n        dispatch({\n          type: 'SET_INITIAL_VALUES',\n          payload: props.initialValues ?? {},\n        });\n      }\n    }, [props.initialValues]);\n\n    const setErrors = React.useCallback((errors: FormErrors) => {\n      dispatch({\n        type: 'SET_ERRORS',\n        payload: errors,\n      });\n    }, []);\n\n    const setValues = React.useCallback((values: FormValues) => {\n      dispatch({\n        type: 'SET_VALUES',\n        payload: values,\n      });\n    }, []);\n\n    React.useEffect(() => {\n      if (Object.keys(state.errors).length === 0) return;\n\n      /**\n       * Small timeout to ensure the form has been\n       * rendered before we try to focus on the first\n       */\n      const ref = setTimeout(() => {\n        const [firstError] = formRef.current.querySelectorAll('[data-strapi-field-error]');\n\n        if (firstError) {\n          const errorId = firstError.getAttribute('id');\n          const formElementInError = formRef.current.querySelector(\n            `[aria-describedby=\"${errorId}\"]`\n          );\n\n          if (formElementInError && formElementInError instanceof HTMLElement) {\n            formElementInError.focus();\n          }\n        }\n      });\n\n      return () => clearTimeout(ref);\n    }, [state.errors]);\n\n    /**\n     * Uses the provided validation schema\n     */\n    const validate = React.useCallback(\n      async (shouldSetErrors: boolean = true, options: Record<string, string> = {}) => {\n        setErrors({});\n\n        if (!props.validationSchema && !props.validate) {\n          return { data: state.values };\n        }\n\n        try {\n          let data;\n          if (props.validationSchema) {\n            data = await props.validationSchema.validate(state.values, { abortEarly: false });\n          } else if (props.validate) {\n            data = await props.validate(state.values, options);\n          } else {\n            throw new Error('No validation schema or validate function provided');\n          }\n\n          return { data };\n        } catch (err) {\n          if (isErrorYupValidationError(err)) {\n            const errors = getYupValidationErrors(err);\n\n            if (shouldSetErrors) {\n              setErrors(errors);\n            }\n\n            return { errors };\n          } else {\n            // We throw any other errors\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `Warning: An unhandled error was caught during validation in <Form validationSchema />`,\n                err\n              );\n            }\n\n            throw err;\n          }\n        }\n      },\n      [props, setErrors, state.values]\n    );\n\n    const handleSubmit: React.FormEventHandler<HTMLFormElement> = async (e) => {\n      e.stopPropagation();\n      e.preventDefault();\n\n      if (!onSubmit) {\n        return;\n      }\n\n      dispatch({\n        type: 'SUBMIT_ATTEMPT',\n      });\n\n      try {\n        const { data, errors } = await validate();\n\n        if (errors) {\n          setErrors(errors);\n\n          throw new Error('Submission failed');\n        }\n\n        await onSubmit(data, {\n          setErrors,\n          setValues,\n          resetForm,\n        });\n\n        dispatch({\n          type: 'SUBMIT_SUCCESS',\n        });\n      } catch (err) {\n        dispatch({\n          type: 'SUBMIT_FAILURE',\n        });\n\n        if (err instanceof Error && err.message === 'Submission failed') {\n          return;\n        }\n      }\n    };\n\n    const modified = React.useMemo(\n      () => !isEqual(initialValues.current, state.values),\n      [state.values]\n    );\n\n    const handleChange: FormContextValue['onChange'] = useCallbackRef((eventOrPath, v) => {\n      if (typeof eventOrPath === 'string') {\n        dispatch({\n          type: 'SET_FIELD_VALUE',\n          payload: {\n            field: eventOrPath,\n            value: v,\n          },\n        });\n\n        return;\n      }\n\n      const target = eventOrPath.target || eventOrPath.currentTarget;\n\n      const { type, name, id, value, options, multiple } = target;\n\n      const field = name || id;\n\n      if (!field && process.env.NODE_ENV !== 'production') {\n        console.warn(\n          `\\`onChange\\` was called with an event, but you forgot to pass a \\`name\\` or \\`id'\\` attribute to your input. The field to update cannot be determined`\n        );\n      }\n\n      /**\n       * Because we handle any field from this function, we run through a series\n       * of checks to understand how to use the value.\n       */\n      let val;\n\n      if (/number|range/.test(type)) {\n        const parsed = parseFloat(value);\n        // If the value isn't a number for whatever reason, don't let it through because that will break the API.\n        val = isNaN(parsed) ? '' : parsed;\n      } else if (/checkbox/.test(type)) {\n        // Get & invert the current value of the checkbox.\n        val = !getIn(state.values, field);\n      } else if (options && multiple) {\n        // This will handle native select elements incl. ones with mulitple options.\n        val = Array.from<HTMLOptionElement>(options)\n          .filter((el) => el.selected)\n          .map((el) => el.value);\n      } else {\n        // NOTE: reset value to null so it failes required checks.\n        // The API only considers a required field invalid if the value is null|undefined, to differentiate from min 1\n        if (value === '') {\n          val = null;\n        } else {\n          val = value;\n        }\n      }\n\n      if (field) {\n        dispatch({\n          type: 'SET_FIELD_VALUE',\n          payload: {\n            field,\n            value: val,\n          },\n        });\n      }\n    });\n\n    const addFieldRow: FormContextValue['addFieldRow'] = React.useCallback(\n      (field, value, addAtIndex) => {\n        dispatch({\n          type: 'ADD_FIELD_ROW',\n          payload: {\n            field,\n            value,\n            addAtIndex,\n          },\n        });\n      },\n      []\n    );\n\n    const removeFieldRow: FormContextValue['removeFieldRow'] = React.useCallback(\n      (field, removeAtIndex) => {\n        dispatch({\n          type: 'REMOVE_FIELD_ROW',\n          payload: {\n            field,\n            removeAtIndex,\n          },\n        });\n      },\n      []\n    );\n\n    const moveFieldRow: FormContextValue['moveFieldRow'] = React.useCallback(\n      (field, fromIndex, toIndex) => {\n        dispatch({\n          type: 'MOVE_FIELD_ROW',\n          payload: {\n            field,\n            fromIndex,\n            toIndex,\n          },\n        });\n      },\n      []\n    );\n\n    const resetForm: FormContextValue['resetForm'] = React.useCallback(() => {\n      dispatch({\n        type: 'RESET_FORM',\n        payload: {\n          errors: {},\n          isSubmitting: false,\n          values: initialValues.current,\n        },\n      });\n    }, []);\n\n    const setSubmitting = React.useCallback((isSubmitting: boolean) => {\n      dispatch({ type: 'SET_ISSUBMITTING', payload: isSubmitting });\n    }, []);\n\n    const composedRefs = useComposedRefs(formRef, ref);\n\n    return (\n      <Box\n        tag=\"form\"\n        ref={composedRefs}\n        method={method}\n        noValidate\n        onSubmit={handleSubmit}\n        width={props.width}\n        height={props.height}\n      >\n        <FormProvider\n          disabled={disabled}\n          onChange={handleChange}\n          initialValues={initialValues.current}\n          modified={modified}\n          addFieldRow={addFieldRow}\n          moveFieldRow={moveFieldRow}\n          removeFieldRow={removeFieldRow}\n          resetForm={resetForm}\n          setErrors={setErrors}\n          setValues={setValues}\n          setSubmitting={setSubmitting}\n          validate={validate}\n          {...state}\n        >\n          {typeof props.children === 'function'\n            ? props.children({\n                modified,\n                disabled,\n                onChange: handleChange,\n                ...state,\n                setErrors,\n                resetForm,\n              })\n            : props.children}\n        </FormProvider>\n      </Box>\n    );\n  }\n) as <TFormValues extends FormValues>(\n  p: FormProps<TFormValues> & { ref?: React.Ref<HTMLFormElement> }\n) => React.ReactElement; // we've cast this because we need the generic to infer the type of the form values.\n\n/**\n * @internal\n * @description Checks if the error is a Yup validation error.\n */\nconst isErrorYupValidationError = (err: any): err is Yup.ValidationError =>\n  typeof err === 'object' &&\n  err !== null &&\n  'name' in err &&\n  typeof err.name === 'string' &&\n  err.name === 'ValidationError';\n\n/* -------------------------------------------------------------------------------------------------\n * getYupValidationErrors\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * @description handy utility to convert a yup validation error into a form\n * error object. To be used elsewhere.\n */\nconst getYupValidationErrors = (err: Yup.ValidationError): FormErrors => {\n  let errors: FormErrors = {};\n\n  if (err.inner) {\n    if (err.inner.length === 0) {\n      return setIn(errors, err.path!, err.message);\n    }\n    for (const error of err.inner) {\n      if (!getIn(errors, error.path!)) {\n        errors = setIn(errors, error.path!, error.message);\n      }\n    }\n  }\n\n  return errors;\n};\n\n/* -------------------------------------------------------------------------------------------------\n * reducer\n * -----------------------------------------------------------------------------------------------*/\n\ntype FormErrors<TFormValues extends FormValues = FormValues> = {\n  // is it a repeatable component or dynamic zone?\n  [Key in keyof TFormValues]?: TFormValues[Key] extends any[]\n    ? TFormValues[Key][number] extends object\n      ? FormErrors<TFormValues[Key][number]>[] | string | string[]\n      : string // this would let us support errors for the dynamic zone or repeatable component not the components within.\n    : TFormValues[Key] extends object // is it a regular component?\n      ? FormErrors<TFormValues[Key]> // handles nested components\n      : string | TranslationMessage; // otherwise its just a field or a translation message.\n};\n\ninterface FormState<TFormValues extends FormValues = FormValues> {\n  /**\n   * TODO: make this a better type explaining errors could be nested because it follows the same\n   * structure as the values.\n   */\n  errors: FormErrors<TFormValues>;\n  isSubmitting: boolean;\n  values: TFormValues;\n}\n\ntype FormActions<TFormValues extends FormValues = FormValues> =\n  | { type: 'SUBMIT_ATTEMPT' }\n  | { type: 'SUBMIT_FAILURE' }\n  | { type: 'SUBMIT_SUCCESS' }\n  | { type: 'SET_FIELD_VALUE'; payload: { field: string; value: any } }\n  | { type: 'ADD_FIELD_ROW'; payload: { field: string; value: any; addAtIndex?: number } }\n  | { type: 'REMOVE_FIELD_ROW'; payload: { field: string; removeAtIndex?: number } }\n  | { type: 'MOVE_FIELD_ROW'; payload: { field: string; fromIndex: number; toIndex: number } }\n  | { type: 'SET_ERRORS'; payload: FormErrors<TFormValues> }\n  | { type: 'SET_ISSUBMITTING'; payload: boolean }\n  | { type: 'SET_INITIAL_VALUES'; payload: TFormValues }\n  | { type: 'SET_VALUES'; payload: TFormValues }\n  | { type: 'RESET_FORM'; payload: FormState<TFormValues> };\n\nconst reducer = <TFormValues extends FormValues = FormValues>(\n  state: FormState<TFormValues>,\n  action: FormActions<TFormValues>\n) =>\n  produce(state, (draft) => {\n    switch (action.type) {\n      case 'SET_INITIAL_VALUES':\n        // @ts-expect-error – TODO: figure out why this fails ts.\n        draft.values = action.payload;\n        break;\n      case 'SET_VALUES':\n        // @ts-expect-error – TODO: figure out why this fails ts.\n        draft.values = action.payload;\n        break;\n      case 'SUBMIT_ATTEMPT':\n        draft.isSubmitting = true;\n        break;\n      case 'SUBMIT_FAILURE':\n        draft.isSubmitting = false;\n        break;\n      case 'SUBMIT_SUCCESS':\n        draft.isSubmitting = false;\n        break;\n      case 'SET_FIELD_VALUE':\n        draft.values = setIn(state.values, action.payload.field, action.payload.value);\n        break;\n      case 'ADD_FIELD_ROW': {\n        /**\n         * TODO: add check for if the field is an array?\n         */\n        const currentField = getIn(state.values, action.payload.field, []) as Array<any>;\n\n        let position = action.payload.addAtIndex;\n\n        if (position === undefined) {\n          position = currentField.length;\n        } else if (position < 0) {\n          position = 0;\n        }\n\n        const [key] = generateNKeysBetween(\n          position > 0 ? currentField.at(position - 1)?.__temp_key__ : null,\n          currentField.at(position)?.__temp_key__,\n          1\n        );\n\n        draft.values = setIn(\n          state.values,\n          action.payload.field,\n          currentField.toSpliced(position, 0, {\n            ...action.payload.value,\n            __temp_key__: key,\n          })\n        );\n\n        break;\n      }\n      case 'MOVE_FIELD_ROW': {\n        const { field, fromIndex, toIndex } = action.payload;\n        /**\n         * TODO: add check for if the field is an array?\n         */\n        const currentField = [...(getIn(state.values, field, []) as Array<any>)];\n        const currentRow = currentField[fromIndex];\n\n        const startKey =\n          fromIndex > toIndex\n            ? currentField[toIndex - 1]?.__temp_key__\n            : currentField[toIndex]?.__temp_key__;\n        const endKey =\n          fromIndex > toIndex\n            ? currentField[toIndex]?.__temp_key__\n            : currentField[toIndex + 1]?.__temp_key__;\n        const [newKey] = generateNKeysBetween(startKey, endKey, 1);\n\n        currentField.splice(fromIndex, 1);\n        currentField.splice(toIndex, 0, { ...currentRow, __temp_key__: newKey });\n\n        draft.values = setIn(state.values, field, currentField);\n\n        break;\n      }\n      case 'REMOVE_FIELD_ROW': {\n        /**\n         * TODO: add check for if the field is an array?\n         */\n        const currentField = getIn(state.values, action.payload.field, []) as Array<any>;\n\n        let position = action.payload.removeAtIndex;\n\n        if (position === undefined) {\n          position = currentField.length - 1;\n        } else if (position < 0) {\n          position = 0;\n        }\n\n        /**\n         * filter out empty values from the array, the setIn function only deletes the value\n         * when we pass undefined as opposed to \"removing\" it from said array.\n         */\n        const newValue = setIn(currentField, position.toString(), undefined).filter(\n          (val: unknown) => val\n        );\n\n        draft.values = setIn(\n          state.values,\n          action.payload.field,\n          newValue.length > 0 ? newValue : []\n        );\n\n        break;\n      }\n      case 'SET_ERRORS':\n        if (!isEqual(state.errors, action.payload)) {\n          // @ts-expect-error – TODO: figure out why this fails a TS check.\n          draft.errors = action.payload;\n        }\n        break;\n      case 'SET_ISSUBMITTING':\n        draft.isSubmitting = action.payload;\n        break;\n      case 'RESET_FORM':\n        // @ts-expect-error – TODO: figure out why this fails ts.\n        draft.values = action.payload.values;\n        // @ts-expect-error – TODO: figure out why this fails ts.\n        draft.errors = action.payload.errors;\n        draft.isSubmitting = action.payload.isSubmitting;\n        break;\n      default:\n        break;\n    }\n  });\n\n/* -------------------------------------------------------------------------------------------------\n * useField\n * -----------------------------------------------------------------------------------------------*/\ninterface FieldValue<TValue = any> {\n  error?: string;\n  initialValue: TValue;\n  onChange: (eventOrPath: React.ChangeEvent<any> | string, value?: TValue) => void;\n  value: TValue;\n  rawError?: any;\n}\n\nfunction useField<TValue = any>(path: string): FieldValue<TValue | undefined> {\n  const { formatMessage } = useIntl();\n\n  const initialValue = useForm(\n    'useField',\n    (state) => getIn(state.initialValues, path) as FieldValue<TValue>['initialValue']\n  );\n\n  const value = useForm(\n    'useField',\n    (state) => getIn(state.values, path) as FieldValue<TValue>['value']\n  );\n\n  const handleChange = useForm('useField', (state) => state.onChange);\n\n  const rawError = useForm('useField', (state) => getIn(state.errors, path));\n\n  const error = useForm('useField', (state) => {\n    const error = getIn(state.errors, path);\n\n    if (isErrorMessageDescriptor(error)) {\n      const { values, ...message } = error;\n      return formatMessage(message, values);\n    }\n\n    return error;\n  });\n\n  return {\n    initialValue,\n    /**\n     * Errors can be a string, or a MessageDescriptor, so we need to handle both cases.\n     * If it's anything else, we don't return it.\n     */\n    rawError,\n    error: isErrorMessageDescriptor(error)\n      ? formatMessage(\n          {\n            id: error.id,\n            defaultMessage: error.defaultMessage,\n          },\n          error.values\n        )\n      : typeof error === 'string'\n        ? error\n        : undefined,\n    onChange: handleChange,\n    value: value,\n  };\n}\n\nconst isErrorMessageDescriptor = (object?: object): object is TranslationMessage => {\n  return (\n    typeof object === 'object' &&\n    object !== null &&\n    !Array.isArray(object) &&\n    'id' in object &&\n    'defaultMessage' in object\n  );\n};\n\n/**\n * Props for the Blocker component.\n * @param onProceed Function to be called when the user confirms the action that triggered the blocker.\n * @param onCancel Function to be called when the user cancels the action that triggered the blocker.\n */\ninterface BlockerProps {\n  onProceed?: () => void;\n  onCancel?: () => void;\n}\n/* -------------------------------------------------------------------------------------------------\n * Blocker\n * -----------------------------------------------------------------------------------------------*/\nconst Blocker = ({ onProceed = () => {}, onCancel = () => {} }: BlockerProps) => {\n  const { formatMessage } = useIntl();\n  const modified = useForm('Blocker', (state) => state.modified);\n  const isSubmitting = useForm('Blocker', (state) => state.isSubmitting);\n\n  const blocker = useBlocker(({ currentLocation, nextLocation }) => {\n    return (\n      !isSubmitting &&\n      modified &&\n      (currentLocation.pathname !== nextLocation.pathname ||\n        currentLocation.search !== nextLocation.search)\n    );\n  });\n\n  if (blocker.state === 'blocked') {\n    const handleCancel = (isOpen: boolean) => {\n      if (!isOpen) {\n        onCancel();\n        blocker.reset();\n      }\n    };\n\n    return (\n      <Dialog.Root open onOpenChange={handleCancel}>\n        <Dialog.Content>\n          <Dialog.Header>\n            {formatMessage({\n              id: 'app.components.ConfirmDialog.title',\n              defaultMessage: 'Confirmation',\n            })}\n          </Dialog.Header>\n          <Dialog.Body icon={<WarningCircle width=\"24px\" height=\"24px\" fill=\"danger600\" />}>\n            {formatMessage({\n              id: 'global.prompt.unsaved',\n              defaultMessage: 'You have unsaved changes, are you sure you want to leave?',\n            })}\n          </Dialog.Body>\n          <Dialog.Footer>\n            <Dialog.Cancel>\n              <Button variant=\"tertiary\">\n                {formatMessage({\n                  id: 'app.components.Button.cancel',\n                  defaultMessage: 'Cancel',\n                })}\n              </Button>\n            </Dialog.Cancel>\n            <Button\n              onClick={() => {\n                onProceed();\n                blocker.proceed();\n              }}\n              variant=\"danger\"\n            >\n              {formatMessage({\n                id: 'app.components.Button.confirm',\n                defaultMessage: 'Confirm',\n              })}\n            </Button>\n          </Dialog.Footer>\n        </Dialog.Content>\n      </Dialog.Root>\n    );\n  }\n\n  return null;\n};\n\nexport { Form, Blocker, useField, useForm, getYupValidationErrors };\nexport type {\n  FormErrors,\n  FormHelpers,\n  FormProps,\n  FormValues,\n  FormContextValue,\n  FormState,\n  FieldValue,\n  InputProps,\n};\n"],"names":["ERR_MSG","FormProvider","useForm","createContext","disabled","errors","initialValues","isSubmitting","modified","addFieldRow","Error","moveFieldRow","onChange","removeFieldRow","resetForm","setErrors","setValues","setSubmitting","validate","values","Form","React","forwardRef","method","onSubmit","initialErrors","props","ref","formRef","useRef","state","dispatch","useReducer","reducer","useEffect","isEqual","current","type","payload","useCallback","Object","keys","length","setTimeout","firstError","querySelectorAll","errorId","getAttribute","formElementInError","querySelector","HTMLElement","focus","clearTimeout","shouldSetErrors","options","validationSchema","data","abortEarly","err","isErrorYupValidationError","getYupValidationErrors","process","env","NODE_ENV","console","warn","handleSubmit","e","stopPropagation","preventDefault","message","useMemo","handleChange","useCallbackRef","eventOrPath","v","field","value","target","currentTarget","name","id","multiple","val","test","parsed","parseFloat","isNaN","getIn","Array","from","filter","el","selected","map","addAtIndex","removeAtIndex","fromIndex","toIndex","composedRefs","useComposedRefs","_jsx","Box","tag","noValidate","width","height","children","inner","setIn","path","error","action","produce","draft","currentField","position","undefined","key","generateNKeysBetween","at","__temp_key__","toSpliced","currentRow","startKey","endKey","newKey","splice","newValue","toString","useField","formatMessage","useIntl","initialValue","rawError","isErrorMessageDescriptor","defaultMessage","object","isArray","Blocker","onProceed","onCancel","blocker","useBlocker","currentLocation","nextLocation","pathname","search","handleCancel","isOpen","reset","Dialog","Root","open","onOpenChange","_jsxs","Content","Header","Body","icon","WarningCircle","fill","Footer","Cancel","Button","variant","onClick","proceed"],"mappings":"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"}