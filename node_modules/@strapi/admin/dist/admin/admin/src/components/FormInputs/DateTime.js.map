{"version":3,"file":"DateTime.js","sources":["../../../../../../admin/src/components/FormInputs/DateTime.tsx"],"sourcesContent":["import { forwardRef, memo } from 'react';\n\nimport { DateTimePicker, useComposedRefs, Field } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { useFocusInputField } from '../../hooks/useFocusInputField';\nimport { useField } from '../Form';\n\nimport { InputProps } from './types';\n\nconst DateTimeInput = forwardRef<HTMLInputElement, InputProps>(\n  ({ name, required, label, hint, labelAction, ...props }, ref) => {\n    const { formatMessage } = useIntl();\n    const field = useField<string | null>(name);\n    const fieldRef = useFocusInputField<HTMLInputElement>(name);\n\n    const composedRefs = useComposedRefs(ref, fieldRef);\n    const value = typeof field.value === 'string' ? new Date(field.value) : field.value;\n\n    return (\n      <Field.Root error={field.error} name={name} hint={hint} required={required}>\n        <Field.Label action={labelAction}>{label}</Field.Label>\n        <DateTimePicker\n          ref={composedRefs}\n          clearLabel={formatMessage({ id: 'clearLabel', defaultMessage: 'Clear' })}\n          onChange={(date) => {\n            // Store ISO string in the field, but Date object in the component value\n            field.onChange(name, date ? date.toISOString() : null);\n          }}\n          onClear={() => field.onChange(name, null)}\n          value={value}\n          {...props}\n        />\n        <Field.Hint />\n        <Field.Error />\n      </Field.Root>\n    );\n  }\n);\n\nconst MemoizedDateTimeInput = memo(DateTimeInput);\n\nexport { MemoizedDateTimeInput as DateTimeInput };\n"],"names":["DateTimeInput","forwardRef","name","required","label","hint","labelAction","props","ref","formatMessage","useIntl","field","useField","fieldRef","useFocusInputField","composedRefs","useComposedRefs","value","Date","_jsxs","Field","Root","error","_jsx","Label","action","DateTimePicker","clearLabel","id","defaultMessage","onChange","date","toISOString","onClear","Hint","Error","MemoizedDateTimeInput","memo"],"mappings":";;;;;;;;;AAUA,MAAMA,8BAAgBC,gBACpB,CAAA,CAAC,EAAEC,IAAI,EAAEC,QAAQ,EAAEC,KAAK,EAAEC,IAAI,EAAEC,WAAW,EAAE,GAAGC,OAAO,EAAEC,GAAAA,GAAAA;IACvD,MAAM,EAAEC,aAAa,EAAE,GAAGC,iBAAAA,EAAAA;AAC1B,IAAA,MAAMC,QAAQC,aAAwBV,CAAAA,IAAAA,CAAAA;AACtC,IAAA,MAAMW,WAAWC,qCAAqCZ,CAAAA,IAAAA,CAAAA;IAEtD,MAAMa,YAAAA,GAAeC,6BAAgBR,GAAKK,EAAAA,QAAAA,CAAAA;AAC1C,IAAA,MAAMI,KAAQ,GAAA,OAAON,KAAMM,CAAAA,KAAK,KAAK,QAAA,GAAW,IAAIC,IAAAA,CAAKP,KAAMM,CAAAA,KAAK,CAAIN,GAAAA,KAAAA,CAAMM,KAAK;IAEnF,qBACEE,eAAA,CAACC,mBAAMC,IAAI,EAAA;AAACC,QAAAA,KAAAA,EAAOX,MAAMW,KAAK;QAAEpB,IAAMA,EAAAA,IAAAA;QAAMG,IAAMA,EAAAA,IAAAA;QAAMF,QAAUA,EAAAA,QAAAA;;AAChE,0BAAAoB,cAAA,CAACH,mBAAMI,KAAK,EAAA;gBAACC,MAAQnB,EAAAA,WAAAA;AAAcF,gBAAAA,QAAAA,EAAAA;;0BACnCmB,cAACG,CAAAA,2BAAAA,EAAAA;gBACClB,GAAKO,EAAAA,YAAAA;AACLY,gBAAAA,UAAAA,EAAYlB,aAAc,CAAA;oBAAEmB,EAAI,EAAA,YAAA;oBAAcC,cAAgB,EAAA;AAAQ,iBAAA,CAAA;AACtEC,gBAAAA,QAAAA,EAAU,CAACC,IAAAA,GAAAA;;AAETpB,oBAAAA,KAAAA,CAAMmB,QAAQ,CAAC5B,IAAAA,EAAM6B,IAAOA,GAAAA,IAAAA,CAAKC,WAAW,EAAK,GAAA,IAAA,CAAA;AACnD,iBAAA;AACAC,gBAAAA,OAAAA,EAAS,IAAMtB,KAAAA,CAAMmB,QAAQ,CAAC5B,IAAM,EAAA,IAAA,CAAA;gBACpCe,KAAOA,EAAAA,KAAAA;AACN,gBAAA,GAAGV;;AAEN,0BAAAgB,cAAA,CAACH,mBAAMc,IAAI,EAAA,EAAA,CAAA;AACX,0BAAAX,cAAA,CAACH,mBAAMe,KAAK,EAAA,EAAA;;;AAGlB,CAAA,CAAA;AAGF,MAAMC,sCAAwBC,UAAKrC,CAAAA,aAAAA;;;;"}