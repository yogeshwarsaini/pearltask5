{"version":3,"file":"PluginsInitializer.mjs","sources":["../../../../../admin/src/components/PluginsInitializer.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { produce } from 'immer';\n\nimport { Page } from '../components/PageHelpers';\nimport { StrapiAppContextValue, useStrapiApp } from '../features/StrapiApp';\n\n/**\n * TODO: this isn't great, and we really should focus on fixing this.\n */\nconst PluginsInitializer = ({ children }: { children: React.ReactNode }) => {\n  const appPlugins = useStrapiApp('PluginsInitializer', (state) => state.plugins);\n  const [{ plugins }, dispatch] = React.useReducer<React.Reducer<State, Action>, State>(\n    reducer,\n    initialState,\n    () => init(appPlugins)\n  );\n  const setPlugin = React.useRef((pluginId: string) => {\n    dispatch({ type: 'SET_PLUGIN_READY', pluginId });\n  });\n\n  const hasApluginNotReady = Object.keys(plugins).some(\n    (plugin) => plugins[plugin].isReady === false\n  );\n\n  /**\n   *\n   * I have spent some time trying to understand what is happening here, and wanted to\n   * leave that knowledge for my future me:\n   *\n   * `initializer` is an undocumented property of the `registerPlugin` API. At the time\n   * of writing it seems only to be used by the i18n plugin.\n   *\n   * How does it work?\n   *\n   * Every plugin that has an `initializer` component defined, receives the\n   * `setPlugin` function as a component prop. In the case of i18n the plugin fetches locales\n   * first and calls `setPlugin` with `pluginId` once they are loaded, which then triggers the\n   * reducer of the admin app defined above.\n   *\n   * Once all plugins are set to `isReady: true` the app renders.\n   *\n   * This API is used to block rendering of the admin app. We should remove that in v5 completely\n   * and make sure plugins can inject data into the global store before they are initialized, to avoid\n   * having a new prop-callback based communication channel between plugins and the core admin app.\n   *\n   */\n\n  if (hasApluginNotReady) {\n    const initializers = Object.keys(plugins).reduce((acc, current) => {\n      const InitializerComponent = plugins[current].initializer;\n\n      if (InitializerComponent) {\n        const key = plugins[current].pluginId;\n\n        acc.push(<InitializerComponent key={key} setPlugin={setPlugin.current} />);\n      }\n\n      return acc;\n    }, [] as React.ReactNode[]);\n\n    return (\n      <>\n        {initializers}\n        <Page.Loading />\n      </>\n    );\n  }\n\n  return children;\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Reducer\n * -----------------------------------------------------------------------------------------------*/\n\ninterface State {\n  plugins: StrapiAppContextValue['plugins'];\n}\n\nconst initialState: State = {\n  plugins: {},\n};\n\ntype SetPluginReadyAction = {\n  type: 'SET_PLUGIN_READY';\n  pluginId: string;\n};\n\ntype Action = SetPluginReadyAction;\n\nconst reducer: React.Reducer<State, Action> = (state = initialState, action: Action): State =>\n  produce(state, (draftState) => {\n    switch (action.type) {\n      case 'SET_PLUGIN_READY': {\n        draftState.plugins[action.pluginId].isReady = true;\n        break;\n      }\n      default:\n        return draftState;\n    }\n  });\n\n/* -------------------------------------------------------------------------------------------------\n * Init state\n * -----------------------------------------------------------------------------------------------*/\n\nconst init = (plugins: State['plugins']): State => {\n  return {\n    plugins,\n  };\n};\n\nexport { PluginsInitializer };\n"],"names":["PluginsInitializer","children","appPlugins","useStrapiApp","state","plugins","dispatch","React","useReducer","reducer","initialState","init","setPlugin","useRef","pluginId","type","hasApluginNotReady","Object","keys","some","plugin","isReady","initializers","reduce","acc","current","InitializerComponent","initializer","key","push","_jsx","_jsxs","_Fragment","Page","Loading","action","produce","draftState"],"mappings":";;;;;;AAOA;;AAEC,IACKA,MAAAA,kBAAAA,GAAqB,CAAC,EAAEC,QAAQ,EAAiC,GAAA;AACrE,IAAA,MAAMC,aAAaC,YAAa,CAAA,oBAAA,EAAsB,CAACC,KAAAA,GAAUA,MAAMC,OAAO,CAAA;AAC9E,IAAA,MAAM,CAAC,EAAEA,OAAO,EAAE,EAAEC,QAAAA,CAAS,GAAGC,KAAAA,CAAMC,UAAU,CAC9CC,OACAC,EAAAA,YAAAA,EACA,IAAMC,IAAKT,CAAAA,UAAAA,CAAAA,CAAAA;AAEb,IAAA,MAAMU,SAAYL,GAAAA,KAAAA,CAAMM,MAAM,CAAC,CAACC,QAAAA,GAAAA;QAC9BR,QAAS,CAAA;YAAES,IAAM,EAAA,kBAAA;AAAoBD,YAAAA;AAAS,SAAA,CAAA;AAChD,KAAA,CAAA;AAEA,IAAA,MAAME,kBAAqBC,GAAAA,MAAAA,CAAOC,IAAI,CAACb,SAASc,IAAI,CAClD,CAACC,MAAAA,GAAWf,OAAO,CAACe,MAAO,CAAA,CAACC,OAAO,KAAK,KAAA,CAAA;AAG1C;;;;;;;;;;;;;;;;;;;;;AAqBC,MAED,IAAIL,kBAAoB,EAAA;QACtB,MAAMM,YAAAA,GAAeL,OAAOC,IAAI,CAACb,SAASkB,MAAM,CAAC,CAACC,GAAKC,EAAAA,OAAAA,GAAAA;AACrD,YAAA,MAAMC,oBAAuBrB,GAAAA,OAAO,CAACoB,OAAAA,CAAQ,CAACE,WAAW;AAEzD,YAAA,IAAID,oBAAsB,EAAA;AACxB,gBAAA,MAAME,GAAMvB,GAAAA,OAAO,CAACoB,OAAAA,CAAQ,CAACX,QAAQ;gBAErCU,GAAIK,CAAAA,IAAI,eAACC,GAACJ,CAAAA,oBAAAA,EAAAA;AAA+Bd,oBAAAA,SAAAA,EAAWA,UAAUa;AAA1BG,iBAAAA,EAAAA,GAAAA,CAAAA,CAAAA;AACtC;YAEA,OAAOJ,GAAAA;AACT,SAAA,EAAG,EAAE,CAAA;QAEL,qBACEO,IAAA,CAAAC,QAAA,EAAA;;AACGV,gBAAAA,YAAAA;AACD,8BAAAQ,GAAA,CAACG,KAAKC,OAAO,EAAA,EAAA;;;AAGnB;IAEA,OAAOjC,QAAAA;AACT;AAUA,MAAMS,YAAsB,GAAA;AAC1BL,IAAAA,OAAAA,EAAS;AACX,CAAA;AASA,MAAMI,OAAAA,GAAwC,CAACL,KAAQM,GAAAA,YAAY,EAAEyB,MACnEC,GAAAA,OAAAA,CAAQhC,OAAO,CAACiC,UAAAA,GAAAA;AACd,QAAA,OAAQF,OAAOpB,IAAI;YACjB,KAAK,kBAAA;AAAoB,gBAAA;AACvBsB,oBAAAA,UAAAA,CAAWhC,OAAO,CAAC8B,MAAAA,CAAOrB,QAAQ,CAAC,CAACO,OAAO,GAAG,IAAA;AAC9C,oBAAA;AACF;AACA,YAAA;gBACE,OAAOgB,UAAAA;AACX;AACF,KAAA,CAAA;AAEF;;qGAIA,MAAM1B,OAAO,CAACN,OAAAA,GAAAA;IACZ,OAAO;AACLA,QAAAA;AACF,KAAA;AACF,CAAA;;;;"}