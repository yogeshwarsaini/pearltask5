{"version":3,"file":"Password.mjs","sources":["../../../../../../admin/src/components/FormInputs/Password.tsx"],"sourcesContent":["import { forwardRef, memo, useState } from 'react';\n\nimport { TextInput, useComposedRefs, Field } from '@strapi/design-system';\nimport { Eye, EyeStriked } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\nimport { useFocusInputField } from '../../hooks/useFocusInputField';\nimport { useField } from '../Form';\n\nimport type { StringProps } from './types';\n\nconst PasswordInput = forwardRef<HTMLInputElement, StringProps>(\n  ({ name, required, label, hint, labelAction, ...props }, ref) => {\n    const [showPassword, setShowPassword] = useState(false);\n    const { formatMessage } = useIntl();\n    const field = useField(name);\n    const fieldRef = useFocusInputField<HTMLInputElement>(name);\n\n    const composedRefs = useComposedRefs(ref, fieldRef);\n\n    return (\n      <Field.Root error={field.error} name={name} hint={hint} required={required}>\n        <Field.Label action={labelAction}>{label}</Field.Label>\n        <TextInput\n          ref={composedRefs}\n          autoComplete=\"password\"\n          endAction={\n            <Field.Action\n              label={formatMessage({\n                id: 'Auth.form.password.show-password',\n                defaultMessage: 'Show password',\n              })}\n              onClick={() => {\n                setShowPassword((prev) => !prev);\n              }}\n            >\n              {showPassword ? <Eye fill=\"neutral500\" /> : <EyeStriked fill=\"neutral500\" />}\n            </Field.Action>\n          }\n          onChange={field.onChange}\n          value={field.value}\n          {...props}\n          type={showPassword ? 'text' : 'password'}\n        />\n        <Field.Hint />\n        <Field.Error />\n      </Field.Root>\n    );\n  }\n);\n\nconst MemoizedPasswordInput = memo(PasswordInput);\n\nexport { MemoizedPasswordInput as PasswordInput };\n"],"names":["PasswordInput","forwardRef","name","required","label","hint","labelAction","props","ref","showPassword","setShowPassword","useState","formatMessage","useIntl","field","useField","fieldRef","useFocusInputField","composedRefs","useComposedRefs","_jsxs","Field","Root","error","_jsx","Label","action","TextInput","autoComplete","endAction","Action","id","defaultMessage","onClick","prev","Eye","fill","EyeStriked","onChange","value","type","Hint","Error","MemoizedPasswordInput","memo"],"mappings":";;;;;;;;AAWA,MAAMA,8BAAgBC,UACpB,CAAA,CAAC,EAAEC,IAAI,EAAEC,QAAQ,EAAEC,KAAK,EAAEC,IAAI,EAAEC,WAAW,EAAE,GAAGC,OAAO,EAAEC,GAAAA,GAAAA;AACvD,IAAA,MAAM,CAACC,YAAAA,EAAcC,eAAgB,CAAA,GAAGC,QAAS,CAAA,KAAA,CAAA;IACjD,MAAM,EAAEC,aAAa,EAAE,GAAGC,OAAAA,EAAAA;AAC1B,IAAA,MAAMC,QAAQC,QAASb,CAAAA,IAAAA,CAAAA;AACvB,IAAA,MAAMc,WAAWC,kBAAqCf,CAAAA,IAAAA,CAAAA;IAEtD,MAAMgB,YAAAA,GAAeC,gBAAgBX,GAAKQ,EAAAA,QAAAA,CAAAA;IAE1C,qBACEI,IAAA,CAACC,MAAMC,IAAI,EAAA;AAACC,QAAAA,KAAAA,EAAOT,MAAMS,KAAK;QAAErB,IAAMA,EAAAA,IAAAA;QAAMG,IAAMA,EAAAA,IAAAA;QAAMF,QAAUA,EAAAA,QAAAA;;AAChE,0BAAAqB,GAAA,CAACH,MAAMI,KAAK,EAAA;gBAACC,MAAQpB,EAAAA,WAAAA;AAAcF,gBAAAA,QAAAA,EAAAA;;0BACnCoB,GAACG,CAAAA,SAAAA,EAAAA;gBACCnB,GAAKU,EAAAA,YAAAA;gBACLU,YAAa,EAAA,UAAA;gBACbC,SACE,gBAAAL,GAAA,CAACH,MAAMS,MAAM,EAAA;AACX1B,oBAAAA,KAAAA,EAAOQ,aAAc,CAAA;wBACnBmB,EAAI,EAAA,kCAAA;wBACJC,cAAgB,EAAA;AAClB,qBAAA,CAAA;oBACAC,OAAS,EAAA,IAAA;wBACPvB,eAAgB,CAAA,CAACwB,OAAS,CAACA,IAAAA,CAAAA;AAC7B,qBAAA;AAECzB,oBAAAA,QAAAA,EAAAA,YAAAA,iBAAee,GAACW,CAAAA,GAAAA,EAAAA;wBAAIC,IAAK,EAAA;uCAAkBZ,GAACa,CAAAA,UAAAA,EAAAA;wBAAWD,IAAK,EAAA;;;AAGjEE,gBAAAA,QAAAA,EAAUxB,MAAMwB,QAAQ;AACxBC,gBAAAA,KAAAA,EAAOzB,MAAMyB,KAAK;AACjB,gBAAA,GAAGhC,KAAK;AACTiC,gBAAAA,IAAAA,EAAM/B,eAAe,MAAS,GAAA;;AAEhC,0BAAAe,GAAA,CAACH,MAAMoB,IAAI,EAAA,EAAA,CAAA;AACX,0BAAAjB,GAAA,CAACH,MAAMqB,KAAK,EAAA,EAAA;;;AAGlB,CAAA,CAAA;AAGF,MAAMC,sCAAwBC,IAAK5C,CAAAA,aAAAA;;;;"}