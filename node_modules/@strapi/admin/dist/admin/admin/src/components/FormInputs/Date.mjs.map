{"version":3,"file":"Date.mjs","sources":["../../../../../../admin/src/components/FormInputs/Date.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { DatePicker, useComposedRefs, Field } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { useFocusInputField } from '../../hooks/useFocusInputField';\nimport { useField } from '../Form';\n\nimport { InputProps } from './types';\n\nconst DateInput = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ name, required, label, hint, labelAction, type: _type, ...props }, ref) => {\n    const { formatMessage } = useIntl();\n    const field = useField(name);\n    const fieldRef = useFocusInputField<HTMLInputElement>(name);\n    const composedRefs = useComposedRefs(ref, fieldRef);\n    const [lastValidDate, setLastValidDate] = React.useState<Date | null>(null);\n\n    const value = typeof field.value === 'string' ? new Date(field.value) : field.value;\n\n    const handleDateChange = (date: Date | undefined) => {\n      if (!date) {\n        field.onChange(name, null);\n        setLastValidDate(null);\n        return;\n      }\n\n      // Convert to UTC midnight\n      const utcDate = toUTCMidnight(date);\n      // Save as ISO string in UTC format\n      field.onChange(name, utcDate.toISOString());\n      setLastValidDate(utcDate);\n    };\n\n    // Render the DatePicker with UTC date\n    return (\n      <Field.Root error={field.error} name={name} hint={hint} required={required}>\n        <Field.Label action={labelAction}>{label}</Field.Label>\n        <DatePicker\n          ref={composedRefs}\n          clearLabel={formatMessage({ id: 'clearLabel', defaultMessage: 'Clear' })}\n          onChange={handleDateChange}\n          onClear={() => {\n            field.onChange(name, null);\n            setLastValidDate(null);\n            return;\n          }}\n          onBlur={() => {\n            // When the input is blurred, revert to the last valid date if the current value is invalid\n            if (field.value && !value) {\n              field.onChange(name, lastValidDate?.toISOString() ?? null);\n            }\n          }}\n          value={value}\n          {...props}\n        />\n        <Field.Hint />\n        <Field.Error />\n      </Field.Root>\n    );\n  }\n);\n\n// Ensure the conversion to UTC midnight\nconst toUTCMidnight = (date: Date) => {\n  return new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));\n};\n\nconst MemoizedDateInput = React.memo(DateInput);\n\nexport { MemoizedDateInput as DateInput };\n"],"names":["DateInput","React","forwardRef","name","required","label","hint","labelAction","type","_type","props","ref","formatMessage","useIntl","field","useField","fieldRef","useFocusInputField","composedRefs","useComposedRefs","lastValidDate","setLastValidDate","useState","value","Date","handleDateChange","date","onChange","utcDate","toUTCMidnight","toISOString","_jsxs","Field","Root","error","_jsx","Label","action","DatePicker","clearLabel","id","defaultMessage","onClear","onBlur","Hint","Error","UTC","getFullYear","getMonth","getDate","MemoizedDateInput","memo"],"mappings":"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"}