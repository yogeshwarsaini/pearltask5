{"version":3,"file":"Homepage.mjs","sources":["../../../../../../admin/src/components/GuidedTour/Homepage.tsx"],"sourcesContent":["import { Box, Button, Flex, Typography, LinkButton } from '@strapi/design-system';\nimport { ArrowRight } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { NavLink } from 'react-router-dom';\n\nimport { useTracking } from '../../features/Tracking';\n\nimport { LAYOUT_DATA, States, STATES } from './constants';\nimport { Number, VerticalDivider } from './Ornaments';\nimport { GuidedTourContextValue, useGuidedTour } from './Provider';\n\ntype SectionName = keyof GuidedTourContextValue['guidedTourState'];\n\nconst GuidedTourHomepage = () => {\n  const guidedTourState = useGuidedTour('GuidedTourHomepage', (state) => state.guidedTourState);\n  const setSkipped = useGuidedTour('GuidedTourHomepage', (state) => state.setSkipped);\n  const { formatMessage } = useIntl();\n  const { trackUsage } = useTracking();\n\n  const sections = Object.entries(LAYOUT_DATA).map(([key, val]) => ({\n    key: key,\n    title: val.home.title,\n    content: (\n      <LinkButton\n        onClick={() => trackUsage(val.home.trackingEvent)}\n        tag={NavLink}\n        to={val.home.cta.target}\n        endIcon={<ArrowRight />}\n      >\n        {formatMessage(val.home.cta.title)}\n      </LinkButton>\n    ),\n    isDone: Object.values(guidedTourState[key as SectionName]).every((value) => value === true),\n  }));\n\n  const activeSectionIndex = sections.findIndex((section) => !section.isDone);\n\n  const handleSkip = () => {\n    setSkipped(true);\n    trackUsage('didSkipGuidedtour');\n  };\n\n  return (\n    <Box\n      hasRadius\n      shadow=\"tableShadow\"\n      paddingTop={7}\n      paddingRight={4}\n      paddingLeft={7}\n      paddingBottom={4}\n      background=\"neutral0\"\n    >\n      <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\n        <Typography variant=\"beta\" tag=\"h2\">\n          {formatMessage({\n            id: 'app.components.GuidedTour.title',\n            defaultMessage: '3 steps to get started',\n          })}\n        </Typography>\n        <Box>\n          {sections.map((section, index) => {\n            const state = getState(activeSectionIndex, index);\n\n            return (\n              <Box key={section.key}>\n                <Flex>\n                  <Box minWidth={`3rem`} marginRight={5}>\n                    <Number state={state}>{index + 1}</Number>\n                  </Box>\n                  <Typography variant=\"delta\" tag=\"h3\">\n                    {formatMessage(section.title)}\n                  </Typography>\n                </Flex>\n                <Flex alignItems=\"flex-start\">\n                  <Flex\n                    justifyContent=\"center\"\n                    minWidth={`3rem`}\n                    marginBottom={3}\n                    marginTop={3}\n                    marginRight={5}\n                  >\n                    {index === sections.length - 1 ? null : <VerticalDivider state={state} />}\n                  </Flex>\n                  <Box marginTop={2}>{state === STATES.IS_ACTIVE ? section.content : null}</Box>\n                </Flex>\n              </Box>\n            );\n          })}\n        </Box>\n      </Flex>\n      <Flex justifyContent=\"flex-end\">\n        <Button variant=\"tertiary\" onClick={handleSkip}>\n          {formatMessage({ id: 'app.components.GuidedTour.skip', defaultMessage: 'Skip the tour' })}\n        </Button>\n      </Flex>\n    </Box>\n  );\n};\n\nconst getState = (activeSectionIndex: number, index: number): States => {\n  if (activeSectionIndex === -1) {\n    return STATES.IS_DONE;\n  }\n  if (index < activeSectionIndex) {\n    return STATES.IS_DONE;\n  }\n  if (index > activeSectionIndex) {\n    return STATES.IS_NOT_DONE;\n  }\n  return STATES.IS_ACTIVE;\n};\n\nexport { GuidedTourHomepage };\n"],"names":["GuidedTourHomepage","guidedTourState","useGuidedTour","state","setSkipped","formatMessage","useIntl","trackUsage","useTracking","sections","Object","entries","LAYOUT_DATA","map","key","val","title","home","content","_jsx","LinkButton","onClick","trackingEvent","tag","NavLink","to","cta","target","endIcon","ArrowRight","isDone","values","every","value","activeSectionIndex","findIndex","section","handleSkip","_jsxs","Box","hasRadius","shadow","paddingTop","paddingRight","paddingLeft","paddingBottom","background","Flex","direction","alignItems","gap","Typography","variant","id","defaultMessage","index","getState","minWidth","marginRight","Number","justifyContent","marginBottom","marginTop","length","VerticalDivider","STATES","IS_ACTIVE","Button","IS_DONE","IS_NOT_DONE"],"mappings":"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"}