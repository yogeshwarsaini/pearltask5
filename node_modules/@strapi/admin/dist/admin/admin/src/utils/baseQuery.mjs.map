{"version":3,"file":"baseQuery.mjs","sources":["../../../../../admin/src/utils/baseQuery.ts"],"sourcesContent":["import { SerializedError } from '@reduxjs/toolkit';\nimport { BaseQueryFn } from '@reduxjs/toolkit/query';\n\nimport { getFetchClient, type FetchOptions, ApiError, isFetchError } from '../utils/getFetchClient';\n\ninterface QueryArguments {\n  url: string;\n  method?: 'GET' | 'POST' | 'DELETE' | 'PUT';\n  data?: unknown;\n  config?: FetchOptions;\n}\n\ninterface UnknownApiError {\n  name: 'UnknownError';\n  message: string;\n  details?: unknown;\n  status?: number;\n}\n\ntype BaseQueryError = ApiError | UnknownApiError;\n\nconst simpleQuery: BaseQueryFn<string | QueryArguments, unknown, BaseQueryError> = async (\n  query,\n  { signal }\n) => {\n  try {\n    const { get, post, del, put } = getFetchClient();\n\n    if (typeof query === 'string') {\n      const result = await get(query, { signal });\n      return { data: result.data };\n    } else {\n      const { url, method = 'GET', data, config } = query;\n\n      if (method === 'POST') {\n        const result = await post(url, data, {\n          ...config,\n          signal,\n        });\n        return { data: result.data };\n      }\n\n      if (method === 'DELETE') {\n        const result = await del(url, {\n          ...config,\n          signal,\n        });\n        return { data: result.data };\n      }\n\n      if (method === 'PUT') {\n        const result = await put(url, data, {\n          ...config,\n          signal,\n        });\n        return { data: result.data };\n      }\n\n      /**\n       * Default is GET.\n       */\n      const result = await get(url, {\n        ...config,\n        signal,\n      });\n      return { data: result.data };\n    }\n  } catch (err) {\n    // Handle error of type FetchError\n\n    if (isFetchError(err)) {\n      if (\n        typeof err.response?.data === 'object' &&\n        err.response?.data !== null &&\n        'error' in err.response?.data\n      ) {\n        /**\n         * This will most likely be ApiError\n         */\n        return { data: undefined, error: err.response?.data.error as any };\n      } else {\n        return {\n          data: undefined,\n          error: {\n            name: 'UnknownError',\n            message: err.message,\n            details: err.response,\n            status: err.status,\n          } as UnknownApiError,\n        };\n      }\n    }\n\n    const error = err as Error;\n    return {\n      data: undefined,\n      error: {\n        name: error.name,\n        message: error.message,\n        stack: error.stack,\n      } satisfies SerializedError,\n    };\n  }\n};\n\nconst fetchBaseQuery = () => simpleQuery;\n\nconst isBaseQueryError = (error: BaseQueryError | SerializedError): error is BaseQueryError => {\n  return error.name !== undefined;\n};\n\nexport { fetchBaseQuery, isBaseQueryError };\nexport type { BaseQueryError, UnknownApiError, QueryArguments };\n"],"names":["simpleQuery","query","signal","get","post","del","put","getFetchClient","result","data","url","method","config","err","isFetchError","response","undefined","error","name","message","details","status","stack","fetchBaseQuery","isBaseQueryError"],"mappings":"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"}