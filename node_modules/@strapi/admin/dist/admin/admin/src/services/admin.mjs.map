{"version":3,"file":"admin.mjs","sources":["../../../../../admin/src/services/admin.ts"],"sourcesContent":["import {\n  type TelemetryProperties,\n  type Init,\n  type Information,\n  type GetProjectSettings,\n  type UpdateProjectSettings,\n  type Plugins,\n  type GetLicenseLimitInformation,\n  GetGuidedTourMeta,\n} from '../../../shared/contracts/admin';\nimport { prefixFileUrlWithBackendUrl } from '../utils/urls';\n\nimport { adminApi } from './api';\n\ninterface ConfigurationLogo {\n  custom?: {\n    name?: string;\n    url?: string;\n  };\n  default: string;\n}\n\nconst admin = adminApi\n  .enhanceEndpoints({\n    addTagTypes: ['ProjectSettings', 'LicenseLimits', 'LicenseTrialTimeLeft', 'GuidedTourMeta'],\n  })\n  .injectEndpoints({\n    endpoints: (builder) => ({\n      init: builder.query<Init.Response['data'], void>({\n        query: () => ({\n          url: '/admin/init',\n          method: 'GET',\n        }),\n        transformResponse(res: Init.Response) {\n          return res.data;\n        },\n        providesTags: ['ProjectSettings'],\n      }),\n      information: builder.query<Information.Response['data'], void>({\n        query: () => ({\n          url: '/admin/information',\n          method: 'GET',\n        }),\n        transformResponse(res: Information.Response) {\n          return res.data;\n        },\n      }),\n      telemetryProperties: builder.query<TelemetryProperties.Response['data'], void>({\n        query: () => ({\n          url: '/admin/telemetry-properties',\n          method: 'GET',\n          config: {\n            validateStatus: (status: number) => status < 500,\n          },\n        }),\n        transformResponse(res: TelemetryProperties.Response) {\n          return res.data;\n        },\n      }),\n      projectSettings: builder.query<\n        { authLogo?: ConfigurationLogo['custom']; menuLogo?: ConfigurationLogo['custom'] },\n        void\n      >({\n        query: () => ({\n          url: '/admin/project-settings',\n          method: 'GET',\n        }),\n        providesTags: ['ProjectSettings'],\n        transformResponse(data: GetProjectSettings.Response) {\n          return {\n            authLogo: data.authLogo\n              ? {\n                  name: data.authLogo.name,\n                  url: prefixFileUrlWithBackendUrl(data.authLogo.url),\n                }\n              : undefined,\n            menuLogo: data.menuLogo\n              ? {\n                  name: data.menuLogo.name,\n                  url: prefixFileUrlWithBackendUrl(data.menuLogo.url),\n                }\n              : undefined,\n          };\n        },\n      }),\n      updateProjectSettings: builder.mutation<UpdateProjectSettings.Response, FormData>({\n        query: (data) => ({\n          url: '/admin/project-settings',\n          method: 'POST',\n          data,\n          config: {\n            headers: {\n              'Content-Type': 'multipart/form-data',\n            },\n          },\n        }),\n        invalidatesTags: ['ProjectSettings'],\n      }),\n      getPlugins: builder.query<Plugins.Response, void>({\n        query: () => ({\n          url: '/admin/plugins',\n          method: 'GET',\n        }),\n      }),\n      getLicenseLimits: builder.query<GetLicenseLimitInformation.Response, void>({\n        query: () => ({\n          url: '/admin/license-limit-information',\n          method: 'GET',\n        }),\n        providesTags: ['LicenseLimits'],\n      }),\n      getLicenseTrialTimeLeft: builder.query<{ trialEndsAt: string }, void>({\n        query: () => ({\n          url: '/admin/license-trial-time-left',\n          method: 'GET',\n        }),\n        providesTags: ['LicenseTrialTimeLeft'],\n      }),\n      getGuidedTourMeta: builder.query<GetGuidedTourMeta.Response, void>({\n        query: () => ({\n          url: '/admin/guided-tour-meta',\n          method: 'GET',\n        }),\n        providesTags: ['GuidedTourMeta'],\n      }),\n    }),\n    overrideExisting: false,\n  });\n\nconst {\n  useInitQuery,\n  useTelemetryPropertiesQuery,\n  useInformationQuery,\n  useProjectSettingsQuery,\n  useUpdateProjectSettingsMutation,\n  useGetPluginsQuery,\n  useGetLicenseLimitsQuery,\n  useGetLicenseTrialTimeLeftQuery,\n  useGetGuidedTourMetaQuery,\n} = admin;\n\nexport {\n  useInitQuery,\n  useTelemetryPropertiesQuery,\n  useInformationQuery,\n  useProjectSettingsQuery,\n  useUpdateProjectSettingsMutation,\n  useGetPluginsQuery,\n  useGetLicenseLimitsQuery,\n  useGetLicenseTrialTimeLeftQuery,\n  useGetGuidedTourMetaQuery,\n};\n\nexport type { ConfigurationLogo };\n"],"names":["admin","adminApi","enhanceEndpoints","addTagTypes","injectEndpoints","endpoints","builder","init","query","url","method","transformResponse","res","data","providesTags","information","telemetryProperties","config","validateStatus","status","projectSettings","authLogo","name","prefixFileUrlWithBackendUrl","undefined","menuLogo","updateProjectSettings","mutation","headers","invalidatesTags","getPlugins","getLicenseLimits","getLicenseTrialTimeLeft","getGuidedTourMeta","overrideExisting","useInitQuery","useTelemetryPropertiesQuery","useInformationQuery","useProjectSettingsQuery","useUpdateProjectSettingsMutation","useGetPluginsQuery","useGetLicenseLimitsQuery","useGetLicenseTrialTimeLeftQuery","useGetGuidedTourMetaQuery"],"mappings":"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"}