{"version":3,"file":"server.mjs","sources":["../../../../admin/tests/server.ts"],"sourcesContent":["import { rest } from 'msw';\nimport { type SetupServer, setupServer } from 'msw/node';\nimport * as qs from 'qs';\n\nimport { MockData, mockData } from './mockData';\n\nexport const server: SetupServer = setupServer(\n  ...[\n    /**\n     * TRACKING\n     */\n    rest.post('https://analytics.strapi.io/api/v2/track', (req, res, ctx) => {\n      return res(ctx.status(200));\n    }),\n    /**\n     *\n     * ADMIN ROLES\n     *\n     */\n    rest.get('/admin/roles', (req, res, ctx) =>\n      res(\n        ctx.json({\n          data: [\n            {\n              id: 1,\n              code: 'strapi-editor',\n              name: 'Editor',\n            },\n            {\n              id: 2,\n              code: 'strapi-author',\n              name: 'Author',\n            },\n          ],\n        })\n      )\n    ),\n\n    rest.get('/admin/roles/1', (req, res, ctx) =>\n      res(\n        ctx.json({\n          data: {\n            id: 1,\n            code: 'strapi-editor',\n            params: {\n              filters: req.url.searchParams.get('filters'),\n            },\n          },\n        })\n      )\n    ),\n    rest.get('/admin/roles/:id/permissions', (req, res, ctx) => {\n      return res(\n        ctx.json({\n          data: [\n            {\n              id: 1,\n              action: 'plugin::content-manager.explorer.create',\n              subject: 'api::address.address',\n              properties: {\n                fields: ['postal_code', 'categories'],\n              },\n              conditions: [],\n\n              params: {\n                filters: req.url.searchParams.get('filters'),\n              },\n            },\n          ],\n        })\n      );\n    }),\n    /**\n     *\n     * ADMIN USERS\n     *\n     */\n    rest.get('/admin/users', (req, res, ctx) => {\n      return res(\n        ctx.json({\n          data: {\n            results: [\n              { id: 1, firstname: 'John', lastname: 'Doe', roles: [] },\n              { id: 2, firstname: 'Kai', lastname: 'Doe', roles: [] },\n            ],\n            pagination: {\n              page: 1,\n            },\n          },\n        })\n      );\n    }),\n    rest.get('/admin/users/1', (req, res, ctx) =>\n      res(\n        ctx.json({\n          data: {\n            id: 1,\n            firstname: 'John',\n            lastname: 'Doe',\n            emai: 'test@testing.com',\n            roles: [\n              { id: 1, code: 'strapi-editor', name: 'Editor' },\n              { id: 2, code: 'strapi-super-admin', name: 'Super Admin' },\n            ],\n            params: {\n              some: req.url.searchParams.get('some'),\n            },\n          },\n        })\n      )\n    ),\n    rest.get('/admin/users/me', (req, res, ctx) => {\n      return res(\n        ctx.json({\n          data: {\n            email: 'michka@michka.fr',\n            firstname: 'michoko',\n            lastname: 'ronronscelestes',\n            username: 'yolo',\n            preferedLanguage: 'en',\n            roles: [\n              {\n                id: 2,\n              },\n            ],\n          },\n        })\n      );\n    }),\n    rest.get('/admin/users/me/permissions', (req, res, ctx) => res(ctx.json({ data: [] }))),\n    /**\n     *\n     * ADMIN PROVIDERS\n     *\n     */\n    rest.get('/admin/providers/isSSOLocked', (req, res, ctx) => {\n      return res(\n        ctx.json({\n          data: {\n            isSSOLocked: false,\n          },\n        })\n      );\n    }),\n    rest.put('/admin/providers/options', (req, res, ctx) =>\n      res(\n        ctx.json({\n          data: {\n            autoRegister: false,\n            defaultRole: '1',\n            ssoLockedRoles: ['1', '2', '3'],\n          },\n        })\n      )\n    ),\n    rest.get('/admin/providers/options', (req, res, ctx) =>\n      res(\n        ctx.json({\n          data: {\n            autoRegister: false,\n            defaultRole: '1',\n            ssoLockedRoles: ['1', '2'],\n          },\n        })\n      )\n    ),\n    /**\n     *\n     * ADMIN PERMISSIONS\n     *\n     */\n    rest.get('/admin/permissions', (req, res, ctx) => {\n      const role = req.url.searchParams.get('role');\n\n      if (role !== '1') {\n        return res(ctx.status(404));\n      }\n\n      return res(\n        ctx.json({\n          data: {\n            conditions: [\n              {\n                id: 'admin::is-creator',\n                displayName: 'Is creator',\n                category: 'default',\n              },\n            ],\n            sections: {\n              settings: [\n                {\n                  displayName: 'Access the Email Settings page',\n                  category: 'email',\n                  subCategory: 'general',\n                  action: 'plugin::email.settings.read',\n                },\n              ],\n            },\n          },\n        })\n      );\n    }),\n    /**\n     *\n     * ADMIN MISC\n     *\n     */\n    rest.get('/admin/init', (req, res, ctx) => {\n      return res(\n        ctx.json({\n          data: {},\n        })\n      );\n    }),\n    rest.get('/admin/information', (req, res, ctx) =>\n      res(\n        ctx.json({\n          autoReload: true,\n          communityEdition: false,\n          currentEnvironment: 'development',\n          nodeVersion: 'v14.13.1',\n          strapiVersion: '3.6.0',\n        })\n      )\n    ),\n    rest.get('/admin/license-limit-information', (req, res, ctx) => {\n      return res(\n        ctx.json({\n          data: {\n            attribute: 1,\n\n            features: [{ name: 'sso' }, { name: 'audit-logs', options: { retentionDays: 1 } }],\n          },\n        })\n      );\n    }),\n    rest.get('/admin/project-settings', (req, res, ctx) => {\n      return res(\n        ctx.json({\n          menuLogo: {\n            ext: '.svg',\n            height: 256,\n            name: 'michka.svg',\n            size: 1.3,\n            url: '/uploads/michka.svg',\n            width: 256,\n          },\n        })\n      );\n    }),\n    rest.post('/admin/project-settings', (req, res, ctx) => {\n      return res(\n        ctx.json({\n          menuLogo: {\n            ext: '.svg',\n            height: 256,\n            name: 'michka.svg',\n            size: 1.3,\n            url: '/uploads/michka.svg',\n            width: 256,\n          },\n        })\n      );\n    }),\n    rest.get('/admin/transfer/tokens', (req, res, ctx) => {\n      return res(\n        ctx.json({\n          data: [\n            {\n              id: 1,\n              name: 'My super token',\n              description: 'This describe my super token',\n              type: 'read-only',\n              createdAt: '2021-11-15T00:00:00.000Z',\n              permissions: [],\n            },\n          ],\n        })\n      );\n    }),\n    rest.get('/admin/transfer/tokens/:id', (req, res, ctx) => {\n      return res(\n        ctx.json({\n          data: {\n            id: 1,\n            name: 'My super token',\n            description: 'This describe my super token',\n            type: 'read-only',\n            createdAt: '2021-11-15T00:00:00.000Z',\n            permissions: [],\n          },\n        })\n      );\n    }),\n    rest.get('/admin/registration-info', async (req, res, ctx) => {\n      const token = req.url.searchParams.get('registrationToken');\n\n      if (token === 'error') {\n        return res(ctx.status(500), ctx.json({}));\n      }\n\n      return res(\n        ctx.json({\n          data: {\n            firstname: 'Token firstname',\n            lastname: 'Token lastname',\n            email: 'test+register-token@strapi.io',\n          },\n        })\n      );\n    }),\n    rest.post('/admin/renew-token', (req, res, ctx) => {\n      return res(\n        ctx.json({\n          data: {\n            token: 'renewed-test-token',\n          },\n        })\n      );\n    }),\n    rest.get('/admin/guided-tour-meta', (req, res, ctx) => {\n      return res(\n        ctx.json({\n          data: {\n            isFirstSuperAdminUser: false,\n            completedActions: [],\n          },\n        })\n      );\n    }),\n    /**\n     * WEBHOOKS\n     */\n    rest.get('/admin/webhooks', (req, res, ctx) => {\n      return res(\n        ctx.json({\n          data: mockData.webhooks,\n        })\n      );\n    }),\n    rest.post('/admin/webhooks/batch-delete', async (req, res, ctx) => {\n      const { ids } = await req.json<{ ids: number[] }>();\n\n      return res(\n        ctx.json({\n          data: mockData.webhooks.filter((webhook) => !ids.includes(webhook.id)),\n        })\n      );\n    }),\n    rest.put('/admin/webhooks/:id', async (req, res, ctx) => {\n      const { id } = req.params;\n      const { isEnabled } = await req.json<{ isEnabled: boolean }>();\n\n      return res(\n        ctx.json({\n          data: mockData.webhooks.map((webhook) =>\n            webhook.id === Number(id) ? { ...webhook, isEnabled } : webhook\n          ),\n        })\n      );\n    }),\n    /**\n     *\n     * CONTENT_MANAGER\n     *\n     */\n    rest.get('/content-manager/content-types', (req, res, ctx) =>\n      res(\n        ctx.json({\n          data: [\n            {\n              uid: 'admin::collectionType',\n              isDisplayed: true,\n              apiID: 'permission',\n              kind: 'collectionType',\n            },\n\n            {\n              uid: 'admin::collectionTypeNotDispalyed',\n              isDisplayed: false,\n              apiID: 'permission',\n              kind: 'collectionType',\n            },\n\n            {\n              uid: 'admin::singleType',\n              isDisplayed: true,\n              kind: 'singleType',\n            },\n\n            {\n              uid: 'admin::singleTypeNotDispalyed',\n              isDisplayed: false,\n              kind: 'singleType',\n            },\n          ],\n        })\n      )\n    ),\n    rest.get('/content-manager/components', (req, res, ctx) =>\n      res(\n        ctx.json({\n          data: [\n            {\n              uid: 'basic.relation',\n              isDisplayed: true,\n              apiID: 'relation',\n              category: 'basic',\n              info: {\n                displayName: 'Relation',\n              },\n              options: {},\n              attributes: {\n                id: {\n                  type: 'integer',\n                },\n                categories: {\n                  type: 'relation',\n                  relation: 'oneToMany',\n                  target: 'api::category.category',\n                  targetModel: 'api::category.category',\n                  relationType: 'oneToMany',\n                },\n              },\n            },\n          ],\n        })\n      )\n    ),\n    /**\n     *\n     * MARKETPLACE\n     *\n     */\n    rest.get('https://market-api.strapi.io/providers', (req, res, ctx) => {\n      const { collections = [], search = '' } = qs.parse(req.url.searchParams.toString()) as {\n        collections: Array<keyof MockData['marketplace']['providers']>;\n        search: string;\n      };\n\n      const [madeByStrapi, verified] = collections;\n\n      let responseData;\n\n      const providerResponses = mockData.marketplace.providers;\n\n      if (madeByStrapi && verified) {\n        responseData = {\n          data: [...providerResponses[madeByStrapi].data, ...providerResponses[verified].data],\n          meta: providerResponses.providers.meta,\n        };\n      } else if (collections.length) {\n        responseData = providerResponses[collections[0]];\n      } else {\n        responseData = providerResponses.providers;\n      }\n\n      const filteredResponse = {\n        ...responseData,\n        data: responseData.data.filter((provider) => {\n          const nameMatch = provider.attributes.name.toLowerCase().includes(search.toLowerCase());\n          const descriptionMatch = provider.attributes.description\n            .toLowerCase()\n            .includes(search.toLowerCase());\n\n          return nameMatch || descriptionMatch;\n        }),\n      };\n\n      return res(ctx.status(200), ctx.json(filteredResponse));\n    }),\n    rest.get('https://market-api.strapi.io/plugins', (req, res, ctx) => {\n      const {\n        collections = [],\n        categories = [],\n        search = '',\n      } = qs.parse(req.url.searchParams.toString()) as {\n        collections: Array<keyof MockData['marketplace']['plugins']>;\n        categories: Array<keyof MockData['marketplace']['plugins']>;\n        search: string;\n      };\n      const [madeByStrapi, verified] = collections;\n      const [customFields, monitoring] = categories;\n\n      let responseData;\n      const pluginResponses = mockData.marketplace.plugins;\n\n      if (categories.length && collections.length) {\n        responseData = {\n          data: [...pluginResponses[collections[0]].data, ...pluginResponses[categories[0]].data],\n          meta: pluginResponses.plugins.meta,\n        };\n      } else if (madeByStrapi && verified) {\n        responseData = {\n          data: [...pluginResponses[madeByStrapi].data, ...pluginResponses[verified].data],\n          meta: pluginResponses.plugins.meta,\n        };\n      } else if (customFields && monitoring) {\n        responseData = {\n          data: [...pluginResponses[customFields].data, ...pluginResponses[monitoring].data],\n          meta: pluginResponses.plugins.meta,\n        };\n      } else if (collections.length) {\n        responseData = pluginResponses[collections[0]];\n      } else if (categories.length) {\n        responseData = pluginResponses[categories[0]];\n      } else {\n        responseData = pluginResponses.plugins;\n      }\n\n      const filteredResponse = {\n        ...responseData,\n        data: responseData.data.filter((plugin) => {\n          const nameMatch = plugin.attributes.name.toLowerCase().includes(search.toLowerCase());\n          const descriptionMatch = plugin.attributes.description\n            .toLowerCase()\n            .includes(search.toLowerCase());\n\n          return nameMatch || descriptionMatch;\n        }),\n      };\n\n      return res(ctx.status(200), ctx.json(filteredResponse));\n    }),\n    /**\n     *\n     * NPS SURVEY\n     *\n     */\n    rest.post('https://analytics.strapi.io/submit-nps', (req, res, ctx) => {\n      return res(ctx.status(200));\n    }),\n    /**\n     * CONTENT-API (API TOKENS)\n     */\n    rest.get('/admin/content-api/permissions', (req, res, ctx) => {\n      return res(\n        ctx.json({\n          data: {\n            'api::address': {\n              controllers: {\n                address: ['find', 'findOne'],\n              },\n            },\n            'plugin::myplugin': {\n              controllers: {\n                test: ['findOne', 'find'],\n              },\n            },\n          },\n        })\n      );\n    }),\n    rest.get('/admin/content-api/routes', (req, res, ctx) => {\n      return res(\n        ctx.json({\n          data: {\n            'api::address': [\n              {\n                method: 'GET',\n                path: '/api/addresses',\n                handler: 'api::address.address.find',\n                config: {\n                  auth: {\n                    scope: ['api::address.address.find'],\n                  },\n                },\n                info: {\n                  apiName: 'address',\n                  type: 'content-api',\n                },\n              },\n              {\n                method: 'GET',\n                path: '/api/addresses/:id',\n                handler: 'api::address.address.findOne',\n                config: {\n                  auth: {\n                    scope: ['api::address.address.findOne'],\n                  },\n                },\n                info: {\n                  apiName: 'address',\n                  type: 'content-api',\n                },\n              },\n            ],\n            'plugin::myplugin': [\n              {\n                method: 'GET',\n                path: '/api/myplugin/tests',\n                handler: 'plugin::myplugin.test.find',\n                config: {\n                  auth: {\n                    scope: ['plugin::myplugin.test.find'],\n                  },\n                },\n                info: {\n                  pluginName: 'myplugin',\n                  type: 'content-api',\n                },\n              },\n              {\n                method: 'GET',\n                path: '/api/myplugin/tests/:id',\n                handler: 'plugin::myplugin.test.findOne',\n                config: {\n                  auth: {\n                    scope: ['plugin::myplugin.test.findOne'],\n                  },\n                },\n                info: {\n                  pluginName: 'myplugin',\n                  type: 'content-api',\n                },\n              },\n            ],\n          },\n        })\n      );\n    }),\n    /**\n     * API TOKENS\n     */\n    rest.get('/admin/api-tokens', (req, res, ctx) => {\n      return res(\n        ctx.json({\n          data: [\n            {\n              id: '1',\n              name: 'My super token',\n              description: 'This describe my super token',\n              type: 'read-only',\n              createdAt: '2021-11-15T00:00:00.000Z',\n              permissions: [],\n            },\n          ],\n        })\n      );\n    }),\n    rest.get('/admin/api-tokens/:id', (req, res, ctx) => {\n      return res(\n        ctx.json({\n          data: {\n            id: '1',\n            name: 'My super token',\n            description: 'This describe my super token',\n            type: 'read-only',\n            createdAt: '2021-11-15T00:00:00.000Z',\n            permissions: [],\n          },\n        })\n      );\n    }),\n    /**\n     * Audit Logs\n     */\n    rest.get('/admin/audit-logs', (req, res, ctx) => {\n      return res(\n        ctx.json({\n          results: [\n            {\n              id: 1,\n              action: 'admin.logout',\n              date: '2023-10-31T15:56:54.873Z',\n              payload: {\n                user: {\n                  id: 1,\n                  firstname: 'test',\n                  lastname: 'testing',\n                  username: null,\n                  email: 'test@testing.com',\n                  isActive: true,\n                  blocked: false,\n                  preferedLanguage: null,\n                  createdAt: '2023-10-26T19:19:38.245Z',\n                  updatedAt: '2023-10-26T19:19:38.245Z',\n                  roles: [\n                    {\n                      id: 1,\n                      name: 'Super Admin',\n                      description: 'Super Admins can access and manage all features and settings.',\n                      code: 'strapi-super-admin',\n                    },\n                  ],\n                },\n              },\n              user: {\n                id: 1,\n                email: 'test@testing.com',\n                displayName: 'test testing',\n              },\n            },\n            {\n              id: 2,\n              action: 'user.create',\n              date: '2023-10-31T15:57:38.957Z',\n              payload: {\n                user: {\n                  id: 2,\n                  firstname: 'editor',\n                  lastname: 'test',\n                  username: null,\n                  email: 'editor@testing.com',\n                  isActive: true,\n                  blocked: false,\n                  preferedLanguage: null,\n                  createdAt: '2023-10-31T15:57:38.948Z',\n                  updatedAt: '2023-10-31T15:57:38.948Z',\n                  roles: [\n                    {\n                      id: 2,\n                      name: 'Editor',\n                      description:\n                        'Editors can manage and publish contents including those of other users.',\n                      code: 'strapi-editor',\n                    },\n                  ],\n                },\n              },\n              user: {\n                id: 1,\n                email: 'test@testing.com',\n                displayName: 'test testing',\n              },\n            },\n          ],\n          pagination: {\n            page: 1,\n            pageSize: 2,\n            pageCount: 1,\n            total: 2,\n          },\n        })\n      );\n    }),\n    rest.get('/admin/audit-logs/:id', (req, res, ctx) => {\n      return res(\n        ctx.json({\n          id: 1,\n          action: 'admin.logout',\n          date: '2023-10-31T15:56:54.873Z',\n          payload: {\n            user: {\n              id: 1,\n              firstname: 'test',\n              lastname: 'testing',\n              username: null,\n              email: 'test@testing.com',\n              isActive: true,\n              blocked: false,\n              preferedLanguage: null,\n              createdAt: '2023-10-26T19:19:38.245Z',\n              updatedAt: '2023-10-26T19:19:38.245Z',\n              roles: [\n                {\n                  id: 1,\n                  name: 'Super Admin',\n                  description: 'Super Admins can access and manage all features and settings.',\n                  code: 'strapi-super-admin',\n                },\n              ],\n            },\n          },\n          user: {\n            id: 1,\n            email: 'test@testing.com',\n            displayName: 'test testing',\n          },\n        })\n      );\n    }),\n    /**\n     *\n     * fetchClient, useFetchClient and getFetchClient\n     *\n     */\n    rest.get('/use-fetch-client-test', (req, res, ctx) => {\n      return res(\n        ctx.json({\n          data: {\n            results: [\n              { id: 2, name: 'newest', publishedAt: null },\n              { id: 1, name: 'oldest', publishedAt: null },\n            ],\n            pagination: { page: 1, pageCount: 10 },\n          },\n        })\n      );\n    }),\n    rest.get('/test-fetch-client', (req, res, ctx) => {\n      return res(ctx.status(200));\n    }),\n  ]\n);\n"],"names":["server","setupServer","rest","post","req","res","ctx","status","get","json","data","id","code","name","params","filters","url","searchParams","action","subject","properties","fields","conditions","results","firstname","lastname","roles","pagination","page","emai","some","email","username","preferedLanguage","isSSOLocked","put","autoRegister","defaultRole","ssoLockedRoles","role","displayName","category","sections","settings","subCategory","autoReload","communityEdition","currentEnvironment","nodeVersion","strapiVersion","attribute","features","options","retentionDays","menuLogo","ext","height","size","width","description","type","createdAt","permissions","token","isFirstSuperAdminUser","completedActions","mockData","webhooks","ids","filter","webhook","includes","isEnabled","map","Number","uid","isDisplayed","apiID","kind","info","attributes","categories","relation","target","targetModel","relationType","collections","search","qs","parse","toString","madeByStrapi","verified","responseData","providerResponses","marketplace","providers","meta","length","filteredResponse","provider","nameMatch","toLowerCase","descriptionMatch","customFields","monitoring","pluginResponses","plugins","plugin","controllers","address","test","method","path","handler","config","auth","scope","apiName","pluginName","date","payload","user","isActive","blocked","updatedAt","pageSize","pageCount","total","publishedAt"],"mappings":"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"}