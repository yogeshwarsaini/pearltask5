{"version":3,"file":"pull.mjs","sources":["../../../../src/strapi/remote/handlers/pull.ts"],"sourcesContent":["import { Readable } from 'stream';\nimport { randomUUID } from 'crypto';\nimport type { Core } from '@strapi/types';\n\nimport { Handler } from './abstract';\nimport { handlerControllerFactory, isDataTransferMessage } from './utils';\nimport { createLocalStrapiSourceProvider, ILocalStrapiSourceProvider } from '../../providers';\nimport { ProviderTransferError } from '../../../errors/providers';\nimport type { IAsset, TransferStage, Protocol } from '../../../../types';\nimport { Client } from '../../../../types/remote/protocol';\n\nconst TRANSFER_KIND = 'pull';\nconst VALID_TRANSFER_ACTIONS = ['bootstrap', 'close', 'getMetadata', 'getSchemas'] as const;\n\ntype PullTransferAction = (typeof VALID_TRANSFER_ACTIONS)[number];\n\nexport interface PullHandler extends Handler {\n  provider?: ILocalStrapiSourceProvider;\n\n  streams?: { [stage in TransferStage]?: Readable };\n\n  assertValidTransferAction(action: string): asserts action is PullTransferAction;\n\n  onTransferMessage(msg: Protocol.Client.TransferMessage): Promise<unknown> | unknown;\n  onTransferAction(msg: Protocol.Client.Action): Promise<unknown> | unknown;\n  onTransferStep(msg: Protocol.Client.TransferPullMessage): Promise<unknown> | unknown;\n\n  createReadableStreamForStep(step: TransferStage): Promise<void>;\n\n  flush(stage: TransferStage, id: string): Promise<void> | void;\n}\n\nexport const createPullController = handlerControllerFactory<Partial<PullHandler>>((proto) => ({\n  isTransferStarted(this: PullHandler) {\n    return proto.isTransferStarted.call(this) && this.provider !== undefined;\n  },\n\n  verifyAuth(this: PullHandler) {\n    return proto.verifyAuth.call(this, TRANSFER_KIND);\n  },\n\n  cleanup(this: PullHandler) {\n    proto.cleanup.call(this);\n\n    this.streams = {};\n\n    delete this.provider;\n  },\n\n  onInfo(message) {\n    this.diagnostics?.report({\n      details: {\n        message,\n        origin: 'pull-handler',\n        createdAt: new Date(),\n      },\n      kind: 'info',\n    });\n  },\n  onWarning(message) {\n    this.diagnostics?.report({\n      details: {\n        message,\n        createdAt: new Date(),\n        origin: 'pull-handler',\n      },\n      kind: 'warning',\n    });\n  },\n\n  onError(error) {\n    this.diagnostics?.report({\n      details: {\n        message: error.message,\n        error,\n        createdAt: new Date(),\n        name: error.name,\n        severity: 'fatal',\n      },\n      kind: 'error',\n    });\n  },\n\n  assertValidTransferAction(this: PullHandler, action) {\n    // Abstract the constant to string[] to allow looser check on the given action\n    const validActions = VALID_TRANSFER_ACTIONS as unknown as string[];\n\n    if (validActions.includes(action)) {\n      return;\n    }\n\n    throw new ProviderTransferError(`Invalid action provided: \"${action}\"`, {\n      action,\n      validActions: Object.keys(VALID_TRANSFER_ACTIONS),\n    });\n  },\n\n  async onMessage(this: PullHandler, raw) {\n    const msg = JSON.parse(raw.toString());\n\n    if (!isDataTransferMessage(msg)) {\n      return;\n    }\n\n    if (!msg.uuid) {\n      await this.respond(undefined, new Error('Missing uuid in message'));\n    }\n\n    if (proto.hasUUID(msg.uuid)) {\n      const previousResponse = proto.response;\n      if (previousResponse?.uuid === msg.uuid) {\n        await this.respond(previousResponse?.uuid, previousResponse.e, previousResponse.data);\n      }\n      return;\n    }\n\n    const { uuid, type } = msg;\n    proto.addUUID(uuid);\n    // Regular command message (init, end, status)\n    if (type === 'command') {\n      const { command } = msg;\n      this.onInfo(`received command:${command} uuid:${uuid}`);\n      await this.executeAndRespond(uuid, () => {\n        this.assertValidTransferCommand(command);\n\n        // The status command don't have params\n        if (command === 'status') {\n          return this.status();\n        }\n\n        return this[command](msg.params);\n      });\n    }\n\n    // Transfer message (the transfer must be init first)\n    else if (type === 'transfer') {\n      this.onInfo(`received transfer action:${msg.action} step:${msg.kind} uuid:${uuid}`);\n      await this.executeAndRespond(uuid, async () => {\n        await this.verifyAuth();\n\n        this.assertValidTransfer();\n\n        return this.onTransferMessage(msg);\n      });\n    }\n\n    // Invalid messages\n    else {\n      await this.respond(uuid, new Error('Bad Request'));\n    }\n  },\n\n  async onTransferMessage(this: PullHandler, msg) {\n    const { kind } = msg;\n\n    if (kind === 'action') {\n      return this.onTransferAction(msg);\n    }\n\n    if (kind === 'step') {\n      return this.onTransferStep(msg as Protocol.Client.TransferPullMessage);\n    }\n  },\n\n  async onTransferAction(this: PullHandler, msg) {\n    const { action } = msg;\n\n    this.assertValidTransferAction(action);\n\n    if (action === 'bootstrap') {\n      return this.provider?.[action](this.diagnostics);\n    }\n    return this.provider?.[action]();\n  },\n\n  async flush(this: PullHandler, stage: Client.TransferPullStep, id) {\n    type Stage = typeof stage;\n    const batchSize = 1024 * 1024;\n    let batch = [] as Client.GetTransferPullStreamData<Stage>;\n    const stream = this.streams?.[stage];\n\n    const batchLength = () => Buffer.byteLength(JSON.stringify(batch));\n\n    const maybeConfirm = async (data: any) => {\n      try {\n        await this.confirm(data);\n      } catch (error) {\n        // Handle the error, log it, or take other appropriate actions\n\n        strapi?.log.error(\n          `[Data transfer] Message confirmation failed: ${(error as Error)?.message}`\n        );\n        this.onError(error as Error);\n      }\n    };\n\n    const sendBatch = async () => {\n      await this.confirm({\n        type: 'transfer',\n        data: batch,\n        ended: false,\n        error: null,\n        id,\n      });\n      batch = [];\n    };\n\n    if (!stream) {\n      throw new ProviderTransferError(`No available stream found for ${stage}`);\n    }\n\n    try {\n      for await (const chunk of stream) {\n        if (stage !== 'assets') {\n          batch.push(chunk);\n          if (batchLength() >= batchSize) {\n            await sendBatch();\n          }\n        } else {\n          await this.confirm({\n            type: 'transfer',\n            data: [chunk],\n            ended: false,\n            error: null,\n            id,\n          });\n        }\n      }\n\n      if (batch.length > 0 && stage !== 'assets') {\n        await sendBatch();\n      }\n      await this.confirm({ type: 'transfer', data: null, ended: true, error: null, id });\n    } catch (e) {\n      // TODO: if this confirm fails, can we abort the whole transfer?\n      await maybeConfirm({ type: 'transfer', data: null, ended: true, error: e, id });\n    }\n  },\n\n  async onTransferStep(this: PullHandler, msg) {\n    const { step, action } = msg;\n\n    if (action === 'start') {\n      if (this.streams?.[step] instanceof Readable) {\n        throw new Error('Stream already created, something went wrong');\n      }\n\n      const flushUUID = randomUUID();\n\n      await this.createReadableStreamForStep(step);\n      this.flush(step, flushUUID);\n\n      return { ok: true, id: flushUUID };\n    }\n\n    if (action === 'end') {\n      const stream = this.streams?.[step];\n\n      if (stream?.readableEnded === false) {\n        await new Promise((resolve) => {\n          stream?.on('close', resolve).destroy();\n        });\n      }\n\n      delete this.streams?.[step];\n\n      return { ok: true };\n    }\n  },\n\n  async createReadableStreamForStep(this: PullHandler, step: Exclude<TransferStage, 'schemas'>) {\n    const mapper = {\n      entities: () => this.provider?.createEntitiesReadStream(),\n      links: () => this.provider?.createLinksReadStream(),\n      configuration: () => this.provider?.createConfigurationReadStream(),\n      assets: () => {\n        const assets = this.provider?.createAssetsReadStream();\n        let batch: Protocol.Client.TransferAssetFlow[] = [];\n\n        const batchLength = () => {\n          return batch.reduce(\n            (acc, chunk) => (chunk.action === 'stream' ? acc + chunk.data.byteLength : acc),\n            0\n          );\n        };\n\n        const BATCH_MAX_SIZE = 1024 * 1024; // 1MB\n\n        if (!assets) {\n          throw new Error('Assets read stream could not be created');\n        }\n        /**\n         * Generates batches of 1MB of data from the assets stream to avoid\n         * sending too many small chunks\n         *\n         * @param stream Assets stream from the local source provider\n         */\n        async function* generator(stream: Readable) {\n          let hasStarted = false;\n          let assetID = '';\n\n          for await (const chunk of stream) {\n            const { stream: assetStream, ...assetData } = chunk as IAsset;\n            if (!hasStarted) {\n              assetID = randomUUID();\n              // Start the transfer of a new asset\n              batch.push({ action: 'start', assetID, data: assetData });\n              hasStarted = true;\n            }\n\n            for await (const assetChunk of assetStream) {\n              // Add the asset data to the batch\n              batch.push({ action: 'stream', assetID, data: assetChunk });\n\n              // if the batch size is bigger than BATCH_MAX_SIZE stream the batch\n              if (batchLength() >= BATCH_MAX_SIZE) {\n                yield batch;\n                batch = [];\n              }\n            }\n\n            // All the asset data has been streamed and gets ready for the next one\n            hasStarted = false;\n            batch.push({ action: 'end', assetID });\n            yield batch;\n            batch = [];\n          }\n        }\n\n        return Readable.from(generator(assets));\n      },\n    };\n\n    if (!(step in mapper)) {\n      throw new Error('Invalid transfer step, impossible to create a stream');\n    }\n\n    if (!this.streams) {\n      throw new Error('Invalid transfer state');\n    }\n\n    this.streams[step] = await mapper[step]();\n  },\n\n  // Commands\n  async init(this: PullHandler) {\n    if (this.transferID || this.provider) {\n      throw new Error('Transfer already in progress');\n    }\n    await this.verifyAuth();\n\n    this.transferID = randomUUID();\n    this.startedAt = Date.now();\n\n    this.streams = {};\n\n    this.provider = createLocalStrapiSourceProvider({\n      autoDestroy: false,\n      getStrapi: () => strapi as Core.Strapi,\n    });\n\n    return { transferID: this.transferID };\n  },\n\n  async end(\n    this: PullHandler,\n    params: Protocol.Client.GetCommandParams<'end'>\n  ): Promise<Protocol.Server.Payload<Protocol.Server.EndMessage>> {\n    await this.verifyAuth();\n\n    if (this.transferID !== params?.transferID) {\n      throw new ProviderTransferError('Bad transfer ID provided');\n    }\n\n    this.cleanup();\n\n    return { ok: true };\n  },\n\n  async status(this: PullHandler) {\n    const isStarted = this.isTransferStarted();\n\n    if (!isStarted) {\n      const startedAt = this.startedAt as number;\n      return {\n        active: true,\n        kind: TRANSFER_KIND,\n        startedAt,\n        elapsed: Date.now() - startedAt,\n      };\n    }\n    return { active: false, kind: null, elapsed: null, startedAt: null };\n  },\n}));\n"],"names":["TRANSFER_KIND","VALID_TRANSFER_ACTIONS","createPullController","handlerControllerFactory","proto","isTransferStarted","call","provider","undefined","verifyAuth","cleanup","streams","onInfo","message","diagnostics","report","details","origin","createdAt","Date","kind","onWarning","onError","error","name","severity","assertValidTransferAction","action","validActions","includes","ProviderTransferError","Object","keys","onMessage","raw","msg","JSON","parse","toString","isDataTransferMessage","uuid","respond","Error","hasUUID","previousResponse","response","e","data","type","addUUID","command","executeAndRespond","assertValidTransferCommand","status","params","assertValidTransfer","onTransferMessage","onTransferAction","onTransferStep","flush","stage","id","batchSize","batch","stream","batchLength","Buffer","byteLength","stringify","maybeConfirm","confirm","strapi","log","sendBatch","ended","chunk","push","length","step","Readable","flushUUID","randomUUID","createReadableStreamForStep","ok","readableEnded","Promise","resolve","on","destroy","mapper","entities","createEntitiesReadStream","links","createLinksReadStream","configuration","createConfigurationReadStream","assets","createAssetsReadStream","reduce","acc","BATCH_MAX_SIZE","generator","hasStarted","assetID","assetStream","assetData","assetChunk","from","init","transferID","startedAt","now","createLocalStrapiSourceProvider","autoDestroy","getStrapi","end","isStarted","active","elapsed"],"mappings":"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"}