{"version":3,"file":"folder-file.js","sources":["../../../../../server/src/controllers/validation/admin/folder-file.ts"],"sourcesContent":["import { intersection, map, isEmpty } from 'lodash/fp';\nimport { yup, validateYupSchema } from '@strapi/utils';\nimport { FOLDER_MODEL_UID } from '../../../constants';\nimport { folderExists } from './utils';\nimport { isFolderOrChild } from '../../utils/folders';\n\nimport type { Folder } from '../../../types';\n\nconst validateDeleteManyFoldersFilesSchema = yup\n  .object()\n  .shape({\n    fileIds: yup.array().of(yup.strapiID().required()),\n    folderIds: yup.array().of(yup.strapiID().required()),\n  })\n  .noUnknown()\n  .required();\n\nconst validateStructureMoveManyFoldersFilesSchema = yup\n  .object()\n  .shape({\n    destinationFolderId: yup\n      .strapiID()\n      .nullable()\n      .defined()\n      .test('folder-exists', 'destination folder does not exist', folderExists),\n    fileIds: yup.array().of(yup.strapiID().required()),\n    folderIds: yup.array().of(yup.strapiID().required()),\n  })\n  .noUnknown()\n  .required();\n\nconst validateDuplicatesMoveManyFoldersFilesSchema = yup\n  .object()\n  .test('are-folders-unique', 'some folders already exist', async function areFoldersUnique(value) {\n    const { folderIds, destinationFolderId } = value;\n    if (isEmpty(folderIds)) return true;\n\n    const folders = await strapi.db.query(FOLDER_MODEL_UID).findMany({\n      select: ['name'],\n      where: { id: { $in: folderIds } },\n    });\n\n    const existingFolders = await strapi.db.query(FOLDER_MODEL_UID).findMany({\n      select: ['name'],\n      where: { parent: { id: destinationFolderId } },\n    });\n\n    const duplicatedNames = intersection(map('name', folders), map('name', existingFolders));\n    if (duplicatedNames.length > 0) {\n      return this.createError({\n        message: `some folders already exists: ${duplicatedNames.join(', ')}`,\n      });\n    }\n\n    return true;\n  });\n\nconst validateMoveFoldersNotInsideThemselvesSchema = yup\n  .object()\n  .test(\n    'dont-move-inside-self',\n    'folders cannot be moved inside themselves or one of its children',\n    async function validateMoveFoldersNotInsideThemselves(value) {\n      const { folderIds, destinationFolderId } = value;\n      if (destinationFolderId === null || isEmpty(folderIds)) return true;\n\n      const destinationFolder = await strapi.db.query(FOLDER_MODEL_UID).findOne({\n        select: ['path'],\n        where: { id: destinationFolderId },\n      });\n\n      const folders: Folder[] = await strapi.db.query(FOLDER_MODEL_UID).findMany({\n        select: ['name', 'path'],\n        where: { id: { $in: folderIds } },\n      });\n\n      const unmovableFoldersNames = folders\n        .filter((folder) => isFolderOrChild(destinationFolder, folder))\n        .map((f) => f.name);\n\n      if (unmovableFoldersNames.length > 0) {\n        return this.createError({\n          message: `folders cannot be moved inside themselves or one of its children: ${unmovableFoldersNames.join(\n            ', '\n          )}`,\n        });\n      }\n\n      return true;\n    }\n  );\n\nexport const validateDeleteManyFoldersFiles = validateYupSchema(\n  validateDeleteManyFoldersFilesSchema\n);\n\nexport async function validateMoveManyFoldersFiles(body: unknown) {\n  await validateYupSchema(validateStructureMoveManyFoldersFilesSchema)(body);\n  await validateYupSchema(validateDuplicatesMoveManyFoldersFilesSchema)(body);\n  await validateYupSchema(validateMoveFoldersNotInsideThemselvesSchema)(body);\n}\n"],"names":["validateDeleteManyFoldersFilesSchema","yup","object","shape","fileIds","array","of","strapiID","required","folderIds","noUnknown","validateStructureMoveManyFoldersFilesSchema","destinationFolderId","nullable","defined","test","folderExists","validateDuplicatesMoveManyFoldersFilesSchema","areFoldersUnique","value","isEmpty","folders","strapi","db","query","FOLDER_MODEL_UID","findMany","select","where","id","$in","existingFolders","parent","duplicatedNames","intersection","map","length","createError","message","join","validateMoveFoldersNotInsideThemselvesSchema","validateMoveFoldersNotInsideThemselves","destinationFolder","findOne","unmovableFoldersNames","filter","folder","isFolderOrChild","f","name","validateDeleteManyFoldersFiles","validateYupSchema","validateMoveManyFoldersFiles","body"],"mappings":";;;;;;;;AAQA,MAAMA,oCAAuCC,GAAAA,SAAAA,CAC1CC,MAAM,EAAA,CACNC,KAAK,CAAC;IACLC,OAASH,EAAAA,SAAAA,CAAII,KAAK,EAAGC,CAAAA,EAAE,CAACL,SAAIM,CAAAA,QAAQ,GAAGC,QAAQ,EAAA,CAAA;IAC/CC,SAAWR,EAAAA,SAAAA,CAAII,KAAK,EAAGC,CAAAA,EAAE,CAACL,SAAIM,CAAAA,QAAQ,GAAGC,QAAQ,EAAA;AACnD,CACCE,CAAAA,CAAAA,SAAS,GACTF,QAAQ,EAAA;AAEX,MAAMG,2CAA8CV,GAAAA,SAAAA,CACjDC,MAAM,EAAA,CACNC,KAAK,CAAC;IACLS,mBAAqBX,EAAAA,SAAAA,CAClBM,QAAQ,EAAA,CACRM,QAAQ,EAAA,CACRC,OAAO,EACPC,CAAAA,IAAI,CAAC,eAAA,EAAiB,mCAAqCC,EAAAA,oBAAAA,CAAAA;IAC9DZ,OAASH,EAAAA,SAAAA,CAAII,KAAK,EAAGC,CAAAA,EAAE,CAACL,SAAIM,CAAAA,QAAQ,GAAGC,QAAQ,EAAA,CAAA;IAC/CC,SAAWR,EAAAA,SAAAA,CAAII,KAAK,EAAGC,CAAAA,EAAE,CAACL,SAAIM,CAAAA,QAAQ,GAAGC,QAAQ,EAAA;AACnD,CACCE,CAAAA,CAAAA,SAAS,GACTF,QAAQ,EAAA;AAEX,MAAMS,4CAAAA,GAA+ChB,SAClDC,CAAAA,MAAM,EACNa,CAAAA,IAAI,CAAC,oBAAsB,EAAA,4BAAA,EAA8B,eAAeG,gBAAAA,CAAiBC,KAAK,EAAA;AAC7F,IAAA,MAAM,EAAEV,SAAS,EAAEG,mBAAmB,EAAE,GAAGO,KAAAA;IAC3C,IAAIC,UAAAA,CAAQX,YAAY,OAAO,IAAA;IAE/B,MAAMY,OAAAA,GAAU,MAAMC,MAAOC,CAAAA,EAAE,CAACC,KAAK,CAACC,0BAAkBC,CAAAA,CAAAA,QAAQ,CAAC;QAC/DC,MAAQ,EAAA;AAAC,YAAA;AAAO,SAAA;QAChBC,KAAO,EAAA;YAAEC,EAAI,EAAA;gBAAEC,GAAKrB,EAAAA;AAAU;AAAE;AAClC,KAAA,CAAA;IAEA,MAAMsB,eAAAA,GAAkB,MAAMT,MAAOC,CAAAA,EAAE,CAACC,KAAK,CAACC,0BAAkBC,CAAAA,CAAAA,QAAQ,CAAC;QACvEC,MAAQ,EAAA;AAAC,YAAA;AAAO,SAAA;QAChBC,KAAO,EAAA;YAAEI,MAAQ,EAAA;gBAAEH,EAAIjB,EAAAA;AAAoB;AAAE;AAC/C,KAAA,CAAA;AAEA,IAAA,MAAMqB,kBAAkBC,eAAaC,CAAAA,MAAAA,CAAI,MAAQd,EAAAA,OAAAA,CAAAA,EAAUc,OAAI,MAAQJ,EAAAA,eAAAA,CAAAA,CAAAA;IACvE,IAAIE,eAAAA,CAAgBG,MAAM,GAAG,CAAG,EAAA;QAC9B,OAAO,IAAI,CAACC,WAAW,CAAC;AACtBC,YAAAA,OAAAA,EAAS,CAAC,6BAA6B,EAAEL,gBAAgBM,IAAI,CAAC,MAAM;AACtE,SAAA,CAAA;AACF;IAEA,OAAO,IAAA;AACT,CAAA,CAAA;AAEF,MAAMC,4CAAAA,GAA+CvC,SAClDC,CAAAA,MAAM,EACNa,CAAAA,IAAI,CACH,uBACA,EAAA,kEAAA,EACA,eAAe0B,sCAAAA,CAAuCtB,KAAK,EAAA;AACzD,IAAA,MAAM,EAAEV,SAAS,EAAEG,mBAAmB,EAAE,GAAGO,KAAAA;AAC3C,IAAA,IAAIP,mBAAwB,KAAA,IAAA,IAAQQ,UAAQX,CAAAA,SAAAA,CAAAA,EAAY,OAAO,IAAA;IAE/D,MAAMiC,iBAAAA,GAAoB,MAAMpB,MAAOC,CAAAA,EAAE,CAACC,KAAK,CAACC,0BAAkBkB,CAAAA,CAAAA,OAAO,CAAC;QACxEhB,MAAQ,EAAA;AAAC,YAAA;AAAO,SAAA;QAChBC,KAAO,EAAA;YAAEC,EAAIjB,EAAAA;AAAoB;AACnC,KAAA,CAAA;IAEA,MAAMS,SAAAA,GAAoB,MAAMC,MAAOC,CAAAA,EAAE,CAACC,KAAK,CAACC,0BAAkBC,CAAAA,CAAAA,QAAQ,CAAC;QACzEC,MAAQ,EAAA;AAAC,YAAA,MAAA;AAAQ,YAAA;AAAO,SAAA;QACxBC,KAAO,EAAA;YAAEC,EAAI,EAAA;gBAAEC,GAAKrB,EAAAA;AAAU;AAAE;AAClC,KAAA,CAAA;AAEA,IAAA,MAAMmC,qBAAwBvB,GAAAA,SAAAA,CAC3BwB,MAAM,CAAC,CAACC,MAAWC,GAAAA,uBAAAA,CAAgBL,iBAAmBI,EAAAA,MAAAA,CAAAA,CAAAA,CACtDX,GAAG,CAAC,CAACa,CAAAA,GAAMA,EAAEC,IAAI,CAAA;IAEpB,IAAIL,qBAAAA,CAAsBR,MAAM,GAAG,CAAG,EAAA;QACpC,OAAO,IAAI,CAACC,WAAW,CAAC;AACtBC,YAAAA,OAAAA,EAAS,CAAC,kEAAkE,EAAEM,sBAAsBL,IAAI,CACtG,MACA;AACJ,SAAA,CAAA;AACF;IAEA,OAAO,IAAA;AACT,CAAA,CAAA;AAGG,MAAMW,8BAAiCC,GAAAA,uBAAAA,CAC5CnD,oCACA;AAEK,eAAeoD,6BAA6BC,IAAa,EAAA;AAC9D,IAAA,MAAMF,wBAAkBxC,2CAA6C0C,CAAAA,CAAAA,IAAAA,CAAAA;AACrE,IAAA,MAAMF,wBAAkBlC,4CAA8CoC,CAAAA,CAAAA,IAAAA,CAAAA;AACtE,IAAA,MAAMF,wBAAkBX,4CAA8Ca,CAAAA,CAAAA,IAAAA,CAAAA;AACxE;;;;;"}