{"version":3,"file":"admin-upload.js","sources":["../../../server/src/controllers/admin-upload.ts"],"sourcesContent":["import _ from 'lodash';\nimport { errors, async } from '@strapi/utils';\n\nimport type { Context } from 'koa';\n\nimport { getService } from '../utils';\nimport { ACTIONS, FILE_MODEL_UID } from '../constants';\nimport { validateUploadBody } from './validation/admin/upload';\nimport { findEntityAndCheckPermissions } from './utils/find-entity-and-check-permissions';\nimport { FileInfo } from '../types';\n\nexport default {\n  async updateFileInfo(ctx: Context) {\n    const {\n      state: { userAbility, user },\n      query: { id },\n      request: { body },\n    } = ctx;\n\n    if (typeof id !== 'string') {\n      throw new errors.ValidationError('File id is required');\n    }\n\n    const uploadService = getService('upload');\n    const { pm } = await findEntityAndCheckPermissions(\n      userAbility,\n      ACTIONS.update,\n      FILE_MODEL_UID,\n      id\n    );\n\n    const data = await validateUploadBody(body);\n\n    const file = await uploadService.updateFileInfo(id, data.fileInfo as any, { user });\n\n    ctx.body = await pm.sanitizeOutput(file, { action: ACTIONS.read });\n  },\n\n  async replaceFile(ctx: Context) {\n    const {\n      state: { userAbility, user },\n      query: { id },\n      request: { body, files: { files } = {} },\n    } = ctx;\n\n    if (typeof id !== 'string') {\n      throw new errors.ValidationError('File id is required');\n    }\n\n    const uploadService = getService('upload');\n    const { pm } = await findEntityAndCheckPermissions(\n      userAbility,\n      ACTIONS.update,\n      FILE_MODEL_UID,\n      id\n    );\n\n    if (Array.isArray(files)) {\n      throw new errors.ApplicationError('Cannot replace a file with multiple ones');\n    }\n\n    const data = (await validateUploadBody(body)) as { fileInfo: FileInfo };\n    const replacedFile = await uploadService.replace(id, { data, file: files }, { user });\n\n    // Sign file urls for private providers\n    const signedFile = await getService('file').signFileUrls(replacedFile);\n\n    ctx.body = await pm.sanitizeOutput(signedFile, { action: ACTIONS.read });\n  },\n\n  async uploadFiles(ctx: Context) {\n    const {\n      state: { userAbility, user },\n      request: { body, files: { files } = {} },\n    } = ctx;\n\n    const uploadService = getService('upload');\n    const pm = strapi.service('admin::permission').createPermissionsManager({\n      ability: userAbility,\n      action: ACTIONS.create,\n      model: FILE_MODEL_UID,\n    });\n\n    if (!pm.isAllowed) {\n      return ctx.forbidden();\n    }\n\n    const data = await validateUploadBody(body);\n    const uploadedFiles = await uploadService.upload({ data, files }, { user });\n\n    // Sign file urls for private providers\n    const signedFiles = await async.map(uploadedFiles, getService('file').signFileUrls);\n\n    ctx.body = await pm.sanitizeOutput(signedFiles, { action: ACTIONS.read });\n    ctx.status = 201;\n  },\n\n  // TODO: split into multiple endpoints\n  async upload(ctx: Context) {\n    const {\n      query: { id },\n      request: { files: { files } = {} },\n    } = ctx;\n\n    if (_.isEmpty(files) || (!Array.isArray(files) && files.size === 0)) {\n      if (id) {\n        return this.updateFileInfo(ctx);\n      }\n\n      throw new errors.ApplicationError('Files are empty');\n    }\n\n    await (id ? this.replaceFile : this.uploadFiles)(ctx);\n  },\n};\n"],"names":["updateFileInfo","ctx","state","userAbility","user","query","id","request","body","errors","ValidationError","uploadService","getService","pm","findEntityAndCheckPermissions","ACTIONS","update","FILE_MODEL_UID","data","validateUploadBody","file","fileInfo","sanitizeOutput","action","read","replaceFile","files","Array","isArray","ApplicationError","replacedFile","replace","signedFile","signFileUrls","uploadFiles","strapi","service","createPermissionsManager","ability","create","model","isAllowed","forbidden","uploadedFiles","upload","signedFiles","async","map","status","_","isEmpty","size"],"mappings":"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"}