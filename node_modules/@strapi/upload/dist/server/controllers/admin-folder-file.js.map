{"version":3,"file":"admin-folder-file.js","sources":["../../../server/src/controllers/admin-folder-file.ts"],"sourcesContent":["import { strings } from '@strapi/utils';\n\nimport type { Context } from 'koa';\n\nimport { getService } from '../utils';\nimport { ACTIONS, FOLDER_MODEL_UID, FILE_MODEL_UID } from '../constants';\nimport {\n  validateDeleteManyFoldersFiles,\n  validateMoveManyFoldersFiles,\n} from './validation/admin/folder-file';\n\nimport type { File, Folder } from '../types';\n\nexport default {\n  async deleteMany(ctx: Context) {\n    const { body } = ctx.request;\n    const {\n      state: { userAbility },\n    } = ctx;\n\n    const pmFolder = strapi.service('admin::permission').createPermissionsManager({\n      ability: ctx.state.userAbility,\n      model: FOLDER_MODEL_UID,\n    });\n\n    const pmFile = strapi.service('admin::permission').createPermissionsManager({\n      ability: userAbility,\n      action: ACTIONS.read,\n      model: FILE_MODEL_UID,\n    });\n\n    await validateDeleteManyFoldersFiles(body);\n\n    const fileService = getService('file');\n    const folderService = getService('folder');\n\n    const deletedFiles = await fileService.deleteByIds(body.fileIds);\n    const {\n      folders: deletedFolders,\n      totalFolderNumber,\n      totalFileNumber,\n    } = await folderService.deleteByIds(body.folderIds);\n\n    if (deletedFiles.length + deletedFolders.length > 1) {\n      strapi.telemetry.send('didBulkDeleteMediaLibraryElements', {\n        eventProperties: {\n          rootFolderNumber: deletedFolders.length,\n          rootAssetNumber: deletedFiles.length,\n          totalFolderNumber,\n          totalAssetNumber: totalFileNumber + deletedFiles.length,\n        },\n      });\n    }\n\n    ctx.body = {\n      data: {\n        files: await pmFile.sanitizeOutput(deletedFiles),\n        folders: await pmFolder.sanitizeOutput(deletedFolders),\n      },\n    };\n  },\n  async moveMany(ctx: Context) {\n    const { body } = ctx.request;\n    const {\n      state: { userAbility },\n    } = ctx;\n\n    const pmFolder = strapi.service('admin::permission').createPermissionsManager({\n      ability: ctx.state.userAbility,\n      model: FOLDER_MODEL_UID,\n    });\n\n    const pmFile = strapi.service('admin::permission').createPermissionsManager({\n      ability: userAbility,\n      action: ACTIONS.read,\n      model: FILE_MODEL_UID,\n    });\n\n    await validateMoveManyFoldersFiles(body);\n    const { folderIds = [], fileIds = [], destinationFolderId } = body;\n\n    let totalFolderNumber = 0;\n    let totalFileNumber = 0;\n\n    const trx = await strapi.db.transaction();\n    try {\n      // fetch folders\n      const existingFolders = await strapi.db\n        .queryBuilder(FOLDER_MODEL_UID)\n        .select(['id', 'pathId', 'path'])\n        .where({ id: { $in: folderIds } })\n        .transacting(trx.get())\n        .forUpdate()\n        .execute<Folder[]>();\n\n      // fetch files\n      const existingFiles = await strapi.db\n        .queryBuilder(FILE_MODEL_UID)\n        .select(['id'])\n        .where({ id: { $in: fileIds } })\n        .transacting(trx.get())\n        .forUpdate()\n        .execute<File[]>();\n\n      // fetch destinationFolder path\n      let destinationFolderPath = '/';\n      if (destinationFolderId !== null) {\n        const destinationFolder = await strapi.db\n          .queryBuilder(FOLDER_MODEL_UID)\n          .select('path')\n          .where({ id: destinationFolderId })\n          .transacting(trx.get())\n          .first()\n          .execute<Folder>();\n        destinationFolderPath = destinationFolder.path;\n      }\n\n      const fileTable = strapi.getModel(FILE_MODEL_UID).collectionName;\n      const folderTable = strapi.getModel(FOLDER_MODEL_UID).collectionName;\n      const folderPathColName =\n        // @ts-expect-error - no dynamic typings for the models\n        strapi.db.metadata.get(FILE_MODEL_UID).attributes.folderPath.columnName;\n      // @ts-expect-error - no dynamic typings for the models\n      const pathColName = strapi.db.metadata.get(FOLDER_MODEL_UID).attributes.path.columnName;\n\n      if (existingFolders.length > 0) {\n        // update folders' parent relation\n        // @ts-expect-error - no dynamic typings for the models\n        const { joinTable } = strapi.db.metadata.get(FOLDER_MODEL_UID).attributes.parent;\n        await strapi.db\n          .queryBuilder(joinTable.name)\n          .transacting(trx.get())\n          .delete()\n          .where({ [joinTable.joinColumn.name]: { $in: folderIds } })\n          .execute();\n\n        if (destinationFolderId !== null) {\n          await strapi.db\n            .queryBuilder(joinTable.name)\n            .transacting(trx.get())\n            .insert(\n              existingFolders.map((folder) => ({\n                [joinTable.inverseJoinColumn.name]: destinationFolderId,\n                [joinTable.joinColumn.name]: folder.id,\n              }))\n            )\n            .execute();\n        }\n\n        for (const existingFolder of existingFolders) {\n          let replaceQuery;\n          switch (strapi.db.dialect.client) {\n            case 'sqlite':\n              replaceQuery = '? || SUBSTRING(??, ?)';\n              break;\n            case 'postgres':\n              replaceQuery = 'CONCAT(?::TEXT, SUBSTRING(??, ?::INTEGER))';\n              break;\n            default:\n              replaceQuery = 'CONCAT(?, SUBSTRING(??, ?))';\n          }\n\n          // update path for folders themselves & folders below\n          totalFolderNumber = await strapi.db\n            .getConnection(folderTable)\n            .transacting(trx.get())\n            .where(pathColName, existingFolder.path)\n            .orWhere(pathColName, 'like', `${existingFolder.path}/%`)\n            .update(\n              pathColName,\n              strapi.db.connection.raw(replaceQuery, [\n                strings.joinBy('/', destinationFolderPath, `${existingFolder.pathId}`),\n                pathColName,\n                existingFolder.path.length + 1,\n              ])\n            );\n\n          // update path of files below\n          totalFileNumber = await strapi.db\n            .getConnection(fileTable)\n            .transacting(trx.get())\n            .where(folderPathColName, existingFolder.path)\n            .orWhere(folderPathColName, 'like', `${existingFolder.path}/%`)\n            .update(\n              folderPathColName,\n              strapi.db.connection.raw(replaceQuery, [\n                strings.joinBy('/', destinationFolderPath, `${existingFolder.pathId}`),\n                folderPathColName,\n                existingFolder.path.length + 1,\n              ])\n            );\n        }\n      }\n\n      if (existingFiles.length > 0) {\n        // update files' folder relation (delete + insert; upsert not possible)\n        // @ts-expect-error - no dynamic typings for the models\n        const fileJoinTable = strapi.db.metadata.get(FILE_MODEL_UID).attributes.folder.joinTable;\n        await strapi.db\n          .queryBuilder(fileJoinTable.name)\n          .transacting(trx.get())\n          .delete()\n          .where({ [fileJoinTable.joinColumn.name]: { $in: fileIds } })\n          .execute();\n\n        if (destinationFolderId !== null) {\n          await strapi.db\n            .queryBuilder(fileJoinTable.name)\n            .transacting(trx.get())\n            .insert(\n              existingFiles.map((file) => ({\n                [fileJoinTable.inverseJoinColumn.name]: destinationFolderId,\n                [fileJoinTable.joinColumn.name]: file.id,\n              }))\n            )\n            .execute();\n        }\n\n        // update files main fields (path + updatedBy)\n        await strapi.db\n          .getConnection(fileTable)\n          .transacting(trx.get())\n          .whereIn('id', fileIds)\n          .update(folderPathColName, destinationFolderPath);\n      }\n\n      await trx.commit();\n    } catch (e) {\n      await trx.rollback();\n      throw e;\n    }\n\n    const updatedFolders = await strapi.db.query(FOLDER_MODEL_UID).findMany({\n      where: { id: { $in: folderIds } },\n    });\n\n    const updatedFiles = await strapi.db.query(FILE_MODEL_UID).findMany({\n      where: { id: { $in: fileIds } },\n    });\n\n    strapi.telemetry.send('didBulkMoveMediaLibraryElements', {\n      eventProperties: {\n        rootFolderNumber: updatedFolders.length,\n        rootAssetNumber: updatedFiles.length,\n        totalFolderNumber,\n        totalAssetNumber: totalFileNumber + updatedFiles.length,\n      },\n    });\n\n    ctx.body = {\n      data: {\n        files: await pmFile.sanitizeOutput(updatedFiles),\n        folders: await pmFolder.sanitizeOutput(updatedFolders),\n      },\n    };\n  },\n};\n"],"names":["deleteMany","ctx","body","request","state","userAbility","pmFolder","strapi","service","createPermissionsManager","ability","model","FOLDER_MODEL_UID","pmFile","action","ACTIONS","read","FILE_MODEL_UID","validateDeleteManyFoldersFiles","fileService","getService","folderService","deletedFiles","deleteByIds","fileIds","folders","deletedFolders","totalFolderNumber","totalFileNumber","folderIds","length","telemetry","send","eventProperties","rootFolderNumber","rootAssetNumber","totalAssetNumber","data","files","sanitizeOutput","moveMany","validateMoveManyFoldersFiles","destinationFolderId","trx","db","transaction","existingFolders","queryBuilder","select","where","id","$in","transacting","get","forUpdate","execute","existingFiles","destinationFolderPath","destinationFolder","first","path","fileTable","getModel","collectionName","folderTable","folderPathColName","metadata","attributes","folderPath","columnName","pathColName","joinTable","parent","name","delete","joinColumn","insert","map","folder","inverseJoinColumn","existingFolder","replaceQuery","dialect","client","getConnection","orWhere","update","connection","raw","strings","joinBy","pathId","fileJoinTable","file","whereIn","commit","e","rollback","updatedFolders","query","findMany","updatedFiles"],"mappings":"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"}