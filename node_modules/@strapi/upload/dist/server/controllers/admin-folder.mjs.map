{"version":3,"file":"admin-folder.mjs","sources":["../../../server/src/controllers/admin-folder.ts"],"sourcesContent":["import { defaultsDeep } from 'lodash/fp';\n\nimport type { Context } from 'koa';\n\nimport { getService } from '../utils';\nimport { FOLDER_MODEL_UID } from '../constants';\nimport { validateCreateFolder, validateUpdateFolder } from './validation/admin/folder';\n\nexport default {\n  async findOne(ctx: Context) {\n    const { id } = ctx.params;\n\n    const permissionsManager = strapi.service('admin::permission').createPermissionsManager({\n      ability: ctx.state.userAbility,\n      model: FOLDER_MODEL_UID,\n    });\n\n    await permissionsManager.validateQuery(ctx.query);\n    const query = await permissionsManager.sanitizeQuery(ctx.query);\n\n    const { results } = await strapi.db.query(FOLDER_MODEL_UID).findPage(\n      strapi.get('query-params').transform(\n        FOLDER_MODEL_UID,\n        defaultsDeep(\n          {\n            filters: { id },\n            populate: {\n              children: {\n                count: true,\n              },\n              files: {\n                count: true,\n              },\n            },\n          },\n          query\n        )\n      )\n    );\n\n    if (results.length === 0) {\n      return ctx.notFound('folder not found');\n    }\n\n    ctx.body = {\n      data: await permissionsManager.sanitizeOutput(results[0]),\n    };\n  },\n\n  async find(ctx: Context) {\n    const permissionsManager = strapi.service('admin::permission').createPermissionsManager({\n      ability: ctx.state.userAbility,\n      model: FOLDER_MODEL_UID,\n    });\n\n    await permissionsManager.validateQuery(ctx.query);\n    const query = await permissionsManager.sanitizeQuery(ctx.query);\n\n    const results = await strapi.db.query(FOLDER_MODEL_UID).findMany(\n      strapi.get('query-params').transform(\n        FOLDER_MODEL_UID,\n        defaultsDeep(\n          {\n            populate: {\n              children: {\n                count: true,\n              },\n              files: {\n                count: true,\n              },\n            },\n          },\n          query\n        )\n      )\n    );\n\n    ctx.body = {\n      data: await permissionsManager.sanitizeOutput(results),\n    };\n  },\n  async create(ctx: Context) {\n    const { user } = ctx.state;\n    const { body } = ctx.request;\n\n    await validateCreateFolder(body);\n\n    const folderService = getService('folder');\n\n    const folder = await folderService.create(body, { user });\n\n    const permissionsManager = strapi.service('admin::permission').createPermissionsManager({\n      ability: ctx.state.userAbility,\n      model: FOLDER_MODEL_UID,\n    });\n\n    ctx.created({\n      data: await permissionsManager.sanitizeOutput(folder),\n    });\n  },\n\n  async update(ctx: Context) {\n    const { id } = ctx.params;\n    const { user } = ctx.state;\n    const { body } = ctx.request;\n\n    const permissionsManager = strapi.service('admin::permission').createPermissionsManager({\n      ability: ctx.state.userAbility,\n      model: FOLDER_MODEL_UID,\n    });\n\n    await validateUpdateFolder(id)(body);\n\n    const folderService = getService('folder');\n\n    const updatedFolder = await folderService.update(id, body, { user });\n\n    if (!updatedFolder) {\n      return ctx.notFound('folder not found');\n    }\n\n    ctx.body = {\n      data: await permissionsManager.sanitizeOutput(updatedFolder),\n    };\n  },\n\n  async getStructure(ctx: Context) {\n    const { getStructure } = getService('folder');\n\n    const structure = await getStructure();\n\n    ctx.body = {\n      data: structure,\n    };\n  },\n};\n"],"names":["findOne","ctx","id","params","permissionsManager","strapi","service","createPermissionsManager","ability","state","userAbility","model","FOLDER_MODEL_UID","validateQuery","query","sanitizeQuery","results","db","findPage","get","transform","defaultsDeep","filters","populate","children","count","files","length","notFound","body","data","sanitizeOutput","find","findMany","create","user","request","validateCreateFolder","folderService","getService","folder","created","update","validateUpdateFolder","updatedFolder","getStructure","structure"],"mappings":"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"}