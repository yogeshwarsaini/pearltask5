{"version":3,"file":"utils.js","sources":["../../../../server/src/services/extensions/utils.ts"],"sourcesContent":["import { async, traverseEntity } from '@strapi/utils';\n\nimport type { Schema, UID } from '@strapi/types';\n\nimport { getService } from '../../utils';\n\nimport type { File } from '../../types';\n\ntype SignEntityMediaVisitor = (\n  args: {\n    key: string;\n    value: unknown;\n    attribute: Schema.Attribute.AnyAttribute;\n  },\n  utils: {\n    set: (key: string, value: unknown) => void;\n  }\n) => Promise<void>;\n\nfunction isFile(value: unknown, attribute: Schema.Attribute.AnyAttribute): value is File {\n  if (!value || attribute.type !== 'media') {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Visitor function to sign media URLs\n */\nconst signEntityMediaVisitor: SignEntityMediaVisitor = async (\n  { key, value, attribute },\n  { set }\n) => {\n  const { signFileUrls } = getService('file');\n\n  if (!attribute) {\n    return;\n  }\n\n  if (attribute.type !== 'media') {\n    return;\n  }\n\n  if (isFile(value, attribute)) {\n    // If the attribute is repeatable sign each file\n    if (attribute.multiple) {\n      const signedFiles = await async.map(value, signFileUrls);\n      set(key, signedFiles);\n      return;\n    }\n\n    // If the attribute is not repeatable only sign a single file\n    const signedFile = await signFileUrls(value);\n    set(key, signedFile);\n  }\n};\n\n/**\n *\n * Iterate through an entity manager result\n * Check which modelAttributes are media and pre sign the image URLs\n * if they are from the current upload provider\n *\n * @param {Object} entity\n * @param {Object} modelAttributes\n * @returns\n */\nconst signEntityMedia = async (entity: any, uid: UID.Schema) => {\n  const model = strapi.getModel(uid);\n  return traverseEntity(\n    // @ts-expect-error - FIXME: fix traverseEntity using wrong types\n    signEntityMediaVisitor,\n    { schema: model, getModel: strapi.getModel.bind(strapi) },\n    entity\n  );\n};\n\nexport { signEntityMedia };\n"],"names":["isFile","value","attribute","type","signEntityMediaVisitor","key","set","signFileUrls","getService","multiple","signedFiles","async","map","signedFile","signEntityMedia","entity","uid","model","strapi","getModel","traverseEntity","schema","bind"],"mappings":";;;;;AAmBA,SAASA,MAAAA,CAAOC,KAAc,EAAEC,SAAwC,EAAA;AACtE,IAAA,IAAI,CAACD,KAAAA,IAASC,SAAUC,CAAAA,IAAI,KAAK,OAAS,EAAA;QACxC,OAAO,KAAA;AACT;IAEA,OAAO,IAAA;AACT;AAEA;;AAEC,IACD,MAAMC,sBAAAA,GAAiD,OACrD,EAAEC,GAAG,EAAEJ,KAAK,EAAEC,SAAS,EAAE,EACzB,EAAEI,GAAG,EAAE,GAAA;AAEP,IAAA,MAAM,EAAEC,YAAY,EAAE,GAAGC,gBAAW,CAAA,MAAA,CAAA;AAEpC,IAAA,IAAI,CAACN,SAAW,EAAA;AACd,QAAA;AACF;IAEA,IAAIA,SAAAA,CAAUC,IAAI,KAAK,OAAS,EAAA;AAC9B,QAAA;AACF;IAEA,IAAIH,MAAAA,CAAOC,OAAOC,SAAY,CAAA,EAAA;;QAE5B,IAAIA,SAAAA,CAAUO,QAAQ,EAAE;AACtB,YAAA,MAAMC,WAAc,GAAA,MAAMC,WAAMC,CAAAA,GAAG,CAACX,KAAOM,EAAAA,YAAAA,CAAAA;AAC3CD,YAAAA,GAAAA,CAAID,GAAKK,EAAAA,WAAAA,CAAAA;AACT,YAAA;AACF;;QAGA,MAAMG,UAAAA,GAAa,MAAMN,YAAaN,CAAAA,KAAAA,CAAAA;AACtCK,QAAAA,GAAAA,CAAID,GAAKQ,EAAAA,UAAAA,CAAAA;AACX;AACF,CAAA;AAEA;;;;;;;;;IAUA,MAAMC,eAAkB,GAAA,OAAOC,MAAaC,EAAAA,GAAAA,GAAAA;IAC1C,MAAMC,KAAAA,GAAQC,MAAOC,CAAAA,QAAQ,CAACH,GAAAA,CAAAA;AAC9B,IAAA,OAAOI;IAELhB,sBACA,EAAA;QAAEiB,MAAQJ,EAAAA,KAAAA;AAAOE,QAAAA,QAAAA,EAAUD,MAAOC,CAAAA,QAAQ,CAACG,IAAI,CAACJ,MAAAA;KAChDH,EAAAA,MAAAA,CAAAA;AAEJ;;;;"}