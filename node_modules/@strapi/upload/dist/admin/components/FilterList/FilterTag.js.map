{"version":3,"file":"FilterTag.js","sources":["../../../../admin/src/components/FilterList/FilterTag.tsx"],"sourcesContent":["import { Tag } from '@strapi/design-system';\nimport { Cross } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\nimport type { FilterStructure } from './FilterList';\n\ntype FilterTagAttribute = {\n  fieldSchema?: {\n    type?: string; // \"date\" | \"enumeration\"\n    options?: {\n      label: string; // \"audio\" | \"video\" | \"image\" | \"file\"\n      value: string; // \"audio\" | \"video\" | \"image\" | \"file\"\n    }[];\n  };\n  metadatas?: {\n    label?: string; // \"createdAt\" | \"updatedAt\" | \"type\"\n  };\n  name: string; // \"createdAt\" | \"updatedAt\" | \"mime\"\n};\n\ninterface FilterTagProps {\n  attribute: FilterTagAttribute;\n  operator: string;\n  value: string;\n  filter: FilterStructure;\n  onClick: (filter: FilterStructure) => void;\n}\n\nexport const FilterTag = ({ attribute, filter, onClick, operator, value }: FilterTagProps) => {\n  const { formatMessage, formatDate, formatTime } = useIntl();\n\n  const handleClick = () => {\n    onClick(filter);\n  };\n\n  const { fieldSchema } = attribute;\n\n  const type = fieldSchema?.type;\n\n  let formattedValue = value;\n\n  if (type === 'date') {\n    formattedValue = formatDate(value, { dateStyle: 'full' });\n  }\n\n  if (type === 'datetime') {\n    formattedValue = formatDate(value, { dateStyle: 'full', timeStyle: 'short' });\n  }\n\n  if (type === 'time') {\n    const [hour, minute] = value.split(':');\n    const date = new Date();\n    date.setHours(Number(hour));\n    date.setMinutes(Number(minute));\n\n    formattedValue = formatTime(date, {\n      hour: 'numeric',\n      minute: 'numeric',\n    });\n  }\n\n  const content = `${attribute.metadatas?.label} ${formatMessage({\n    id: `components.FilterOptions.FILTER_TYPES.${operator}`,\n    defaultMessage: operator,\n  })} ${formattedValue}`;\n\n  return (\n    <Tag onClick={handleClick} icon={<Cross />} padding={1}>\n      {content}\n    </Tag>\n  );\n};\n"],"names":["FilterTag","attribute","filter","onClick","operator","value","formatMessage","formatDate","formatTime","useIntl","handleClick","fieldSchema","type","formattedValue","dateStyle","timeStyle","hour","minute","split","date","Date","setHours","Number","setMinutes","content","metadatas","label","id","defaultMessage","_jsx","Tag","icon","Cross","padding"],"mappings":";;;;;;;AA4BaA,MAAAA,SAAAA,GAAY,CAAC,EAAEC,SAAS,EAAEC,MAAM,EAAEC,OAAO,EAAEC,QAAQ,EAAEC,KAAK,EAAkB,GAAA;AACvF,IAAA,MAAM,EAAEC,aAAa,EAAEC,UAAU,EAAEC,UAAU,EAAE,GAAGC,iBAAAA,EAAAA;AAElD,IAAA,MAAMC,WAAc,GAAA,IAAA;QAClBP,OAAQD,CAAAA,MAAAA,CAAAA;AACV,KAAA;IAEA,MAAM,EAAES,WAAW,EAAE,GAAGV,SAAAA;AAExB,IAAA,MAAMW,OAAOD,WAAaC,EAAAA,IAAAA;AAE1B,IAAA,IAAIC,cAAiBR,GAAAA,KAAAA;AAErB,IAAA,IAAIO,SAAS,MAAQ,EAAA;AACnBC,QAAAA,cAAAA,GAAiBN,WAAWF,KAAO,EAAA;YAAES,SAAW,EAAA;AAAO,SAAA,CAAA;AACzD;AAEA,IAAA,IAAIF,SAAS,UAAY,EAAA;AACvBC,QAAAA,cAAAA,GAAiBN,WAAWF,KAAO,EAAA;YAAES,SAAW,EAAA,MAAA;YAAQC,SAAW,EAAA;AAAQ,SAAA,CAAA;AAC7E;AAEA,IAAA,IAAIH,SAAS,MAAQ,EAAA;AACnB,QAAA,MAAM,CAACI,IAAMC,EAAAA,MAAAA,CAAO,GAAGZ,KAAAA,CAAMa,KAAK,CAAC,GAAA,CAAA;AACnC,QAAA,MAAMC,OAAO,IAAIC,IAAAA,EAAAA;QACjBD,IAAKE,CAAAA,QAAQ,CAACC,MAAON,CAAAA,IAAAA,CAAAA,CAAAA;QACrBG,IAAKI,CAAAA,UAAU,CAACD,MAAOL,CAAAA,MAAAA,CAAAA,CAAAA;AAEvBJ,QAAAA,cAAAA,GAAiBL,WAAWW,IAAM,EAAA;YAChCH,IAAM,EAAA,SAAA;YACNC,MAAQ,EAAA;AACV,SAAA,CAAA;AACF;IAEA,MAAMO,OAAAA,GAAU,CAAC,EAAEvB,SAAAA,CAAUwB,SAAS,EAAEC,KAAAA,CAAM,CAAC,EAAEpB,aAAc,CAAA;AAC7DqB,QAAAA,EAAAA,EAAI,CAAC,sCAAsC,EAAEvB,QAAAA,CAAS,CAAC;QACvDwB,cAAgBxB,EAAAA;KACf,CAAA,CAAA,CAAC,EAAES,cAAAA,CAAe,CAAC;AAEtB,IAAA,qBACEgB,cAACC,CAAAA,gBAAAA,EAAAA;QAAI3B,OAASO,EAAAA,WAAAA;AAAaqB,QAAAA,IAAAA,gBAAMF,cAACG,CAAAA,WAAAA,EAAAA,EAAAA,CAAAA;QAAUC,OAAS,EAAA,CAAA;AAClDT,QAAAA,QAAAA,EAAAA;;AAGP;;;;"}