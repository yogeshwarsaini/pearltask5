{"version":3,"file":"UploadingAssetCard.js","sources":["../../../../admin/src/components/AssetCard/UploadingAssetCard.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {\n  Box,\n  Card,\n  CardBadge,\n  CardBody,\n  CardContent,\n  CardHeader,\n  CardSubtitle,\n  CardTitle,\n  Flex,\n  Typography,\n} from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport { AssetType } from '../../constants';\nimport { useUpload } from '../../hooks/useUpload';\nimport { getTrad } from '../../utils';\nimport { UploadProgress } from '../UploadProgress/UploadProgress';\n\nimport type { RawFile, File } from '../../../../shared/contracts/files';\n\nconst UploadProgressWrapper = styled.div`\n  height: 8.8rem;\n  width: 100%;\n`;\n\nconst Extension = styled.span`\n  text-transform: uppercase;\n`;\n\ninterface UploadingAssetCardProps {\n  onCancel: (rawFile: RawFile) => void;\n  onStatusChange: (status: string) => void;\n  addUploadedFiles: (files: File[]) => void;\n  folderId?: string | number | null;\n  asset: Asset;\n  id?: string;\n  size?: 'S' | 'M';\n}\n\ninterface Asset extends File {\n  rawFile?: RawFile;\n  type?: AssetType;\n}\n\nexport const UploadingAssetCard = ({\n  asset,\n  onCancel,\n  onStatusChange,\n  addUploadedFiles,\n  folderId = null,\n}: UploadingAssetCardProps) => {\n  const { upload, cancel, error, progress, status } = useUpload();\n  const { formatMessage } = useIntl();\n\n  let badgeContent = formatMessage({\n    id: getTrad('settings.section.doc.label'),\n    defaultMessage: 'Doc',\n  });\n\n  if (asset.type === AssetType.Image) {\n    badgeContent = formatMessage({\n      id: getTrad('settings.section.image.label'),\n      defaultMessage: 'Image',\n    });\n  } else if (asset.type === AssetType.Video) {\n    badgeContent = formatMessage({\n      id: getTrad('settings.section.video.label'),\n      defaultMessage: 'Video',\n    });\n  } else if (asset.type === AssetType.Audio) {\n    badgeContent = formatMessage({\n      id: getTrad('settings.section.audio.label'),\n      defaultMessage: 'Audio',\n    });\n  }\n\n  React.useEffect(() => {\n    const uploadFile = async () => {\n      const files = await upload(asset, folderId ? Number(folderId) : null);\n\n      if (addUploadedFiles) {\n        addUploadedFiles(files);\n      }\n    };\n\n    uploadFile();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  React.useEffect(() => {\n    onStatusChange(status);\n  }, [status, onStatusChange]);\n\n  const handleCancel = () => {\n    cancel();\n    onCancel(asset.rawFile!);\n  };\n\n  return (\n    <Flex direction=\"column\" alignItems=\"stretch\" gap={1}>\n      <Card borderColor={error ? 'danger600' : 'neutral150'}>\n        <CardHeader>\n          <UploadProgressWrapper>\n            <UploadProgress\n              error={error || undefined}\n              onCancel={handleCancel}\n              progress={progress}\n            />\n          </UploadProgressWrapper>\n        </CardHeader>\n        <CardBody>\n          <CardContent>\n            <Box paddingTop={1}>\n              <Typography tag=\"h2\">\n                <CardTitle tag=\"span\">{asset.name}</CardTitle>\n              </Typography>\n            </Box>\n            <CardSubtitle>\n              <Extension>{asset.ext}</Extension>\n            </CardSubtitle>\n          </CardContent>\n          <Flex paddingTop={1} grow={1}>\n            <CardBadge>{badgeContent}</CardBadge>\n          </Flex>\n        </CardBody>\n      </Card>\n      {error ? (\n        <Typography variant=\"pi\" fontWeight=\"bold\" textColor=\"danger600\">\n          {formatMessage(\n            error?.message\n              ? {\n                  id: getTrad(`apiError.${error.message}`),\n                  defaultMessage: error.message,\n                  /* See issue: https://github.com/strapi/strapi/issues/13867\n             A proxy might return an error, before the request reaches Strapi\n             and therefore we need to handle errors gracefully.\n          */\n                }\n              : {\n                  id: getTrad('upload.generic-error'),\n                  defaultMessage: 'An error occured while uploading the file.',\n                }\n          )}\n        </Typography>\n      ) : undefined}\n    </Flex>\n  );\n};\n"],"names":["UploadProgressWrapper","styled","div","Extension","span","UploadingAssetCard","asset","onCancel","onStatusChange","addUploadedFiles","folderId","upload","cancel","error","progress","status","useUpload","formatMessage","useIntl","badgeContent","id","getTrad","defaultMessage","type","AssetType","Image","Video","Audio","React","useEffect","uploadFile","files","Number","handleCancel","rawFile","_jsxs","Flex","direction","alignItems","gap","Card","borderColor","_jsx","CardHeader","UploadProgress","undefined","CardBody","CardContent","Box","paddingTop","Typography","tag","CardTitle","name","CardSubtitle","ext","grow","CardBadge","variant","fontWeight","textColor","message"],"mappings":"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"}