{"version":3,"file":"BulkMoveDialog.js","sources":["../../../../admin/src/components/BulkMoveDialog/BulkMoveDialog.tsx"],"sourcesContent":["import { Button, Flex, Grid, Field, Loader, Modal, Typography } from '@strapi/design-system';\nimport { Form, Formik, FormikErrors } from 'formik';\nimport isEmpty from 'lodash/isEmpty';\nimport { useIntl } from 'react-intl';\n\nimport { File } from '../../../../shared/contracts/files';\nimport { useBulkMove } from '../../hooks/useBulkMove';\nimport { useFolderStructure } from '../../hooks/useFolderStructure';\nimport { getTrad, normalizeAPIError } from '../../utils';\nimport { SelectTree } from '../SelectTree/SelectTree';\n\nimport type { Folder } from '../../../../shared/contracts/folders';\nimport type { OptionSelectTree } from '../SelectTree/SelectTree';\nimport type { FetchError } from '@strapi/admin/strapi-admin';\n\ntype InitialFormData = {\n  destination:\n    | {\n        value: string | number;\n        label: string;\n      }\n    | string;\n};\n\ninterface FolderWithType extends Folder {\n  type: string;\n}\n\ninterface FileWithType extends File {\n  type: string;\n}\n\nexport interface BulkMoveDialogProps {\n  onClose: () => void;\n  selected?: Array<FolderWithType | FileWithType>;\n  currentFolder?: FolderWithType;\n}\n\nexport const BulkMoveDialog = ({ onClose, selected = [], currentFolder }: BulkMoveDialogProps) => {\n  const { formatMessage } = useIntl();\n  const { data: folderStructure, isLoading } = useFolderStructure();\n  const { move } = useBulkMove();\n\n  if (!folderStructure) {\n    return null;\n  }\n\n  const handleSubmit = async (\n    values: InitialFormData,\n    { setErrors }: { setErrors: (errors: FormikErrors<InitialFormData>) => void }\n  ) => {\n    try {\n      if (typeof values.destination !== 'string') {\n        const destinationValue = values.destination.value;\n        await move(destinationValue, selected);\n        onClose();\n      }\n    } catch (error) {\n      const normalizedError = normalizeAPIError(error as FetchError)!;\n\n      if (normalizedError && 'errors' in normalizedError) {\n        const formikErrors = normalizedError.errors?.reduce<Record<string, string>>(\n          (acc, error) => {\n            acc[error.values?.path?.length || 'destination'] = error.defaultMessage;\n\n            return acc;\n          },\n          {}\n        );\n\n        if (!isEmpty(formikErrors)) {\n          setErrors(formikErrors);\n        }\n      }\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <Modal.Content>\n        <Modal.Body>\n          <Flex justifyContent=\"center\" paddingTop={4} paddingBottom={4}>\n            <Loader>\n              {formatMessage({\n                id: getTrad('content.isLoading'),\n                defaultMessage: 'Content is loading.',\n              })}\n            </Loader>\n          </Flex>\n        </Modal.Body>\n      </Modal.Content>\n    );\n  }\n\n  const initialFormData: InitialFormData = {\n    destination: {\n      value: currentFolder?.id || '',\n      label: currentFolder?.name || folderStructure[0].label,\n    },\n  };\n\n  return (\n    <Modal.Content>\n      <Formik validateOnChange={false} onSubmit={handleSubmit} initialValues={initialFormData}>\n        {({ values, errors, setFieldValue }) => (\n          <Form noValidate>\n            <Modal.Header>\n              <Modal.Title>\n                {formatMessage({\n                  id: getTrad('modal.folder.move.title'),\n                  defaultMessage: 'Move elements to',\n                })}\n              </Modal.Title>\n            </Modal.Header>\n\n            <Modal.Body>\n              <Grid.Root gap={4}>\n                <Grid.Item xs={12} col={12} direction=\"column\" alignItems=\"stretch\">\n                  <Field.Root id=\"folder-destination\">\n                    <Field.Label>\n                      {formatMessage({\n                        id: getTrad('form.input.label.folder-location'),\n                        defaultMessage: 'Location',\n                      })}\n                    </Field.Label>\n\n                    <SelectTree\n                      options={folderStructure as OptionSelectTree[]}\n                      onChange={(value: Record<string, string | number>) => {\n                        setFieldValue('destination', value);\n                      }}\n                      defaultValue={\n                        typeof values.destination !== 'string' ? values.destination : undefined\n                      }\n                      name=\"destination\"\n                      menuPortalTarget={document.querySelector('body')}\n                      inputId=\"folder-destination\"\n                      error={errors?.destination}\n                      ariaErrorMessage=\"destination-error\"\n                    />\n\n                    {errors.destination && (\n                      <Typography variant=\"pi\" tag=\"p\" textColor=\"danger600\">\n                        {errors.destination}\n                      </Typography>\n                    )}\n                  </Field.Root>\n                </Grid.Item>\n              </Grid.Root>\n            </Modal.Body>\n\n            <Modal.Footer>\n              <Modal.Close>\n                <Button variant=\"tertiary\" name=\"cancel\">\n                  {formatMessage({ id: 'cancel', defaultMessage: 'Cancel' })}\n                </Button>\n              </Modal.Close>\n              <Button type=\"submit\" loading={isLoading}>\n                {formatMessage({ id: 'modal.folder.move.submit', defaultMessage: 'Move' })}\n              </Button>\n            </Modal.Footer>\n          </Form>\n        )}\n      </Formik>\n    </Modal.Content>\n  );\n};\n"],"names":["BulkMoveDialog","onClose","selected","currentFolder","formatMessage","useIntl","data","folderStructure","isLoading","useFolderStructure","move","useBulkMove","handleSubmit","values","setErrors","destination","destinationValue","value","error","normalizedError","normalizeAPIError","formikErrors","errors","reduce","acc","path","length","defaultMessage","isEmpty","_jsx","Modal","Content","Body","Flex","justifyContent","paddingTop","paddingBottom","Loader","id","getTrad","initialFormData","label","name","Formik","validateOnChange","onSubmit","initialValues","setFieldValue","_jsxs","Form","noValidate","Header","Title","Grid","Root","gap","Item","xs","col","direction","alignItems","Field","Label","SelectTree","options","onChange","defaultValue","undefined","menuPortalTarget","document","querySelector","inputId","ariaErrorMessage","Typography","variant","tag","textColor","Footer","Close","Button","type","loading"],"mappings":"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"}