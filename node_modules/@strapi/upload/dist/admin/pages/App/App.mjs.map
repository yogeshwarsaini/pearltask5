{"version":3,"file":"App.mjs","sources":["../../../../admin/src/pages/App/App.tsx"],"sourcesContent":["// TODO: find a better naming convention for the file that was an index file before\nimport * as React from 'react';\n\nimport { Page, useQueryParams } from '@strapi/admin/strapi-admin';\nimport { useIntl } from 'react-intl';\nimport { Route, Routes } from 'react-router-dom';\n\nimport { useConfig } from '../../hooks/useConfig';\nimport { getTrad } from '../../utils';\n\nimport { MediaLibrary } from './MediaLibrary/MediaLibrary';\n\nimport type { Configuration } from '../../../../shared/contracts/configuration';\n\nconst ConfigureTheView = React.lazy(async () =>\n  import('./ConfigureTheView/ConfigureTheView').then((mod) => ({ default: mod.ConfigureTheView }))\n);\n\nexport const Upload = () => {\n  const {\n    config: { isLoading, isError, data: config },\n  } = useConfig() as { config: { isLoading: boolean; isError: boolean; data: Configuration } };\n\n  const [{ rawQuery }, setQuery] = useQueryParams();\n  const { formatMessage } = useIntl();\n  const title = formatMessage({ id: getTrad('plugin.name'), defaultMessage: 'Media Library' });\n\n  React.useEffect(() => {\n    if (isLoading || isError || rawQuery) {\n      return;\n    }\n    setQuery({\n      sort: config.sort,\n      page: 1,\n      pageSize: config.pageSize,\n    });\n  }, [isLoading, isError, config, rawQuery, setQuery]);\n\n  if (isLoading) {\n    return <Page.Loading />;\n  }\n\n  return (\n    <Page.Main>\n      <Page.Title>{title}</Page.Title>\n      {rawQuery ? (\n        <React.Suspense fallback={<Page.Loading />}>\n          <Routes>\n            <Route index element={<MediaLibrary />} />\n            <Route\n              path=\"configuration\"\n              element={<ConfigureTheView config={config as Configuration} />}\n            />\n          </Routes>\n        </React.Suspense>\n      ) : null}\n    </Page.Main>\n  );\n};\n"],"names":["ConfigureTheView","React","lazy","then","mod","default","Upload","config","isLoading","isError","data","useConfig","rawQuery","setQuery","useQueryParams","formatMessage","useIntl","title","id","getTrad","defaultMessage","useEffect","sort","page","pageSize","_jsx","Page","Loading","_jsxs","Main","Title","Suspense","fallback","Routes","Route","index","element","MediaLibrary","path"],"mappings":";;;;;;;;;;;;;;AAAA;AAcA,MAAMA,gBAAmBC,iBAAAA,KAAAA,CAAMC,IAAI,CAAC,UAClC,OAAO,yCAAA,CAAA,CAAuCC,IAAI,CAAC,CAACC,GAAAA,IAAS;AAAEC,YAAAA,OAAAA,EAASD,IAAIJ;SAAiB,CAAA,CAAA,CAAA;MAGlFM,MAAS,GAAA,IAAA;IACpB,MAAM,EACJC,MAAQ,EAAA,EAAEC,SAAS,EAAEC,OAAO,EAAEC,IAAMH,EAAAA,MAAM,EAAE,EAC7C,GAAGI,SAAAA,EAAAA;AAEJ,IAAA,MAAM,CAAC,EAAEC,QAAQ,EAAE,EAAEC,SAAS,GAAGC,cAAAA,EAAAA;IACjC,MAAM,EAAEC,aAAa,EAAE,GAAGC,OAAAA,EAAAA;AAC1B,IAAA,MAAMC,QAAQF,aAAc,CAAA;AAAEG,QAAAA,EAAAA,EAAIC,OAAQ,CAAA,aAAA,CAAA;QAAgBC,cAAgB,EAAA;AAAgB,KAAA,CAAA;AAE1FnB,IAAAA,KAAAA,CAAMoB,SAAS,CAAC,IAAA;QACd,IAAIb,SAAAA,IAAaC,WAAWG,QAAU,EAAA;AACpC,YAAA;AACF;QACAC,QAAS,CAAA;AACPS,YAAAA,IAAAA,EAAMf,OAAOe,IAAI;YACjBC,IAAM,EAAA,CAAA;AACNC,YAAAA,QAAAA,EAAUjB,OAAOiB;AACnB,SAAA,CAAA;KACC,EAAA;AAAChB,QAAAA,SAAAA;AAAWC,QAAAA,OAAAA;AAASF,QAAAA,MAAAA;AAAQK,QAAAA,QAAAA;AAAUC,QAAAA;AAAS,KAAA,CAAA;AAEnD,IAAA,IAAIL,SAAW,EAAA;QACb,qBAAOiB,GAAA,CAACC,KAAKC,OAAO,EAAA,EAAA,CAAA;AACtB;IAEA,qBACEC,IAAA,CAACF,KAAKG,IAAI,EAAA;;AACR,0BAAAJ,GAAA,CAACC,KAAKI,KAAK,EAAA;AAAEb,gBAAAA,QAAAA,EAAAA;;YACZL,QACC,iBAAAa,GAAA,CAACxB,MAAM8B,QAAQ,EAAA;gBAACC,QAAU,gBAAAP,GAAA,CAACC,KAAKC,OAAO,EAAA,EAAA,CAAA;AACrC,gBAAA,QAAA,gBAAAC,IAACK,CAAAA,MAAAA,EAAAA;;sCACCR,GAACS,CAAAA,KAAAA,EAAAA;4BAAMC,KAAK,EAAA,IAAA;AAACC,4BAAAA,OAAAA,gBAASX,GAACY,CAAAA,YAAAA,EAAAA,EAAAA;;sCACvBZ,GAACS,CAAAA,KAAAA,EAAAA;4BACCI,IAAK,EAAA,eAAA;AACLF,4BAAAA,OAAAA,gBAASX,GAACzB,CAAAA,gBAAAA,EAAAA;gCAAiBO,MAAQA,EAAAA;;;;;AAIvC,aAAA,CAAA,GAAA;;;AAGV;;;;"}