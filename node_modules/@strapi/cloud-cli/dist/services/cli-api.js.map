{"version":3,"file":"cli-api.js","sources":["../../src/services/cli-api.ts"],"sourcesContent":["import axios, { type AxiosResponse } from 'axios';\nimport fse from 'fs-extra';\nimport os from 'os';\nimport { apiConfig } from '../config/api';\nimport type { CLIContext, CloudCliConfig, TrackPayload } from '../types';\nimport { getLocalConfig } from '../config/local';\n\nimport packageJson from '../../package.json';\n\nexport const VERSION = 'v2';\n\nexport type ProjectInfo = {\n  id: string;\n  name: string;\n  targetEnvironment?: string;\n  displayName?: string;\n  nodeVersion?: string;\n  region?: string;\n  plan?: string;\n  url?: string;\n};\n\nexport type EnvironmentInfo = Record<string, unknown>;\n\nexport type EnvironmentDetails = {\n  name: string;\n  hasLiveDeployment: boolean;\n  hasPendingDeployment: boolean;\n};\n\nexport type ProjectInput = Omit<ProjectInfo, 'id'>;\n\nexport type DeployResponse = {\n  build_id: string;\n  image: string;\n};\n\nexport type ListProjectsResponse = {\n  data: {\n    data: string;\n  };\n};\n\nexport type ListEnvironmentsResponse = {\n  data: {\n    data: EnvironmentInfo[] | Record<string, never>;\n  };\n};\n\nexport type ListLinkProjectsResponse = {\n  data: {\n    data: ProjectInfo[] | Record<string, never>;\n  };\n};\n\nexport type ListLinkEnvironmentsResponse = {\n  data: {\n    data: EnvironmentDetails[] | Record<string, never>;\n  };\n};\n\nexport type GetProjectResponse = {\n  data: {\n    displayName: string;\n    updatedAt: string;\n    suspendedAt?: string;\n    isTrial: boolean;\n    environments: string[];\n    environmentsDetails: EnvironmentDetails[];\n  };\n  metadata: {\n    dashboardUrls: {\n      project: string;\n      deployments: string;\n    };\n  };\n};\n\nexport type CreateTrialResponse = {\n  licenseKey: string;\n};\n\nexport interface CloudApiService {\n  deploy(\n    deployInput: {\n      filePath: string;\n      project: { name: string; targetEnvironment?: string };\n    },\n    {\n      onUploadProgress,\n    }: {\n      onUploadProgress: (progressEvent: { loaded: number; total?: number }) => void;\n    }\n  ): Promise<AxiosResponse<DeployResponse>>;\n\n  createProject(createProjectInput: ProjectInput): Promise<{\n    data: ProjectInput;\n    status: number;\n  }>;\n\n  getUserInfo(): Promise<AxiosResponse>;\n\n  config(): Promise<AxiosResponse<CloudCliConfig>>;\n\n  listProjects(): Promise<AxiosResponse<ListProjectsResponse>>;\n\n  listLinkProjects(): Promise<AxiosResponse<ListLinkProjectsResponse>>;\n\n  listEnvironments(project: { name: string }): Promise<AxiosResponse<ListEnvironmentsResponse>>;\n\n  listLinkEnvironments(project: {\n    name: string;\n  }): Promise<AxiosResponse<ListLinkEnvironmentsResponse>>;\n\n  getProject(project: { name: string }): Promise<AxiosResponse<GetProjectResponse>>;\n\n  createTrial(createTrialInput: {\n    strapiVersion: string;\n  }): Promise<AxiosResponse<CreateTrialResponse>>;\n\n  track(event: string, payload?: TrackPayload): Promise<AxiosResponse<void>>;\n}\n\nexport async function cloudApiFactory(\n  { logger }: { logger: CLIContext['logger'] },\n  token?: string\n): Promise<CloudApiService> {\n  const localConfig = await getLocalConfig();\n  const customHeaders = {\n    'x-device-id': localConfig.installId,\n    'x-app-version': packageJson.version,\n    'x-os-name': os.type(),\n    'x-os-version': os.version(),\n    'x-language': Intl.DateTimeFormat().resolvedOptions().locale,\n    'x-node-version': process.versions.node,\n  };\n  const axiosCloudAPI = axios.create({\n    baseURL: `${apiConfig.apiBaseUrl}/${VERSION}`,\n    headers: {\n      'Content-Type': 'application/json',\n      ...customHeaders,\n    },\n  });\n\n  if (token) {\n    axiosCloudAPI.defaults.headers.Authorization = `Bearer ${token}`;\n  }\n\n  return {\n    deploy({ filePath, project }, { onUploadProgress }) {\n      return axiosCloudAPI.post(\n        `/deploy/${project.name}`,\n        { file: fse.createReadStream(filePath), targetEnvironment: project.targetEnvironment },\n        {\n          headers: {\n            'Content-Type': 'multipart/form-data',\n          },\n          onUploadProgress,\n        }\n      );\n    },\n\n    async createProject({ name, nodeVersion, region, plan }) {\n      const response = await axiosCloudAPI.post('/project', {\n        projectName: name,\n        region,\n        nodeVersion,\n        plan,\n      });\n\n      return {\n        data: {\n          id: response.data.id,\n          name: response.data.name,\n          nodeVersion: response.data.nodeVersion,\n          region: response.data.region,\n        },\n        status: response.status,\n      };\n    },\n\n    getUserInfo() {\n      return axiosCloudAPI.get('/user');\n    },\n\n    async config(): Promise<AxiosResponse<CloudCliConfig>> {\n      try {\n        const response = await axiosCloudAPI.get('/config');\n\n        if (response.status !== 200) {\n          throw new Error('Error fetching cloud CLI config from the server.');\n        }\n\n        return response;\n      } catch (error) {\n        logger.debug(\n          \"🥲 Oops! Couldn't retrieve the cloud CLI config from the server. Please try again.\"\n        );\n\n        throw error;\n      }\n    },\n\n    async listProjects(): Promise<AxiosResponse<ListProjectsResponse>> {\n      try {\n        const response = await axiosCloudAPI.get('/projects');\n\n        if (response.status !== 200) {\n          throw new Error('Error fetching cloud projects from the server.');\n        }\n\n        return response;\n      } catch (error) {\n        logger.debug(\n          \"🥲 Oops! Couldn't retrieve your project's list from the server. Please try again.\"\n        );\n        throw error;\n      }\n    },\n\n    async listLinkProjects(): Promise<AxiosResponse<ListLinkProjectsResponse, unknown>> {\n      try {\n        const response = await axiosCloudAPI.get('/projects-linkable');\n\n        if (response.status !== 200) {\n          throw new Error('Error fetching cloud projects from the server.');\n        }\n\n        return response;\n      } catch (error) {\n        logger.debug(\n          \"🥲 Oops! Couldn't retrieve your project's list from the server. Please try again.\"\n        );\n        throw error;\n      }\n    },\n\n    async listEnvironments({ name }): Promise<AxiosResponse<ListEnvironmentsResponse>> {\n      try {\n        const response = await axiosCloudAPI.get(`/projects/${name}/environments`);\n\n        if (response.status !== 200) {\n          throw new Error('Error fetching cloud environments from the server.');\n        }\n\n        return response;\n      } catch (error) {\n        logger.debug(\n          \"🥲 Oops! Couldn't retrieve your project's environments from the server. Please try again.\"\n        );\n        throw error;\n      }\n    },\n\n    async listLinkEnvironments({ name }): Promise<AxiosResponse<ListLinkEnvironmentsResponse>> {\n      try {\n        const response = await axiosCloudAPI.get(`/projects/${name}/environments-linkable`);\n\n        if (response.status !== 200) {\n          throw new Error('Error fetching cloud environments from the server.');\n        }\n\n        return response;\n      } catch (error) {\n        logger.debug(\n          \"🥲 Oops! Couldn't retrieve your project's environments from the server. Please try again.\"\n        );\n        throw error;\n      }\n    },\n\n    async getProject({ name }): Promise<AxiosResponse<GetProjectResponse>> {\n      try {\n        const response = await axiosCloudAPI.get(`/projects/${name}`);\n\n        if (response.status !== 200) {\n          throw new Error(\"Error fetching project's details.\");\n        }\n\n        return response;\n      } catch (error) {\n        logger.debug(\n          \"🥲 Oops! There was a problem retrieving your project's details. Please try again.\"\n        );\n        throw error;\n      }\n    },\n\n    async createTrial({ strapiVersion }): Promise<AxiosResponse<CreateTrialResponse>> {\n      try {\n        const response = await axiosCloudAPI.post(`/cms-trial-request`, { strapiVersion });\n\n        if (response.status !== 200) {\n          throw new Error('Error creating trial.');\n        }\n\n        return response;\n      } catch (error) {\n        logger.debug('🥲 Oops! There was a problem creating your trial. Please try again.');\n        throw error;\n      }\n    },\n\n    track(event, payload = {}) {\n      return axiosCloudAPI.post<void>('/track', {\n        event,\n        payload,\n      });\n    },\n  };\n}\n"],"names":["VERSION","cloudApiFactory","logger","token","localConfig","getLocalConfig","customHeaders","installId","packageJson","version","os","type","Intl","DateTimeFormat","resolvedOptions","locale","process","versions","node","axiosCloudAPI","axios","create","baseURL","apiConfig","apiBaseUrl","headers","defaults","Authorization","deploy","filePath","project","onUploadProgress","post","name","file","fse","createReadStream","targetEnvironment","createProject","nodeVersion","region","plan","response","projectName","data","id","status","getUserInfo","get","config","Error","error","debug","listProjects","listLinkProjects","listEnvironments","listLinkEnvironments","getProject","createTrial","strapiVersion","track","event","payload"],"mappings":";;;;;;;;;AASO,MAAMA,UAAU;AAkHhB,eAAeC,eACpB,CAAA,EAAEC,MAAM,EAAoC,EAC5CC,KAAc,EAAA;AAEd,IAAA,MAAMC,cAAc,MAAMC,oBAAAA,EAAAA;AAC1B,IAAA,MAAMC,aAAgB,GAAA;AACpB,QAAA,aAAA,EAAeF,YAAYG,SAAS;AACpC,QAAA,eAAA,EAAiBC,iBAAYC,OAAO;AACpC,QAAA,WAAA,EAAaC,GAAGC,IAAI,EAAA;AACpB,QAAA,cAAA,EAAgBD,GAAGD,OAAO,EAAA;AAC1B,QAAA,YAAA,EAAcG,IAAKC,CAAAA,cAAc,EAAGC,CAAAA,eAAe,GAAGC,MAAM;QAC5D,gBAAkBC,EAAAA,OAAAA,CAAQC,QAAQ,CAACC;AACrC,KAAA;IACA,MAAMC,aAAAA,GAAgBC,KAAMC,CAAAA,MAAM,CAAC;QACjCC,OAAS,EAAA,CAAC,EAAEC,aAAUC,CAAAA,UAAU,CAAC,CAAC,EAAExB,QAAQ,CAAC;QAC7CyB,OAAS,EAAA;YACP,cAAgB,EAAA,kBAAA;AAChB,YAAA,GAAGnB;AACL;AACF,KAAA,CAAA;AAEA,IAAA,IAAIH,KAAO,EAAA;QACTgB,aAAcO,CAAAA,QAAQ,CAACD,OAAO,CAACE,aAAa,GAAG,CAAC,OAAO,EAAExB,KAAAA,CAAM,CAAC;AAClE;IAEA,OAAO;QACLyB,MAAO,CAAA,CAAA,EAAEC,QAAQ,EAAEC,OAAO,EAAE,EAAE,EAAEC,gBAAgB,EAAE,EAAA;YAChD,OAAOZ,aAAAA,CAAca,IAAI,CACvB,CAAC,QAAQ,EAAEF,OAAQG,CAAAA,IAAI,CAAC,CAAC,EACzB;gBAAEC,IAAMC,EAAAA,GAAAA,CAAIC,gBAAgB,CAACP,QAAAA,CAAAA;AAAWQ,gBAAAA,iBAAAA,EAAmBP,QAAQO;aACnE,EAAA;gBACEZ,OAAS,EAAA;oBACP,cAAgB,EAAA;AAClB,iBAAA;AACAM,gBAAAA;AACF,aAAA,CAAA;AAEJ,SAAA;QAEA,MAAMO,aAAAA,CAAAA,CAAc,EAAEL,IAAI,EAAEM,WAAW,EAAEC,MAAM,EAAEC,IAAI,EAAE,EAAA;AACrD,YAAA,MAAMC,QAAW,GAAA,MAAMvB,aAAca,CAAAA,IAAI,CAAC,UAAY,EAAA;gBACpDW,WAAaV,EAAAA,IAAAA;AACbO,gBAAAA,MAAAA;AACAD,gBAAAA,WAAAA;AACAE,gBAAAA;AACF,aAAA,CAAA;YAEA,OAAO;gBACLG,IAAM,EAAA;oBACJC,EAAIH,EAAAA,QAAAA,CAASE,IAAI,CAACC,EAAE;oBACpBZ,IAAMS,EAAAA,QAAAA,CAASE,IAAI,CAACX,IAAI;oBACxBM,WAAaG,EAAAA,QAAAA,CAASE,IAAI,CAACL,WAAW;oBACtCC,MAAQE,EAAAA,QAAAA,CAASE,IAAI,CAACJ;AACxB,iBAAA;AACAM,gBAAAA,MAAAA,EAAQJ,SAASI;AACnB,aAAA;AACF,SAAA;AAEAC,QAAAA,WAAAA,CAAAA,GAAAA;YACE,OAAO5B,aAAAA,CAAc6B,GAAG,CAAC,OAAA,CAAA;AAC3B,SAAA;QAEA,MAAMC,MAAAA,CAAAA,GAAAA;YACJ,IAAI;AACF,gBAAA,MAAMP,QAAW,GAAA,MAAMvB,aAAc6B,CAAAA,GAAG,CAAC,SAAA,CAAA;gBAEzC,IAAIN,QAAAA,CAASI,MAAM,KAAK,GAAK,EAAA;AAC3B,oBAAA,MAAM,IAAII,KAAM,CAAA,kDAAA,CAAA;AAClB;gBAEA,OAAOR,QAAAA;AACT,aAAA,CAAE,OAAOS,KAAO,EAAA;AACdjD,gBAAAA,MAAAA,CAAOkD,KAAK,CACV,oFAAA,CAAA;gBAGF,MAAMD,KAAAA;AACR;AACF,SAAA;QAEA,MAAME,YAAAA,CAAAA,GAAAA;YACJ,IAAI;AACF,gBAAA,MAAMX,QAAW,GAAA,MAAMvB,aAAc6B,CAAAA,GAAG,CAAC,WAAA,CAAA;gBAEzC,IAAIN,QAAAA,CAASI,MAAM,KAAK,GAAK,EAAA;AAC3B,oBAAA,MAAM,IAAII,KAAM,CAAA,gDAAA,CAAA;AAClB;gBAEA,OAAOR,QAAAA;AACT,aAAA,CAAE,OAAOS,KAAO,EAAA;AACdjD,gBAAAA,MAAAA,CAAOkD,KAAK,CACV,mFAAA,CAAA;gBAEF,MAAMD,KAAAA;AACR;AACF,SAAA;QAEA,MAAMG,gBAAAA,CAAAA,GAAAA;YACJ,IAAI;AACF,gBAAA,MAAMZ,QAAW,GAAA,MAAMvB,aAAc6B,CAAAA,GAAG,CAAC,oBAAA,CAAA;gBAEzC,IAAIN,QAAAA,CAASI,MAAM,KAAK,GAAK,EAAA;AAC3B,oBAAA,MAAM,IAAII,KAAM,CAAA,gDAAA,CAAA;AAClB;gBAEA,OAAOR,QAAAA;AACT,aAAA,CAAE,OAAOS,KAAO,EAAA;AACdjD,gBAAAA,MAAAA,CAAOkD,KAAK,CACV,mFAAA,CAAA;gBAEF,MAAMD,KAAAA;AACR;AACF,SAAA;QAEA,MAAMI,gBAAAA,CAAAA,CAAiB,EAAEtB,IAAI,EAAE,EAAA;YAC7B,IAAI;gBACF,MAAMS,QAAAA,GAAW,MAAMvB,aAAAA,CAAc6B,GAAG,CAAC,CAAC,UAAU,EAAEf,IAAK,CAAA,aAAa,CAAC,CAAA;gBAEzE,IAAIS,QAAAA,CAASI,MAAM,KAAK,GAAK,EAAA;AAC3B,oBAAA,MAAM,IAAII,KAAM,CAAA,oDAAA,CAAA;AAClB;gBAEA,OAAOR,QAAAA;AACT,aAAA,CAAE,OAAOS,KAAO,EAAA;AACdjD,gBAAAA,MAAAA,CAAOkD,KAAK,CACV,2FAAA,CAAA;gBAEF,MAAMD,KAAAA;AACR;AACF,SAAA;QAEA,MAAMK,oBAAAA,CAAAA,CAAqB,EAAEvB,IAAI,EAAE,EAAA;YACjC,IAAI;gBACF,MAAMS,QAAAA,GAAW,MAAMvB,aAAAA,CAAc6B,GAAG,CAAC,CAAC,UAAU,EAAEf,IAAK,CAAA,sBAAsB,CAAC,CAAA;gBAElF,IAAIS,QAAAA,CAASI,MAAM,KAAK,GAAK,EAAA;AAC3B,oBAAA,MAAM,IAAII,KAAM,CAAA,oDAAA,CAAA;AAClB;gBAEA,OAAOR,QAAAA;AACT,aAAA,CAAE,OAAOS,KAAO,EAAA;AACdjD,gBAAAA,MAAAA,CAAOkD,KAAK,CACV,2FAAA,CAAA;gBAEF,MAAMD,KAAAA;AACR;AACF,SAAA;QAEA,MAAMM,UAAAA,CAAAA,CAAW,EAAExB,IAAI,EAAE,EAAA;YACvB,IAAI;gBACF,MAAMS,QAAAA,GAAW,MAAMvB,aAAc6B,CAAAA,GAAG,CAAC,CAAC,UAAU,EAAEf,IAAAA,CAAK,CAAC,CAAA;gBAE5D,IAAIS,QAAAA,CAASI,MAAM,KAAK,GAAK,EAAA;AAC3B,oBAAA,MAAM,IAAII,KAAM,CAAA,mCAAA,CAAA;AAClB;gBAEA,OAAOR,QAAAA;AACT,aAAA,CAAE,OAAOS,KAAO,EAAA;AACdjD,gBAAAA,MAAAA,CAAOkD,KAAK,CACV,mFAAA,CAAA;gBAEF,MAAMD,KAAAA;AACR;AACF,SAAA;QAEA,MAAMO,WAAAA,CAAAA,CAAY,EAAEC,aAAa,EAAE,EAAA;YACjC,IAAI;gBACF,MAAMjB,QAAAA,GAAW,MAAMvB,aAAca,CAAAA,IAAI,CAAC,CAAC,kBAAkB,CAAC,EAAE;AAAE2B,oBAAAA;AAAc,iBAAA,CAAA;gBAEhF,IAAIjB,QAAAA,CAASI,MAAM,KAAK,GAAK,EAAA;AAC3B,oBAAA,MAAM,IAAII,KAAM,CAAA,uBAAA,CAAA;AAClB;gBAEA,OAAOR,QAAAA;AACT,aAAA,CAAE,OAAOS,KAAO,EAAA;AACdjD,gBAAAA,MAAAA,CAAOkD,KAAK,CAAC,qEAAA,CAAA;gBACb,MAAMD,KAAAA;AACR;AACF,SAAA;AAEAS,QAAAA,KAAAA,CAAAA,CAAMC,KAAK,EAAEC,OAAU,GAAA,EAAE,EAAA;YACvB,OAAO3C,aAAAA,CAAca,IAAI,CAAO,QAAU,EAAA;AACxC6B,gBAAAA,KAAAA;AACAC,gBAAAA;AACF,aAAA,CAAA;AACF;AACF,KAAA;AACF;;;;;"}