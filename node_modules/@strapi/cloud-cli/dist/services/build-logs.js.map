{"version":3,"file":"build-logs.js","sources":["../../src/services/build-logs.ts"],"sourcesContent":["import EventSource from 'eventsource';\nimport { CLIContext, type CloudCliConfig } from '../types';\n\nconst buildLogsServiceFactory = ({ logger }: CLIContext) => {\n  return async (url: string, token: string, cliConfig: CloudCliConfig) => {\n    const CONN_TIMEOUT = Number(cliConfig.buildLogsConnectionTimeout);\n    const MAX_RETRIES = Number(cliConfig.buildLogsMaxRetries);\n\n    return new Promise((resolve, reject) => {\n      let timeoutId: NodeJS.Timeout | null = null;\n      let retries = 0;\n\n      const connect = (url: string) => {\n        const spinner = logger.spinner('Connecting to server to get build logs');\n        spinner.start();\n        const es = new EventSource(`${url}`, {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        });\n\n        const clearExistingTimeout = () => {\n          if (timeoutId) {\n            clearTimeout(timeoutId);\n          }\n        };\n\n        const resetTimeout = () => {\n          clearExistingTimeout();\n          timeoutId = setTimeout(() => {\n            if (spinner.isSpinning) {\n              spinner.fail(\n                'We were unable to connect to the server to get build logs at this time. This could be due to a temporary issue.'\n              );\n            }\n            es.close();\n            reject(new Error('Connection timed out'));\n          }, CONN_TIMEOUT);\n        };\n\n        es.onopen = resetTimeout;\n\n        es.addEventListener('finished', (event) => {\n          const data = JSON.parse(event.data);\n          logger.log(data.msg);\n          es.close();\n          clearExistingTimeout();\n          resolve(null);\n        });\n\n        es.addEventListener('log', (event) => {\n          if (spinner.isSpinning) {\n            spinner.succeed();\n          }\n          resetTimeout();\n          const data = JSON.parse(event.data);\n          logger.log(data.msg);\n        });\n\n        es.onerror = async () => {\n          retries += 1;\n          if (retries > MAX_RETRIES) {\n            spinner.fail('We were unable to connect to the server to get build logs at this time.');\n            es.close();\n            clearExistingTimeout(); // Important to clear the event loop from remaining timeout - avoid to wait for nothing while the timeout is running\n            reject(new Error('Max retries reached'));\n          }\n        };\n      };\n\n      connect(url);\n    });\n  };\n};\n\nexport { buildLogsServiceFactory };\n"],"names":["buildLogsServiceFactory","logger","url","token","cliConfig","CONN_TIMEOUT","Number","buildLogsConnectionTimeout","MAX_RETRIES","buildLogsMaxRetries","Promise","resolve","reject","timeoutId","retries","connect","spinner","start","es","EventSource","headers","Authorization","clearExistingTimeout","clearTimeout","resetTimeout","setTimeout","isSpinning","fail","close","Error","onopen","addEventListener","event","data","JSON","parse","log","msg","succeed","onerror"],"mappings":"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"}