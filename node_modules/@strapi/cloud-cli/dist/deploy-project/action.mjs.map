{"version":3,"file":"action.mjs","sources":["../../src/deploy-project/action.ts"],"sourcesContent":["import fse from 'fs-extra';\nimport inquirer from 'inquirer';\nimport boxen from 'boxen';\nimport path from 'path';\nimport chalk from 'chalk';\nimport { AxiosError } from 'axios';\nimport * as crypto from 'node:crypto';\nimport { apiConfig } from '../config/api';\nimport { compressFilesToTar } from '../utils/compress-files';\nimport createProjectAction from '../create-project/action';\nimport type {\n  CLIContext,\n  CloudApiService,\n  CloudCliConfig,\n  EnvironmentDetails,\n  ProjectInfo,\n} from '../types';\nimport { getTmpStoragePath } from '../config/local';\nimport { cloudApiFactory, tokenServiceFactory, local } from '../services';\nimport { notificationServiceFactory } from '../services/notification';\nimport { loadPkg } from '../utils/pkg';\nimport { buildLogsServiceFactory } from '../services/build-logs';\nimport { promptLogin } from '../login/action';\nimport { trackEvent } from '../utils/analytics';\n\ntype PackageJson = {\n  name: string;\n  strapi?: {\n    uuid: string;\n  };\n};\n\ninterface CmdOptions {\n  env?: string;\n  force?: boolean;\n}\n\nconst boxenOptions: boxen.Options = {\n  padding: 1,\n  margin: 1,\n  align: 'center',\n  borderColor: 'yellow',\n  borderStyle: 'round',\n};\n\nconst QUIT_OPTION = 'Quit';\n\nasync function promptForEnvironment(environments: string[]): Promise<string> {\n  const choices = environments.map((env) => ({ name: env, value: env }));\n  const { selectedEnvironment } = await inquirer.prompt([\n    {\n      type: 'list',\n      name: 'selectedEnvironment',\n      message: 'Select the environment to deploy:',\n      choices: [...choices, { name: chalk.grey(`(${QUIT_OPTION})`), value: null }],\n    },\n  ]);\n  if (selectedEnvironment === null) {\n    process.exit(1);\n  }\n\n  return selectedEnvironment;\n}\n\nasync function upload(\n  ctx: CLIContext,\n  project: ProjectInfo,\n  token: string,\n  maxProjectFileSize: number\n) {\n  const cloudApi = await cloudApiFactory(ctx, token);\n  try {\n    const storagePath = await getTmpStoragePath();\n    const projectFolder = path.resolve(process.cwd());\n    const packageJson = (await loadPkg(ctx)) as PackageJson;\n\n    if (!packageJson) {\n      ctx.logger.error(\n        'Unable to deploy the project. Please make sure the package.json file is correctly formatted.'\n      );\n      return;\n    }\n\n    ctx.logger.log('📦 Compressing project...');\n    // hash packageJson.name to avoid conflicts\n    const hashname = crypto.createHash('sha512').update(packageJson.name).digest('hex');\n    const compressedFilename = `${hashname}.tar.gz`;\n    try {\n      ctx.logger.debug(\n        'Compression parameters\\n',\n        `Storage path: ${storagePath}\\n`,\n        `Project folder: ${projectFolder}\\n`,\n        `Compressed filename: ${compressedFilename}`\n      );\n      await compressFilesToTar(storagePath, projectFolder, compressedFilename);\n      ctx.logger.log('📦 Project compressed successfully!');\n    } catch (e: unknown) {\n      ctx.logger.error(\n        '⚠️ Project compression failed. Try again later or check for large/incompatible files.'\n      );\n      ctx.logger.debug(e);\n      process.exit(1);\n    }\n\n    const tarFilePath = path.resolve(storagePath, compressedFilename);\n    const fileStats = await fse.stat(tarFilePath);\n\n    if (fileStats.size > maxProjectFileSize) {\n      ctx.logger.log(\n        'Unable to proceed: Your project is too big to be transferred, please use a git repo instead.'\n      );\n      try {\n        await fse.remove(tarFilePath);\n      } catch (e: any) {\n        ctx.logger.log('Unable to remove file: ', tarFilePath);\n        ctx.logger.debug(e);\n      }\n      return;\n    }\n\n    ctx.logger.info('🚀 Uploading project...');\n    const progressBar = ctx.logger.progressBar(100, 'Upload Progress');\n\n    try {\n      const { data } = await cloudApi.deploy(\n        { filePath: tarFilePath, project },\n        {\n          onUploadProgress(progressEvent) {\n            const total = progressEvent.total || fileStats.size;\n            const percentage = Math.round((progressEvent.loaded * 100) / total);\n            progressBar.update(percentage);\n          },\n        }\n      );\n\n      progressBar.update(100);\n      progressBar.stop();\n      ctx.logger.success('✨ Upload finished!');\n      return data.build_id;\n    } catch (e: any) {\n      progressBar.stop();\n      ctx.logger.error('An error occurred while deploying the project. Please try again later.');\n      ctx.logger.debug(e);\n    } finally {\n      await fse.remove(tarFilePath);\n    }\n    process.exit(0);\n  } catch (e: any) {\n    ctx.logger.error('An error occurred while deploying the project. Please try again later.');\n    ctx.logger.debug(e);\n    process.exit(1);\n  }\n}\n\nasync function getProject(ctx: CLIContext) {\n  const { project } = await local.retrieve();\n  if (!project) {\n    try {\n      return await createProjectAction(ctx);\n    } catch (e: any) {\n      ctx.logger.error('An error occurred while deploying the project. Please try again later.');\n      ctx.logger.debug(e);\n      process.exit(1);\n    }\n  }\n  return project;\n}\n\nasync function getConfig({\n  ctx,\n  cloudApiService,\n}: {\n  ctx: CLIContext;\n  cloudApiService: CloudApiService;\n}): Promise<CloudCliConfig | null> {\n  try {\n    const { data: cliConfig } = await cloudApiService.config();\n    return cliConfig;\n  } catch (e) {\n    ctx.logger.debug('Failed to get cli config', e);\n    return null;\n  }\n}\n\nfunction validateEnvironment(ctx: CLIContext, environment: string, environments: string[]): void {\n  if (!environments.includes(environment)) {\n    ctx.logger.error(`Environment ${environment} does not exist.`);\n    process.exit(1);\n  }\n}\n\nasync function getTargetEnvironment(\n  ctx: CLIContext,\n  opts: CmdOptions,\n  project: ProjectInfo,\n  environments: string[]\n): Promise<string> {\n  if (opts.env) {\n    validateEnvironment(ctx, opts.env, environments);\n    return opts.env;\n  }\n\n  if (project.targetEnvironment) {\n    return project.targetEnvironment;\n  }\n\n  if (environments.length > 1) {\n    return promptForEnvironment(environments);\n  }\n\n  return environments[0];\n}\n\nfunction hasPendingOrLiveDeployment(\n  environments: EnvironmentDetails[],\n  targetEnvironment: string\n): boolean {\n  const environment = environments.find((env) => env.name === targetEnvironment);\n  if (!environment) {\n    throw new Error(`Environment details ${targetEnvironment} not found.`);\n  }\n  return environment.hasPendingDeployment || environment.hasLiveDeployment || false;\n}\n\nexport default async (ctx: CLIContext, opts: CmdOptions) => {\n  const { getValidToken } = await tokenServiceFactory(ctx);\n  const token = await getValidToken(ctx, promptLogin);\n  if (!token) {\n    return;\n  }\n\n  const project = await getProject(ctx);\n  if (!project) {\n    return;\n  }\n\n  const cloudApiService = await cloudApiFactory(ctx, token);\n  let projectData;\n  let environments: string[];\n  let environmentsDetails: EnvironmentDetails[];\n\n  try {\n    const {\n      data: { data, metadata },\n    } = await cloudApiService.getProject({ name: project.name });\n    projectData = data;\n    environments = projectData.environments;\n    environmentsDetails = projectData.environmentsDetails;\n    const isProjectSuspended = projectData.suspendedAt;\n\n    if (isProjectSuspended) {\n      ctx.logger.log(\n        '\\n Oops! This project has been suspended. \\n\\n Please reactivate it from the dashboard to continue deploying: '\n      );\n      ctx.logger.log(chalk.underline(`${metadata.dashboardUrls.project}`));\n      return;\n    }\n  } catch (e: Error | unknown) {\n    if (e instanceof AxiosError && e.response?.data) {\n      if (e.response.status === 404) {\n        ctx.logger.warn(\n          `The project associated with this folder does not exist in Strapi Cloud. \\nPlease link your local project to an existing Strapi Cloud project using the ${chalk.cyan(\n            'link'\n          )} command before deploying.`\n        );\n      } else {\n        ctx.logger.error(e.response.data);\n      }\n    } else {\n      ctx.logger.error(\n        \"An error occurred while retrieving the project's information. Please try again later.\"\n      );\n    }\n    ctx.logger.debug(e);\n    return;\n  }\n\n  await trackEvent(ctx, cloudApiService, 'willDeployWithCLI', {\n    projectInternalName: project.name,\n  });\n\n  const notificationService = notificationServiceFactory(ctx);\n  const buildLogsService = buildLogsServiceFactory(ctx);\n\n  const cliConfig = await getConfig({ ctx, cloudApiService });\n  if (!cliConfig) {\n    ctx.logger.error(\n      'An error occurred while retrieving data from Strapi Cloud. Please check your network or try again later.'\n    );\n    return;\n  }\n\n  let maxSize: number = parseInt(cliConfig.maxProjectFileSize, 10);\n  if (Number.isNaN(maxSize)) {\n    ctx.logger.debug(\n      'An error occurred while parsing the maxProjectFileSize. Using default value.'\n    );\n    maxSize = 100000000;\n  }\n\n  project.targetEnvironment = await getTargetEnvironment(ctx, opts, project, environments);\n\n  if (!opts.force) {\n    const shouldDisplayWarning = hasPendingOrLiveDeployment(\n      environmentsDetails,\n      project.targetEnvironment\n    );\n    if (shouldDisplayWarning) {\n      ctx.logger.log(boxen(cliConfig.projectDeployment.confirmationText, boxenOptions));\n      const { confirm } = await inquirer.prompt([\n        {\n          type: 'confirm',\n          name: 'confirm',\n          message: `Do you want to proceed with deployment to ${chalk.cyan(projectData.displayName)} on ${chalk.cyan(project.targetEnvironment)} environment?`,\n        },\n      ]);\n      if (!confirm) {\n        process.exit(1);\n      }\n    }\n  }\n\n  const buildId = await upload(ctx, project, token, maxSize);\n\n  if (!buildId) {\n    return;\n  }\n\n  try {\n    ctx.logger.log(\n      `🚀 Deploying project to ${chalk.cyan(project.targetEnvironment ?? `production`)} environment...`\n    );\n    notificationService(`${apiConfig.apiBaseUrl}/notifications`, token, cliConfig);\n    await buildLogsService(`${apiConfig.apiBaseUrl}/v1/logs/${buildId}`, token, cliConfig);\n\n    ctx.logger.log(\n      'Visit the following URL for deployment logs. Your deployment will be available here shortly.'\n    );\n    ctx.logger.log(\n      chalk.underline(`${apiConfig.dashboardBaseUrl}/projects/${project.name}/deployments`)\n    );\n  } catch (e: Error | unknown) {\n    ctx.logger.debug(e);\n    if (e instanceof Error) {\n      ctx.logger.error(e.message);\n    } else {\n      ctx.logger.error('An error occurred while deploying the project. Please try again later.');\n    }\n  }\n};\n"],"names":["boxenOptions","padding","margin","align","borderColor","borderStyle","QUIT_OPTION","promptForEnvironment","environments","choices","map","env","name","value","selectedEnvironment","inquirer","prompt","type","message","chalk","grey","process","exit","upload","ctx","project","token","maxProjectFileSize","cloudApi","cloudApiFactory","storagePath","getTmpStoragePath","projectFolder","path","resolve","cwd","packageJson","loadPkg","logger","error","log","hashname","crypto","createHash","update","digest","compressedFilename","debug","compressFilesToTar","e","tarFilePath","fileStats","fse","stat","size","remove","info","progressBar","data","deploy","filePath","onUploadProgress","progressEvent","total","percentage","Math","round","loaded","stop","success","build_id","getProject","local","createProjectAction","getConfig","cloudApiService","cliConfig","config","validateEnvironment","environment","includes","getTargetEnvironment","opts","targetEnvironment","length","hasPendingOrLiveDeployment","find","Error","hasPendingDeployment","hasLiveDeployment","getValidToken","tokenServiceFactory","promptLogin","projectData","environmentsDetails","metadata","isProjectSuspended","suspendedAt","underline","dashboardUrls","AxiosError","response","status","warn","cyan","trackEvent","projectInternalName","notificationService","notificationServiceFactory","buildLogsService","buildLogsServiceFactory","maxSize","parseInt","Number","isNaN","force","shouldDisplayWarning","boxen","projectDeployment","confirmationText","confirm","displayName","buildId","apiConfig","apiBaseUrl","dashboardBaseUrl"],"mappings":"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"}