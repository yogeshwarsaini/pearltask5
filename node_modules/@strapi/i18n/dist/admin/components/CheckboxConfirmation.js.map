{"version":3,"file":"CheckboxConfirmation.js","sources":["../../../admin/src/components/CheckboxConfirmation.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { Button, Checkbox, Dialog, Field, Flex, Typography } from '@strapi/design-system';\nimport { WarningCircle } from '@strapi/icons';\nimport { MessageDescriptor, useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\n\nimport { getTranslation } from '../utils/getTranslation';\n\nconst TextAlignTypography = styled(Typography)`\n  text-align: center;\n`;\n\ninterface IntlMessage extends MessageDescriptor {\n  values: object;\n}\n\ninterface CheckboxConfirmationProps {\n  description: IntlMessage;\n  intlLabel: IntlMessage;\n  isCreating?: boolean;\n  name: string;\n  onChange: (event: { target: { name: string; value: boolean; type: string } }) => void;\n  value: boolean;\n}\n\nconst CheckboxConfirmation = ({\n  description,\n  isCreating = false,\n  intlLabel,\n  name,\n  onChange,\n  value,\n}: CheckboxConfirmationProps) => {\n  const { formatMessage } = useIntl();\n  const [isOpen, setIsOpen] = React.useState(false);\n\n  const handleChange = (value: boolean) => {\n    if (isCreating || value) {\n      return onChange({ target: { name, value, type: 'checkbox' } });\n    }\n\n    if (!value) {\n      return setIsOpen(true);\n    }\n\n    return null;\n  };\n\n  const handleConfirm = () => {\n    onChange({ target: { name, value: false, type: 'checkbox' } });\n  };\n\n  const label = intlLabel.id\n    ? formatMessage(\n        { id: intlLabel.id, defaultMessage: intlLabel.defaultMessage },\n        { ...intlLabel.values }\n      )\n    : name;\n\n  const hint = description\n    ? formatMessage(\n        { id: description.id, defaultMessage: description.defaultMessage },\n        { ...description.values }\n      )\n    : '';\n\n  return (\n    <Dialog.Root open={isOpen} onOpenChange={setIsOpen}>\n      <Field.Root hint={hint} name={name}>\n        <Checkbox onCheckedChange={handleChange} checked={value}>\n          {label}\n        </Checkbox>\n        <Field.Hint />\n      </Field.Root>\n      <Dialog.Content>\n        <Dialog.Header>\n          {formatMessage({\n            id: getTranslation('CheckboxConfirmation.Modal.title'),\n            defaultMessage: 'Disable localization',\n          })}\n        </Dialog.Header>\n        <Dialog.Body icon={<WarningCircle />}>\n          <Flex direction=\"column\" alignItems=\"stretch\" gap={2}>\n            <Flex justifyContent=\"center\">\n              <TextAlignTypography>\n                {formatMessage({\n                  id: getTranslation('CheckboxConfirmation.Modal.content'),\n                  defaultMessage:\n                    'Disabling localization will engender the deletion of all your content but the one associated to your default locale (if existing).',\n                })}\n              </TextAlignTypography>\n            </Flex>\n            <Flex justifyContent=\"center\">\n              <Typography fontWeight=\"semiBold\">\n                {formatMessage({\n                  id: getTranslation('CheckboxConfirmation.Modal.body'),\n                  defaultMessage: 'Do you want to disable it?',\n                })}\n              </Typography>\n            </Flex>\n          </Flex>\n        </Dialog.Body>\n        <Dialog.Footer>\n          <Dialog.Cancel>\n            <Button variant=\"tertiary\">\n              {formatMessage({\n                id: 'components.popUpWarning.button.cancel',\n                defaultMessage: 'No, cancel',\n              })}\n            </Button>\n          </Dialog.Cancel>\n          <Dialog.Action>\n            <Button variant=\"danger-light\" onClick={handleConfirm}>\n              {formatMessage({\n                id: getTranslation('CheckboxConfirmation.Modal.button-confirm'),\n                defaultMessage: 'Yes, disable',\n              })}\n            </Button>\n          </Dialog.Action>\n        </Dialog.Footer>\n      </Dialog.Content>\n    </Dialog.Root>\n  );\n};\n\nexport { CheckboxConfirmation };\n"],"names":["TextAlignTypography","styled","Typography","CheckboxConfirmation","description","isCreating","intlLabel","name","onChange","value","formatMessage","useIntl","isOpen","setIsOpen","React","useState","handleChange","target","type","handleConfirm","label","id","defaultMessage","values","hint","_jsxs","Dialog","Root","open","onOpenChange","Field","_jsx","Checkbox","onCheckedChange","checked","Hint","Content","Header","getTranslation","Body","icon","WarningCircle","Flex","direction","alignItems","gap","justifyContent","fontWeight","Footer","Cancel","Button","variant","Action","onClick"],"mappings":"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"}