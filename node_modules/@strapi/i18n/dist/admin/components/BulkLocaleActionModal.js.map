{"version":3,"file":"BulkLocaleActionModal.js","sources":["../../../admin/src/components/BulkLocaleActionModal.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { FormErrors, Table, useTable } from '@strapi/admin/strapi-admin';\nimport { Box, Typography, IconButton, Flex, Tooltip, Status, Modal } from '@strapi/design-system';\nimport { Pencil, CheckCircle, CrossCircle, ArrowsCounterClockwise } from '@strapi/icons';\nimport { stringify } from 'qs';\nimport { type MessageDescriptor, useIntl, PrimitiveType } from 'react-intl';\nimport { Link } from 'react-router-dom';\n\nimport { Locale } from '../../../shared/contracts/locales';\nimport { getTranslation } from '../utils/getTranslation';\nimport { capitalize } from '../utils/strings';\n\nimport { LocaleStatus } from './CMHeaderActions';\n\nimport type { Modules } from '@strapi/types';\n\ntype Status = Modules.Documents.Params.PublicationStatus.Kind | 'modified';\n\n/* -------------------------------------------------------------------------------------------------\n * EntryValidationText\n * -----------------------------------------------------------------------------------------------*/\n\ninterface EntryValidationTextProps {\n  status: Status;\n  validationErrors: FormErrors[string] | null;\n  action: 'bulk-publish' | 'bulk-unpublish';\n}\n\ninterface TranslationMessage extends MessageDescriptor {\n  values?: Record<string, PrimitiveType>;\n}\n\nconst isErrorMessageDescriptor = (object?: string | object): object is TranslationMessage => {\n  return (\n    typeof object === 'object' && object !== null && 'id' in object && 'defaultMessage' in object\n  );\n};\n\nconst EntryValidationText = ({\n  status = 'draft',\n  validationErrors,\n  action,\n}: EntryValidationTextProps) => {\n  const { formatMessage } = useIntl();\n\n  /**\n   * TODO: Should this be extracted an made into a factory to recursively get\n   * error messages??\n   */\n  const getErrorStr = (key: string, value?: FormErrors[string]): string => {\n    if (typeof value === 'string') {\n      return `${key}: ${value}`;\n    } else if (isErrorMessageDescriptor(value)) {\n      return `${key}: ${formatMessage(value)}`;\n    } else if (Array.isArray(value)) {\n      return value.map((v) => getErrorStr(key, v)).join(' ');\n    } else if (typeof value === 'object' && !Array.isArray(value)) {\n      return Object.entries(value)\n        .map(([k, v]) => getErrorStr(k, v))\n        .join(' ');\n    } else {\n      /**\n       * unlikely to happen, but we need to return something\n       */\n      return '';\n    }\n  };\n\n  if (validationErrors) {\n    const validationErrorsMessages = Object.entries(validationErrors)\n      .map(([key, value]) => {\n        return getErrorStr(key, value);\n      })\n      .join(' ');\n\n    return (\n      <Flex gap={2}>\n        <CrossCircle fill=\"danger600\" />\n        <Tooltip label={validationErrorsMessages}>\n          <Typography\n            maxWidth={'30rem'}\n            textColor=\"danger600\"\n            variant=\"omega\"\n            fontWeight=\"semiBold\"\n            ellipsis\n          >\n            {validationErrorsMessages}\n          </Typography>\n        </Tooltip>\n      </Flex>\n    );\n  }\n\n  const getStatusMessage = () => {\n    if (action === 'bulk-publish') {\n      if (status === 'published') {\n        return {\n          icon: <CheckCircle fill=\"success600\" />,\n          text: formatMessage({\n            id: 'content-manager.bulk-publish.already-published',\n            defaultMessage: 'Already Published',\n          }),\n          textColor: 'success600',\n          fontWeight: 'bold',\n        };\n      } else if (status === 'modified') {\n        return {\n          icon: <ArrowsCounterClockwise fill=\"alternative600\" />,\n          text: formatMessage({\n            id: 'app.utils.ready-to-publish-changes',\n            defaultMessage: 'Ready to publish changes',\n          }),\n        };\n      } else {\n        return {\n          icon: <CheckCircle fill=\"success600\" />,\n          text: formatMessage({\n            id: 'app.utils.ready-to-publish',\n            defaultMessage: 'Ready to publish',\n          }),\n        };\n      }\n    } else {\n      if (status === 'draft') {\n        return {\n          icon: <CheckCircle fill=\"success600\" />,\n          text: formatMessage({\n            id: 'content-manager.bulk-unpublish.already-unpublished',\n            defaultMessage: 'Already Unpublished',\n          }),\n          textColor: 'success600',\n          fontWeight: 'bold',\n        };\n      } else {\n        return {\n          icon: <CheckCircle fill=\"success600\" />,\n          text: formatMessage({\n            id: 'app.utils.ready-to-unpublish-changes',\n            defaultMessage: 'Ready to unpublish',\n          }),\n          textColor: 'success600',\n          fontWeight: 'bold',\n        };\n      }\n    }\n  };\n\n  const { icon, text, textColor = 'success600', fontWeight = 'normal' } = getStatusMessage();\n\n  return (\n    <Flex gap={2}>\n      {icon}\n      <Typography textColor={textColor} fontWeight={fontWeight}>\n        {text}\n      </Typography>\n    </Flex>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * BoldChunk\n * -----------------------------------------------------------------------------------------------*/\n\nconst BoldChunk = (chunks: React.ReactNode) => <Typography fontWeight=\"bold\">{chunks}</Typography>;\n\n/* -------------------------------------------------------------------------------------------------\n * BulkLocaleActionModal\n * -----------------------------------------------------------------------------------------------*/\n\ninterface BulkLocaleActionModalProps {\n  rows: LocaleStatus[];\n  headers: {\n    label: string;\n    name: string;\n  }[];\n  localesMetadata: Locale[];\n  validationErrors?: FormErrors;\n  action: 'bulk-publish' | 'bulk-unpublish';\n}\n\nconst BulkLocaleActionModal = ({\n  headers,\n  rows,\n  localesMetadata,\n  validationErrors = {},\n  action,\n}: BulkLocaleActionModalProps) => {\n  const { formatMessage } = useIntl();\n\n  const selectedRows = useTable<LocaleStatus[]>(\n    'BulkLocaleActionModal',\n    (state) => state.selectedRows\n  );\n\n  const getFormattedCountMessage = () => {\n    const currentStatusByLocale = rows.reduce<Record<string, string>>((acc, { locale, status }) => {\n      acc[locale] = status;\n      return acc;\n    }, {});\n    const localesWithErrors = Object.keys(validationErrors);\n\n    const publishedCount = selectedRows.filter(\n      ({ locale }) => currentStatusByLocale[locale] === 'published'\n    ).length;\n\n    const draftCount = selectedRows.filter(\n      ({ locale }) =>\n        (currentStatusByLocale[locale] === 'draft' ||\n          currentStatusByLocale[locale] === 'modified') &&\n        !localesWithErrors.includes(locale)\n    ).length;\n\n    const withErrorsCount = localesWithErrors.length;\n    const messageId =\n      action === 'bulk-publish'\n        ? 'content-manager.containers.list.selectedEntriesModal.selectedCount.publish'\n        : 'content-manager.containers.list.selectedEntriesModal.selectedCount.unpublish';\n\n    const defaultMessage =\n      action === 'bulk-publish'\n        ? '<b>{publishedCount}</b> {publishedCount, plural, =0 {entries} one {entry} other {entries}} already published. <b>{draftCount}</b> {draftCount, plural, =0 {entries} one {entry} other {entries}} ready to publish. <b>{withErrorsCount}</b> {withErrorsCount, plural, =0 {entries} one {entry} other {entries}} waiting for action.'\n        : '<b>{draftCount}</b> {draftCount, plural, =0 {entries} one {entry} other {entries}} already unpublished. <b>{publishedCount}</b> {publishedCount, plural, =0 {entries} one {entry} other {entries}} ready to unpublish.';\n\n    return formatMessage(\n      {\n        id: messageId,\n        defaultMessage,\n      },\n      {\n        withErrorsCount,\n        draftCount,\n        publishedCount,\n        b: BoldChunk,\n      }\n    );\n  };\n\n  return (\n    <Modal.Body>\n      <Typography>{getFormattedCountMessage()}</Typography>\n      <Box marginTop={5}>\n        <Table.Content>\n          <Table.Head>\n            <Table.HeaderCheckboxCell />\n            {headers.map((head) => (\n              <Table.HeaderCell key={head.name} {...head} />\n            ))}\n          </Table.Head>\n          <Table.Body>\n            {rows.map(({ locale, status }, index) => {\n              const error = validationErrors?.[locale] ?? null;\n\n              const statusVariant =\n                status === 'draft' ? 'primary' : status === 'published' ? 'success' : 'alternative';\n\n              return (\n                <Table.Row key={index}>\n                  <Table.CheckboxCell id={locale} aria-label={`Select ${locale}`} />\n                  <Table.Cell>\n                    <Typography variant=\"sigma\" textColor=\"neutral600\">\n                      {Array.isArray(localesMetadata)\n                        ? localesMetadata.find((localeEntry) => localeEntry.code === locale)?.name\n                        : locale}\n                    </Typography>\n                  </Table.Cell>\n                  <Table.Cell>\n                    <Box display=\"flex\">\n                      <Status\n                        display=\"flex\"\n                        paddingLeft=\"6px\"\n                        paddingRight=\"6px\"\n                        paddingTop=\"2px\"\n                        paddingBottom=\"2px\"\n                        size={'S'}\n                        variant={statusVariant}\n                      >\n                        <Typography tag=\"span\" variant=\"pi\" fontWeight=\"bold\">\n                          {capitalize(status)}\n                        </Typography>\n                      </Status>\n                    </Box>\n                  </Table.Cell>\n                  <Table.Cell>\n                    <EntryValidationText validationErrors={error} status={status} action={action} />\n                  </Table.Cell>\n                  <Table.Cell>\n                    <IconButton\n                      tag={Link}\n                      to={{\n                        search: stringify({ plugins: { i18n: { locale } } }),\n                      }}\n                      label={formatMessage(\n                        {\n                          id: getTranslation('Settings.list.actions.edit'),\n                          defaultMessage: 'Edit {name} locale',\n                        },\n                        {\n                          name: locale,\n                        }\n                      )}\n                      variant=\"ghost\"\n                    >\n                      <Pencil />\n                    </IconButton>\n                  </Table.Cell>\n                </Table.Row>\n              );\n            })}\n          </Table.Body>\n        </Table.Content>\n      </Box>\n    </Modal.Body>\n  );\n};\n\nexport { BulkLocaleActionModal };\nexport type { BulkLocaleActionModalProps };\n"],"names":["isErrorMessageDescriptor","object","EntryValidationText","status","validationErrors","action","formatMessage","useIntl","getErrorStr","key","value","Array","isArray","map","v","join","Object","entries","k","validationErrorsMessages","_jsxs","Flex","gap","_jsx","CrossCircle","fill","Tooltip","label","Typography","maxWidth","textColor","variant","fontWeight","ellipsis","getStatusMessage","icon","CheckCircle","text","id","defaultMessage","ArrowsCounterClockwise","BoldChunk","chunks","BulkLocaleActionModal","headers","rows","localesMetadata","selectedRows","useTable","state","getFormattedCountMessage","currentStatusByLocale","reduce","acc","locale","localesWithErrors","keys","publishedCount","filter","length","draftCount","includes","withErrorsCount","messageId","b","Modal","Body","Box","marginTop","Table","Content","Head","HeaderCheckboxCell","head","HeaderCell","name","index","error","statusVariant","Row","CheckboxCell","aria-label","Cell","find","localeEntry","code","display","Status","paddingLeft","paddingRight","paddingTop","paddingBottom","size","tag","capitalize","IconButton","Link","to","search","stringify","plugins","i18n","getTranslation","Pencil"],"mappings":"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"}