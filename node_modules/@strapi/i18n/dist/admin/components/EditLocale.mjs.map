{"version":3,"file":"EditLocale.mjs","sources":["../../../admin/src/components/EditLocale.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {\n  useNotification,\n  useAPIErrorHandler,\n  Form,\n  FormHelpers,\n  useAuth,\n} from '@strapi/admin/strapi-admin';\nimport {\n  Box,\n  Button,\n  Divider,\n  Flex,\n  IconButton,\n  Modal,\n  Tabs,\n  Typography,\n  useId,\n} from '@strapi/design-system';\nimport { Pencil } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\n\nimport { Locale, UpdateLocale } from '../../../shared/contracts/locales';\nimport { useUpdateLocaleMutation } from '../services/locales';\nimport { isBaseQueryError } from '../utils/baseQuery';\nimport { getTranslation } from '../utils/getTranslation';\n\nimport { AdvancedForm, BaseForm, LOCALE_SCHEMA, SubmitButton } from './CreateLocale';\n\n/* -------------------------------------------------------------------------------------------------\n * EditLocale\n * -----------------------------------------------------------------------------------------------*/\n\ninterface EditLocaleProps extends Omit<EditModalProps, 'open' | 'onOpenChange'> {}\n\nconst EditLocale = (props: EditLocaleProps) => {\n  const { formatMessage } = useIntl();\n  const [visible, setVisible] = React.useState(false);\n\n  return (\n    <>\n      <IconButton\n        onClick={() => setVisible(true)}\n        label={formatMessage(\n          {\n            id: getTranslation('Settings.list.actions.edit'),\n            defaultMessage: 'Edit {name} locale',\n          },\n          {\n            name: props.name,\n          }\n        )}\n        variant=\"ghost\"\n      >\n        <Pencil />\n      </IconButton>\n      <EditModal {...props} open={visible} onOpenChange={setVisible} />\n    </>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * EditModal\n * -----------------------------------------------------------------------------------------------*/\n\ninterface EditModalProps extends Pick<Locale, 'id' | 'isDefault' | 'name' | 'code'> {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\ntype FormValues = UpdateLocale.Request['body'] & { code: string };\n\n/**\n * @internal\n * @description Exported to be used when someone clicks on a table row.\n */\nconst EditModal = ({ id, code, isDefault, name, open, onOpenChange }: EditModalProps) => {\n  const { toggleNotification } = useNotification();\n  const {\n    _unstableFormatAPIError: formatAPIError,\n    _unstableFormatValidationErrors: formatValidationErrors,\n  } = useAPIErrorHandler();\n  const refetchPermissions = useAuth('EditModal', (state) => state.refetchPermissions);\n  const { formatMessage } = useIntl();\n  const titleId = useId();\n\n  const [updateLocale] = useUpdateLocaleMutation();\n  const handleSubmit = async (\n    { code: _code, ...data }: FormValues,\n    helpers: FormHelpers<FormValues>\n  ) => {\n    try {\n      /**\n       * We don't need to send the code, because the\n       * code can never be changed.\n       */\n      const res = await updateLocale({\n        id,\n        ...data,\n      });\n\n      if ('error' in res) {\n        if (isBaseQueryError(res.error) && res.error.name === 'ValidationError') {\n          helpers.setErrors(formatValidationErrors(res.error));\n        } else {\n          toggleNotification({ type: 'danger', message: formatAPIError(res.error) });\n        }\n\n        return;\n      }\n\n      toggleNotification({\n        type: 'success',\n        message: formatMessage({\n          id: getTranslation('Settings.locales.modal.edit.success'),\n          defaultMessage: 'Updated locale',\n        }),\n      });\n\n      refetchPermissions();\n      onOpenChange(false);\n    } catch (err) {\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({\n          id: 'notification.error',\n          defaultMessage: 'An error occurred, please try again',\n        }),\n      });\n    }\n  };\n\n  return (\n    <Modal.Root open={open} onOpenChange={onOpenChange}>\n      <Modal.Content>\n        <Form\n          method=\"PUT\"\n          onSubmit={handleSubmit}\n          initialValues={{\n            code,\n            name,\n            isDefault,\n          }}\n          validationSchema={LOCALE_SCHEMA}\n        >\n          <Modal.Header>\n            <Modal.Title>\n              {formatMessage(\n                {\n                  id: getTranslation('Settings.list.actions.edit'),\n                  defaultMessage: 'Edit a locale',\n                },\n                {\n                  name,\n                }\n              )}\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Tabs.Root variant=\"simple\" defaultValue=\"basic\">\n              <Flex justifyContent=\"space-between\">\n                <Typography tag=\"h2\" variant=\"beta\" id={titleId}>\n                  {formatMessage({\n                    id: getTranslation('Settings.locales.modal.title'),\n                    defaultMessage: 'Configuration',\n                  })}\n                </Typography>\n                <Tabs.List aria-labelledby={titleId}>\n                  <Tabs.Trigger value=\"basic\">\n                    {formatMessage({\n                      id: getTranslation('Settings.locales.modal.base'),\n                      defaultMessage: 'Basic settings',\n                    })}\n                  </Tabs.Trigger>\n                  <Tabs.Trigger value=\"advanced\">\n                    {formatMessage({\n                      id: getTranslation('Settings.locales.modal.advanced'),\n                      defaultMessage: 'Advanced settings',\n                    })}\n                  </Tabs.Trigger>\n                </Tabs.List>\n              </Flex>\n              <Divider />\n              <Box paddingTop={7} paddingBottom={7}>\n                <Tabs.Content value=\"basic\">\n                  <BaseForm mode=\"edit\" />\n                </Tabs.Content>\n                <Tabs.Content value=\"advanced\">\n                  <AdvancedForm isDefaultLocale={isDefault} />\n                </Tabs.Content>\n              </Box>\n            </Tabs.Root>\n          </Modal.Body>\n          <Modal.Footer>\n            <Modal.Close>\n              <Button variant=\"tertiary\">\n                {formatMessage({ id: 'app.components.Button.cancel', defaultMessage: 'Cancel' })}\n              </Button>\n            </Modal.Close>\n            <SubmitButton />\n          </Modal.Footer>\n        </Form>\n      </Modal.Content>\n    </Modal.Root>\n  );\n};\n\nexport { EditLocale, EditModal };\n"],"names":["EditLocale","props","formatMessage","useIntl","visible","setVisible","React","useState","_jsxs","_Fragment","_jsx","IconButton","onClick","label","id","getTranslation","defaultMessage","name","variant","Pencil","EditModal","open","onOpenChange","code","isDefault","toggleNotification","useNotification","_unstableFormatAPIError","formatAPIError","_unstableFormatValidationErrors","formatValidationErrors","useAPIErrorHandler","refetchPermissions","useAuth","state","titleId","useId","updateLocale","useUpdateLocaleMutation","handleSubmit","_code","data","helpers","res","isBaseQueryError","error","setErrors","type","message","err","Modal","Root","Content","Form","method","onSubmit","initialValues","validationSchema","LOCALE_SCHEMA","Header","Title","Body","Tabs","defaultValue","Flex","justifyContent","Typography","tag","List","aria-labelledby","Trigger","value","Divider","Box","paddingTop","paddingBottom","BaseForm","mode","AdvancedForm","isDefaultLocale","Footer","Close","Button","SubmitButton"],"mappings":"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"}