{"version":3,"file":"content-types.mjs","sources":["../../../server/src/services/content-types.ts"],"sourcesContent":["import _ from 'lodash';\nimport { pick, pipe, has, prop, isNil, cloneDeep, isArray } from 'lodash/fp';\nimport { errors, contentTypes as contentTypeUtils } from '@strapi/utils';\nimport { getService } from '../utils';\n\nconst {\n  isRelationalAttribute,\n  getVisibleAttributes,\n  isTypedAttribute,\n  getScalarAttributes,\n  getRelationalAttributes,\n} = contentTypeUtils;\nconst { ApplicationError } = errors;\n\nconst hasLocalizedOption = (modelOrAttribute: any) => {\n  return prop('pluginOptions.i18n.localized', modelOrAttribute) === true;\n};\n\nconst getValidLocale = async (locale: any) => {\n  const localesService = getService('locales');\n\n  if (isNil(locale)) {\n    return localesService.getDefaultLocale();\n  }\n\n  const foundLocale = await localesService.findByCode(locale);\n  if (!foundLocale) {\n    throw new ApplicationError('Locale not found');\n  }\n\n  return locale;\n};\n\n/**\n * Returns whether an attribute is localized or not\n * @param {*} attribute\n * @returns\n */\nconst isLocalizedAttribute = (attribute: any) => {\n  return (\n    hasLocalizedOption(attribute) ||\n    isRelationalAttribute(attribute) ||\n    isTypedAttribute(attribute, 'uid')\n  );\n};\n\n/**\n * Returns whether a model is localized or not\n * @param {*} model\n * @returns\n */\nconst isLocalizedContentType = (model: any) => {\n  return hasLocalizedOption(model);\n};\n\n/**\n * Returns the list of attribute names that are not localized\n * @param {object} model\n * @returns {string[]}\n */\nconst getNonLocalizedAttributes = (model: any) => {\n  return getVisibleAttributes(model).filter(\n    (attrName) => !isLocalizedAttribute(model.attributes[attrName])\n  );\n};\n\nconst removeId = (value: any) => {\n  if (typeof value === 'object' && has('id', value)) {\n    delete value.id;\n  }\n};\n\nconst removeIds = (model: any) => (entry: any) => removeIdsMut(model, cloneDeep(entry));\n\nconst removeIdsMut = (model: any, entry: any) => {\n  if (isNil(entry)) {\n    return entry;\n  }\n\n  removeId(entry);\n\n  _.forEach(model.attributes, (attr, attrName) => {\n    const value = entry[attrName];\n    if (attr.type === 'dynamiczone' && isArray(value)) {\n      value.forEach((compo) => {\n        if (has('__component', compo)) {\n          const model = strapi.components[compo.__component];\n          removeIdsMut(model, compo);\n        }\n      });\n    } else if (attr.type === 'component') {\n      const model = strapi.components[attr.component];\n      if (isArray(value)) {\n        value.forEach((compo) => removeIdsMut(model, compo));\n      } else {\n        removeIdsMut(model, value);\n      }\n    }\n  });\n\n  return entry;\n};\n\n/**\n * Returns a copy of an entry picking only its non localized attributes\n * @param {object} model\n * @param {object} entry\n * @returns {object}\n */\nconst copyNonLocalizedAttributes = (model: any, entry: any) => {\n  const nonLocalizedAttributes = getNonLocalizedAttributes(model);\n\n  return pipe(pick(nonLocalizedAttributes), removeIds(model))(entry);\n};\n\n/**\n * Returns the list of attribute names that are localized\n * @param {object} model\n * @returns {string[]}\n */\nconst getLocalizedAttributes = (model: any) => {\n  return getVisibleAttributes(model).filter((attrName) =>\n    isLocalizedAttribute(model.attributes[attrName])\n  );\n};\n\n/**\n * Fill non localized fields of an entry if there are nil\n * @param {Object} entry entry to fill\n * @param {Object} relatedEntry values used to fill\n * @param {Object} options\n * @param {Object} options.model corresponding model\n */\nconst fillNonLocalizedAttributes = (entry: any, relatedEntry: any, { model }: any) => {\n  if (isNil(relatedEntry)) {\n    return;\n  }\n\n  const modelDef = strapi.getModel(model);\n  const relatedEntryCopy = copyNonLocalizedAttributes(modelDef, relatedEntry);\n\n  _.forEach(relatedEntryCopy, (value, field) => {\n    if (isNil(entry[field])) {\n      entry[field] = value;\n    }\n  });\n};\n\n/**\n * build the populate param to\n * @param {String} modelUID uid of the model, could be of a content-type or a component\n */\nconst getNestedPopulateOfNonLocalizedAttributes = (modelUID: any) => {\n  const schema = strapi.getModel(modelUID);\n  const scalarAttributes = getScalarAttributes(schema);\n  const nonLocalizedAttributes = getNonLocalizedAttributes(schema);\n\n  const allAttributes = [...scalarAttributes, ...nonLocalizedAttributes];\n  if (schema.modelType === 'component') {\n    // When called recursively on a non localized component we\n    // need to explicitly populate that components relations\n    allAttributes.push(...getRelationalAttributes(schema));\n  }\n\n  const currentAttributesToPopulate = allAttributes.filter((value, index, self) => {\n    return self.indexOf(value) === index && self.lastIndexOf(value) === index;\n  });\n\n  const attributesToPopulate = [...currentAttributesToPopulate];\n  for (const attrName of currentAttributesToPopulate) {\n    const attr = schema.attributes[attrName];\n    if (attr.type === 'component') {\n      const nestedPopulate = getNestedPopulateOfNonLocalizedAttributes(attr.component).map(\n        (nestedAttr) => `${attrName}.${nestedAttr}`\n      );\n      attributesToPopulate.push(...nestedPopulate);\n    } else if (attr.type === 'dynamiczone') {\n      attr.components.forEach((componentName) => {\n        const nestedPopulate = getNestedPopulateOfNonLocalizedAttributes(componentName).map(\n          (nestedAttr) => `${attrName}.${nestedAttr}`\n        );\n        attributesToPopulate.push(...nestedPopulate);\n      });\n    }\n  }\n\n  return attributesToPopulate;\n};\n\nconst contentTypes = () => ({\n  isLocalizedContentType,\n  getValidLocale,\n  getLocalizedAttributes,\n  getNonLocalizedAttributes,\n  copyNonLocalizedAttributes,\n  fillNonLocalizedAttributes,\n  getNestedPopulateOfNonLocalizedAttributes,\n});\n\ntype ContentTypesService = typeof contentTypes;\n\nexport default contentTypes;\nexport { ContentTypesService };\n"],"names":["isRelationalAttribute","getVisibleAttributes","isTypedAttribute","getScalarAttributes","getRelationalAttributes","contentTypeUtils","ApplicationError","errors","hasLocalizedOption","modelOrAttribute","prop","getValidLocale","locale","localesService","getService","isNil","getDefaultLocale","foundLocale","findByCode","isLocalizedAttribute","attribute","isLocalizedContentType","model","getNonLocalizedAttributes","filter","attrName","attributes","removeId","value","has","id","removeIds","entry","removeIdsMut","cloneDeep","_","forEach","attr","type","isArray","compo","strapi","components","__component","component","copyNonLocalizedAttributes","nonLocalizedAttributes","pipe","pick","getLocalizedAttributes","fillNonLocalizedAttributes","relatedEntry","modelDef","getModel","relatedEntryCopy","field","getNestedPopulateOfNonLocalizedAttributes","modelUID","schema","scalarAttributes","allAttributes","modelType","push","currentAttributesToPopulate","index","self","indexOf","lastIndexOf","attributesToPopulate","nestedPopulate","map","nestedAttr","componentName","contentTypes"],"mappings":"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"}