{"version":3,"file":"localizations.mjs","sources":["../../../server/src/services/localizations.ts"],"sourcesContent":["import { cloneDeep, isEmpty } from 'lodash/fp';\n\nimport type { Schema } from '@strapi/types';\nimport { async } from '@strapi/utils';\nimport { getService } from '../utils';\n\n/**\n * Update non localized fields of all the related localizations of an entry with the entry values\n */\nconst syncNonLocalizedAttributes = async (sourceEntry: any, model: Schema.ContentType) => {\n  const { copyNonLocalizedAttributes } = getService('content-types');\n\n  const nonLocalizedAttributes = copyNonLocalizedAttributes(model, sourceEntry);\n  if (isEmpty(nonLocalizedAttributes)) {\n    return;\n  }\n\n  const uid = model.uid;\n  const documentId = sourceEntry.documentId;\n  const locale = sourceEntry.locale;\n  const status = sourceEntry?.publishedAt ? 'published' : 'draft';\n\n  // Find all the entries that need to be updated\n  // this is every other entry of the document in the same status but a different locale\n  const localeEntriesToUpdate = await strapi.db.query(uid).findMany({\n    where: {\n      documentId,\n      publishedAt: status === 'published' ? { $ne: null } : null,\n      locale: { $ne: locale },\n    },\n    select: ['locale', 'id'],\n  });\n\n  const entryData = await strapi.documents(uid).omitComponentData(nonLocalizedAttributes);\n\n  await async.map(localeEntriesToUpdate, async (entry: any) => {\n    const transformedData = await strapi.documents.utils.transformData(\n      cloneDeep(nonLocalizedAttributes),\n      {\n        uid,\n        status,\n        locale: entry.locale,\n        allowMissingId: true,\n      }\n    );\n\n    // Update or create non localized components for the entry\n    const componentData = await strapi\n      .documents(uid)\n      .updateComponents(entry, transformedData as any);\n\n    // Update every other locale entry of this documentId in the same status\n    await strapi.db.query(uid).update({\n      where: {\n        documentId,\n        publishedAt: status === 'published' ? { $ne: null } : null,\n        locale: { $eq: entry.locale },\n      },\n      // The data we send to the update function is the entry data merged with\n      // the updated component data\n      data: Object.assign(cloneDeep(entryData), componentData),\n    });\n  });\n};\n\nconst localizations = () => ({\n  syncNonLocalizedAttributes,\n});\n\ntype LocalizationsService = typeof localizations;\n\nexport default localizations;\nexport type { LocalizationsService };\n"],"names":["syncNonLocalizedAttributes","sourceEntry","model","copyNonLocalizedAttributes","getService","nonLocalizedAttributes","isEmpty","uid","documentId","locale","status","publishedAt","localeEntriesToUpdate","strapi","db","query","findMany","where","$ne","select","entryData","documents","omitComponentData","async","map","entry","transformedData","utils","transformData","cloneDeep","allowMissingId","componentData","updateComponents","update","$eq","data","Object","assign","localizations"],"mappings":";;;;AAMA;;IAGA,MAAMA,0BAA6B,GAAA,OAAOC,WAAkBC,EAAAA,KAAAA,GAAAA;AAC1D,IAAA,MAAM,EAAEC,0BAA0B,EAAE,GAAGC,UAAW,CAAA,eAAA,CAAA;IAElD,MAAMC,sBAAAA,GAAyBF,2BAA2BD,KAAOD,EAAAA,WAAAA,CAAAA;AACjE,IAAA,IAAIK,QAAQD,sBAAyB,CAAA,EAAA;AACnC,QAAA;AACF;IAEA,MAAME,GAAAA,GAAML,MAAMK,GAAG;IACrB,MAAMC,UAAAA,GAAaP,YAAYO,UAAU;IACzC,MAAMC,MAAAA,GAASR,YAAYQ,MAAM;IACjC,MAAMC,MAAAA,GAAST,WAAaU,EAAAA,WAAAA,GAAc,WAAc,GAAA,OAAA;;;IAIxD,MAAMC,qBAAAA,GAAwB,MAAMC,MAAOC,CAAAA,EAAE,CAACC,KAAK,CAACR,GAAKS,CAAAA,CAAAA,QAAQ,CAAC;QAChEC,KAAO,EAAA;AACLT,YAAAA,UAAAA;AACAG,YAAAA,WAAAA,EAAaD,WAAW,WAAc,GAAA;gBAAEQ,GAAK,EAAA;aAAS,GAAA,IAAA;YACtDT,MAAQ,EAAA;gBAAES,GAAKT,EAAAA;AAAO;AACxB,SAAA;QACAU,MAAQ,EAAA;AAAC,YAAA,QAAA;AAAU,YAAA;AAAK;AAC1B,KAAA,CAAA;AAEA,IAAA,MAAMC,YAAY,MAAMP,MAAAA,CAAOQ,SAAS,CAACd,GAAAA,CAAAA,CAAKe,iBAAiB,CAACjB,sBAAAA,CAAAA;AAEhE,IAAA,MAAMkB,KAAMC,CAAAA,GAAG,CAACZ,qBAAAA,EAAuB,OAAOa,KAAAA,GAAAA;QAC5C,MAAMC,eAAAA,GAAkB,MAAMb,MAAAA,CAAOQ,SAAS,CAACM,KAAK,CAACC,aAAa,CAChEC,SAAAA,CAAUxB,sBACV,CAAA,EAAA;AACEE,YAAAA,GAAAA;AACAG,YAAAA,MAAAA;AACAD,YAAAA,MAAAA,EAAQgB,MAAMhB,MAAM;YACpBqB,cAAgB,EAAA;AAClB,SAAA,CAAA;;QAIF,MAAMC,aAAAA,GAAgB,MAAMlB,MACzBQ,CAAAA,SAAS,CAACd,GACVyB,CAAAA,CAAAA,gBAAgB,CAACP,KAAOC,EAAAA,eAAAA,CAAAA;;AAG3B,QAAA,MAAMb,OAAOC,EAAE,CAACC,KAAK,CAACR,GAAAA,CAAAA,CAAK0B,MAAM,CAAC;YAChChB,KAAO,EAAA;AACLT,gBAAAA,UAAAA;AACAG,gBAAAA,WAAAA,EAAaD,WAAW,WAAc,GAAA;oBAAEQ,GAAK,EAAA;iBAAS,GAAA,IAAA;gBACtDT,MAAQ,EAAA;AAAEyB,oBAAAA,GAAAA,EAAKT,MAAMhB;AAAO;AAC9B,aAAA;;;AAGA0B,YAAAA,IAAAA,EAAMC,MAAOC,CAAAA,MAAM,CAACR,SAAAA,CAAUT,SAAYW,CAAAA,EAAAA,aAAAA;AAC5C,SAAA,CAAA;AACF,KAAA,CAAA;AACF,CAAA;AAEMO,MAAAA,aAAAA,GAAgB,KAAO;AAC3BtC,QAAAA;KACF;;;;"}