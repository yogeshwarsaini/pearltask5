{"version":3,"file":"validator.mjs","sources":["../../../src/domain/content-type/validator.ts"],"sourcesContent":["import _ from 'lodash';\nimport { yup, strings } from '@strapi/utils';\nimport type { Schema } from '@strapi/types';\n\nconst LIFECYCLES = [\n  'beforeCreate',\n  'afterCreate',\n  'beforeFindOne',\n  'afterFindOne',\n  'beforeFindMany',\n  'afterFindMany',\n  'beforeCount',\n  'afterCount',\n  'beforeCreateMany',\n  'afterCreateMany',\n  'beforeUpdate',\n  'afterUpdate',\n  'beforeUpdateMany',\n  'afterUpdateMany',\n  'beforeDelete',\n  'afterDelete',\n  'beforeDeleteMany',\n  'afterDeleteMany',\n] as const;\n\n/**\n * For enumerations the least common denomiator is GraphQL, where\n * values needs to match the secure name regex:\n * GraphQL Spec https://spec.graphql.org/June2018/#sec-Names\n *\n * Therefore we need to make sure our users only use values, which\n * can be returned by GraphQL, by checking the regressed values\n * agains the GraphQL regex.\n *\n * TODO V5: check if we can avoid this coupling by moving this logic\n * into the GraphQL plugin.\n */\nconst GRAPHQL_ENUM_REGEX = /^[_A-Za-z][_0-9A-Za-z]*$/;\n\nconst lifecyclesShape = _.mapValues(_.keyBy(LIFECYCLES), () => yup.mixed().nullable().isFunction());\n\nconst contentTypeSchemaValidator = yup.object().shape({\n  schema: yup.object().shape({\n    info: yup\n      .object()\n      .shape({\n        displayName: yup.string().required(),\n        singularName: yup.string().isKebabCase().required(),\n        pluralName: yup.string().isKebabCase().required(),\n      })\n      .required(),\n    attributes: yup.object().test({\n      name: 'valuesCollide',\n      message: 'Some values collide when normalized',\n      test(attributes: Schema.ContentType['attributes']) {\n        for (const attrName of Object.keys(attributes)) {\n          const attr = attributes[attrName];\n          if (attr.type === 'enumeration') {\n            const regressedValues = attr.enum.map(strings.toRegressedEnumValue);\n\n            // should match the GraphQL regex\n            if (!regressedValues.every((value: string) => GRAPHQL_ENUM_REGEX.test(value))) {\n              const message = `Invalid enumeration value. Values should have at least one alphabetical character preceding the first occurence of a number. Update your enumeration '${attrName}'.`;\n\n              return this.createError({ message });\n            }\n\n            // should not contain empty values\n            if (regressedValues.some((value: string) => value === '')) {\n              return this.createError({\n                message: `At least one value of the enumeration '${attrName}' appears to be empty. Only alphanumerical characters are taken into account.`,\n              });\n            }\n\n            // should not collide\n            const duplicates = _.uniq(\n              regressedValues.filter(\n                (value: string, index: number, values: string[]) => values.indexOf(value) !== index\n              )\n            );\n\n            if (duplicates.length) {\n              const message = `Some enumeration values of the field '${attrName}' collide when normalized: ${duplicates.join(\n                ', '\n              )}. Please modify your enumeration.`;\n\n              return this.createError({ message });\n            }\n          }\n        }\n\n        return true;\n      },\n    }),\n  }),\n  actions: yup.object().onlyContainsFunctions(),\n  lifecycles: yup.object().shape(lifecyclesShape).noUnknown(),\n});\n\nconst validateContentTypeDefinition = (data: unknown) => {\n  return contentTypeSchemaValidator.validateSync(data, { strict: true, abortEarly: false });\n};\n\nexport { validateContentTypeDefinition };\n"],"names":["LIFECYCLES","GRAPHQL_ENUM_REGEX","lifecyclesShape","_","mapValues","keyBy","yup","mixed","nullable","isFunction","contentTypeSchemaValidator","object","shape","schema","info","displayName","string","required","singularName","isKebabCase","pluralName","attributes","test","name","message","attrName","Object","keys","attr","type","regressedValues","enum","map","strings","toRegressedEnumValue","every","value","createError","some","duplicates","uniq","filter","index","values","indexOf","length","join","actions","onlyContainsFunctions","lifecycles","noUnknown","validateContentTypeDefinition","data","validateSync","strict","abortEarly"],"mappings":"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"}