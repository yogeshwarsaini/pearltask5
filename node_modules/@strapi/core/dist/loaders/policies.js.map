{"version":3,"file":"policies.js","sources":["../../src/loaders/policies.ts"],"sourcesContent":["import { join, extname, basename } from 'path';\nimport fse from 'fs-extra';\nimport { importDefault } from '@strapi/utils';\n\nimport type { Core } from '@strapi/types';\n\n// TODO:: allow folders with index.js inside for bigger policies\nexport default async function loadPolicies(strapi: Core.Strapi) {\n  const dir = strapi.dirs.dist.policies;\n\n  if (!(await fse.pathExists(dir))) {\n    return;\n  }\n\n  const policies: Record<string, Core.Policy> = {};\n  const paths = await fse.readdir(dir, { withFileTypes: true });\n\n  for (const fd of paths) {\n    const { name } = fd;\n    const fullPath = join(dir, name);\n\n    if (fd.isFile() && extname(name) === '.js') {\n      const key = basename(name, '.js');\n      policies[key] = importDefault(fullPath);\n    }\n  }\n\n  strapi.get('policies').add(`global::`, policies);\n}\n"],"names":["loadPolicies","strapi","dir","dirs","dist","policies","fse","pathExists","paths","readdir","withFileTypes","fd","name","fullPath","join","isFile","extname","key","basename","importDefault","get","add"],"mappings":";;;;;;AAMA;AACe,eAAeA,aAAaC,MAAmB,EAAA;AAC5D,IAAA,MAAMC,MAAMD,MAAOE,CAAAA,IAAI,CAACC,IAAI,CAACC,QAAQ;AAErC,IAAA,IAAI,CAAE,MAAMC,GAAIC,CAAAA,UAAU,CAACL,GAAO,CAAA,EAAA;AAChC,QAAA;AACF;AAEA,IAAA,MAAMG,WAAwC,EAAC;AAC/C,IAAA,MAAMG,KAAQ,GAAA,MAAMF,GAAIG,CAAAA,OAAO,CAACP,GAAK,EAAA;QAAEQ,aAAe,EAAA;AAAK,KAAA,CAAA;IAE3D,KAAK,MAAMC,MAAMH,KAAO,CAAA;QACtB,MAAM,EAAEI,IAAI,EAAE,GAAGD,EAAAA;QACjB,MAAME,QAAAA,GAAWC,UAAKZ,GAAKU,EAAAA,IAAAA,CAAAA;AAE3B,QAAA,IAAID,EAAGI,CAAAA,MAAM,EAAMC,IAAAA,YAAAA,CAAQJ,UAAU,KAAO,EAAA;YAC1C,MAAMK,GAAAA,GAAMC,cAASN,IAAM,EAAA,KAAA,CAAA;YAC3BP,QAAQ,CAACY,GAAI,CAAA,GAAGE,yBAAcN,CAAAA,QAAAA,CAAAA;AAChC;AACF;IAEAZ,MAAOmB,CAAAA,GAAG,CAAC,UAAYC,CAAAA,CAAAA,GAAG,CAAC,CAAC,QAAQ,CAAC,EAAEhB,QAAAA,CAAAA;AACzC;;;;"}