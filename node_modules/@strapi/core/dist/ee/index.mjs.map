{"version":3,"file":"index.mjs","sources":["../../src/ee/index.ts"],"sourcesContent":["import { pick, isEqual } from 'lodash/fp';\nimport type { Logger } from '@strapi/logger';\nimport type { Core } from '@strapi/types';\nimport { createStrapiFetch } from '../utils/fetch';\nimport {\n  readLicense,\n  verifyLicense,\n  fetchLicense,\n  LicenseCheckError,\n  LICENSE_REGISTRY_URI,\n} from './license';\nimport { shiftCronExpression } from '../utils/cron';\n\nconst ONE_MINUTE = 1000 * 60;\n\ninterface EE {\n  enabled: boolean;\n  licenseInfo: {\n    licenseKey?: string;\n    features?: Array<{ name: string; [key: string]: any } | string>;\n    expireAt?: string;\n    seats?: number;\n    type?: string;\n    isTrial: boolean;\n  };\n  logger?: Logger;\n}\n\nconst ee: EE = {\n  enabled: false,\n  licenseInfo: {\n    isTrial: false,\n  },\n};\n\nconst disable = (message: string) => {\n  // Prevent emitting ee.disable if it was already disabled\n  const shouldEmitEvent = ee.enabled !== false;\n\n  ee.logger?.warn(`${message} Switching to CE.`);\n  // Only keep the license key and isTrial for potential re-enabling during a later check\n  ee.licenseInfo = pick(['licenseKey', 'isTrial'], ee.licenseInfo);\n\n  ee.licenseInfo.isTrial = false;\n\n  ee.enabled = false;\n\n  if (shouldEmitEvent) {\n    // Notify EE features that they should be disabled\n    strapi.eventHub.emit('ee.disable');\n  }\n};\n\nconst enable = () => {\n  // Prevent emitting ee.enable if it was already enabled\n  const shouldEmitEvent = ee.enabled !== true;\n\n  ee.enabled = true;\n\n  if (shouldEmitEvent) {\n    // Notify EE features that they should be disabled\n    strapi.eventHub.emit('ee.enable');\n  }\n};\n\nlet initialized = false;\n\n/**\n * Optimistically enable EE if the format of the license is valid, only run once.\n */\nconst init = (licenseDir: string, logger?: Logger) => {\n  if (initialized) {\n    return;\n  }\n\n  initialized = true;\n  ee.logger = logger;\n\n  if (process.env.STRAPI_DISABLE_EE?.toLowerCase() === 'true') {\n    return;\n  }\n\n  try {\n    const license = process.env.STRAPI_LICENSE || readLicense(licenseDir);\n\n    if (license) {\n      ee.licenseInfo = verifyLicense(license);\n      enable();\n    }\n  } catch (error) {\n    if (error instanceof Error) {\n      disable(error.message);\n    } else {\n      disable('Invalid license.');\n    }\n  }\n};\n\n/**\n * Contact the license registry to update the license to its latest state.\n *\n * Store the result in database to avoid unecessary requests, and will fallback to that in case of a network failure.\n */\nconst onlineUpdate = async ({ strapi }: { strapi: Core.Strapi }) => {\n  const { get, commit, rollback } = (await strapi.db?.transaction()) as any;\n  const transaction = get();\n\n  try {\n    const storedInfo = await strapi.db\n      ?.queryBuilder('strapi::core-store')\n      .where({ key: 'ee_information' })\n      .select('value')\n      .first()\n      .transacting(transaction)\n      .forUpdate()\n      .execute()\n      .then((result: any) => (result ? JSON.parse(result.value) : result));\n\n    const shouldContactRegistry = (storedInfo?.lastCheckAt ?? 0) < Date.now() - ONE_MINUTE;\n    const result: {\n      license?: string | null;\n      error?: string;\n      lastCheckAt?: number;\n    } = { lastCheckAt: Date.now() };\n\n    const fallback = (error: Error) => {\n      if (error instanceof LicenseCheckError && error.shouldFallback && storedInfo?.license) {\n        ee.logger?.warn(\n          `${error.message} The last stored one will be used as a potential fallback.`\n        );\n        return storedInfo.license;\n      }\n\n      result.error = error.message;\n      disable(error.message);\n    };\n\n    if (!ee?.licenseInfo?.licenseKey) {\n      throw new Error('Missing license key.');\n    }\n\n    const license = shouldContactRegistry\n      ? await fetchLicense({ strapi }, ee.licenseInfo.licenseKey, strapi.config.get('uuid')).catch(\n          fallback\n        )\n      : storedInfo.license;\n\n    if (license) {\n      try {\n        // Verify license and check if its info changed\n        const newLicenseInfo = verifyLicense(license);\n        const licenseInfoChanged =\n          !isEqual(newLicenseInfo.features, ee.licenseInfo.features) ||\n          newLicenseInfo.seats !== ee.licenseInfo.seats ||\n          newLicenseInfo.type !== ee.licenseInfo.type;\n\n        // Store the new license info\n        ee.licenseInfo = newLicenseInfo;\n        const wasEnabled = ee.enabled;\n        validateInfo();\n\n        // Notify EE features\n        if (licenseInfoChanged && wasEnabled) {\n          strapi.eventHub.emit('ee.update');\n        }\n      } catch (error) {\n        if (error instanceof Error) {\n          disable(error.message);\n        } else {\n          disable('Invalid license.');\n        }\n      }\n    } else if (!shouldContactRegistry) {\n      disable(storedInfo.error);\n    }\n\n    if (shouldContactRegistry) {\n      result.license = license ?? null;\n      const query = strapi.db.queryBuilder('strapi::core-store').transacting(transaction);\n\n      if (!storedInfo) {\n        query.insert({ key: 'ee_information', value: JSON.stringify(result) });\n      } else {\n        query.update({ value: JSON.stringify(result) }).where({ key: 'ee_information' });\n      }\n\n      await query.execute();\n    }\n\n    await commit();\n  } catch (error) {\n    // Example of errors: SQLite does not support FOR UPDATE\n    await rollback();\n  }\n};\n\nconst validateInfo = () => {\n  if (typeof ee.licenseInfo.expireAt === 'undefined') {\n    throw new Error('Missing license key.');\n  }\n\n  const expirationTime = new Date(ee.licenseInfo.expireAt).getTime();\n\n  if (expirationTime < new Date().getTime()) {\n    return disable('License expired.');\n  }\n\n  enable();\n};\n\nconst checkLicense = async ({ strapi }: { strapi: Core.Strapi }) => {\n  const shouldStayOffline =\n    ee.licenseInfo.type === 'gold' &&\n    // This env variable support is temporarily used to ease the migration between online vs offline\n    process.env.STRAPI_DISABLE_LICENSE_PING?.toLowerCase() === 'true';\n\n  if (!shouldStayOffline) {\n    await onlineUpdate({ strapi });\n\n    strapi.cron.add({\n      onlineUpdate: {\n        task: () => onlineUpdate({ strapi }),\n        options: shiftCronExpression('0 0 */12 * * *'),\n      },\n    });\n  } else {\n    if (!ee.licenseInfo.expireAt) {\n      return disable('Your license does not have offline support.');\n    }\n\n    validateInfo();\n  }\n};\n\nconst getTrialEndDate = async ({\n  strapi,\n}: {\n  strapi: Core.Strapi;\n}): Promise<{ trialEndsAt: string } | null> => {\n  const silentFetch = createStrapiFetch(strapi, {\n    logs: false,\n  });\n\n  const res = await silentFetch(\n    `${LICENSE_REGISTRY_URI}/api/licenses/${ee.licenseInfo.licenseKey}/trial-countdown`,\n    {\n      method: 'GET',\n      headers: { 'Content-Type': 'application/json' },\n    }\n  ).catch(() => {\n    throw new LicenseCheckError(\n      'Could not proceed to retrieve the trial time left for your license.',\n      true\n    );\n  });\n\n  const data = await res.json();\n\n  return data;\n};\n\nconst list = () => {\n  return (\n    ee.licenseInfo.features?.map((feature) =>\n      typeof feature === 'object' ? feature : { name: feature }\n    ) || []\n  );\n};\n\nconst get = (featureName: string) => list().find((feature) => feature.name === featureName);\n\nexport default Object.freeze({\n  init,\n  checkLicense,\n  getTrialEndDate,\n\n  get isEE() {\n    return ee.enabled;\n  },\n\n  get seats() {\n    return ee.licenseInfo.seats;\n  },\n\n  get type() {\n    return ee.licenseInfo.type;\n  },\n\n  get isTrial() {\n    return ee.licenseInfo.isTrial;\n  },\n\n  features: Object.freeze({\n    list,\n    get,\n    isEnabled: (featureName: string) => get(featureName) !== undefined,\n  }),\n});\n"],"names":["ONE_MINUTE","ee","enabled","licenseInfo","isTrial","disable","message","shouldEmitEvent","logger","warn","pick","strapi","eventHub","emit","enable","initialized","init","licenseDir","process","env","STRAPI_DISABLE_EE","toLowerCase","license","STRAPI_LICENSE","readLicense","verifyLicense","error","Error","onlineUpdate","get","commit","rollback","db","transaction","storedInfo","queryBuilder","where","key","select","first","transacting","forUpdate","execute","then","result","JSON","parse","value","shouldContactRegistry","lastCheckAt","Date","now","fallback","LicenseCheckError","shouldFallback","licenseKey","fetchLicense","config","catch","newLicenseInfo","licenseInfoChanged","isEqual","features","seats","type","wasEnabled","validateInfo","query","insert","stringify","update","expireAt","expirationTime","getTime","checkLicense","shouldStayOffline","STRAPI_DISABLE_LICENSE_PING","cron","add","task","options","shiftCronExpression","getTrialEndDate","silentFetch","createStrapiFetch","logs","res","LICENSE_REGISTRY_URI","method","headers","data","json","list","map","feature","name","featureName","find","Object","freeze","isEE","isEnabled","undefined"],"mappings":"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"}