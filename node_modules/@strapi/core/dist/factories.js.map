{"version":3,"file":"factories.js","sources":["../src/factories.ts"],"sourcesContent":["import { pipe, omit, pick } from 'lodash/fp';\nimport type { Core, UID, Utils } from '@strapi/types';\n\nimport { createController } from './core-api/controller';\nimport { createService } from './core-api/service';\nimport { createRoutes } from './core-api/routes';\n\nconst symbols = {\n  CustomController: Symbol('StrapiCustomCoreController'),\n} as const;\n\ntype WithStrapiCallback<T> = T | (<S extends { strapi: Core.Strapi }>(params: S) => T);\n\nconst createCoreController = <\n  TUID extends UID.ContentType,\n  TController extends Core.CoreAPI.Controller.Extendable<TUID>,\n>(\n  uid: TUID,\n  cfg?: WithStrapiCallback<\n    Utils.PartialWithThis<Core.CoreAPI.Controller.Extendable<TUID> & TController>\n  >\n) => {\n  return ({\n    strapi,\n  }: {\n    strapi: Core.Strapi;\n  }): TController & Core.CoreAPI.Controller.ContentType<TUID> => {\n    const baseController = createController({ contentType: strapi.contentType(uid) });\n\n    const userCtrl = typeof cfg === 'function' ? cfg({ strapi }) : (cfg ?? ({} as any));\n\n    for (const methodName of Object.keys(baseController) as Array<keyof typeof baseController>) {\n      if (userCtrl[methodName] === undefined) {\n        userCtrl[methodName] = baseController[methodName];\n      }\n    }\n\n    Object.setPrototypeOf(userCtrl, baseController);\n\n    const isCustom = typeof cfg !== 'undefined';\n    if (isCustom) {\n      Object.defineProperty(userCtrl, symbols.CustomController, {\n        writable: false,\n        configurable: false,\n        enumerable: false,\n      });\n    }\n\n    return userCtrl;\n  };\n};\n\nfunction createCoreService<\n  TUID extends UID.ContentType,\n  TService extends Core.CoreAPI.Service.Extendable<TUID>,\n>(\n  uid: TUID,\n  cfg?: WithStrapiCallback<Utils.PartialWithThis<Core.CoreAPI.Service.Extendable<TUID> & TService>>\n) {\n  return ({\n    strapi,\n  }: {\n    strapi: Core.Strapi;\n  }): TService & Core.CoreAPI.Service.ContentType<TUID> => {\n    const baseService = createService({ contentType: strapi.contentType(uid) });\n\n    const userService = typeof cfg === 'function' ? cfg({ strapi }) : (cfg ?? ({} as any));\n\n    for (const methodName of Object.keys(baseService) as Array<keyof typeof baseService>) {\n      if (userService[methodName] === undefined) {\n        userService[methodName] = baseService[methodName];\n      }\n    }\n\n    Object.setPrototypeOf(userService, baseService);\n    return userService;\n  };\n}\n\nfunction createCoreRouter<T extends UID.ContentType>(\n  uid: T,\n  cfg?: Core.CoreAPI.Router.RouterConfig<T>\n): Core.CoreAPI.Router.Router {\n  const { prefix, config = {}, only, except, type = 'content-api' } = cfg ?? {};\n  let routes: Core.CoreAPI.Router.Route[];\n\n  return {\n    type,\n    prefix,\n    get routes() {\n      if (!routes) {\n        const contentType = strapi.contentType(uid);\n\n        const defaultRoutes = createRoutes({ contentType });\n        const keys = Object.keys(defaultRoutes) as Array<keyof typeof defaultRoutes>;\n\n        keys.forEach((routeName) => {\n          const defaultRoute = defaultRoutes[routeName];\n\n          Object.assign(defaultRoute.config, config[routeName] || {});\n        });\n\n        const selectedRoutes = pipe(\n          (routes) => (except ? omit(except, routes) : routes),\n          (routes) => (only ? pick(only, routes) : routes)\n        )(defaultRoutes);\n\n        routes = Object.values(selectedRoutes);\n      }\n\n      return routes;\n    },\n  };\n}\n\nconst isCustomController = <T extends Core.Controller>(controller: T): boolean => {\n  return symbols.CustomController in controller;\n};\n\nexport { createCoreController, createCoreService, createCoreRouter, isCustomController };\n"],"names":["symbols","CustomController","Symbol","createCoreController","uid","cfg","strapi","baseController","createController","contentType","userCtrl","methodName","Object","keys","undefined","setPrototypeOf","isCustom","defineProperty","writable","configurable","enumerable","createCoreService","baseService","createService","userService","createCoreRouter","prefix","config","only","except","type","routes","defaultRoutes","createRoutes","forEach","routeName","defaultRoute","assign","selectedRoutes","pipe","omit","pick","values","isCustomController","controller"],"mappings":"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"}