{"version":3,"file":"cron.js","sources":["../../src/utils/cron.ts"],"sourcesContent":["import { isEmpty, negate } from 'lodash/fp';\n\nconst DATE_FUNCTIONS = [\n  'getSeconds',\n  'getMinutes',\n  'getHours',\n  'getDate',\n  'getMonth',\n  'getDay',\n] as const;\n\nconst INTEGER_REGEX = /^\\d+$/;\nconst STEP_REGEX = /^\\*\\/\\d+$/;\nconst COMPONENTS: {\n  limit: number;\n  zeroBasedIndices: boolean;\n  functionName: (typeof DATE_FUNCTIONS)[number];\n}[] = [\n  { limit: 60, zeroBasedIndices: true, functionName: 'getSeconds' },\n  { limit: 60, zeroBasedIndices: true, functionName: 'getMinutes' },\n  { limit: 24, zeroBasedIndices: true, functionName: 'getHours' },\n  { limit: 31, zeroBasedIndices: false, functionName: 'getDate' },\n  { limit: 12, zeroBasedIndices: false, functionName: 'getMonth' },\n  { limit: 7, zeroBasedIndices: true, functionName: 'getDay' },\n];\n\nconst shift = (component: string, index: number, date: Date) => {\n  if (component === '*') {\n    return '*';\n  }\n\n  const { limit, zeroBasedIndices, functionName } = COMPONENTS[index];\n  const offset = +!zeroBasedIndices;\n  const currentValue = date[functionName]();\n\n  if (INTEGER_REGEX.test(component)) {\n    return ((Number.parseInt(component, 10) + currentValue) % limit) + offset;\n  }\n\n  if (STEP_REGEX.test(component)) {\n    const [, step] = component.split('/');\n    const frequency = Math.floor(limit / Number(step));\n    const list = Array.from({ length: frequency }, (_, index) => index * Number(step));\n    return list.map((value) => ((value + currentValue) % limit) + offset).sort((a, b) => a - b);\n  }\n\n  // Unsupported syntax\n  return component;\n};\n\n/**\n * Simulate an interval by shifting a cron expression using the specified date.\n * @param {string} rule A cron expression you want to shift.\n * @param {Date} date The date that's gonna be used as the start of the \"interval\", it defaults to now.\n * @returns The shifted cron expression.\n */\nexport const shiftCronExpression = (rule: string, date = new Date()) => {\n  const components = rule.trim().split(' ').filter(negate(isEmpty));\n  const secondsIncluded = components.length === 6;\n  return components\n    .map((component, index) => shift(component, secondsIncluded ? index : index + 1, date))\n    .join(' ');\n};\n"],"names":["INTEGER_REGEX","STEP_REGEX","COMPONENTS","limit","zeroBasedIndices","functionName","shift","component","index","date","offset","currentValue","test","Number","parseInt","step","split","frequency","Math","floor","list","Array","from","length","_","map","value","sort","a","b","shiftCronExpression","rule","Date","components","trim","filter","negate","isEmpty","secondsIncluded","join"],"mappings":"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"}