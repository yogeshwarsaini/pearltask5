{"version":3,"file":"index.js","sources":["../../../src/utils/update-notifier/index.ts"],"sourcesContent":["import path from 'path';\nimport packageJson from 'package-json';\nimport Configstore from 'configstore';\nimport semver from 'semver';\nimport boxen from 'boxen';\nimport chalk from 'chalk';\nimport { env } from '@strapi/utils';\nimport type { Core } from '@strapi/types';\n\nimport pkg from '../../../package.json';\n\nconst CHECK_INTERVAL = 1000 * 60 * 60 * 24 * 1; // 1 day\nconst NOTIF_INTERVAL = 1000 * 60 * 60 * 24 * 7; // 1 week\nconst boxenOptions: boxen.Options = {\n  padding: 1,\n  margin: 1,\n  align: 'center',\n  borderColor: 'yellow',\n  borderStyle: 'round',\n};\n\nconst getUpdateMessage = (newVersion: string, currentVersion: string) => {\n  const currentVersionLog = chalk.dim(currentVersion);\n  const newVersionLog = chalk.green(newVersion);\n  const releaseLink = chalk.bold('https://github.com/strapi/strapi/releases');\n\n  return `\nA new version of Strapi is available ${currentVersionLog} â†’ ${newVersionLog}\nCheck out the new releases at: ${releaseLink}\n`.trim();\n};\n\nexport const createUpdateNotifier = (strapi: Core.Strapi) => {\n  let config: InstanceType<typeof Configstore>;\n\n  try {\n    config = new Configstore(\n      pkg.name,\n      {},\n      { configPath: path.join(strapi.dirs.app.root, '.strapi-updater.json') }\n    );\n  } catch {\n    // we don't have write access to the file system\n    // we silence the error\n    return;\n  }\n\n  const checkUpdate = async (checkInterval: number) => {\n    const now = Date.now();\n    const lastUpdateCheck = config.get('lastUpdateCheck') || 0;\n    if (lastUpdateCheck + checkInterval > now) {\n      return;\n    }\n\n    try {\n      const res = await packageJson(pkg.name);\n      if (res.version) {\n        config.set('latest', res.version);\n        config.set('lastUpdateCheck', now);\n      }\n    } catch {\n      // silence error if offline\n    }\n  };\n\n  const display = (notifInterval: number) => {\n    const now = Date.now();\n    const latestVersion = config.get('latest');\n    const lastNotification = config.get('lastNotification') || 0;\n\n    if (\n      !process.stdout.isTTY ||\n      lastNotification + notifInterval > now ||\n      !semver.valid(latestVersion) ||\n      !semver.valid(pkg.version) ||\n      semver.lte(latestVersion, pkg.version)\n    ) {\n      return;\n    }\n\n    const message = boxen(getUpdateMessage(latestVersion, pkg.version), boxenOptions);\n    config.set('lastNotification', now);\n    console.log(message);\n  };\n\n  // TODO v6: Remove this warning\n  if (env.bool('STRAPI_DISABLE_UPDATE_NOTIFICATION', false)) {\n    strapi.log.warn(\n      'STRAPI_DISABLE_UPDATE_NOTIFICATION is no longer supported. Instead, set logger.updates.enabled to false in your server configuration.'\n    );\n  }\n\n  if (!strapi.config.get('server.logger.updates.enabled') || !config) {\n    return;\n  }\n\n  display(NOTIF_INTERVAL);\n  checkUpdate(CHECK_INTERVAL); // doesn't need to await\n};\n"],"names":["CHECK_INTERVAL","NOTIF_INTERVAL","boxenOptions","padding","margin","align","borderColor","borderStyle","getUpdateMessage","newVersion","currentVersion","currentVersionLog","chalk","dim","newVersionLog","green","releaseLink","bold","trim","createUpdateNotifier","strapi","config","Configstore","pkg","name","configPath","path","join","dirs","app","root","checkUpdate","checkInterval","now","Date","lastUpdateCheck","get","res","packageJson","version","set","display","notifInterval","latestVersion","lastNotification","process","stdout","isTTY","semver","valid","lte","message","boxen","console","log","env","bool","warn"],"mappings":"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"}