{"version":3,"file":"collection-type.js","sources":["../../../src/core-api/service/collection-type.ts"],"sourcesContent":["import type { Core, Struct, Modules } from '@strapi/types';\n\nimport {\n  getPaginationInfo,\n  shouldCount,\n  isPagedPagination,\n  transformPaginationResponse,\n} from './pagination';\n\nimport { CoreService } from './core-service';\n\nexport class CollectionTypeService\n  extends CoreService\n  implements Core.CoreAPI.Service.CollectionType\n{\n  private contentType: Struct.CollectionTypeSchema;\n\n  constructor(contentType: Struct.CollectionTypeSchema) {\n    super();\n\n    this.contentType = contentType;\n  }\n\n  async find(params = {}) {\n    const { uid } = this.contentType;\n\n    const fetchParams = this.getFetchParams(params);\n\n    const paginationInfo = getPaginationInfo(fetchParams);\n    const isPaged = isPagedPagination(fetchParams.pagination);\n\n    const results = await strapi.documents(uid).findMany({\n      ...fetchParams,\n      ...paginationInfo,\n    });\n\n    if (shouldCount(fetchParams)) {\n      const count = await strapi.documents(uid).count({ ...fetchParams, ...paginationInfo });\n\n      if (typeof count !== 'number') {\n        throw new Error('Count should be a number');\n      }\n\n      return {\n        results,\n        pagination: transformPaginationResponse(paginationInfo, count, isPaged),\n      };\n    }\n\n    return {\n      results,\n      pagination: transformPaginationResponse(paginationInfo, undefined, isPaged),\n    };\n  }\n\n  findOne(documentId: Modules.Documents.ID, params = {}) {\n    const { uid } = this.contentType;\n\n    return strapi.documents(uid).findOne({\n      ...this.getFetchParams(params),\n      documentId,\n    });\n  }\n\n  async create(params = { data: {} }) {\n    const { uid } = this.contentType;\n\n    return strapi.documents(uid).create(this.getFetchParams(params));\n  }\n\n  update(documentId: Modules.Documents.ID, params = { data: {} }) {\n    const { uid } = this.contentType;\n\n    return strapi.documents(uid).update({\n      ...this.getFetchParams(params),\n      documentId,\n    });\n  }\n\n  async delete(documentId: Modules.Documents.ID, params = {}) {\n    const { uid } = this.contentType;\n\n    const { entries } = await strapi.documents(uid).delete({\n      ...this.getFetchParams(params),\n      documentId,\n    });\n\n    return { deletedEntries: entries.length };\n  }\n}\n\n/**\n *\n * Returns a collection type service to handle default core-api actions\n */\n\nconst createCollectionTypeService = (\n  contentType: Struct.CollectionTypeSchema\n): Core.CoreAPI.Service.CollectionType => {\n  return new CollectionTypeService(contentType);\n};\n\nexport { createCollectionTypeService };\n"],"names":["CollectionTypeService","CoreService","find","params","uid","contentType","fetchParams","getFetchParams","paginationInfo","getPaginationInfo","isPaged","isPagedPagination","pagination","results","strapi","documents","findMany","shouldCount","count","Error","transformPaginationResponse","undefined","findOne","documentId","create","data","update","delete","entries","deletedEntries","length","constructor","createCollectionTypeService"],"mappings":";;;;;AAWO,MAAMA,qBACHC,SAAAA,uBAAAA,CAAAA;AAWR,IAAA,MAAMC,IAAKC,CAAAA,MAAAA,GAAS,EAAE,EAAE;AACtB,QAAA,MAAM,EAAEC,GAAG,EAAE,GAAG,IAAI,CAACC,WAAW;AAEhC,QAAA,MAAMC,WAAc,GAAA,IAAI,CAACC,cAAc,CAACJ,MAAAA,CAAAA;AAExC,QAAA,MAAMK,iBAAiBC,4BAAkBH,CAAAA,WAAAA,CAAAA;QACzC,MAAMI,OAAAA,GAAUC,4BAAkBL,CAAAA,WAAAA,CAAYM,UAAU,CAAA;AAExD,QAAA,MAAMC,UAAU,MAAMC,MAAAA,CAAOC,SAAS,CAACX,GAAAA,CAAAA,CAAKY,QAAQ,CAAC;AACnD,YAAA,GAAGV,WAAW;AACd,YAAA,GAAGE;AACL,SAAA,CAAA;AAEA,QAAA,IAAIS,uBAAYX,WAAc,CAAA,EAAA;AAC5B,YAAA,MAAMY,QAAQ,MAAMJ,MAAAA,CAAOC,SAAS,CAACX,GAAAA,CAAAA,CAAKc,KAAK,CAAC;AAAE,gBAAA,GAAGZ,WAAW;AAAE,gBAAA,GAAGE;AAAe,aAAA,CAAA;YAEpF,IAAI,OAAOU,UAAU,QAAU,EAAA;AAC7B,gBAAA,MAAM,IAAIC,KAAM,CAAA,0BAAA,CAAA;AAClB;YAEA,OAAO;AACLN,gBAAAA,OAAAA;gBACAD,UAAYQ,EAAAA,sCAAAA,CAA4BZ,gBAAgBU,KAAOR,EAAAA,OAAAA;AACjE,aAAA;AACF;QAEA,OAAO;AACLG,YAAAA,OAAAA;YACAD,UAAYQ,EAAAA,sCAAAA,CAA4BZ,gBAAgBa,SAAWX,EAAAA,OAAAA;AACrE,SAAA;AACF;AAEAY,IAAAA,OAAAA,CAAQC,UAAgC,EAAEpB,MAAS,GAAA,EAAE,EAAE;AACrD,QAAA,MAAM,EAAEC,GAAG,EAAE,GAAG,IAAI,CAACC,WAAW;AAEhC,QAAA,OAAOS,MAAOC,CAAAA,SAAS,CAACX,GAAAA,CAAAA,CAAKkB,OAAO,CAAC;AACnC,YAAA,GAAG,IAAI,CAACf,cAAc,CAACJ,MAAO,CAAA;AAC9BoB,YAAAA;AACF,SAAA,CAAA;AACF;AAEA,IAAA,MAAMC,OAAOrB,MAAS,GAAA;AAAEsB,QAAAA,IAAAA,EAAM;AAAG,KAAC,EAAE;AAClC,QAAA,MAAM,EAAErB,GAAG,EAAE,GAAG,IAAI,CAACC,WAAW;QAEhC,OAAOS,MAAAA,CAAOC,SAAS,CAACX,GAAAA,CAAAA,CAAKoB,MAAM,CAAC,IAAI,CAACjB,cAAc,CAACJ,MAAAA,CAAAA,CAAAA;AAC1D;IAEAuB,MAAOH,CAAAA,UAAgC,EAAEpB,MAAS,GAAA;AAAEsB,QAAAA,IAAAA,EAAM;AAAG,KAAC,EAAE;AAC9D,QAAA,MAAM,EAAErB,GAAG,EAAE,GAAG,IAAI,CAACC,WAAW;AAEhC,QAAA,OAAOS,MAAOC,CAAAA,SAAS,CAACX,GAAAA,CAAAA,CAAKsB,MAAM,CAAC;AAClC,YAAA,GAAG,IAAI,CAACnB,cAAc,CAACJ,MAAO,CAAA;AAC9BoB,YAAAA;AACF,SAAA,CAAA;AACF;AAEA,IAAA,MAAMI,OAAOJ,UAAgC,EAAEpB,MAAS,GAAA,EAAE,EAAE;AAC1D,QAAA,MAAM,EAAEC,GAAG,EAAE,GAAG,IAAI,CAACC,WAAW;QAEhC,MAAM,EAAEuB,OAAO,EAAE,GAAG,MAAMd,OAAOC,SAAS,CAACX,GAAKuB,CAAAA,CAAAA,MAAM,CAAC;AACrD,YAAA,GAAG,IAAI,CAACpB,cAAc,CAACJ,MAAO,CAAA;AAC9BoB,YAAAA;AACF,SAAA,CAAA;QAEA,OAAO;AAAEM,YAAAA,cAAAA,EAAgBD,QAAQE;AAAO,SAAA;AAC1C;AAvEAC,IAAAA,WAAAA,CAAY1B,WAAwC,CAAE;QACpD,KAAK,EAAA;QAEL,IAAI,CAACA,WAAW,GAAGA,WAAAA;AACrB;AAoEF;AAEA;;;IAKA,MAAM2B,8BAA8B,CAClC3B,WAAAA,GAAAA;AAEA,IAAA,OAAO,IAAIL,qBAAsBK,CAAAA,WAAAA,CAAAA;AACnC;;;;;"}