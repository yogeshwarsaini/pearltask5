{"version":3,"file":"hooks.js","sources":["../../src/registries/hooks.ts"],"sourcesContent":["import { pickBy } from 'lodash/fp';\nimport { addNamespace, hasNamespace } from './namespace';\n\ntype Handler = (context: any) => any;\n\ntype AsyncHook = {\n  handlers: Handler[];\n  register(handler: Handler): AsyncHook;\n  delete(handler: Handler): AsyncHook;\n  call(): Promise<void>;\n};\n\ntype SyncHook = {\n  get handlers(): Handler[];\n  register(handler: Handler): SyncHook;\n  delete(handler: Handler): SyncHook;\n  call(): void;\n};\n\nexport type Hook = AsyncHook | SyncHook;\n\ntype HookExtendFn = (hook: Hook) => Hook;\n\nconst hooksRegistry = () => {\n  const hooks: Record<string, Hook> = {};\n\n  return {\n    /**\n     * Returns this list of registered hooks uids\n     */\n    keys() {\n      return Object.keys(hooks);\n    },\n\n    /**\n     * Returns the instance of a hook.\n     */\n    get(uid: string) {\n      return hooks[uid];\n    },\n\n    /**\n     * Returns a map with all the hooks in a namespace\n     */\n    getAll(namespace: string) {\n      return pickBy((_, uid) => hasNamespace(uid, namespace))(hooks);\n    },\n\n    /**\n     * Registers a hook\n     */\n    set(uid: string, hook: Hook) {\n      hooks[uid] = hook;\n      return this;\n    },\n\n    /**\n     * Registers a map of hooks for a specific namespace\n     */\n    add(namespace: string, hooks: Record<string, Hook>) {\n      for (const hookName of Object.keys(hooks)) {\n        const hook = hooks[hookName];\n        const uid = addNamespace(hookName, namespace);\n\n        this.set(uid, hook);\n      }\n\n      return this;\n    },\n\n    /**\n     * Wraps a hook to extend it\n     */\n    extend(uid: string, extendFn: HookExtendFn) {\n      const currentHook = this.get(uid);\n\n      if (!currentHook) {\n        throw new Error(`Hook ${uid} doesn't exist`);\n      }\n\n      const newHook = extendFn(currentHook);\n      hooks[uid] = newHook;\n\n      return this;\n    },\n  };\n};\n\nexport default hooksRegistry;\n"],"names":["hooksRegistry","hooks","keys","Object","get","uid","getAll","namespace","pickBy","_","hasNamespace","set","hook","add","hookName","addNamespace","extend","extendFn","currentHook","Error","newHook"],"mappings":";;;;;AAuBA,MAAMA,aAAgB,GAAA,IAAA;AACpB,IAAA,MAAMC,QAA8B,EAAC;IAErC,OAAO;AACL;;QAGAC,IAAAA,CAAAA,GAAAA;YACE,OAAOC,MAAAA,CAAOD,IAAI,CAACD,KAAAA,CAAAA;AACrB,SAAA;AAEA;;AAEC,QACDG,KAAIC,GAAW,EAAA;YACb,OAAOJ,KAAK,CAACI,GAAI,CAAA;AACnB,SAAA;AAEA;;AAEC,QACDC,QAAOC,WAAiB,EAAA;AACtB,YAAA,OAAOC,UAAO,CAACC,CAAAA,EAAGJ,GAAQK,GAAAA,sBAAAA,CAAaL,KAAKE,WAAYN,CAAAA,CAAAA,CAAAA,KAAAA,CAAAA;AAC1D,SAAA;AAEA;;QAGAU,GAAAA,CAAAA,CAAIN,GAAW,EAAEO,IAAU,EAAA;YACzBX,KAAK,CAACI,IAAI,GAAGO,IAAAA;AACb,YAAA,OAAO,IAAI;AACb,SAAA;AAEA;;QAGAC,GAAAA,CAAAA,CAAIN,WAAiB,EAAEN,KAA2B,EAAA;AAChD,YAAA,KAAK,MAAMa,QAAAA,IAAYX,MAAOD,CAAAA,IAAI,CAACD,KAAQ,CAAA,CAAA;gBACzC,MAAMW,IAAAA,GAAOX,KAAK,CAACa,QAAS,CAAA;gBAC5B,MAAMT,GAAAA,GAAMU,uBAAaD,QAAUP,EAAAA,WAAAA,CAAAA;gBAEnC,IAAI,CAACI,GAAG,CAACN,GAAKO,EAAAA,IAAAA,CAAAA;AAChB;AAEA,YAAA,OAAO,IAAI;AACb,SAAA;AAEA;;QAGAI,MAAAA,CAAAA,CAAOX,GAAW,EAAEY,QAAsB,EAAA;AACxC,YAAA,MAAMC,WAAc,GAAA,IAAI,CAACd,GAAG,CAACC,GAAAA,CAAAA;AAE7B,YAAA,IAAI,CAACa,WAAa,EAAA;AAChB,gBAAA,MAAM,IAAIC,KAAM,CAAA,CAAC,KAAK,EAAEd,GAAAA,CAAI,cAAc,CAAC,CAAA;AAC7C;AAEA,YAAA,MAAMe,UAAUH,QAASC,CAAAA,WAAAA,CAAAA;YACzBjB,KAAK,CAACI,IAAI,GAAGe,OAAAA;AAEb,YAAA,OAAO,IAAI;AACb;AACF,KAAA;AACF;;;;"}