{"version":3,"file":"policies.js","sources":["../../src/registries/policies.ts"],"sourcesContent":["import { pickBy, has, castArray } from 'lodash/fp';\nimport type { Core } from '@strapi/types';\nimport { addNamespace, hasNamespace } from './namespace';\n\nconst PLUGIN_PREFIX = 'plugin::';\nconst API_PREFIX = 'api::';\n\ninterface PolicyInfo {\n  name: string;\n  config: unknown;\n}\n\ntype PolicyConfig = string | PolicyInfo;\n\ninterface NamespaceInfo {\n  pluginName?: string;\n  apiName?: string;\n}\n\nconst parsePolicy = (policy: string | PolicyInfo) => {\n  if (typeof policy === 'string') {\n    return { policyName: policy, config: {} };\n  }\n\n  const { name, config } = policy;\n  return { policyName: name, config };\n};\n\nconst policiesRegistry = () => {\n  const policies = new Map<string, Core.Policy>();\n\n  const find = (name: string, namespaceInfo?: NamespaceInfo) => {\n    const { pluginName, apiName } = namespaceInfo ?? {};\n\n    // try to resolve a full name to avoid extra prefixing\n    const policy = policies.get(name);\n\n    if (policy) {\n      return policy;\n    }\n\n    if (pluginName) {\n      return policies.get(`${PLUGIN_PREFIX}${pluginName}.${name}`);\n    }\n\n    if (apiName) {\n      return policies.get(`${API_PREFIX}${apiName}.${name}`);\n    }\n  };\n\n  function resolveHandler(policyConfig: PolicyConfig, namespaceInfo?: NamespaceInfo): Core.Policy;\n  function resolveHandler(\n    policyConfig: PolicyConfig[],\n    namespaceInfo?: NamespaceInfo\n  ): Core.Policy[];\n  function resolveHandler(\n    policyConfig: PolicyConfig | PolicyConfig[],\n    namespaceInfo?: NamespaceInfo\n  ): Core.Policy | Core.Policy[] {\n    if (Array.isArray(policyConfig)) {\n      return policyConfig.map((config) => {\n        return resolveHandler(config, namespaceInfo);\n      });\n    }\n\n    const { policyName, config } = parsePolicy(policyConfig);\n\n    const policy = find(policyName, namespaceInfo);\n\n    if (!policy) {\n      throw new Error(`Policy ${policyName} not found.`);\n    }\n\n    if (typeof policy === 'function') {\n      return policy;\n    }\n\n    if (policy.validator) {\n      policy.validator(config);\n    }\n\n    return policy.handler;\n  }\n\n  return {\n    /**\n     * Returns this list of registered policies uids\n     */\n    keys() {\n      // Return an array so format stays the same as controllers, services, etc\n      return Array.from(policies.keys());\n    },\n\n    /**\n     * Returns the instance of a policy. Instantiate the policy if not already done\n     */\n    get(name: string, namespaceInfo?: NamespaceInfo) {\n      return find(name, namespaceInfo);\n    },\n    /**\n     * Checks if a policy is registered\n     */\n    has(name: string, namespaceInfo?: NamespaceInfo) {\n      const res = find(name, namespaceInfo);\n      return !!res;\n    },\n\n    /**\n     * Returns a map with all the policies in a namespace\n     */\n    getAll(namespace: string) {\n      return pickBy((_, uid) => hasNamespace(uid, namespace))(Object.fromEntries(policies));\n    },\n\n    /**\n     * Registers a policy\n     */\n    set(uid: string, policy: Core.Policy) {\n      policies.set(uid, policy);\n      return this;\n    },\n\n    /**\n     * Registers a map of policies for a specific namespace\n     */\n    add(namespace: string, newPolicies: Record<string, Core.Policy>) {\n      for (const policyName of Object.keys(newPolicies)) {\n        const policy = newPolicies[policyName];\n        const uid = addNamespace(policyName, namespace);\n\n        if (has(uid, policies)) {\n          throw new Error(`Policy ${uid} has already been registered.`);\n        }\n\n        policies.set(uid, policy);\n      }\n    },\n\n    /**\n     * Resolves a list of policies\n     */\n    resolve(config: PolicyConfig | PolicyConfig[], namespaceInfo?: NamespaceInfo) {\n      const { pluginName, apiName } = namespaceInfo ?? {};\n\n      return castArray(config).map((policyConfig) => {\n        return {\n          handler: resolveHandler(policyConfig, { pluginName, apiName }),\n          config: (typeof policyConfig === 'object' && policyConfig.config) || {},\n        };\n      });\n    },\n  };\n};\n\nexport default policiesRegistry;\n"],"names":["PLUGIN_PREFIX","API_PREFIX","parsePolicy","policy","policyName","config","name","policiesRegistry","policies","Map","find","namespaceInfo","pluginName","apiName","get","resolveHandler","policyConfig","Array","isArray","map","Error","validator","handler","keys","from","has","res","getAll","namespace","pickBy","_","uid","hasNamespace","Object","fromEntries","set","add","newPolicies","addNamespace","resolve","castArray"],"mappings":"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"}