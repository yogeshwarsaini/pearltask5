{"version":3,"file":"custom-fields.mjs","sources":["../../src/registries/custom-fields.ts"],"sourcesContent":["import { has, isPlainObject } from 'lodash/fp';\n\nimport type { Core, Modules } from '@strapi/types';\n\nconst ALLOWED_TYPES = [\n  'biginteger',\n  'boolean',\n  'date',\n  'datetime',\n  'decimal',\n  'email',\n  'enumeration',\n  'float',\n  'integer',\n  'json',\n  'password',\n  'richtext',\n  'string',\n  'text',\n  'time',\n  'uid',\n] as const;\n\nconst customFieldsRegistry = (strapi: Core.Strapi) => {\n  const customFields: Record<string, unknown> = {};\n\n  return {\n    getAll() {\n      return customFields;\n    },\n    get(customField: string) {\n      const registeredCustomField = customFields[customField];\n      if (!registeredCustomField) {\n        throw new Error(`Could not find Custom Field: ${customField}`);\n      }\n\n      return registeredCustomField;\n    },\n    add(\n      customField:\n        | Modules.CustomFields.CustomFieldServerOptions\n        | Modules.CustomFields.CustomFieldServerOptions[]\n    ) {\n      const customFieldList = Array.isArray(customField) ? customField : [customField];\n\n      for (const cf of customFieldList) {\n        if (!has('name', cf) || !has('type', cf)) {\n          throw new Error(`Custom fields require a 'name' and 'type' key`);\n        }\n\n        const { name, plugin, type, inputSize } = cf;\n        if (!ALLOWED_TYPES.includes(type)) {\n          throw new Error(\n            `Custom field type: '${type}' is not a valid Strapi type or it can't be used with a Custom Field`\n          );\n        }\n\n        const isValidObjectKey = /^(?![0-9])[a-zA-Z0-9$_-]+$/g;\n        if (!isValidObjectKey.test(name)) {\n          throw new Error(`Custom field name: '${name}' is not a valid object key`);\n        }\n\n        // Validate inputSize when provided\n        if (inputSize) {\n          if (\n            !isPlainObject(inputSize) ||\n            !has('default', inputSize) ||\n            !has('isResizable', inputSize)\n          ) {\n            throw new Error(`inputSize should be an object with 'default' and 'isResizable' keys`);\n          }\n          if (![4, 6, 8, 12].includes(inputSize.default)) {\n            throw new Error('Custom fields require a valid default input size');\n          }\n          if (typeof inputSize.isResizable !== 'boolean') {\n            throw new Error('Custom fields should specify if their input is resizable');\n          }\n        }\n\n        // When no plugin is specified, or it isn't found in Strapi, default to global\n        const uid =\n          plugin && strapi.plugin(plugin) ? `plugin::${plugin}.${name}` : `global::${name}`;\n\n        if (has(uid, customFields)) {\n          throw new Error(`Custom field: '${uid}' has already been registered`);\n        }\n\n        customFields[uid] = cf;\n      }\n    },\n  };\n};\n\nexport default customFieldsRegistry;\n"],"names":["ALLOWED_TYPES","customFieldsRegistry","strapi","customFields","getAll","get","customField","registeredCustomField","Error","add","customFieldList","Array","isArray","cf","has","name","plugin","type","inputSize","includes","isValidObjectKey","test","isPlainObject","default","isResizable","uid"],"mappings":"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"}