{"version":3,"file":"content-types.js","sources":["../../src/registries/content-types.ts"],"sourcesContent":["import { pickBy, has } from 'lodash/fp';\nimport type { UID, Struct } from '@strapi/types';\nimport { createContentType, ContentTypeDefinition } from '../domain/content-type';\nimport { addNamespace, hasNamespace } from './namespace';\n\ntype ContentTypesInput = Record<string, ContentTypeDefinition>;\ntype ContentTypeExtendFn = (contentType: Struct.ContentTypeSchema) => Struct.ContentTypeSchema;\n\nconst validateKeySameToSingularName = (contentTypes: ContentTypesInput) => {\n  for (const ctName of Object.keys(contentTypes)) {\n    const contentType = contentTypes[ctName];\n\n    if (ctName !== contentType.schema.info.singularName) {\n      throw new Error(\n        `The key of the content-type should be the same as its singularName. Found ${ctName} and ${contentType.schema.info.singularName}.`\n      );\n    }\n  }\n};\n\nconst contentTypesRegistry = () => {\n  const contentTypes: Record<string, Struct.ContentTypeSchema> = {};\n\n  return {\n    /**\n     * Returns this list of registered contentTypes uids\n     */\n    keys() {\n      return Object.keys(contentTypes);\n    },\n\n    /**\n     * Returns the instance of a contentType. Instantiate the contentType if not already done\n     */\n    get(uid: UID.ContentType) {\n      return contentTypes[uid];\n    },\n\n    /**\n     * Returns a map with all the contentTypes in a namespace\n     */\n    getAll(namespace: string) {\n      return pickBy((_, uid) => hasNamespace(uid, namespace))(contentTypes);\n    },\n\n    /**\n     * Registers a contentType\n     */\n    set(uid: UID.ContentType, contentType: Struct.ContentTypeSchema) {\n      contentTypes[uid] = contentType;\n      return this;\n    },\n\n    /**\n     * Registers a map of contentTypes for a specific namespace\n     */\n    add(namespace: string, newContentTypes: ContentTypesInput) {\n      validateKeySameToSingularName(newContentTypes);\n\n      for (const rawCtName of Object.keys(newContentTypes)) {\n        const uid = addNamespace(rawCtName, namespace);\n\n        if (has(uid, contentTypes)) {\n          throw new Error(`Content-type ${uid} has already been registered.`);\n        }\n\n        contentTypes[uid] = createContentType(uid, newContentTypes[rawCtName]);\n      }\n    },\n\n    /**\n     * Wraps a contentType to extend it\n     */\n    extend(ctUID: UID.ContentType, extendFn: ContentTypeExtendFn) {\n      const currentContentType = this.get(ctUID);\n\n      if (!currentContentType) {\n        throw new Error(`Content-Type ${ctUID} doesn't exist`);\n      }\n\n      extendFn(currentContentType);\n\n      return this;\n    },\n  };\n};\n\nexport default contentTypesRegistry;\n"],"names":["validateKeySameToSingularName","contentTypes","ctName","Object","keys","contentType","schema","info","singularName","Error","contentTypesRegistry","get","uid","getAll","namespace","pickBy","_","hasNamespace","set","add","newContentTypes","rawCtName","addNamespace","has","createContentType","extend","ctUID","extendFn","currentContentType"],"mappings":";;;;;;AAQA,MAAMA,gCAAgC,CAACC,YAAAA,GAAAA;AACrC,IAAA,KAAK,MAAMC,MAAAA,IAAUC,MAAOC,CAAAA,IAAI,CAACH,YAAe,CAAA,CAAA;QAC9C,MAAMI,WAAAA,GAAcJ,YAAY,CAACC,MAAO,CAAA;AAExC,QAAA,IAAIA,WAAWG,WAAYC,CAAAA,MAAM,CAACC,IAAI,CAACC,YAAY,EAAE;AACnD,YAAA,MAAM,IAAIC,KACR,CAAA,CAAC,0EAA0E,EAAEP,OAAO,KAAK,EAAEG,WAAYC,CAAAA,MAAM,CAACC,IAAI,CAACC,YAAY,CAAC,CAAC,CAAC,CAAA;AAEtI;AACF;AACF,CAAA;AAEA,MAAME,oBAAuB,GAAA,IAAA;AAC3B,IAAA,MAAMT,eAAyD,EAAC;IAEhE,OAAO;AACL;;QAGAG,IAAAA,CAAAA,GAAAA;YACE,OAAOD,MAAAA,CAAOC,IAAI,CAACH,YAAAA,CAAAA;AACrB,SAAA;AAEA;;AAEC,QACDU,KAAIC,GAAoB,EAAA;YACtB,OAAOX,YAAY,CAACW,GAAI,CAAA;AAC1B,SAAA;AAEA;;AAEC,QACDC,QAAOC,WAAiB,EAAA;AACtB,YAAA,OAAOC,UAAO,CAACC,CAAAA,EAAGJ,GAAQK,GAAAA,sBAAAA,CAAaL,KAAKE,WAAYb,CAAAA,CAAAA,CAAAA,YAAAA,CAAAA;AAC1D,SAAA;AAEA;;QAGAiB,GAAAA,CAAAA,CAAIN,GAAoB,EAAEP,WAAqC,EAAA;YAC7DJ,YAAY,CAACW,IAAI,GAAGP,WAAAA;AACpB,YAAA,OAAO,IAAI;AACb,SAAA;AAEA;;QAGAc,GAAAA,CAAAA,CAAIL,WAAiB,EAAEM,eAAkC,EAAA;YACvDpB,6BAA8BoB,CAAAA,eAAAA,CAAAA;AAE9B,YAAA,KAAK,MAAMC,SAAAA,IAAalB,MAAOC,CAAAA,IAAI,CAACgB,eAAkB,CAAA,CAAA;gBACpD,MAAMR,GAAAA,GAAMU,uBAAaD,SAAWP,EAAAA,WAAAA,CAAAA;gBAEpC,IAAIS,MAAAA,CAAIX,KAAKX,YAAe,CAAA,EAAA;AAC1B,oBAAA,MAAM,IAAIQ,KAAM,CAAA,CAAC,aAAa,EAAEG,GAAAA,CAAI,6BAA6B,CAAC,CAAA;AACpE;AAEAX,gBAAAA,YAAY,CAACW,GAAI,CAAA,GAAGY,wBAAkBZ,GAAKQ,EAAAA,eAAe,CAACC,SAAU,CAAA,CAAA;AACvE;AACF,SAAA;AAEA;;QAGAI,MAAAA,CAAAA,CAAOC,KAAsB,EAAEC,QAA6B,EAAA;AAC1D,YAAA,MAAMC,kBAAqB,GAAA,IAAI,CAACjB,GAAG,CAACe,KAAAA,CAAAA;AAEpC,YAAA,IAAI,CAACE,kBAAoB,EAAA;AACvB,gBAAA,MAAM,IAAInB,KAAM,CAAA,CAAC,aAAa,EAAEiB,KAAAA,CAAM,cAAc,CAAC,CAAA;AACvD;YAEAC,QAASC,CAAAA,kBAAAA,CAAAA;AAET,YAAA,OAAO,IAAI;AACb;AACF,KAAA;AACF;;;;"}