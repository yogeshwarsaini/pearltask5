{"version":3,"file":"blocks-validator.js","sources":["../../../src/services/entity-validator/blocks-validator.ts"],"sourcesContent":["import { yup } from '@strapi/utils';\n\nconst textNodeValidator = yup.object().shape({\n  type: yup.string().equals(['text']).required(),\n  text: yup\n    .string()\n    .test(\n      'is-valid-text',\n      'Text must be defined with at least an empty string',\n      (text: unknown) => {\n        return typeof text === 'string' || text === '';\n      }\n    ),\n  bold: yup.boolean(),\n  italic: yup.boolean(),\n  underline: yup.boolean(),\n  strikethrough: yup.boolean(),\n  code: yup.boolean(),\n});\n\nconst checkValidLink = (link: string) => {\n  try {\n    // eslint-disable-next-line no-new\n    new URL(link.startsWith('/') ? `https://strapi.io${link}` : link);\n  } catch (error) {\n    return false;\n  }\n  return true;\n};\n\nconst linkNodeValidator = yup.object().shape({\n  type: yup.string().equals(['link']).required(),\n  url: yup\n    .string()\n    .test('invalid-url', 'Please specify a valid link.', (value) => checkValidLink(value ?? '')),\n  children: yup.array().of(textNodeValidator).required(),\n});\n\n// TODO: remove any with a correct Type\nconst inlineNodeValidator: any = yup.lazy((value: { type: string }) => {\n  switch (value.type) {\n    case 'text':\n      return textNodeValidator;\n    case 'link':\n      return linkNodeValidator;\n    default:\n      return yup.mixed().test('invalid-type', 'Inline node must be Text or Link', () => {\n        return false;\n      });\n  }\n});\n\nconst paragraphNodeValidator = yup.object().shape({\n  type: yup.string().equals(['paragraph']).required(),\n  children: yup\n    .array()\n    .of(inlineNodeValidator)\n    .min(1, 'Paragraph node children must have at least one Text or Link node')\n    .required(),\n});\n\nconst headingNodeValidator = yup.object().shape({\n  type: yup.string().equals(['heading']).required(),\n  level: yup.number().oneOf([1, 2, 3, 4, 5, 6]).required(),\n  children: yup\n    .array()\n    .of(inlineNodeValidator)\n    .min(1, 'Heading node children must have at least one Text or Link node')\n    .required(),\n});\n\nconst quoteNodeValidator = yup.object().shape({\n  type: yup.string().equals(['quote']).required(),\n  children: yup\n    .array()\n    .of(inlineNodeValidator)\n    .min(1, 'Quote node children must have at least one Text or Link node')\n    .required(),\n});\n\nconst codeBlockValidator = yup.object().shape({\n  type: yup.string().equals(['code']).required(),\n  syntax: yup.string().nullable(),\n  children: yup\n    .array()\n    .of(textNodeValidator)\n    .min(1, 'Quote node children must have at least one Text or Link node')\n    .required(),\n});\n\nconst listItemNode = yup.object().shape({\n  type: yup.string().equals(['list-item']).required(),\n  children: yup.array().of(inlineNodeValidator).required(),\n});\n\n// Allow children to be either a listItemNode or a listNode itself\n// @ts-expect-error - listChildrenValidator needs a type\nconst listChildrenValidator = yup.lazy((value: { type: string }) => {\n  switch (value.type) {\n    case 'list':\n      return listNodeValidator;\n    case 'list-item':\n      return listItemNode;\n    default:\n      return yup.mixed().test('invalid-type', 'Inline node must be list-item or list', () => {\n        return false;\n      });\n  }\n});\n\n// @ts-expect-error - listNodeValidator needs a type\nconst listNodeValidator = yup.object().shape({\n  type: yup.string().equals(['list']).required(),\n  format: yup.string().equals(['ordered', 'unordered']).required(),\n  children: yup\n    .array()\n    .of(listChildrenValidator)\n    .min(1, 'List node children must have at least one ListItem or ListNode')\n    .required(),\n});\n\nconst imageNodeValidator = yup.object().shape({\n  type: yup.string().equals(['image']).required(),\n  image: yup.object().shape({\n    name: yup.string().required(),\n    alternativeText: yup.string().nullable(),\n    url: yup.string().required(),\n    caption: yup.string().nullable(),\n    width: yup.number().required(),\n    height: yup.number().required(),\n    formats: yup.object().required(),\n    hash: yup.string().required(),\n    ext: yup.string().required(),\n    mime: yup.string().required(),\n    size: yup.number().required(),\n    previewUrl: yup.string().nullable(),\n    provider: yup.string().required(),\n    provider_metadata: yup.mixed().nullable(),\n    createdAt: yup.string().required(),\n    updatedAt: yup.string().required(),\n  }),\n  children: yup.array().of(inlineNodeValidator).required(),\n});\n\n// TODO: remove the any and replace with a correct Type\nconst blockNodeValidator: any = yup.lazy((value: { type: string }) => {\n  switch (value.type) {\n    case 'paragraph':\n      return paragraphNodeValidator;\n    case 'heading':\n      return headingNodeValidator;\n    case 'quote':\n      return quoteNodeValidator;\n    case 'list':\n      return listNodeValidator;\n    case 'image':\n      return imageNodeValidator;\n    case 'code':\n      return codeBlockValidator;\n    default:\n      return yup.mixed().test('invalid-type', 'Block node is of invalid type', () => {\n        return false;\n      });\n  }\n});\n\nconst blocksValidatorSchema = yup.array().of(blockNodeValidator);\n\nexport const blocksValidator = () => blocksValidatorSchema;\n"],"names":["textNodeValidator","yup","object","shape","type","string","equals","required","text","test","bold","boolean","italic","underline","strikethrough","code","checkValidLink","link","URL","startsWith","error","linkNodeValidator","url","value","children","array","of","inlineNodeValidator","lazy","mixed","paragraphNodeValidator","min","headingNodeValidator","level","number","oneOf","quoteNodeValidator","codeBlockValidator","syntax","nullable","listItemNode","listChildrenValidator","listNodeValidator","format","imageNodeValidator","image","name","alternativeText","caption","width","height","formats","hash","ext","mime","size","previewUrl","provider","provider_metadata","createdAt","updatedAt","blockNodeValidator","blocksValidatorSchema","blocksValidator"],"mappings":";;;;AAEA,MAAMA,iBAAoBC,GAAAA,eAAAA,CAAIC,MAAM,EAAA,CAAGC,KAAK,CAAC;AAC3CC,IAAAA,IAAAA,EAAMH,eAAII,CAAAA,MAAM,EAAGC,CAAAA,MAAM,CAAC;AAAC,QAAA;AAAO,KAAA,CAAA,CAAEC,QAAQ,EAAA;AAC5CC,IAAAA,IAAAA,EAAMP,gBACHI,MAAM,EAAA,CACNI,IAAI,CACH,eAAA,EACA,sDACA,CAACD,IAAAA,GAAAA;QACC,OAAO,OAAOA,IAAS,KAAA,QAAA,IAAYA,IAAS,KAAA,EAAA;AAC9C,KAAA,CAAA;AAEJE,IAAAA,IAAAA,EAAMT,gBAAIU,OAAO,EAAA;AACjBC,IAAAA,MAAAA,EAAQX,gBAAIU,OAAO,EAAA;AACnBE,IAAAA,SAAAA,EAAWZ,gBAAIU,OAAO,EAAA;AACtBG,IAAAA,aAAAA,EAAeb,gBAAIU,OAAO,EAAA;AAC1BI,IAAAA,IAAAA,EAAMd,gBAAIU,OAAO;AACnB,CAAA,CAAA;AAEA,MAAMK,iBAAiB,CAACC,IAAAA,GAAAA;IACtB,IAAI;;QAEF,IAAIC,GAAAA,CAAID,IAAKE,CAAAA,UAAU,CAAC,GAAA,CAAA,GAAO,CAAC,iBAAiB,EAAEF,IAAK,CAAA,CAAC,GAAGA,IAAAA,CAAAA;AAC9D,KAAA,CAAE,OAAOG,KAAO,EAAA;QACd,OAAO,KAAA;AACT;IACA,OAAO,IAAA;AACT,CAAA;AAEA,MAAMC,iBAAoBpB,GAAAA,eAAAA,CAAIC,MAAM,EAAA,CAAGC,KAAK,CAAC;AAC3CC,IAAAA,IAAAA,EAAMH,eAAII,CAAAA,MAAM,EAAGC,CAAAA,MAAM,CAAC;AAAC,QAAA;AAAO,KAAA,CAAA,CAAEC,QAAQ,EAAA;IAC5Ce,GAAKrB,EAAAA,eAAAA,CACFI,MAAM,EAAA,CACNI,IAAI,CAAC,eAAe,8BAAgC,EAAA,CAACc,KAAUP,GAAAA,cAAAA,CAAeO,KAAS,IAAA,EAAA,CAAA,CAAA;AAC1FC,IAAAA,QAAAA,EAAUvB,gBAAIwB,KAAK,EAAA,CAAGC,EAAE,CAAC1B,mBAAmBO,QAAQ;AACtD,CAAA,CAAA;AAEA;AACA,MAAMoB,mBAA2B1B,GAAAA,eAAAA,CAAI2B,IAAI,CAAC,CAACL,KAAAA,GAAAA;AACzC,IAAA,OAAQA,MAAMnB,IAAI;QAChB,KAAK,MAAA;YACH,OAAOJ,iBAAAA;QACT,KAAK,MAAA;YACH,OAAOqB,iBAAAA;AACT,QAAA;AACE,YAAA,OAAOpB,gBAAI4B,KAAK,EAAA,CAAGpB,IAAI,CAAC,gBAAgB,kCAAoC,EAAA,IAAA;gBAC1E,OAAO,KAAA;AACT,aAAA,CAAA;AACJ;AACF,CAAA,CAAA;AAEA,MAAMqB,sBAAyB7B,GAAAA,eAAAA,CAAIC,MAAM,EAAA,CAAGC,KAAK,CAAC;AAChDC,IAAAA,IAAAA,EAAMH,eAAII,CAAAA,MAAM,EAAGC,CAAAA,MAAM,CAAC;AAAC,QAAA;AAAY,KAAA,CAAA,CAAEC,QAAQ,EAAA;IACjDiB,QAAUvB,EAAAA,eAAAA,CACPwB,KAAK,EAAA,CACLC,EAAE,CAACC,qBACHI,GAAG,CAAC,CAAG,EAAA,kEAAA,CAAA,CACPxB,QAAQ;AACb,CAAA,CAAA;AAEA,MAAMyB,oBAAuB/B,GAAAA,eAAAA,CAAIC,MAAM,EAAA,CAAGC,KAAK,CAAC;AAC9CC,IAAAA,IAAAA,EAAMH,eAAII,CAAAA,MAAM,EAAGC,CAAAA,MAAM,CAAC;AAAC,QAAA;AAAU,KAAA,CAAA,CAAEC,QAAQ,EAAA;AAC/C0B,IAAAA,KAAAA,EAAOhC,eAAIiC,CAAAA,MAAM,EAAGC,CAAAA,KAAK,CAAC;AAAC,QAAA,CAAA;AAAG,QAAA,CAAA;AAAG,QAAA,CAAA;AAAG,QAAA,CAAA;AAAG,QAAA,CAAA;AAAG,QAAA;AAAE,KAAA,CAAA,CAAE5B,QAAQ,EAAA;IACtDiB,QAAUvB,EAAAA,eAAAA,CACPwB,KAAK,EAAA,CACLC,EAAE,CAACC,qBACHI,GAAG,CAAC,CAAG,EAAA,gEAAA,CAAA,CACPxB,QAAQ;AACb,CAAA,CAAA;AAEA,MAAM6B,kBAAqBnC,GAAAA,eAAAA,CAAIC,MAAM,EAAA,CAAGC,KAAK,CAAC;AAC5CC,IAAAA,IAAAA,EAAMH,eAAII,CAAAA,MAAM,EAAGC,CAAAA,MAAM,CAAC;AAAC,QAAA;AAAQ,KAAA,CAAA,CAAEC,QAAQ,EAAA;IAC7CiB,QAAUvB,EAAAA,eAAAA,CACPwB,KAAK,EAAA,CACLC,EAAE,CAACC,qBACHI,GAAG,CAAC,CAAG,EAAA,8DAAA,CAAA,CACPxB,QAAQ;AACb,CAAA,CAAA;AAEA,MAAM8B,kBAAqBpC,GAAAA,eAAAA,CAAIC,MAAM,EAAA,CAAGC,KAAK,CAAC;AAC5CC,IAAAA,IAAAA,EAAMH,eAAII,CAAAA,MAAM,EAAGC,CAAAA,MAAM,CAAC;AAAC,QAAA;AAAO,KAAA,CAAA,CAAEC,QAAQ,EAAA;IAC5C+B,MAAQrC,EAAAA,eAAAA,CAAII,MAAM,EAAA,CAAGkC,QAAQ,EAAA;IAC7Bf,QAAUvB,EAAAA,eAAAA,CACPwB,KAAK,EAAA,CACLC,EAAE,CAAC1B,mBACH+B,GAAG,CAAC,CAAG,EAAA,8DAAA,CAAA,CACPxB,QAAQ;AACb,CAAA,CAAA;AAEA,MAAMiC,YAAevC,GAAAA,eAAAA,CAAIC,MAAM,EAAA,CAAGC,KAAK,CAAC;AACtCC,IAAAA,IAAAA,EAAMH,eAAII,CAAAA,MAAM,EAAGC,CAAAA,MAAM,CAAC;AAAC,QAAA;AAAY,KAAA,CAAA,CAAEC,QAAQ,EAAA;AACjDiB,IAAAA,QAAAA,EAAUvB,gBAAIwB,KAAK,EAAA,CAAGC,EAAE,CAACC,qBAAqBpB,QAAQ;AACxD,CAAA,CAAA;AAEA;AACA;AACA,MAAMkC,qBAAwBxC,GAAAA,eAAAA,CAAI2B,IAAI,CAAC,CAACL,KAAAA,GAAAA;AACtC,IAAA,OAAQA,MAAMnB,IAAI;QAChB,KAAK,MAAA;YACH,OAAOsC,iBAAAA;QACT,KAAK,WAAA;YACH,OAAOF,YAAAA;AACT,QAAA;AACE,YAAA,OAAOvC,gBAAI4B,KAAK,EAAA,CAAGpB,IAAI,CAAC,gBAAgB,uCAAyC,EAAA,IAAA;gBAC/E,OAAO,KAAA;AACT,aAAA,CAAA;AACJ;AACF,CAAA,CAAA;AAEA;AACA,MAAMiC,iBAAoBzC,GAAAA,eAAAA,CAAIC,MAAM,EAAA,CAAGC,KAAK,CAAC;AAC3CC,IAAAA,IAAAA,EAAMH,eAAII,CAAAA,MAAM,EAAGC,CAAAA,MAAM,CAAC;AAAC,QAAA;AAAO,KAAA,CAAA,CAAEC,QAAQ,EAAA;AAC5CoC,IAAAA,MAAAA,EAAQ1C,eAAII,CAAAA,MAAM,EAAGC,CAAAA,MAAM,CAAC;AAAC,QAAA,SAAA;AAAW,QAAA;AAAY,KAAA,CAAA,CAAEC,QAAQ,EAAA;IAC9DiB,QAAUvB,EAAAA,eAAAA,CACPwB,KAAK,EAAA,CACLC,EAAE,CAACe,uBACHV,GAAG,CAAC,CAAG,EAAA,gEAAA,CAAA,CACPxB,QAAQ;AACb,CAAA,CAAA;AAEA,MAAMqC,kBAAqB3C,GAAAA,eAAAA,CAAIC,MAAM,EAAA,CAAGC,KAAK,CAAC;AAC5CC,IAAAA,IAAAA,EAAMH,eAAII,CAAAA,MAAM,EAAGC,CAAAA,MAAM,CAAC;AAAC,QAAA;AAAQ,KAAA,CAAA,CAAEC,QAAQ,EAAA;AAC7CsC,IAAAA,KAAAA,EAAO5C,eAAIC,CAAAA,MAAM,EAAGC,CAAAA,KAAK,CAAC;QACxB2C,IAAM7C,EAAAA,eAAAA,CAAII,MAAM,EAAA,CAAGE,QAAQ,EAAA;QAC3BwC,eAAiB9C,EAAAA,eAAAA,CAAII,MAAM,EAAA,CAAGkC,QAAQ,EAAA;QACtCjB,GAAKrB,EAAAA,eAAAA,CAAII,MAAM,EAAA,CAAGE,QAAQ,EAAA;QAC1ByC,OAAS/C,EAAAA,eAAAA,CAAII,MAAM,EAAA,CAAGkC,QAAQ,EAAA;QAC9BU,KAAOhD,EAAAA,eAAAA,CAAIiC,MAAM,EAAA,CAAG3B,QAAQ,EAAA;QAC5B2C,MAAQjD,EAAAA,eAAAA,CAAIiC,MAAM,EAAA,CAAG3B,QAAQ,EAAA;QAC7B4C,OAASlD,EAAAA,eAAAA,CAAIC,MAAM,EAAA,CAAGK,QAAQ,EAAA;QAC9B6C,IAAMnD,EAAAA,eAAAA,CAAII,MAAM,EAAA,CAAGE,QAAQ,EAAA;QAC3B8C,GAAKpD,EAAAA,eAAAA,CAAII,MAAM,EAAA,CAAGE,QAAQ,EAAA;QAC1B+C,IAAMrD,EAAAA,eAAAA,CAAII,MAAM,EAAA,CAAGE,QAAQ,EAAA;QAC3BgD,IAAMtD,EAAAA,eAAAA,CAAIiC,MAAM,EAAA,CAAG3B,QAAQ,EAAA;QAC3BiD,UAAYvD,EAAAA,eAAAA,CAAII,MAAM,EAAA,CAAGkC,QAAQ,EAAA;QACjCkB,QAAUxD,EAAAA,eAAAA,CAAII,MAAM,EAAA,CAAGE,QAAQ,EAAA;QAC/BmD,iBAAmBzD,EAAAA,eAAAA,CAAI4B,KAAK,EAAA,CAAGU,QAAQ,EAAA;QACvCoB,SAAW1D,EAAAA,eAAAA,CAAII,MAAM,EAAA,CAAGE,QAAQ,EAAA;QAChCqD,SAAW3D,EAAAA,eAAAA,CAAII,MAAM,EAAA,CAAGE,QAAQ;AAClC,KAAA,CAAA;AACAiB,IAAAA,QAAAA,EAAUvB,gBAAIwB,KAAK,EAAA,CAAGC,EAAE,CAACC,qBAAqBpB,QAAQ;AACxD,CAAA,CAAA;AAEA;AACA,MAAMsD,kBAA0B5D,GAAAA,eAAAA,CAAI2B,IAAI,CAAC,CAACL,KAAAA,GAAAA;AACxC,IAAA,OAAQA,MAAMnB,IAAI;QAChB,KAAK,WAAA;YACH,OAAO0B,sBAAAA;QACT,KAAK,SAAA;YACH,OAAOE,oBAAAA;QACT,KAAK,OAAA;YACH,OAAOI,kBAAAA;QACT,KAAK,MAAA;YACH,OAAOM,iBAAAA;QACT,KAAK,OAAA;YACH,OAAOE,kBAAAA;QACT,KAAK,MAAA;YACH,OAAOP,kBAAAA;AACT,QAAA;AACE,YAAA,OAAOpC,gBAAI4B,KAAK,EAAA,CAAGpB,IAAI,CAAC,gBAAgB,+BAAiC,EAAA,IAAA;gBACvE,OAAO,KAAA;AACT,aAAA,CAAA;AACJ;AACF,CAAA,CAAA;AAEA,MAAMqD,qBAAwB7D,GAAAA,eAAAA,CAAIwB,KAAK,EAAA,CAAGC,EAAE,CAACmC,kBAAAA,CAAAA;AAEtC,MAAME,eAAkB,GAAA,IAAMD;;;;"}