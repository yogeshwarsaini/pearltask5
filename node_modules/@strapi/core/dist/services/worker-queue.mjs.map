{"version":3,"file":"worker-queue.mjs","sources":["../../src/services/worker-queue.ts"],"sourcesContent":["/**\n * Simple worker queue in memory\n */\nimport createDebugger from 'debug';\nimport type { Logger } from '@strapi/logger';\nimport type { Utils } from '@strapi/types';\n\nconst debug = createDebugger('strapi:worker-queue');\n\ninterface ConstructorParameters {\n  logger: Logger;\n  concurrency?: number;\n}\n\ntype Worker<TPayload, TReturn> = (payload: TPayload) => Promise<TReturn> | TReturn;\n\nconst noop: Utils.Function.Any = () => {};\n\nexport default class WorkerQueue<TPayload, TReturn> {\n  logger: Logger;\n\n  worker: Worker<TPayload, TReturn>;\n\n  concurrency: number;\n\n  running: number;\n\n  queue: TPayload[];\n\n  constructor({ logger, concurrency = 5 }: ConstructorParameters) {\n    debug('Initialize worker queue');\n\n    this.logger = logger;\n    this.worker = noop;\n\n    this.concurrency = concurrency;\n    this.running = 0;\n    this.queue = [];\n  }\n\n  subscribe(worker: Worker<TPayload, TReturn>) {\n    debug('Subscribe to worker queue');\n    this.worker = worker;\n  }\n\n  enqueue(payload: TPayload) {\n    debug('Enqueue event in worker queue');\n    if (this.running < this.concurrency) {\n      this.running += 1;\n      this.execute(payload);\n    } else {\n      this.queue.unshift(payload);\n    }\n  }\n\n  pop() {\n    debug('Pop worker queue and execute');\n    const payload = this.queue.pop();\n\n    if (payload) {\n      this.execute(payload);\n    } else {\n      this.running -= 1;\n    }\n  }\n\n  async execute(payload: TPayload) {\n    debug('Execute worker');\n    try {\n      await this.worker(payload);\n    } catch (error) {\n      this.logger.error(error);\n    } finally {\n      this.pop();\n    }\n  }\n}\n"],"names":["debug","createDebugger","noop","WorkerQueue","subscribe","worker","enqueue","payload","running","concurrency","execute","queue","unshift","pop","error","logger","constructor"],"mappings":";;AAOA,MAAMA,QAAQC,cAAe,CAAA,qBAAA,CAAA;AAS7B,MAAMC,OAA2B,IAAO,EAAA;AAEzB,MAAMC,WAAAA,CAAAA;AAsBnBC,IAAAA,SAAAA,CAAUC,MAAiC,EAAE;QAC3CL,KAAM,CAAA,2BAAA,CAAA;QACN,IAAI,CAACK,MAAM,GAAGA,MAAAA;AAChB;AAEAC,IAAAA,OAAAA,CAAQC,OAAiB,EAAE;QACzBP,KAAM,CAAA,+BAAA,CAAA;AACN,QAAA,IAAI,IAAI,CAACQ,OAAO,GAAG,IAAI,CAACC,WAAW,EAAE;YACnC,IAAI,CAACD,OAAO,IAAI,CAAA;YAChB,IAAI,CAACE,OAAO,CAACH,OAAAA,CAAAA;SACR,MAAA;AACL,YAAA,IAAI,CAACI,KAAK,CAACC,OAAO,CAACL,OAAAA,CAAAA;AACrB;AACF;IAEAM,GAAM,GAAA;QACJb,KAAM,CAAA,8BAAA,CAAA;AACN,QAAA,MAAMO,OAAU,GAAA,IAAI,CAACI,KAAK,CAACE,GAAG,EAAA;AAE9B,QAAA,IAAIN,OAAS,EAAA;YACX,IAAI,CAACG,OAAO,CAACH,OAAAA,CAAAA;SACR,MAAA;YACL,IAAI,CAACC,OAAO,IAAI,CAAA;AAClB;AACF;IAEA,MAAME,OAAAA,CAAQH,OAAiB,EAAE;QAC/BP,KAAM,CAAA,gBAAA,CAAA;QACN,IAAI;YACF,MAAM,IAAI,CAACK,MAAM,CAACE,OAAAA,CAAAA;AACpB,SAAA,CAAE,OAAOO,KAAO,EAAA;AACd,YAAA,IAAI,CAACC,MAAM,CAACD,KAAK,CAACA,KAAAA,CAAAA;SACV,QAAA;AACR,YAAA,IAAI,CAACD,GAAG,EAAA;AACV;AACF;AA9CAG,IAAAA,WAAAA,CAAY,EAAED,MAAM,EAAEN,WAAc,GAAA,CAAC,EAAyB,CAAE;QAC9DT,KAAM,CAAA,yBAAA,CAAA;QAEN,IAAI,CAACe,MAAM,GAAGA,MAAAA;QACd,IAAI,CAACV,MAAM,GAAGH,IAAAA;QAEd,IAAI,CAACO,WAAW,GAAGA,WAAAA;QACnB,IAAI,CAACD,OAAO,GAAG,CAAA;QACf,IAAI,CAACG,KAAK,GAAG,EAAE;AACjB;AAsCF;;;;"}