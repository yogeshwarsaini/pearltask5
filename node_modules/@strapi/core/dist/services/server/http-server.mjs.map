{"version":3,"file":"http-server.mjs","sources":["../../../src/services/server/http-server.ts"],"sourcesContent":["import http from 'http';\nimport type { Socket } from 'net';\nimport Koa from 'koa';\nimport type { Core } from '@strapi/types';\n\nexport interface Server extends http.Server {\n  destroy: () => Promise<void>;\n}\n\nconst createHTTPServer = (strapi: Core.Strapi, koaApp: Koa): Server => {\n  const connections = new Set<Socket>();\n\n  // lazy creation of the request listener\n  let handler: http.RequestListener;\n  const listener: http.RequestListener = function handleRequest(req, res) {\n    if (!handler) {\n      handler = koaApp.callback();\n    }\n\n    return handler(req, res);\n  };\n\n  const options = strapi.config.get<http.ServerOptions>('server.http.serverOptions', {});\n\n  const server: http.Server = http.createServer(options, listener);\n\n  server.on('connection', (connection) => {\n    connections.add(connection);\n\n    connection.on('close', () => {\n      connections.delete(connection);\n    });\n  });\n\n  // handle port in use cleanly\n  server.on('error', (err) => {\n    if ('code' in err && 'port' in err && err.code === 'EADDRINUSE') {\n      return strapi.stopWithError(`The port ${err.port} is already used by another application.`);\n    }\n\n    strapi.log.error(err);\n  });\n\n  const destroy = async () => {\n    for (const connection of connections) {\n      connection.destroy();\n\n      connections.delete(connection);\n    }\n\n    if (!server.listening) {\n      return;\n    }\n\n    return new Promise<void>((resolve, reject) => {\n      server.close((error) => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve();\n        }\n      });\n    });\n  };\n\n  return Object.assign(server, { destroy });\n};\n\nexport { createHTTPServer };\n"],"names":["createHTTPServer","strapi","koaApp","connections","Set","handler","listener","handleRequest","req","res","callback","options","config","get","server","http","createServer","on","connection","add","delete","err","code","stopWithError","port","log","error","destroy","listening","Promise","resolve","reject","close","Object","assign"],"mappings":";;AASMA,MAAAA,gBAAAA,GAAmB,CAACC,MAAqBC,EAAAA,MAAAA,GAAAA;AAC7C,IAAA,MAAMC,cAAc,IAAIC,GAAAA,EAAAA;;IAGxB,IAAIC,OAAAA;AACJ,IAAA,MAAMC,QAAiC,GAAA,SAASC,aAAcC,CAAAA,GAAG,EAAEC,GAAG,EAAA;AACpE,QAAA,IAAI,CAACJ,OAAS,EAAA;AACZA,YAAAA,OAAAA,GAAUH,OAAOQ,QAAQ,EAAA;AAC3B;AAEA,QAAA,OAAOL,QAAQG,GAAKC,EAAAA,GAAAA,CAAAA;AACtB,KAAA;AAEA,IAAA,MAAME,UAAUV,MAAOW,CAAAA,MAAM,CAACC,GAAG,CAAqB,6BAA6B,EAAC,CAAA;AAEpF,IAAA,MAAMC,MAAsBC,GAAAA,IAAAA,CAAKC,YAAY,CAACL,OAASL,EAAAA,QAAAA,CAAAA;IAEvDQ,MAAOG,CAAAA,EAAE,CAAC,YAAA,EAAc,CAACC,UAAAA,GAAAA;AACvBf,QAAAA,WAAAA,CAAYgB,GAAG,CAACD,UAAAA,CAAAA;QAEhBA,UAAWD,CAAAA,EAAE,CAAC,OAAS,EAAA,IAAA;AACrBd,YAAAA,WAAAA,CAAYiB,MAAM,CAACF,UAAAA,CAAAA;AACrB,SAAA,CAAA;AACF,KAAA,CAAA;;IAGAJ,MAAOG,CAAAA,EAAE,CAAC,OAAA,EAAS,CAACI,GAAAA,GAAAA;AAClB,QAAA,IAAI,UAAUA,GAAO,IAAA,MAAA,IAAUA,OAAOA,GAAIC,CAAAA,IAAI,KAAK,YAAc,EAAA;YAC/D,OAAOrB,MAAAA,CAAOsB,aAAa,CAAC,CAAC,SAAS,EAAEF,GAAIG,CAAAA,IAAI,CAAC,wCAAwC,CAAC,CAAA;AAC5F;QAEAvB,MAAOwB,CAAAA,GAAG,CAACC,KAAK,CAACL,GAAAA,CAAAA;AACnB,KAAA,CAAA;AAEA,IAAA,MAAMM,OAAU,GAAA,UAAA;QACd,KAAK,MAAMT,cAAcf,WAAa,CAAA;AACpCe,YAAAA,UAAAA,CAAWS,OAAO,EAAA;AAElBxB,YAAAA,WAAAA,CAAYiB,MAAM,CAACF,UAAAA,CAAAA;AACrB;QAEA,IAAI,CAACJ,MAAOc,CAAAA,SAAS,EAAE;AACrB,YAAA;AACF;QAEA,OAAO,IAAIC,OAAc,CAAA,CAACC,OAASC,EAAAA,MAAAA,GAAAA;YACjCjB,MAAOkB,CAAAA,KAAK,CAAC,CAACN,KAAAA,GAAAA;AACZ,gBAAA,IAAIA,KAAO,EAAA;oBACTK,MAAOL,CAAAA,KAAAA,CAAAA;iBACF,MAAA;AACLI,oBAAAA,OAAAA,EAAAA;AACF;AACF,aAAA,CAAA;AACF,SAAA,CAAA;AACF,KAAA;IAEA,OAAOG,MAAAA,CAAOC,MAAM,CAACpB,MAAQ,EAAA;AAAEa,QAAAA;AAAQ,KAAA,CAAA;AACzC;;;;"}