{"version":3,"file":"config.mjs","sources":["../../src/services/config.ts"],"sourcesContent":["import type { Core } from '@strapi/types';\nimport { get, set, has, isString, isNumber, isArray, type PropertyPath } from 'lodash';\n\ntype State = {\n  config: Config;\n};\n\ntype Config = Record<string, unknown>;\n\nexport const createConfigProvider = (\n  initialConfig: Record<string, unknown> = {},\n  strapi?: Core.Strapi\n): Core.ConfigProvider => {\n  const state: State = {\n    config: { ...initialConfig }, // not deep clone because it would break some config\n  };\n\n  // Accessing model configs with dot (.) was deprecated between v4->v5, but to avoid a major breaking change\n  // we will still support certain namespaces, currently only 'plugin.'\n  const transformPathString = (path: string) => {\n    if (path.startsWith('plugin.')) {\n      const newPath = path.replace('plugin.', 'plugin::');\n\n      // strapi logger may not be loaded yet, so fall back to console\n      (strapi?.log?.warn ?? console.warn)(\n        `Using dot notation for model config namespaces is deprecated, for example \"plugin::myplugin\" should be used instead of \"plugin.myplugin\". Modifying requested path ${path} to ${newPath}`\n      );\n      return newPath;\n    }\n\n    return path;\n  };\n\n  const transformDeprecatedPaths = (path: PropertyPath): PropertyPath => {\n    if (isString(path)) {\n      return transformPathString(path);\n    }\n    if (isArray(path)) {\n      // if the path is not joinable, we won't apply our deprecation support\n      if (path.some((part) => !(isString(part) || isNumber(part)))) {\n        return path;\n      }\n\n      return transformPathString(path.join('.'));\n    }\n\n    return path;\n  };\n\n  return {\n    ...state.config, // TODO: to remove\n    get(path: PropertyPath, defaultValue?: unknown) {\n      return get(state.config, transformDeprecatedPaths(path), defaultValue);\n    },\n    set(path: PropertyPath, val: unknown) {\n      set(state.config, transformDeprecatedPaths(path), val);\n      return this;\n    },\n    has(path: PropertyPath) {\n      return has(state.config, transformDeprecatedPaths(path));\n    },\n  };\n};\n"],"names":["createConfigProvider","initialConfig","strapi","state","config","transformPathString","path","startsWith","newPath","replace","log","warn","console","transformDeprecatedPaths","isString","isArray","some","part","isNumber","join","get","defaultValue","set","val","has"],"mappings":";;MASaA,oBAAuB,GAAA,CAClCC,aAAyC,GAAA,EAAE,EAC3CC,MAAAA,GAAAA;AAEA,IAAA,MAAMC,KAAe,GAAA;QACnBC,MAAQ,EAAA;AAAE,YAAA,GAAGH;AAAc;AAC7B,KAAA;;;AAIA,IAAA,MAAMI,sBAAsB,CAACC,IAAAA,GAAAA;QAC3B,IAAIA,IAAAA,CAAKC,UAAU,CAAC,SAAY,CAAA,EAAA;AAC9B,YAAA,MAAMC,OAAUF,GAAAA,IAAAA,CAAKG,OAAO,CAAC,SAAW,EAAA,UAAA,CAAA;;AAGvCP,YAAAA,CAAAA,MAAQQ,EAAAA,GAAAA,EAAKC,IAAQC,IAAAA,OAAAA,CAAQD,IAAI,EAChC,CAAC,mKAAmK,EAAEL,IAAAA,CAAK,IAAI,EAAEE,QAAQ,CAAC,CAAA;YAE5L,OAAOA,OAAAA;AACT;QAEA,OAAOF,IAAAA;AACT,KAAA;AAEA,IAAA,MAAMO,2BAA2B,CAACP,IAAAA,GAAAA;AAChC,QAAA,IAAIQ,SAASR,IAAO,CAAA,EAAA;AAClB,YAAA,OAAOD,mBAAoBC,CAAAA,IAAAA,CAAAA;AAC7B;AACA,QAAA,IAAIS,QAAQT,IAAO,CAAA,EAAA;;YAEjB,IAAIA,IAAAA,CAAKU,IAAI,CAAC,CAACC,IAAAA,GAAS,EAAEH,QAASG,CAAAA,IAAAA,CAAAA,IAASC,QAASD,CAAAA,IAAAA,CAAI,CAAK,CAAA,EAAA;gBAC5D,OAAOX,IAAAA;AACT;YAEA,OAAOD,mBAAAA,CAAoBC,IAAKa,CAAAA,IAAI,CAAC,GAAA,CAAA,CAAA;AACvC;QAEA,OAAOb,IAAAA;AACT,KAAA;IAEA,OAAO;AACL,QAAA,GAAGH,MAAMC,MAAM;QACfgB,GAAId,CAAAA,CAAAA,IAAkB,EAAEe,YAAsB,EAAA;AAC5C,YAAA,OAAOD,GAAIjB,CAAAA,KAAAA,CAAMC,MAAM,EAAES,yBAAyBP,IAAOe,CAAAA,EAAAA,YAAAA,CAAAA;AAC3D,SAAA;QACAC,GAAIhB,CAAAA,CAAAA,IAAkB,EAAEiB,GAAY,EAAA;AAClCD,YAAAA,GAAAA,CAAInB,KAAMC,CAAAA,MAAM,EAAES,wBAAAA,CAAyBP,IAAOiB,CAAAA,EAAAA,GAAAA,CAAAA;AAClD,YAAA,OAAO,IAAI;AACb,SAAA;AACAC,QAAAA,GAAAA,CAAAA,CAAIlB,IAAkB,EAAA;AACpB,YAAA,OAAOkB,GAAIrB,CAAAA,KAAAA,CAAMC,MAAM,EAAES,wBAAyBP,CAAAA,IAAAA,CAAAA,CAAAA;AACpD;AACF,KAAA;AACF;;;;"}