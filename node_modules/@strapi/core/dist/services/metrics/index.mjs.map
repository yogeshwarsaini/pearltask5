{"version":3,"file":"index.mjs","sources":["../../../src/services/metrics/index.ts"],"sourcesContent":["/**\n * Strapi telemetry package.\n * You can learn more at https://docs.strapi.io/developer-docs/latest/getting-started/usage-information.html\n */\n\nimport { Job, scheduleJob } from 'node-schedule';\nimport type { Core } from '@strapi/types';\n\nimport wrapWithRateLimit from './rate-limiter';\nimport createSender from './sender';\nimport createMiddleware from './middleware';\nimport isTruthy from './is-truthy';\n\nconst LIMITED_EVENTS = [\n  'didSaveMediaWithAlternativeText',\n  'didSaveMediaWithCaption',\n  'didDisableResponsiveDimensions',\n  'didEnableResponsiveDimensions',\n  'didInitializePluginUpload',\n];\n\nconst createTelemetryInstance = (strapi: Core.Strapi) => {\n  const uuid = strapi.config.get('uuid');\n  const telemetryDisabled = strapi.config.get('packageJsonStrapi.telemetryDisabled');\n  const isDisabled =\n    !uuid || isTruthy(process.env.STRAPI_TELEMETRY_DISABLED) || isTruthy(telemetryDisabled);\n\n  const crons: Job[] = [];\n  const sender = createSender(strapi);\n  const sendEvent = wrapWithRateLimit(sender, { limitedEvents: LIMITED_EVENTS });\n\n  return {\n    get isDisabled() {\n      return isDisabled;\n    },\n\n    register() {\n      if (!isDisabled) {\n        const pingCron = scheduleJob('0 0 12 * * *', () => sendEvent('ping'));\n        crons.push(pingCron);\n\n        strapi.server.use(createMiddleware({ sendEvent }));\n      }\n    },\n\n    bootstrap() {},\n\n    destroy() {\n      // Clear open handles\n      crons.forEach((cron) => cron.cancel());\n    },\n\n    async send(event: string, payload: Record<string, unknown> = {}) {\n      if (isDisabled) return true;\n      return sendEvent(event, payload);\n    },\n  };\n};\n\nexport default createTelemetryInstance;\n"],"names":["LIMITED_EVENTS","createTelemetryInstance","strapi","uuid","config","get","telemetryDisabled","isDisabled","isTruthy","process","env","STRAPI_TELEMETRY_DISABLED","crons","sender","createSender","sendEvent","wrapWithRateLimit","limitedEvents","register","pingCron","scheduleJob","push","server","use","createMiddleware","bootstrap","destroy","forEach","cron","cancel","send","event","payload"],"mappings":";;;;;;AAaA,MAAMA,cAAiB,GAAA;AACrB,IAAA,iCAAA;AACA,IAAA,yBAAA;AACA,IAAA,gCAAA;AACA,IAAA,+BAAA;AACA,IAAA;AACD,CAAA;AAED,MAAMC,0BAA0B,CAACC,MAAAA,GAAAA;AAC/B,IAAA,MAAMC,IAAOD,GAAAA,MAAAA,CAAOE,MAAM,CAACC,GAAG,CAAC,MAAA,CAAA;AAC/B,IAAA,MAAMC,iBAAoBJ,GAAAA,MAAAA,CAAOE,MAAM,CAACC,GAAG,CAAC,qCAAA,CAAA;IAC5C,MAAME,UAAAA,GACJ,CAACJ,IAAQK,IAAAA,QAAAA,CAASC,QAAQC,GAAG,CAACC,yBAAyB,CAAA,IAAKH,QAASF,CAAAA,iBAAAA,CAAAA;AAEvE,IAAA,MAAMM,QAAe,EAAE;AACvB,IAAA,MAAMC,SAASC,YAAaZ,CAAAA,MAAAA,CAAAA;IAC5B,MAAMa,SAAAA,GAAYC,kBAAkBH,MAAQ,EAAA;QAAEI,aAAejB,EAAAA;AAAe,KAAA,CAAA;IAE5E,OAAO;AACL,QAAA,IAAIO,UAAa,CAAA,GAAA;YACf,OAAOA,UAAAA;AACT,SAAA;AAEAW,QAAAA,QAAAA,CAAAA,GAAAA;AACE,YAAA,IAAI,CAACX,UAAY,EAAA;AACf,gBAAA,MAAMY,QAAWC,GAAAA,WAAAA,CAAY,cAAgB,EAAA,IAAML,SAAU,CAAA,MAAA,CAAA,CAAA;AAC7DH,gBAAAA,KAAAA,CAAMS,IAAI,CAACF,QAAAA,CAAAA;AAEXjB,gBAAAA,MAAAA,CAAOoB,MAAM,CAACC,GAAG,CAACC,gBAAiB,CAAA;AAAET,oBAAAA;AAAU,iBAAA,CAAA,CAAA;AACjD;AACF,SAAA;QAEAU,SAAa,CAAA,GAAA,EAAA;AAEbC,QAAAA,OAAAA,CAAAA,GAAAA;;AAEEd,YAAAA,KAAAA,CAAMe,OAAO,CAAC,CAACC,IAAAA,GAASA,KAAKC,MAAM,EAAA,CAAA;AACrC,SAAA;AAEA,QAAA,MAAMC,IAAKC,CAAAA,CAAAA,KAAa,EAAEC,OAAAA,GAAmC,EAAE,EAAA;AAC7D,YAAA,IAAIzB,YAAY,OAAO,IAAA;AACvB,YAAA,OAAOQ,UAAUgB,KAAOC,EAAAA,OAAAA,CAAAA;AAC1B;AACF,KAAA;AACF;;;;"}