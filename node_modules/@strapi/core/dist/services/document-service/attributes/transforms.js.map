{"version":3,"file":"transforms.js","sources":["../../../../src/services/document-service/attributes/transforms.ts"],"sourcesContent":["import { getOr, toNumber, isString } from 'lodash/fp';\nimport type { Schema } from '@strapi/types';\nimport bcrypt from 'bcryptjs';\n\ntype Transforms = {\n  [TKind in Schema.Attribute.Kind]?: (\n    value: unknown,\n    context: {\n      attribute: Schema.Attribute.AnyAttribute;\n      attributeName: string;\n    }\n  ) => any;\n};\n\nconst transforms: Transforms = {\n  password(value, context) {\n    const { attribute } = context;\n\n    if (attribute.type !== 'password') {\n      throw new Error('Invalid attribute type');\n    }\n\n    if (!isString(value) && !(value instanceof Buffer)) {\n      return value;\n    }\n\n    const rounds = toNumber(getOr(10, 'encryption.rounds', attribute));\n\n    return bcrypt.hashSync(value.toString(), rounds);\n  },\n};\n\nexport default transforms;\n"],"names":["transforms","password","value","context","attribute","type","Error","isString","Buffer","rounds","toNumber","getOr","bcrypt","hashSync","toString"],"mappings":";;;;;AAcA,MAAMA,UAAyB,GAAA;IAC7BC,QAASC,CAAAA,CAAAA,KAAK,EAAEC,OAAO,EAAA;QACrB,MAAM,EAAEC,SAAS,EAAE,GAAGD,OAAAA;QAEtB,IAAIC,SAAAA,CAAUC,IAAI,KAAK,UAAY,EAAA;AACjC,YAAA,MAAM,IAAIC,KAAM,CAAA,wBAAA,CAAA;AAClB;AAEA,QAAA,IAAI,CAACC,WAASL,CAAAA,KAAAA,CAAAA,IAAU,EAAEA,KAAAA,YAAiBM,MAAK,CAAI,EAAA;YAClD,OAAON,KAAAA;AACT;AAEA,QAAA,MAAMO,MAASC,GAAAA,WAAAA,CAASC,QAAM,CAAA,EAAA,EAAI,mBAAqBP,EAAAA,SAAAA,CAAAA,CAAAA;AAEvD,QAAA,OAAOQ,MAAOC,CAAAA,QAAQ,CAACX,KAAAA,CAAMY,QAAQ,EAAIL,EAAAA,MAAAA,CAAAA;AAC3C;AACF;;;;"}