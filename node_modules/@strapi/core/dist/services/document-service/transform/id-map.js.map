{"version":3,"file":"id-map.js","sources":["../../../../src/services/document-service/transform/id-map.ts"],"sourcesContent":["import type { Core, Data, UID } from '@strapi/types';\nimport { async, contentTypes } from '@strapi/utils';\n\nconst hasDraftAndPublish = (uid: UID.CollectionType) => {\n  const model = strapi.getModel(uid);\n  return contentTypes.hasDraftAndPublish(model);\n};\n\n/**\n * TODO: Find a better way to encode keys than this\n * This converts an object into a string by joining its keys and values,\n * so it can be used as a key in a Map.\n *\n * @example\n * const obj = { a: 1, b: 2 };\n * const key = encodeKey(obj);\n *      ^ \"a:::1&&b:::2\"\n */\nconst encodeKey = (obj: any) => {\n  // Ignore status field for models without draft and publish\n  if (!hasDraftAndPublish(obj.uid)) {\n    delete obj.status;\n  }\n\n  // Sort keys to always keep the same order when encoding\n  const keys = Object.keys(obj).sort();\n  return keys.map((key) => `${key}:::${obj[key]}`).join('&&');\n};\n\ninterface KeyFields {\n  uid: string;\n  documentId: Data.ID;\n  locale?: string | null;\n  status?: 'draft' | 'published';\n}\n\nexport interface IdMap {\n  loadedIds: Map<string, string>;\n  toLoadIds: Map<string, KeyFields>;\n  // Make the Keys type to be the params of add\n  add(keys: KeyFields): void;\n  load(): Promise<void>;\n  get(keys: KeyFields): string | undefined;\n  clear(): void;\n}\n\n/**\n * Holds a registry of document ids and their corresponding entity ids.\n */\nconst createIdMap = ({ strapi }: { strapi: Core.Strapi }): IdMap => {\n  const loadedIds = new Map();\n  const toLoadIds = new Map();\n\n  return {\n    loadedIds,\n    toLoadIds,\n    /**\n     * Register a new document id and its corresponding entity id.\n     */\n    add(keyFields: KeyFields) {\n      const key = encodeKey({ status: 'published', locale: null, ...keyFields });\n\n      // If the id is already loaded, do nothing\n      if (loadedIds.has(key)) return;\n      // If the id is already in the toLoadIds, do nothing\n      if (toLoadIds.has(key)) return;\n\n      // Add the id to the toLoadIds\n      toLoadIds.set(key, keyFields);\n    },\n\n    /**\n     * Load all ids from the registry.\n     */\n    async load() {\n      // Document Id to Entry Id queries are batched by its uid and locale\n      // TODO: Add publication state too\n      const loadIdValues = Array.from(toLoadIds.values());\n\n      // 1. Group ids to query together\n      const idsByUidAndLocale = loadIdValues.reduce((acc, { documentId, ...rest }) => {\n        const key = encodeKey(rest);\n        const ids = acc[key] || { ...rest, documentIds: [] };\n        ids.documentIds.push(documentId);\n        return { ...acc, [key]: ids };\n      }, {});\n\n      // 2. Query ids\n      await async.map(\n        Object.values(idsByUidAndLocale),\n        async ({ uid, locale, documentIds, status }: any) => {\n          const findParams = {\n            select: ['id', 'documentId', 'locale', 'publishedAt'],\n            where: {\n              documentId: { $in: documentIds },\n              locale: locale || null,\n            },\n          } as any;\n\n          if (hasDraftAndPublish(uid)) {\n            findParams.where.publishedAt = status === 'draft' ? null : { $ne: null };\n          }\n\n          const result = await strapi?.db?.query(uid).findMany(findParams);\n\n          // 3. Store result in loadedIds\n          result?.forEach(({ documentId, id, locale, publishedAt }: any) => {\n            const key = encodeKey({\n              documentId,\n              uid,\n              locale,\n              status: publishedAt ? 'published' : 'draft',\n            });\n            loadedIds.set(key, id);\n          });\n        }\n      );\n\n      // 4. Clear toLoadIds\n      toLoadIds.clear();\n    },\n\n    /**\n     * Get the entity id for a given document id.\n     */\n    get(keys: KeyFields) {\n      const key = encodeKey({ status: 'published', locale: null, ...keys });\n      return loadedIds.get(key);\n    },\n\n    /**\n     * Clear the registry.\n     */\n    clear() {\n      loadedIds.clear();\n      toLoadIds.clear();\n    },\n  };\n};\n\nexport { createIdMap };\n"],"names":["hasDraftAndPublish","uid","model","strapi","getModel","contentTypes","encodeKey","obj","status","keys","Object","sort","map","key","join","createIdMap","loadedIds","Map","toLoadIds","add","keyFields","locale","has","set","load","loadIdValues","Array","from","values","idsByUidAndLocale","reduce","acc","documentId","rest","ids","documentIds","push","async","findParams","select","where","$in","publishedAt","$ne","result","db","query","findMany","forEach","id","clear","get"],"mappings":"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"}