{"version":3,"file":"fields.mjs","sources":["../../../../src/services/document-service/transform/fields.ts"],"sourcesContent":["import type { Modules, UID } from '@strapi/types';\n\ntype Fields = Modules.Documents.Params.Pick<UID.Schema, 'fields'>['fields'];\n\nexport const transformFields = (fields: Fields): Fields => {\n  // If  it's a string, and it doesn't contain documentId, should be an array\n  if (typeof fields === 'string') {\n    // '*' => '*'\n    if (fields === '*') {\n      return fields;\n    }\n\n    // '' => 'documentId'\n    if (fields === '') {\n      return 'documentId';\n    }\n\n    // 'name,description' => 'name,description,documentId'\n    if (!fields.split(',').includes('documentId')) {\n      return `${fields},documentId`;\n    }\n  }\n\n  // It's not an array, ignore it\n  if (!fields || !Array.isArray(fields)) {\n    // If fields is empty, return it as is\n    return fields;\n  }\n\n  // Ensure we are always selecting the documentId\n  // ['name', 'description'] => ['name', 'description', 'documentId']\n  if (!fields.includes('documentId')) {\n    fields.push('documentId');\n  }\n\n  return fields;\n};\n"],"names":["transformFields","fields","split","includes","Array","isArray","push"],"mappings":"AAIO,MAAMA,kBAAkB,CAACC,MAAAA,GAAAA;;IAE9B,IAAI,OAAOA,WAAW,QAAU,EAAA;;AAE9B,QAAA,IAAIA,WAAW,GAAK,EAAA;YAClB,OAAOA,MAAAA;AACT;;AAGA,QAAA,IAAIA,WAAW,EAAI,EAAA;YACjB,OAAO,YAAA;AACT;;AAGA,QAAA,IAAI,CAACA,MAAOC,CAAAA,KAAK,CAAC,GAAKC,CAAAA,CAAAA,QAAQ,CAAC,YAAe,CAAA,EAAA;AAC7C,YAAA,OAAO,CAAC,EAAEF,MAAO,CAAA,WAAW,CAAC;AAC/B;AACF;;AAGA,IAAA,IAAI,CAACA,MAAU,IAAA,CAACG,KAAMC,CAAAA,OAAO,CAACJ,MAAS,CAAA,EAAA;;QAErC,OAAOA,MAAAA;AACT;;;AAIA,IAAA,IAAI,CAACA,MAAAA,CAAOE,QAAQ,CAAC,YAAe,CAAA,EAAA;AAClCF,QAAAA,MAAAA,CAAOK,IAAI,CAAC,YAAA,CAAA;AACd;IAEA,OAAOL,MAAAA;AACT;;;;"}