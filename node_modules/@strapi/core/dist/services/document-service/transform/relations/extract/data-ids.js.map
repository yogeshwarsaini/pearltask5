{"version":3,"file":"data-ids.js","sources":["../../../../../../src/services/document-service/transform/relations/extract/data-ids.ts"],"sourcesContent":["import { curry } from 'lodash/fp';\n\nimport type { UID } from '@strapi/types';\nimport { relations } from '@strapi/utils';\nimport { IdMap } from '../../id-map';\nimport { getRelationTargetLocale } from '../utils/i18n';\nimport { getRelationTargetStatus } from '../utils/dp';\nimport { mapRelation, traverseEntityRelations } from '../utils/map-relation';\nimport { LongHandDocument } from '../utils/types';\n\nconst { isPolymorphic } = relations;\n\ninterface Options {\n  uid: UID.Schema;\n  locale?: string | null;\n  status?: 'draft' | 'published';\n}\n\n/**\n * Load a relation documentId into the idMap.\n */\nconst addRelationDocId = curry(\n  (idMap: IdMap, source: Options, targetUid: UID.Schema, relation: LongHandDocument) => {\n    const targetLocale = getRelationTargetLocale(relation, {\n      targetUid,\n      sourceUid: source.uid,\n      sourceLocale: source.locale,\n    });\n\n    const targetStatus = getRelationTargetStatus(relation, {\n      targetUid,\n      sourceUid: source.uid,\n      sourceStatus: source.status,\n    });\n\n    targetStatus.forEach((status) => {\n      idMap.add({\n        uid: targetUid,\n        documentId: relation.documentId,\n        locale: targetLocale,\n        status,\n      });\n    });\n  }\n);\n\n/**\n * Iterate over all relations of a data object and extract all relational document ids.\n * Those will later be transformed to entity ids.\n */\nconst extractDataIds = (idMap: IdMap, data: Record<string, any>, source: Options) => {\n  return traverseEntityRelations(\n    async ({ attribute, value }) => {\n      if (!attribute) {\n        return;\n      }\n      const isPolymorphicRelation = isPolymorphic(attribute);\n      const addDocId = addRelationDocId(idMap, source);\n\n      return mapRelation((relation) => {\n        if (!relation || !relation.documentId) {\n          return relation;\n        }\n\n        // Regular relations will always target the same target\n        // if its a polymorphic relation we need to get it from the data itself\n        const targetUid = isPolymorphicRelation ? relation.__type : attribute.target;\n\n        addDocId(targetUid, relation);\n\n        // Handle positional arguments\n        const position = relation.position;\n\n        // The positional relation target uid can be different for polymorphic relations\n        let positionTargetUid = targetUid;\n        if (isPolymorphicRelation && position?.__type) {\n          positionTargetUid = position.__type;\n        }\n\n        if (position?.before) {\n          addDocId(positionTargetUid, { ...relation, ...position, documentId: position.before });\n        }\n\n        if (position?.after) {\n          addDocId(positionTargetUid, { ...relation, ...position, documentId: position.after });\n        }\n\n        return relation;\n      }, value as any);\n    },\n    { schema: strapi.getModel(source.uid), getModel: strapi.getModel.bind(strapi) },\n    data\n  );\n};\n\nexport { extractDataIds };\n"],"names":["isPolymorphic","relations","addRelationDocId","curry","idMap","source","targetUid","relation","targetLocale","getRelationTargetLocale","sourceUid","uid","sourceLocale","locale","targetStatus","getRelationTargetStatus","sourceStatus","status","forEach","add","documentId","extractDataIds","data","traverseEntityRelations","attribute","value","isPolymorphicRelation","addDocId","mapRelation","__type","target","position","positionTargetUid","before","after","schema","strapi","getModel","bind"],"mappings":";;;;;;;;AAUA,MAAM,EAAEA,aAAa,EAAE,GAAGC,qBAAAA;AAQ1B;;AAEC,IACD,MAAMC,gBAAmBC,GAAAA,QAAAA,CACvB,CAACC,KAAAA,EAAcC,QAAiBC,SAAuBC,EAAAA,QAAAA,GAAAA;IACrD,MAAMC,YAAAA,GAAeC,6BAAwBF,QAAU,EAAA;AACrDD,QAAAA,SAAAA;AACAI,QAAAA,SAAAA,EAAWL,OAAOM,GAAG;AACrBC,QAAAA,YAAAA,EAAcP,OAAOQ;AACvB,KAAA,CAAA;IAEA,MAAMC,YAAAA,GAAeC,2BAAwBR,QAAU,EAAA;AACrDD,QAAAA,SAAAA;AACAI,QAAAA,SAAAA,EAAWL,OAAOM,GAAG;AACrBK,QAAAA,YAAAA,EAAcX,OAAOY;AACvB,KAAA,CAAA;IAEAH,YAAaI,CAAAA,OAAO,CAAC,CAACD,MAAAA,GAAAA;AACpBb,QAAAA,KAAAA,CAAMe,GAAG,CAAC;YACRR,GAAKL,EAAAA,SAAAA;AACLc,YAAAA,UAAAA,EAAYb,SAASa,UAAU;YAC/BP,MAAQL,EAAAA,YAAAA;AACRS,YAAAA;AACF,SAAA,CAAA;AACF,KAAA,CAAA;AACF,CAAA,CAAA;AAGF;;;AAGC,IACKI,MAAAA,cAAAA,GAAiB,CAACjB,KAAAA,EAAckB,IAA2BjB,EAAAA,MAAAA,GAAAA;AAC/D,IAAA,OAAOkB,oCACL,OAAO,EAAEC,SAAS,EAAEC,KAAK,EAAE,GAAA;AACzB,QAAA,IAAI,CAACD,SAAW,EAAA;AACd,YAAA;AACF;AACA,QAAA,MAAME,wBAAwB1B,aAAcwB,CAAAA,SAAAA,CAAAA;QAC5C,MAAMG,QAAAA,GAAWzB,iBAAiBE,KAAOC,EAAAA,MAAAA,CAAAA;AAEzC,QAAA,OAAOuB,wBAAY,CAACrB,QAAAA,GAAAA;AAClB,YAAA,IAAI,CAACA,QAAAA,IAAY,CAACA,QAAAA,CAASa,UAAU,EAAE;gBACrC,OAAOb,QAAAA;AACT;;;AAIA,YAAA,MAAMD,YAAYoB,qBAAwBnB,GAAAA,QAAAA,CAASsB,MAAM,GAAGL,UAAUM,MAAM;AAE5EH,YAAAA,QAAAA,CAASrB,SAAWC,EAAAA,QAAAA,CAAAA;;YAGpB,MAAMwB,QAAAA,GAAWxB,SAASwB,QAAQ;;AAGlC,YAAA,IAAIC,iBAAoB1B,GAAAA,SAAAA;YACxB,IAAIoB,qBAAAA,IAAyBK,UAAUF,MAAQ,EAAA;AAC7CG,gBAAAA,iBAAAA,GAAoBD,SAASF,MAAM;AACrC;AAEA,YAAA,IAAIE,UAAUE,MAAQ,EAAA;AACpBN,gBAAAA,QAAAA,CAASK,iBAAmB,EAAA;AAAE,oBAAA,GAAGzB,QAAQ;AAAE,oBAAA,GAAGwB,QAAQ;AAAEX,oBAAAA,UAAAA,EAAYW,SAASE;AAAO,iBAAA,CAAA;AACtF;AAEA,YAAA,IAAIF,UAAUG,KAAO,EAAA;AACnBP,gBAAAA,QAAAA,CAASK,iBAAmB,EAAA;AAAE,oBAAA,GAAGzB,QAAQ;AAAE,oBAAA,GAAGwB,QAAQ;AAAEX,oBAAAA,UAAAA,EAAYW,SAASG;AAAM,iBAAA,CAAA;AACrF;YAEA,OAAO3B,QAAAA;SACNkB,EAAAA,KAAAA,CAAAA;KAEL,EAAA;AAAEU,QAAAA,MAAAA,EAAQC,MAAOC,CAAAA,QAAQ,CAAChC,MAAAA,CAAOM,GAAG,CAAA;AAAG0B,QAAAA,QAAAA,EAAUD,MAAOC,CAAAA,QAAQ,CAACC,IAAI,CAACF,MAAAA;KACtEd,EAAAA,IAAAA,CAAAA;AAEJ;;;;"}