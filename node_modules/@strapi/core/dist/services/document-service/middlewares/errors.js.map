{"version":3,"file":"errors.js","sources":["../../../../src/services/document-service/middlewares/errors.ts"],"sourcesContent":["import { errors as databaseErrors } from '@strapi/database';\nimport { errors } from '@strapi/utils';\n\nimport type { Middleware } from './middleware-manager';\n\nconst databaseErrorsToTransform = [\n  databaseErrors.InvalidTimeError,\n  databaseErrors.InvalidDateTimeError,\n  databaseErrors.InvalidDateError,\n  databaseErrors.InvalidRelationError,\n];\n\n/**\n * Handle database errors\n */\nexport const databaseErrorsMiddleware: Middleware = async (ctx, next) => {\n  try {\n    return await next();\n  } catch (error) {\n    if (databaseErrorsToTransform.some((errorToTransform) => error instanceof errorToTransform)) {\n      if (error instanceof Error) {\n        throw new errors.ValidationError(error.message);\n      }\n\n      throw error;\n    }\n    throw error;\n  }\n};\n"],"names":["databaseErrorsToTransform","databaseErrors","InvalidTimeError","InvalidDateTimeError","InvalidDateError","InvalidRelationError","databaseErrorsMiddleware","ctx","next","error","some","errorToTransform","Error","errors","ValidationError","message"],"mappings":";;;;;AAKA,MAAMA,yBAA4B,GAAA;AAChCC,IAAAA,eAAAA,CAAeC,gBAAgB;AAC/BD,IAAAA,eAAAA,CAAeE,oBAAoB;AACnCF,IAAAA,eAAAA,CAAeG,gBAAgB;AAC/BH,IAAAA,eAAAA,CAAeI;AAChB,CAAA;AAED;;AAEC,IACM,MAAMC,wBAAuC,GAAA,OAAOC,GAAKC,EAAAA,IAAAA,GAAAA;IAC9D,IAAI;AACF,QAAA,OAAO,MAAMA,IAAAA,EAAAA;AACf,KAAA,CAAE,OAAOC,KAAO,EAAA;AACd,QAAA,IAAIT,0BAA0BU,IAAI,CAAC,CAACC,gBAAAA,GAAqBF,iBAAiBE,gBAAmB,CAAA,EAAA;AAC3F,YAAA,IAAIF,iBAAiBG,KAAO,EAAA;AAC1B,gBAAA,MAAM,IAAIC,kBAAAA,CAAOC,eAAe,CAACL,MAAMM,OAAO,CAAA;AAChD;YAEA,MAAMN,KAAAA;AACR;QACA,MAAMA,KAAAA;AACR;AACF;;;;"}