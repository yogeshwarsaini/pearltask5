{"version":3,"file":"repository.js","sources":["../../../src/services/document-service/repository.ts"],"sourcesContent":["import { omit, assoc, merge, curry } from 'lodash/fp';\n\nimport { async, contentTypes as contentTypesUtils, validate, errors } from '@strapi/utils';\n\nimport type { UID } from '@strapi/types';\nimport { wrapInTransaction, type RepositoryFactoryMethod } from './common';\nimport * as DP from './draft-and-publish';\nimport * as i18n from './internationalization';\nimport { copyNonLocalizedFields } from './internationalization';\nimport * as components from './components';\n\nimport { createEntriesService } from './entries';\nimport { pickSelectionParams } from './params';\nimport { createDocumentId } from '../../utils/transform-content-types-to-models';\nimport { getDeepPopulate } from './utils/populate';\nimport { transformParamsToQuery } from './transform/query';\nimport { transformParamsDocumentId } from './transform/id-transform';\nimport { createEventManager } from './events';\nimport * as unidirectionalRelations from './utils/unidirectional-relations';\nimport * as bidirectionalRelations from './utils/bidirectional-relations';\nimport entityValidator from '../entity-validator';\n\nconst { validators } = validate;\n\n// we have to typecast to reconcile the differences between validator and database getModel\nconst getModel = ((schema: UID.Schema) => strapi.getModel(schema)) as (schema: string) => any;\n\nexport const createContentTypeRepository: RepositoryFactoryMethod = (\n  uid,\n  validator = entityValidator\n) => {\n  const contentType = strapi.contentType(uid);\n  const hasDraftAndPublish = contentTypesUtils.hasDraftAndPublish(contentType);\n\n  // Define the validations that should be performed\n  const sortValidations = ['nonAttributesOperators', 'dynamicZones', 'morphRelations'];\n  const fieldValidations = ['scalarAttributes'];\n  const filtersValidations = ['nonAttributesOperators', 'dynamicZones', 'morphRelations'];\n  const populateValidations = {\n    sort: sortValidations,\n    field: fieldValidations,\n    filters: filtersValidations,\n    populate: ['nonAttributesOperators'],\n  };\n\n  const validateParams = async (params: any) => {\n    const ctx = { schema: contentType, getModel };\n    await validators.validateFilters(ctx, params.filters, filtersValidations);\n    await validators.validateSort(ctx, params.sort, sortValidations);\n    await validators.validateFields(ctx, params.fields, fieldValidations);\n    await validators.validatePopulate(ctx, params.populate, populateValidations);\n\n    // Strip lookup from params, it's only used internally\n    if (params.lookup) {\n      throw new errors.ValidationError(\"Invalid params: 'lookup'\");\n    }\n\n    // TODO: add validate status, locale, pagination\n\n    return params;\n  };\n\n  const entries = createEntriesService(uid, validator);\n\n  const eventManager = createEventManager(strapi, uid);\n  const emitEvent = curry(eventManager.emitEvent);\n\n  async function findMany(params = {} as any) {\n    const query = await async.pipe(\n      validateParams,\n      DP.defaultToDraft,\n      DP.statusToLookup(contentType),\n      i18n.defaultLocale(contentType),\n      i18n.multiLocaleToLookup(contentType),\n      transformParamsDocumentId(uid),\n      transformParamsToQuery(uid)\n    )(params || {});\n\n    return strapi.db.query(uid).findMany(query);\n  }\n\n  async function findFirst(params = {} as any) {\n    const query = await async.pipe(\n      validateParams,\n      DP.defaultToDraft,\n      DP.statusToLookup(contentType),\n      i18n.defaultLocale(contentType),\n      i18n.localeToLookup(contentType),\n      transformParamsDocumentId(uid),\n      transformParamsToQuery(uid)\n    )(params);\n\n    return strapi.db.query(uid).findOne(query);\n  }\n\n  // TODO: do we really want to add filters on the findOne now that we have findFirst ?\n  async function findOne(opts = {} as any) {\n    const { documentId, ...params } = opts;\n\n    const query = await async.pipe(\n      validateParams,\n      DP.defaultToDraft,\n      DP.statusToLookup(contentType),\n      i18n.defaultLocale(contentType),\n      i18n.localeToLookup(contentType),\n      transformParamsDocumentId(uid),\n      transformParamsToQuery(uid),\n      (query) => assoc('where', { ...query.where, documentId }, query)\n    )(params);\n\n    return strapi.db.query(uid).findOne(query);\n  }\n\n  async function deleteDocument(opts = {} as any) {\n    const { documentId, ...params } = opts;\n\n    const query = await async.pipe(\n      validateParams,\n      omit('status'),\n      i18n.defaultLocale(contentType),\n      i18n.multiLocaleToLookup(contentType),\n      transformParamsToQuery(uid),\n      (query) => assoc('where', { ...query.where, documentId }, query)\n    )(params);\n\n    if (params.status === 'draft') {\n      throw new Error('Cannot delete a draft document');\n    }\n\n    const entriesToDelete = await strapi.db.query(uid).findMany(query);\n\n    // Delete all matched entries and its components\n    const deletedEntries = await async.map(entriesToDelete, (entryToDelete: any) =>\n      entries.delete(entryToDelete.id)\n    );\n\n    entriesToDelete.forEach(emitEvent('entry.delete'));\n\n    return { documentId, entries: deletedEntries };\n  }\n\n  async function create(opts = {} as any) {\n    const { documentId, ...params } = opts;\n\n    const queryParams = await async.pipe(\n      validateParams,\n      DP.filterDataPublishedAt,\n      DP.setStatusToDraft(contentType),\n      DP.statusToData(contentType),\n      i18n.defaultLocale(contentType),\n      i18n.localeToData(contentType)\n    )(params);\n\n    const doc = await entries.create(queryParams);\n\n    emitEvent('entry.create', doc);\n\n    if (hasDraftAndPublish && params.status === 'published') {\n      return publish({\n        ...params,\n        documentId: doc.documentId,\n      }).then((doc) => doc.entries[0]);\n    }\n\n    return doc;\n  }\n\n  async function clone(opts = {} as any) {\n    const { documentId, ...params } = opts;\n\n    const queryParams = await async.pipe(\n      validateParams,\n      DP.filterDataPublishedAt,\n      i18n.defaultLocale(contentType),\n      i18n.multiLocaleToLookup(contentType)\n    )(params);\n\n    // Get deep populate\n    const entriesToClone = await strapi.db.query(uid).findMany({\n      where: {\n        ...queryParams?.lookup,\n        documentId,\n        // DP Enabled: Clone drafts\n        // DP Disabled: Clone only the existing version (published)\n        publishedAt: { $null: hasDraftAndPublish },\n      },\n      populate: getDeepPopulate(uid, { relationalFields: ['id'] }),\n    });\n\n    const clonedEntries = await async.map(\n      entriesToClone,\n      async.pipe(\n        validateParams,\n        omit(['id', 'createdAt', 'updatedAt']),\n        // assign new documentId\n        assoc('documentId', createDocumentId()),\n        // Merge new data into it\n        (data) => merge(data, queryParams.data),\n        (data) => entries.create({ ...queryParams, data, status: 'draft' })\n      )\n    );\n\n    clonedEntries.forEach(emitEvent('entry.create'));\n\n    return { documentId: clonedEntries.at(0)?.documentId, entries: clonedEntries };\n  }\n\n  async function update(opts = {} as any) {\n    const { documentId, ...params } = opts;\n\n    const queryParams = await async.pipe(\n      validateParams,\n      DP.filterDataPublishedAt,\n      DP.setStatusToDraft(contentType),\n      DP.statusToLookup(contentType),\n      DP.statusToData(contentType),\n      // Default locale will be set if not provided\n      i18n.defaultLocale(contentType),\n      i18n.localeToLookup(contentType),\n      i18n.localeToData(contentType)\n    )(params);\n\n    const { data, ...restParams } = await transformParamsDocumentId(uid, queryParams || {});\n    const query = transformParamsToQuery(uid, pickSelectionParams(restParams || {}) as any);\n\n    // Validation\n    // Find if document exists\n    const entryToUpdate = await strapi.db\n      .query(uid)\n      .findOne({ ...query, where: { ...queryParams?.lookup, ...query?.where, documentId } });\n\n    let updatedDraft = null;\n    if (entryToUpdate) {\n      updatedDraft = await entries.update(entryToUpdate, queryParams);\n      emitEvent('entry.update', updatedDraft);\n    }\n\n    if (!updatedDraft) {\n      const documentExists = await strapi.db\n        .query(contentType.uid)\n        .findOne({ where: { documentId } });\n\n      if (documentExists) {\n        const mergedData = await copyNonLocalizedFields(contentType, documentId, {\n          ...queryParams.data,\n          documentId,\n        });\n\n        updatedDraft = await entries.create({\n          ...queryParams,\n          data: mergedData,\n        });\n        emitEvent('entry.create', updatedDraft);\n      }\n    }\n\n    if (hasDraftAndPublish && updatedDraft && params.status === 'published') {\n      return publish({\n        ...params,\n        documentId,\n      }).then((doc) => doc.entries[0]);\n    }\n\n    return updatedDraft;\n  }\n\n  async function count(params = {} as any) {\n    const query = await async.pipe(\n      validateParams,\n      DP.defaultStatus(contentType),\n      DP.statusToLookup(contentType),\n      i18n.defaultLocale(contentType),\n      i18n.localeToLookup(contentType),\n      transformParamsToQuery(uid)\n    )(params);\n\n    return strapi.db.query(uid).count(query);\n  }\n\n  async function publish(opts = {} as any) {\n    const { documentId, ...params } = opts;\n\n    const queryParams = await async.pipe(\n      validateParams,\n      i18n.defaultLocale(contentType),\n      i18n.multiLocaleToLookup(contentType)\n    )(params);\n\n    const [draftsToPublish, oldPublishedVersions] = await Promise.all([\n      strapi.db.query(uid).findMany({\n        where: {\n          ...queryParams?.lookup,\n          documentId,\n          publishedAt: null, // Ignore lookup\n        },\n        // Populate relations, media, compos and dz\n        populate: getDeepPopulate(uid, { relationalFields: ['documentId', 'locale'] }),\n      }),\n      strapi.db.query(uid).findMany({\n        where: {\n          ...queryParams?.lookup,\n          documentId,\n          publishedAt: { $ne: null },\n        },\n        select: ['id', 'locale'],\n      }),\n    ]);\n\n    // Load any unidirectional relation targetting the old published entries\n    const relationsToSync = await unidirectionalRelations.load(uid, {\n      newVersions: draftsToPublish,\n      oldVersions: oldPublishedVersions,\n    });\n\n    const bidirectionalRelationsToSync = await bidirectionalRelations.load(uid, {\n      newVersions: draftsToPublish,\n      oldVersions: oldPublishedVersions,\n    });\n\n    // Delete old published versions\n    await async.map(oldPublishedVersions, (entry: any) => entries.delete(entry.id));\n\n    // Transform draft entry data and create published versions\n    const publishedEntries = await async.map(draftsToPublish, (draft: any) =>\n      entries.publish(draft, queryParams)\n    );\n\n    // Sync unidirectional relations with the new published entries\n    await unidirectionalRelations.sync(\n      [...oldPublishedVersions, ...draftsToPublish],\n      publishedEntries,\n      relationsToSync\n    );\n\n    await bidirectionalRelations.sync(\n      [...oldPublishedVersions, ...draftsToPublish],\n      publishedEntries,\n      bidirectionalRelationsToSync\n    );\n\n    publishedEntries.forEach(emitEvent('entry.publish'));\n\n    return { documentId, entries: publishedEntries };\n  }\n\n  async function unpublish(opts = {} as any) {\n    const { documentId, ...params } = opts;\n\n    const query = await async.pipe(\n      validateParams,\n      i18n.defaultLocale(contentType),\n      i18n.multiLocaleToLookup(contentType),\n      transformParamsToQuery(uid),\n      (query) => assoc('where', { ...query.where, documentId, publishedAt: { $ne: null } }, query)\n    )(params);\n\n    // Delete all published versions\n    const versionsToDelete = await strapi.db.query(uid).findMany(query);\n    await async.map(versionsToDelete, (entry: any) => entries.delete(entry.id));\n\n    versionsToDelete.forEach(emitEvent('entry.unpublish'));\n    return { documentId, entries: versionsToDelete };\n  }\n\n  async function discardDraft(opts = {} as any) {\n    const { documentId, ...params } = opts;\n\n    const queryParams = await async.pipe(\n      validateParams,\n      i18n.defaultLocale(contentType),\n      i18n.multiLocaleToLookup(contentType)\n    )(params);\n\n    const [versionsToDraft, oldDrafts] = await Promise.all([\n      strapi.db.query(uid).findMany({\n        where: {\n          ...queryParams?.lookup,\n          documentId,\n          publishedAt: { $ne: null },\n        },\n        // Populate relations, media, compos and dz\n        populate: getDeepPopulate(uid, { relationalFields: ['documentId', 'locale'] }),\n      }),\n      strapi.db.query(uid).findMany({\n        where: {\n          ...queryParams?.lookup,\n          documentId,\n          publishedAt: null,\n        },\n        select: ['id', 'locale'],\n      }),\n    ]);\n\n    // Load any unidirectional relation targeting the old drafts\n    const relationsToSync = await unidirectionalRelations.load(uid, {\n      newVersions: versionsToDraft,\n      oldVersions: oldDrafts,\n    });\n\n    const bidirectionalRelationsToSync = await bidirectionalRelations.load(uid, {\n      newVersions: versionsToDraft,\n      oldVersions: oldDrafts,\n    });\n\n    // Delete old drafts\n    await async.map(oldDrafts, (entry: any) => entries.delete(entry.id));\n\n    // Transform published entry data and create draft versions\n    const draftEntries = await async.map(versionsToDraft, (entry: any) =>\n      entries.discardDraft(entry, queryParams)\n    );\n\n    // Sync unidirectional relations with the new draft entries\n    await unidirectionalRelations.sync(\n      [...oldDrafts, ...versionsToDraft],\n      draftEntries,\n      relationsToSync\n    );\n\n    await bidirectionalRelations.sync(\n      [...oldDrafts, ...versionsToDraft],\n      draftEntries,\n      bidirectionalRelationsToSync\n    );\n\n    draftEntries.forEach(emitEvent('entry.draft-discard'));\n    return { documentId, entries: draftEntries };\n  }\n\n  async function updateComponents(entry: any, data: any) {\n    return components.updateComponents(uid, entry, data);\n  }\n\n  function omitComponentData(data: any) {\n    return components.omitComponentData(contentType, data);\n  }\n\n  return {\n    findMany: wrapInTransaction(findMany),\n    findFirst: wrapInTransaction(findFirst),\n    findOne: wrapInTransaction(findOne),\n    delete: wrapInTransaction(deleteDocument),\n    create: wrapInTransaction(create),\n    clone: wrapInTransaction(clone),\n    update: wrapInTransaction(update),\n    count: wrapInTransaction(count),\n    publish: hasDraftAndPublish ? wrapInTransaction(publish) : (undefined as any),\n    unpublish: hasDraftAndPublish ? wrapInTransaction(unpublish) : (undefined as any),\n    discardDraft: hasDraftAndPublish ? wrapInTransaction(discardDraft) : (undefined as any),\n\n    updateComponents,\n    omitComponentData,\n  };\n};\n"],"names":["validators","validate","getModel","schema","strapi","createContentTypeRepository","uid","validator","entityValidator","contentType","hasDraftAndPublish","contentTypesUtils","sortValidations","fieldValidations","filtersValidations","populateValidations","sort","field","filters","populate","validateParams","params","ctx","validateFilters","validateSort","validateFields","fields","validatePopulate","lookup","errors","ValidationError","entries","createEntriesService","eventManager","createEventManager","emitEvent","curry","findMany","query","async","pipe","DP","i18n","transformParamsDocumentId","transformParamsToQuery","db","findFirst","findOne","opts","documentId","assoc","where","deleteDocument","omit","status","Error","entriesToDelete","deletedEntries","map","entryToDelete","delete","id","forEach","create","queryParams","doc","publish","then","clone","entriesToClone","publishedAt","$null","getDeepPopulate","relationalFields","clonedEntries","createDocumentId","data","merge","at","update","restParams","pickSelectionParams","entryToUpdate","updatedDraft","documentExists","mergedData","copyNonLocalizedFields","count","draftsToPublish","oldPublishedVersions","Promise","all","$ne","select","relationsToSync","unidirectionalRelations","newVersions","oldVersions","bidirectionalRelationsToSync","bidirectionalRelations","entry","publishedEntries","draft","unpublish","versionsToDelete","discardDraft","versionsToDraft","oldDrafts","draftEntries","updateComponents","components","omitComponentData","wrapInTransaction","undefined"],"mappings":"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"}