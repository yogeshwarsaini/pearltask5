{"version":3,"file":"ReleaseModal.mjs","sources":["../../../admin/src/components/ReleaseModal.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {\n  Button,\n  Modal,\n  TextInput,\n  Typography,\n  Checkbox,\n  Flex,\n  Box,\n  DatePicker,\n  TimePicker,\n  Combobox,\n  ComboboxOption,\n  Field,\n} from '@strapi/design-system';\nimport { formatISO } from 'date-fns';\nimport { utcToZonedTime, zonedTimeToUtc } from 'date-fns-tz';\nimport { Formik, Form, useFormikContext } from 'formik';\nimport { MessageDescriptor, useIntl } from 'react-intl';\nimport { useLocation } from 'react-router-dom';\n\nimport { pluginId } from '../pluginId';\nimport { getTimezones } from '../utils/time';\nimport { RELEASE_SCHEMA } from '../validation/schemas';\n\nexport interface FormValues {\n  name: string;\n  date?: string;\n  time: string;\n  timezone: string | null;\n  isScheduled?: boolean;\n  scheduledAt: Date | null;\n}\n\ninterface ReleaseModalProps {\n  handleClose: () => void;\n  handleSubmit: (values: FormValues) => void;\n  isLoading?: boolean;\n  initialValues: FormValues;\n  open?: boolean;\n}\n\nexport const ReleaseModal = ({\n  handleClose,\n  open,\n  handleSubmit,\n  initialValues,\n  isLoading = false,\n}: ReleaseModalProps) => {\n  const { formatMessage } = useIntl();\n  const { pathname } = useLocation();\n  const isCreatingRelease = pathname === `/plugins/${pluginId}`;\n  // Set default first timezone from the list if no system timezone detected\n  const { timezoneList, systemTimezone = { value: 'UTC+00:00-Africa/Abidjan ' } } = getTimezones(\n    initialValues.scheduledAt ? new Date(initialValues.scheduledAt) : new Date()\n  );\n\n  /**\n   * Generate scheduled time using selected date, time and timezone\n   */\n  const getScheduledTimestamp = (values: FormValues) => {\n    const { date, time, timezone } = values;\n    if (!date || !time || !timezone) return null;\n    const timezoneWithoutOffset = timezone.split('&')[1];\n    return zonedTimeToUtc(`${date} ${time}`, timezoneWithoutOffset);\n  };\n\n  /**\n   * Get timezone with offset to show the selected value in the dropdown\n   */\n  const getTimezoneWithOffset = () => {\n    const currentTimezone = timezoneList.find(\n      (timezone) => timezone.value.split('&')[1] === initialValues.timezone\n    );\n    return currentTimezone?.value || systemTimezone.value;\n  };\n\n  return (\n    <Modal.Root open={open} onOpenChange={handleClose}>\n      <Modal.Content>\n        <Modal.Header>\n          <Modal.Title>\n            {formatMessage(\n              {\n                id: 'content-releases.modal.title',\n                defaultMessage:\n                  '{isCreatingRelease, select, true {New release} other {Edit release}}',\n              },\n              { isCreatingRelease: isCreatingRelease }\n            )}\n          </Modal.Title>\n        </Modal.Header>\n        <Formik\n          onSubmit={(values) => {\n            handleSubmit({\n              ...values,\n              timezone: values.timezone ? values.timezone.split('&')[1] : null,\n              scheduledAt: values.isScheduled ? getScheduledTimestamp(values) : null,\n            });\n          }}\n          initialValues={{\n            ...initialValues,\n            timezone: initialValues.timezone ? getTimezoneWithOffset() : systemTimezone.value,\n          }}\n          validationSchema={RELEASE_SCHEMA}\n          validateOnChange={false}\n        >\n          {({ values, errors, handleChange, setFieldValue }) => {\n            return (\n              <Form>\n                <Modal.Body>\n                  <Flex direction=\"column\" alignItems=\"stretch\" gap={6}>\n                    <Field.Root\n                      name=\"name\"\n                      error={\n                        errors.name &&\n                        formatMessage({ id: errors.name, defaultMessage: errors.name })\n                      }\n                      required\n                    >\n                      <Field.Label>\n                        {formatMessage({\n                          id: 'content-releases.modal.form.input.label.release-name',\n                          defaultMessage: 'Name',\n                        })}\n                      </Field.Label>\n                      <TextInput value={values.name} onChange={handleChange} />\n                      <Field.Error />\n                    </Field.Root>\n                    <Box width=\"max-content\">\n                      <Checkbox\n                        name=\"isScheduled\"\n                        checked={values.isScheduled}\n                        onCheckedChange={(checked) => {\n                          setFieldValue('isScheduled', checked);\n                          if (!checked) {\n                            // Clear scheduling info from a release on unchecking schedule release, which reset scheduling info in DB\n                            setFieldValue('date', null);\n                            setFieldValue('time', '');\n                            setFieldValue('timezone', null);\n                          } else {\n                            // On ticking back schedule release date, time and timezone should be restored to the initial state\n                            setFieldValue('date', initialValues.date);\n                            setFieldValue('time', initialValues.time);\n                            setFieldValue(\n                              'timezone',\n                              initialValues.timezone ?? systemTimezone?.value\n                            );\n                          }\n                        }}\n                      >\n                        <Typography\n                          textColor={values.isScheduled ? 'primary600' : 'neutral800'}\n                          fontWeight={values.isScheduled ? 'semiBold' : 'regular'}\n                        >\n                          {formatMessage({\n                            id: 'modal.form.input.label.schedule-release',\n                            defaultMessage: 'Schedule release',\n                          })}\n                        </Typography>\n                      </Checkbox>\n                    </Box>\n                    {values.isScheduled && (\n                      <>\n                        <Flex gap={4} alignItems=\"start\">\n                          <Box width=\"100%\">\n                            <Field.Root\n                              name=\"date\"\n                              error={\n                                errors.date &&\n                                formatMessage({ id: errors.date, defaultMessage: errors.date })\n                              }\n                              required\n                            >\n                              <Field.Label>\n                                {formatMessage({\n                                  id: 'content-releases.modal.form.input.label.date',\n                                  defaultMessage: 'Date',\n                                })}\n                              </Field.Label>\n                              <DatePicker\n                                onChange={(date) => {\n                                  const isoFormatDate = date\n                                    ? formatISO(date, { representation: 'date' })\n                                    : null;\n                                  setFieldValue('date', isoFormatDate);\n                                }}\n                                clearLabel={formatMessage({\n                                  id: 'content-releases.modal.form.input.clearLabel',\n                                  defaultMessage: 'Clear',\n                                })}\n                                onClear={() => {\n                                  setFieldValue('date', null);\n                                }}\n                                value={values.date ? new Date(values.date) : new Date()}\n                                minDate={utcToZonedTime(new Date(), values.timezone.split('&')[1])}\n                              />\n                              <Field.Error />\n                            </Field.Root>\n                          </Box>\n                          <Box width=\"100%\">\n                            <Field.Root\n                              name=\"time\"\n                              error={\n                                errors.time &&\n                                formatMessage({ id: errors.time, defaultMessage: errors.time })\n                              }\n                              required\n                            >\n                              <Field.Label>\n                                {formatMessage({\n                                  id: 'content-releases.modal.form.input.label.time',\n                                  defaultMessage: 'Time',\n                                })}\n                              </Field.Label>\n                              <TimePicker\n                                onChange={(time) => {\n                                  setFieldValue('time', time);\n                                }}\n                                clearLabel={formatMessage({\n                                  id: 'content-releases.modal.form.input.clearLabel',\n                                  defaultMessage: 'Clear',\n                                })}\n                                onClear={() => {\n                                  setFieldValue('time', '');\n                                }}\n                                value={values.time || undefined}\n                              />\n                              <Field.Error />\n                            </Field.Root>\n                          </Box>\n                        </Flex>\n                        <TimezoneComponent timezoneOptions={timezoneList} />\n                      </>\n                    )}\n                  </Flex>\n                </Modal.Body>\n                <Modal.Footer>\n                  <Modal.Close>\n                    <Button variant=\"tertiary\" name=\"cancel\">\n                      {formatMessage({ id: 'cancel', defaultMessage: 'Cancel' })}\n                    </Button>\n                  </Modal.Close>\n                  <Button name=\"submit\" loading={isLoading} type=\"submit\">\n                    {formatMessage(\n                      {\n                        id: 'content-releases.modal.form.button.submit',\n                        defaultMessage: '{isCreatingRelease, select, true {Continue} other {Save}}',\n                      },\n                      { isCreatingRelease: isCreatingRelease }\n                    )}\n                  </Button>\n                </Modal.Footer>\n              </Form>\n            );\n          }}\n        </Formik>\n      </Modal.Content>\n    </Modal.Root>\n  );\n};\n\n/**\n * Generates the list of timezones and user's current timezone(system timezone)\n */\ninterface ITimezoneOption {\n  offset: string;\n  value: string;\n}\n\nconst TimezoneComponent = ({ timezoneOptions }: { timezoneOptions: ITimezoneOption[] }) => {\n  const { values, errors, setFieldValue } = useFormikContext<FormValues>();\n  const { formatMessage } = useIntl();\n  const [timezoneList, setTimezoneList] = React.useState<ITimezoneOption[]>(timezoneOptions);\n\n  React.useEffect(() => {\n    if (values.date) {\n      // Update the timezone offset which varies with DST based on the date selected\n      const { timezoneList } = getTimezones(new Date(values.date));\n      setTimezoneList(timezoneList);\n\n      const updatedTimezone =\n        values.timezone &&\n        timezoneList.find((tz) => tz.value.split('&')[1] === values.timezone!.split('&')[1]);\n      if (updatedTimezone) {\n        setFieldValue('timezone', updatedTimezone!.value);\n      }\n    }\n  }, [setFieldValue, values.date, values.timezone]);\n\n  return (\n    <Field.Root\n      name=\"timezone\"\n      error={\n        errors.timezone && formatMessage({ id: errors.timezone, defaultMessage: errors.timezone })\n      }\n      required\n    >\n      <Field.Label>\n        {formatMessage({\n          id: 'content-releases.modal.form.input.label.timezone',\n          defaultMessage: 'Timezone',\n        })}\n      </Field.Label>\n      <Combobox\n        autocomplete={{ type: 'list', filter: 'contains' }}\n        value={values.timezone || undefined}\n        textValue={values.timezone ? values.timezone.replace(/&/, ' ') : undefined} // textValue is required to show the updated DST timezone\n        onChange={(timezone) => {\n          setFieldValue('timezone', timezone);\n        }}\n        onTextValueChange={(timezone) => {\n          setFieldValue('timezone', timezone);\n        }}\n        onClear={() => {\n          setFieldValue('timezone', '');\n        }}\n      >\n        {timezoneList.map((timezone) => (\n          <ComboboxOption key={timezone.value} value={timezone.value}>\n            {timezone.value.replace(/&/, ' ')}\n          </ComboboxOption>\n        ))}\n      </Combobox>\n      <Field.Error />\n    </Field.Root>\n  );\n};\n"],"names":["ReleaseModal","handleClose","open","handleSubmit","initialValues","isLoading","formatMessage","useIntl","pathname","useLocation","isCreatingRelease","pluginId","timezoneList","systemTimezone","value","getTimezones","scheduledAt","Date","getScheduledTimestamp","values","date","time","timezone","timezoneWithoutOffset","split","zonedTimeToUtc","getTimezoneWithOffset","currentTimezone","find","_jsx","Modal","Root","onOpenChange","_jsxs","Content","Header","Title","id","defaultMessage","Formik","onSubmit","isScheduled","validationSchema","RELEASE_SCHEMA","validateOnChange","errors","handleChange","setFieldValue","Form","Body","Flex","direction","alignItems","gap","Field","name","error","required","Label","TextInput","onChange","Error","Box","width","Checkbox","checked","onCheckedChange","Typography","textColor","fontWeight","_Fragment","DatePicker","isoFormatDate","formatISO","representation","clearLabel","onClear","minDate","utcToZonedTime","TimePicker","undefined","TimezoneComponent","timezoneOptions","Footer","Close","Button","variant","loading","type","useFormikContext","setTimezoneList","React","useState","useEffect","updatedTimezone","tz","Combobox","autocomplete","filter","textValue","replace","onTextValueChange","map","ComboboxOption"],"mappings":"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"}