{"version":3,"file":"release.js","sources":["../../../admin/src/services/release.ts"],"sourcesContent":["import { adminApi } from '@strapi/admin/strapi-admin';\n\nimport {\n  CreateReleaseAction,\n  CreateManyReleaseActions,\n  DeleteReleaseAction,\n} from '../../../shared/contracts/release-actions';\n\nimport type {\n  GetReleaseActions,\n  UpdateReleaseAction,\n  ReleaseActionGroupBy,\n} from '../../../shared/contracts/release-actions';\nimport type {\n  CreateRelease,\n  DeleteRelease,\n  GetReleases,\n  GetReleasesByDocumentAttached,\n  UpdateRelease,\n  GetRelease,\n  PublishRelease,\n  MapEntriesToReleases,\n} from '../../../shared/contracts/releases';\nimport type { GetSettings, UpdateSettings } from '../../../shared/contracts/settings';\nimport type { EndpointDefinition } from '@reduxjs/toolkit/query';\n\nexport interface GetReleasesQueryParams {\n  page?: number;\n  pageSize?: number;\n  filters?: {\n    releasedAt?: {\n      // TODO: this should be a boolean, find a way to avoid strings\n      $notNull?: boolean | 'true' | 'false';\n    };\n  };\n}\n\nexport interface GetReleaseActionsQueryParams {\n  page?: number;\n  pageSize?: number;\n  groupBy?: ReleaseActionGroupBy;\n}\n\ntype GetReleasesTabResponse = GetReleases.Response & {\n  meta: {\n    activeTab: 'pending' | 'done';\n  };\n};\n\ntype AnyEndpointDefinition = EndpointDefinition<any, any, any, any>;\n\n// TODO: move this into the admin code & expose an improved version of enhanceEndpoints or a new function\nconst extendInvalidatesTags = (\n  endpoint: AnyEndpointDefinition,\n  extraTags: string[] | { type: string; id: string }[]\n) => {\n  if (!endpoint) {\n    return;\n  }\n\n  const originalInvalidatesTags = endpoint.invalidatesTags;\n\n  const newInvalidatesTags: AnyEndpointDefinition['invalidatesTags'] = (\n    result,\n    err,\n    args,\n    meta\n  ) => {\n    const originalTags =\n      typeof originalInvalidatesTags === 'function'\n        ? originalInvalidatesTags(result, err, args, meta)\n        : originalInvalidatesTags;\n\n    return [...(originalTags ?? []), ...extraTags];\n  };\n\n  Object.assign(endpoint, { invalidatesTags: newInvalidatesTags });\n};\n\nconst releaseApi = adminApi\n  .enhanceEndpoints({\n    addTagTypes: ['Release', 'ReleaseAction', 'EntriesInRelease', 'ReleaseSettings', 'Document'],\n    endpoints: {\n      updateDocument(endpoint: AnyEndpointDefinition) {\n        extendInvalidatesTags(endpoint, [\n          { type: 'Release', id: 'LIST' },\n          { type: 'ReleaseAction', id: 'LIST' },\n        ]);\n      },\n      deleteDocument(endpoint: AnyEndpointDefinition) {\n        extendInvalidatesTags(endpoint, [\n          { type: 'Release', id: 'LIST' },\n          { type: 'ReleaseAction', id: 'LIST' },\n        ]);\n      },\n      deleteManyDocuments(endpoint: AnyEndpointDefinition) {\n        extendInvalidatesTags(endpoint, [\n          { type: 'Release', id: 'LIST' },\n          { type: 'ReleaseAction', id: 'LIST' },\n        ]);\n      },\n      discardDocument(endpoint: AnyEndpointDefinition) {\n        extendInvalidatesTags(endpoint, [\n          { type: 'Release', id: 'LIST' },\n          { type: 'ReleaseAction', id: 'LIST' },\n        ]);\n      },\n      createWorkflow(endpoint: AnyEndpointDefinition) {\n        extendInvalidatesTags(endpoint, [\n          { type: 'Release', id: 'LIST' },\n          { type: 'ReleaseAction', id: 'LIST' },\n        ]);\n      },\n      updateWorkflow(endpoint: AnyEndpointDefinition) {\n        extendInvalidatesTags(endpoint, [\n          { type: 'Release', id: 'LIST' },\n          { type: 'ReleaseAction', id: 'LIST' },\n        ]);\n      },\n      deleteWorkflow(endpoint: AnyEndpointDefinition) {\n        extendInvalidatesTags(endpoint, [\n          { type: 'Release', id: 'LIST' },\n          { type: 'ReleaseAction', id: 'LIST' },\n        ]);\n      },\n    },\n  })\n  .injectEndpoints({\n    endpoints: (build) => {\n      return {\n        getReleasesForEntry: build.query<\n          GetReleasesByDocumentAttached.Response,\n          Partial<GetReleasesByDocumentAttached.Request['query']>\n        >({\n          query(params) {\n            return {\n              url: '/content-releases/getByDocumentAttached',\n              method: 'GET',\n              config: {\n                params,\n              },\n            };\n          },\n          providesTags: (result) =>\n            result\n              ? [\n                  ...result.data.map(({ id }) => ({ type: 'Release' as const, id })),\n                  { type: 'Release', id: 'LIST' },\n                ]\n              : [],\n        }),\n        getReleases: build.query<GetReleasesTabResponse, GetReleasesQueryParams | void>({\n          query(\n            { page, pageSize, filters } = {\n              page: 1,\n              pageSize: 16,\n              filters: {\n                releasedAt: {\n                  $notNull: false,\n                },\n              },\n            }\n          ) {\n            return {\n              url: '/content-releases',\n              method: 'GET',\n              config: {\n                params: {\n                  page: page || 1,\n                  pageSize: pageSize || 16,\n                  filters: filters || {\n                    releasedAt: {\n                      $notNull: false,\n                    },\n                  },\n                },\n              },\n            };\n          },\n          transformResponse(response: GetReleasesTabResponse, meta, arg) {\n            const releasedAtValue = arg?.filters?.releasedAt?.$notNull;\n            const isActiveDoneTab = releasedAtValue === 'true';\n            const newResponse: GetReleasesTabResponse = {\n              ...response,\n              meta: {\n                ...response.meta,\n                activeTab: isActiveDoneTab ? 'done' : 'pending',\n              },\n            };\n\n            return newResponse;\n          },\n          providesTags: (result) =>\n            result\n              ? [\n                  ...result.data.map(({ id }) => ({ type: 'Release' as const, id })),\n                  { type: 'Release', id: 'LIST' },\n                ]\n              : [{ type: 'Release', id: 'LIST' }],\n        }),\n        getRelease: build.query<GetRelease.Response, GetRelease.Request['params']>({\n          query({ id }) {\n            return {\n              url: `/content-releases/${id}`,\n              method: 'GET',\n            };\n          },\n          providesTags: (result, error, arg) => [\n            { type: 'Release', id: 'LIST' },\n            { type: 'Release' as const, id: arg.id },\n          ],\n        }),\n        getReleaseActions: build.query<\n          GetReleaseActions.Response,\n          GetReleaseActions.Request['params'] & GetReleaseActions.Request['query']\n        >({\n          query({ releaseId, ...params }) {\n            return {\n              url: `/content-releases/${releaseId}/actions`,\n              method: 'GET',\n              config: {\n                params,\n              },\n            };\n          },\n          providesTags: [{ type: 'ReleaseAction', id: 'LIST' }],\n        }),\n        createRelease: build.mutation<CreateRelease.Response, CreateRelease.Request['body']>({\n          query(data) {\n            return {\n              url: '/content-releases',\n              method: 'POST',\n              data,\n            };\n          },\n          invalidatesTags: [{ type: 'Release', id: 'LIST' }],\n        }),\n        updateRelease: build.mutation<\n          void,\n          UpdateRelease.Request['params'] & UpdateRelease.Request['body']\n        >({\n          query({ id, ...data }) {\n            return {\n              url: `/content-releases/${id}`,\n              method: 'PUT',\n              data,\n            };\n          },\n          invalidatesTags: (result, error, arg) => [{ type: 'Release', id: arg.id }],\n        }),\n        createReleaseAction: build.mutation<\n          CreateReleaseAction.Response,\n          CreateReleaseAction.Request\n        >({\n          query({ body, params }) {\n            return {\n              url: `/content-releases/${params.releaseId}/actions`,\n              method: 'POST',\n              data: body,\n            };\n          },\n          invalidatesTags: [\n            { type: 'Release', id: 'LIST' },\n            { type: 'ReleaseAction', id: 'LIST' },\n          ],\n        }),\n        createManyReleaseActions: build.mutation<\n          CreateManyReleaseActions.Response,\n          CreateManyReleaseActions.Request\n        >({\n          query({ body, params }) {\n            return {\n              url: `/content-releases/${params.releaseId}/actions/bulk`,\n              method: 'POST',\n              data: body,\n            };\n          },\n          invalidatesTags: [\n            { type: 'Release', id: 'LIST' },\n            { type: 'ReleaseAction', id: 'LIST' },\n            { type: 'EntriesInRelease' },\n          ],\n        }),\n        updateReleaseAction: build.mutation<\n          UpdateReleaseAction.Response,\n          UpdateReleaseAction.Request & { query: GetReleaseActions.Request['query'] } & {\n            actionPath: [string, number];\n          }\n        >({\n          query({ body, params }) {\n            return {\n              url: `/content-releases/${params.releaseId}/actions/${params.actionId}`,\n              method: 'PUT',\n              data: body,\n            };\n          },\n          invalidatesTags: (res, error, arg) => [\n            { type: 'ReleaseAction', id: 'LIST' },\n            { type: 'Release', id: 'LIST' },\n            { type: 'Release', id: arg.params.releaseId },\n          ],\n          async onQueryStarted({ body, params, query, actionPath }, { dispatch, queryFulfilled }) {\n            // We need to mimic the same params received by the getReleaseActions query\n            const paramsWithoutActionId = {\n              releaseId: params.releaseId,\n              ...query,\n            };\n\n            const patchResult = dispatch(\n              releaseApi.util.updateQueryData(\n                'getReleaseActions',\n                paramsWithoutActionId,\n                (draft) => {\n                  const [key, index] = actionPath;\n                  const action = draft.data[key][index];\n\n                  if (action) {\n                    action.type = body.type;\n                  }\n                }\n              )\n            );\n\n            try {\n              await queryFulfilled;\n            } catch {\n              patchResult.undo();\n            }\n          },\n        }),\n        deleteReleaseAction: build.mutation<\n          DeleteReleaseAction.Response,\n          DeleteReleaseAction.Request\n        >({\n          query({ params }) {\n            return {\n              url: `/content-releases/${params.releaseId}/actions/${params.actionId}`,\n              method: 'DELETE',\n            };\n          },\n          invalidatesTags: (result, error, arg) => [\n            { type: 'Release', id: 'LIST' },\n            { type: 'Release', id: arg.params.releaseId },\n            { type: 'ReleaseAction', id: 'LIST' },\n            { type: 'EntriesInRelease' },\n          ],\n        }),\n        publishRelease: build.mutation<PublishRelease.Response, PublishRelease.Request['params']>({\n          query({ id }) {\n            return {\n              url: `/content-releases/${id}/publish`,\n              method: 'POST',\n            };\n          },\n          invalidatesTags: (result, error, arg) => [\n            { type: 'Release', id: arg.id },\n            { type: 'Document', id: `ALL_LIST` },\n          ],\n        }),\n        deleteRelease: build.mutation<DeleteRelease.Response, DeleteRelease.Request['params']>({\n          query({ id }) {\n            return {\n              url: `/content-releases/${id}`,\n              method: 'DELETE',\n            };\n          },\n          invalidatesTags: () => [{ type: 'Release', id: 'LIST' }, { type: 'EntriesInRelease' }],\n        }),\n        getMappedEntriesInReleases: build.query<\n          MapEntriesToReleases.Response['data'],\n          MapEntriesToReleases.Request['query']\n        >({\n          query(params) {\n            return {\n              url: '/content-releases/mapEntriesToReleases',\n              method: 'GET',\n              config: {\n                params,\n              },\n            };\n          },\n          transformResponse(response: MapEntriesToReleases.Response) {\n            return response.data;\n          },\n          providesTags: [{ type: 'EntriesInRelease' }],\n        }),\n        getReleaseSettings: build.query<GetSettings.Response, GetSettings.Request | void>({\n          query: () => '/content-releases/settings',\n          providesTags: [{ type: 'ReleaseSettings' }],\n        }),\n        updateReleaseSettings: build.mutation<void, UpdateSettings.Request['body']>({\n          query(data) {\n            return {\n              url: '/content-releases/settings',\n              method: 'PUT',\n              data,\n            };\n          },\n          invalidatesTags: [{ type: 'ReleaseSettings' }],\n        }),\n      };\n    },\n  });\n\nconst {\n  useGetReleasesQuery,\n  useGetReleasesForEntryQuery,\n  useGetReleaseQuery,\n  useGetReleaseActionsQuery,\n  useCreateReleaseMutation,\n  useCreateReleaseActionMutation,\n  useCreateManyReleaseActionsMutation,\n  useUpdateReleaseMutation,\n  useUpdateReleaseActionMutation,\n  usePublishReleaseMutation,\n  useDeleteReleaseActionMutation,\n  useDeleteReleaseMutation,\n  useGetMappedEntriesInReleasesQuery,\n  useGetReleaseSettingsQuery,\n  useUpdateReleaseSettingsMutation,\n} = releaseApi;\n\nexport {\n  useGetReleasesQuery,\n  useGetReleasesForEntryQuery,\n  useGetReleaseQuery,\n  useGetReleaseActionsQuery,\n  useCreateReleaseMutation,\n  useCreateReleaseActionMutation,\n  useCreateManyReleaseActionsMutation,\n  useUpdateReleaseMutation,\n  useUpdateReleaseActionMutation,\n  usePublishReleaseMutation,\n  useDeleteReleaseActionMutation,\n  useDeleteReleaseMutation,\n  useGetMappedEntriesInReleasesQuery,\n  useGetReleaseSettingsQuery,\n  useUpdateReleaseSettingsMutation,\n  releaseApi,\n};\n"],"names":["extendInvalidatesTags","endpoint","extraTags","originalInvalidatesTags","invalidatesTags","newInvalidatesTags","result","err","args","meta","originalTags","Object","assign","releaseApi","adminApi","enhanceEndpoints","addTagTypes","endpoints","updateDocument","type","id","deleteDocument","deleteManyDocuments","discardDocument","createWorkflow","updateWorkflow","deleteWorkflow","injectEndpoints","build","getReleasesForEntry","query","params","url","method","config","providesTags","data","map","getReleases","page","pageSize","filters","releasedAt","$notNull","transformResponse","response","arg","releasedAtValue","isActiveDoneTab","newResponse","activeTab","getRelease","error","getReleaseActions","releaseId","createRelease","mutation","updateRelease","createReleaseAction","body","createManyReleaseActions","updateReleaseAction","actionId","res","onQueryStarted","actionPath","dispatch","queryFulfilled","paramsWithoutActionId","patchResult","util","updateQueryData","draft","key","index","action","undo","deleteReleaseAction","publishRelease","deleteRelease","getMappedEntriesInReleases","getReleaseSettings","updateReleaseSettings","useGetReleasesQuery","useGetReleasesForEntryQuery","useGetReleaseQuery","useGetReleaseActionsQuery","useCreateReleaseMutation","useCreateReleaseActionMutation","useCreateManyReleaseActionsMutation","useUpdateReleaseMutation","useUpdateReleaseActionMutation","usePublishReleaseMutation","useDeleteReleaseActionMutation","useDeleteReleaseMutation","useGetMappedEntriesInReleasesQuery","useGetReleaseSettingsQuery","useUpdateReleaseSettingsMutation"],"mappings":"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"}