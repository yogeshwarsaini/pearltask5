{"version":3,"file":"ReleasesPage.mjs","sources":["../../../admin/src/pages/ReleasesPage.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {\n  Page,\n  Pagination,\n  useTracking,\n  useAPIErrorHandler,\n  useNotification,\n  useQueryParams,\n  useRBAC,\n  isFetchError,\n  Layouts,\n  GradientBadge,\n} from '@strapi/admin/strapi-admin';\nimport { useLicenseLimits } from '@strapi/admin/strapi-admin/ee';\nimport {\n  Alert,\n  Badge,\n  Box,\n  Button,\n  Divider,\n  EmptyStateLayout,\n  Flex,\n  Grid,\n  Main,\n  Tabs,\n  Typography,\n  Link,\n} from '@strapi/design-system';\nimport { Plus } from '@strapi/icons';\nimport { EmptyDocuments } from '@strapi/icons/symbols';\nimport { format } from 'date-fns';\nimport { useIntl } from 'react-intl';\nimport { useNavigate, useLocation, NavLink } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { GetReleases, type Release } from '../../../shared/contracts/releases';\nimport { RelativeTime as BaseRelativeTime } from '../components/RelativeTime';\nimport { ReleaseModal, FormValues } from '../components/ReleaseModal';\nimport { PERMISSIONS } from '../constants';\nimport {\n  useGetReleasesQuery,\n  useGetReleaseSettingsQuery,\n  GetReleasesQueryParams,\n  useCreateReleaseMutation,\n} from '../services/release';\n\n/* -------------------------------------------------------------------------------------------------\n * ReleasesGrid\n * -----------------------------------------------------------------------------------------------*/\ninterface ReleasesGridProps {\n  sectionTitle: 'pending' | 'done';\n  releases?: GetReleases.Response['data'];\n  isError?: boolean;\n}\n\nconst LinkCard = styled(Link)`\n  display: block;\n`;\n\nconst RelativeTime = styled(BaseRelativeTime)`\n  display: inline-block;\n  &::first-letter {\n    text-transform: uppercase;\n  }\n`;\n\nconst getBadgeProps = (status: Release['status']) => {\n  let color;\n  switch (status) {\n    case 'ready':\n      color = 'success';\n      break;\n    case 'blocked':\n      color = 'warning';\n      break;\n    case 'failed':\n      color = 'danger';\n      break;\n    case 'done':\n      color = 'primary';\n      break;\n    case 'empty':\n    default:\n      color = 'neutral';\n  }\n\n  return {\n    textColor: `${color}600`,\n    backgroundColor: `${color}100`,\n    borderColor: `${color}200`,\n  };\n};\n\nconst ReleasesGrid = ({ sectionTitle, releases = [], isError = false }: ReleasesGridProps) => {\n  const { formatMessage } = useIntl();\n\n  if (isError) {\n    return <Page.Error />;\n  }\n\n  if (releases?.length === 0) {\n    return (\n      <EmptyStateLayout\n        content={formatMessage(\n          {\n            id: 'content-releases.page.Releases.tab.emptyEntries',\n            defaultMessage: 'No releases',\n          },\n          {\n            target: sectionTitle,\n          }\n        )}\n        icon={<EmptyDocuments width=\"16rem\" />}\n      />\n    );\n  }\n\n  return (\n    <Grid.Root gap={4}>\n      {releases.map(({ id, name, scheduledAt, status }) => (\n        <Grid.Item col={3} s={6} xs={12} key={id} direction=\"column\" alignItems=\"stretch\">\n          <LinkCard tag={NavLink} to={`${id}`} isExternal={false}>\n            <Flex\n              direction=\"column\"\n              justifyContent=\"space-between\"\n              padding={4}\n              hasRadius\n              background=\"neutral0\"\n              shadow=\"tableShadow\"\n              height=\"100%\"\n              width=\"100%\"\n              alignItems=\"start\"\n              gap={4}\n            >\n              <Flex direction=\"column\" alignItems=\"start\" gap={1}>\n                <Typography textColor=\"neutral800\" tag=\"h3\" variant=\"delta\" fontWeight=\"bold\">\n                  {name}\n                </Typography>\n                <Typography variant=\"pi\" textColor=\"neutral600\">\n                  {scheduledAt ? (\n                    <RelativeTime timestamp={new Date(scheduledAt)} />\n                  ) : (\n                    formatMessage({\n                      id: 'content-releases.pages.Releases.not-scheduled',\n                      defaultMessage: 'Not scheduled',\n                    })\n                  )}\n                </Typography>\n              </Flex>\n              <Badge {...getBadgeProps(status)}>{status}</Badge>\n            </Flex>\n          </LinkCard>\n        </Grid.Item>\n      ))}\n    </Grid.Root>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ReleasesPage\n * -----------------------------------------------------------------------------------------------*/\n\nconst StyledAlert = styled(Alert)`\n  button {\n    display: none;\n  }\n  p + div {\n    margin-left: auto;\n  }\n`;\n\nconst INITIAL_FORM_VALUES = {\n  name: '',\n  date: format(new Date(), 'yyyy-MM-dd'),\n  time: '',\n  isScheduled: true,\n  scheduledAt: null,\n  timezone: null,\n} satisfies FormValues;\n\nconst ReleasesPage = () => {\n  const location = useLocation();\n  const [releaseModalShown, setReleaseModalShown] = React.useState(false);\n  const { toggleNotification } = useNotification();\n  const { formatMessage } = useIntl();\n  const navigate = useNavigate();\n  const { formatAPIError } = useAPIErrorHandler();\n  const [{ query }, setQuery] = useQueryParams<GetReleasesQueryParams>();\n  const response = useGetReleasesQuery(query);\n  const { data, isLoading: isLoadingSettings } = useGetReleaseSettingsQuery();\n  const [createRelease, { isLoading: isSubmittingForm }] = useCreateReleaseMutation();\n  const { getFeature } = useLicenseLimits();\n  const { maximumReleases = 3 } = getFeature('cms-content-releases') as {\n    maximumReleases: number;\n  };\n  const { trackUsage } = useTracking();\n  const {\n    allowedActions: { canCreate },\n  } = useRBAC(PERMISSIONS);\n\n  const { isLoading: isLoadingReleases, isSuccess, isError } = response;\n  const activeTab = response?.currentData?.meta?.activeTab || 'pending';\n\n  // Check if we have some errors and show a notification to the user to explain the error\n  React.useEffect(() => {\n    if (location?.state?.errors) {\n      toggleNotification({\n        type: 'danger',\n        title: formatMessage({\n          id: 'content-releases.pages.Releases.notification.error.title',\n          defaultMessage: 'Your request could not be processed.',\n        }),\n        message: formatMessage({\n          id: 'content-releases.pages.Releases.notification.error.message',\n          defaultMessage: 'Please try again or open another release.',\n        }),\n      });\n      navigate('', { replace: true, state: null });\n    }\n  }, [formatMessage, location?.state?.errors, navigate, toggleNotification]);\n\n  const toggleAddReleaseModal = () => {\n    setReleaseModalShown((prev) => !prev);\n  };\n\n  if (isLoadingReleases || isLoadingSettings) {\n    return <Page.Loading />;\n  }\n\n  const totalPendingReleases = (isSuccess && response.currentData?.meta?.pendingReleasesCount) || 0;\n  const hasReachedMaximumPendingReleases = totalPendingReleases >= maximumReleases;\n\n  const handleTabChange = (tabValue: string) => {\n    setQuery({\n      ...query,\n      page: 1,\n      pageSize: response?.currentData?.meta?.pagination?.pageSize || 16,\n      filters: {\n        releasedAt: {\n          $notNull: tabValue !== 'pending',\n        },\n      },\n    });\n  };\n\n  const handleAddRelease = async ({ name, scheduledAt, timezone }: FormValues) => {\n    const response = await createRelease({\n      name,\n      scheduledAt,\n      timezone,\n    });\n    if ('data' in response) {\n      // When the response returns an object with 'data', handle success\n      toggleNotification({\n        type: 'success',\n        message: formatMessage({\n          id: 'content-releases.modal.release-created-notification-success',\n          defaultMessage: 'Release created.',\n        }),\n      });\n\n      trackUsage('didCreateRelease');\n      navigate(response.data.data.id.toString());\n    } else if (isFetchError(response.error)) {\n      // When the response returns an object with 'error', handle fetch error\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(response.error),\n      });\n    } else {\n      // Otherwise, the response returns an object with 'error', handle a generic error\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\n      });\n    }\n  };\n\n  return (\n    <Main aria-busy={isLoadingReleases || isLoadingSettings}>\n      <Layouts.Header\n        title={formatMessage({\n          id: 'content-releases.pages.Releases.title',\n          defaultMessage: 'Releases',\n        })}\n        secondaryAction={\n          <GradientBadge\n            label={formatMessage({\n              id: 'components.premiumFeature.title',\n              defaultMessage: 'Premium feature',\n            })}\n          />\n        }\n        subtitle={formatMessage({\n          id: 'content-releases.pages.Releases.header-subtitle',\n          defaultMessage: 'Create and manage content updates',\n        })}\n        primaryAction={\n          canCreate ? (\n            <Button\n              startIcon={<Plus />}\n              onClick={toggleAddReleaseModal}\n              disabled={hasReachedMaximumPendingReleases}\n            >\n              {formatMessage({\n                id: 'content-releases.header.actions.add-release',\n                defaultMessage: 'New release',\n              })}\n            </Button>\n          ) : null\n        }\n      />\n      <Layouts.Content>\n        <>\n          {hasReachedMaximumPendingReleases && (\n            <StyledAlert\n              marginBottom={6}\n              action={\n                <Link href=\"https://strapi.io/pricing-cloud\" isExternal>\n                  {formatMessage({\n                    id: 'content-releases.pages.Releases.max-limit-reached.action',\n                    defaultMessage: 'Explore plans',\n                  })}\n                </Link>\n              }\n              title={formatMessage(\n                {\n                  id: 'content-releases.pages.Releases.max-limit-reached.title',\n                  defaultMessage:\n                    'You have reached the {number} pending {number, plural, one {release} other {releases}} limit.',\n                },\n                { number: maximumReleases }\n              )}\n              onClose={() => {}}\n              closeLabel=\"\"\n            >\n              {formatMessage({\n                id: 'content-releases.pages.Releases.max-limit-reached.message',\n                defaultMessage: 'Upgrade to manage an unlimited number of releases.',\n              })}\n            </StyledAlert>\n          )}\n          <Tabs.Root variant=\"simple\" onValueChange={handleTabChange} value={activeTab}>\n            <Box paddingBottom={8}>\n              <Tabs.List\n                aria-label={formatMessage({\n                  id: 'content-releases.pages.Releases.tab-group.label',\n                  defaultMessage: 'Releases list',\n                })}\n              >\n                <Tabs.Trigger value=\"pending\">\n                  {formatMessage(\n                    {\n                      id: 'content-releases.pages.Releases.tab.pending',\n                      defaultMessage: 'Pending ({count})',\n                    },\n                    {\n                      count: totalPendingReleases,\n                    }\n                  )}\n                </Tabs.Trigger>\n                <Tabs.Trigger value=\"done\">\n                  {formatMessage({\n                    id: 'content-releases.pages.Releases.tab.done',\n                    defaultMessage: 'Done',\n                  })}\n                </Tabs.Trigger>\n              </Tabs.List>\n              <Divider />\n            </Box>\n            {/* Pending releases */}\n            <Tabs.Content value=\"pending\">\n              <ReleasesGrid\n                sectionTitle=\"pending\"\n                releases={response?.currentData?.data}\n                isError={isError}\n              />\n            </Tabs.Content>\n            {/* Done releases */}\n            <Tabs.Content value=\"done\">\n              <ReleasesGrid\n                sectionTitle=\"done\"\n                releases={response?.currentData?.data}\n                isError={isError}\n              />\n            </Tabs.Content>\n          </Tabs.Root>\n          <Pagination.Root\n            {...response?.currentData?.meta?.pagination}\n            defaultPageSize={response?.currentData?.meta?.pagination?.pageSize}\n          >\n            <Pagination.PageSize options={['8', '16', '32', '64']} />\n            <Pagination.Links />\n          </Pagination.Root>\n        </>\n      </Layouts.Content>\n      <ReleaseModal\n        open={releaseModalShown}\n        handleClose={toggleAddReleaseModal}\n        handleSubmit={handleAddRelease}\n        isLoading={isSubmittingForm}\n        initialValues={{\n          ...INITIAL_FORM_VALUES,\n          timezone: data?.data.defaultTimezone ? data.data.defaultTimezone.split('&')[1] : null,\n        }}\n      />\n    </Main>\n  );\n};\n\nexport { ReleasesPage, getBadgeProps };\n"],"names":["LinkCard","styled","Link","RelativeTime","BaseRelativeTime","getBadgeProps","status","color","textColor","backgroundColor","borderColor","ReleasesGrid","sectionTitle","releases","isError","formatMessage","useIntl","_jsx","Page","Error","length","EmptyStateLayout","content","id","defaultMessage","target","icon","EmptyDocuments","width","Grid","Root","gap","map","name","scheduledAt","Item","col","s","xs","direction","alignItems","tag","NavLink","to","isExternal","_jsxs","Flex","justifyContent","padding","hasRadius","background","shadow","height","Typography","variant","fontWeight","timestamp","Date","Badge","StyledAlert","Alert","INITIAL_FORM_VALUES","date","format","time","isScheduled","timezone","ReleasesPage","location","useLocation","releaseModalShown","setReleaseModalShown","React","useState","toggleNotification","useNotification","navigate","useNavigate","formatAPIError","useAPIErrorHandler","query","setQuery","useQueryParams","response","useGetReleasesQuery","data","isLoading","isLoadingSettings","useGetReleaseSettingsQuery","createRelease","isSubmittingForm","useCreateReleaseMutation","getFeature","useLicenseLimits","maximumReleases","trackUsage","useTracking","allowedActions","canCreate","useRBAC","PERMISSIONS","isLoadingReleases","isSuccess","activeTab","currentData","meta","useEffect","state","errors","type","title","message","replace","toggleAddReleaseModal","prev","Loading","totalPendingReleases","pendingReleasesCount","hasReachedMaximumPendingReleases","handleTabChange","tabValue","page","pageSize","pagination","filters","releasedAt","$notNull","handleAddRelease","toString","isFetchError","error","Main","aria-busy","Layouts","Header","secondaryAction","GradientBadge","label","subtitle","primaryAction","Button","startIcon","Plus","onClick","disabled","Content","_Fragment","marginBottom","action","href","number","onClose","closeLabel","Tabs","onValueChange","value","Box","paddingBottom","List","aria-label","Trigger","count","Divider","Pagination","defaultPageSize","PageSize","options","Links","ReleaseModal","open","handleClose","handleSubmit","initialValues","defaultTimezone","split"],"mappings":"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"}