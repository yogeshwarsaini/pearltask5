{"version":3,"file":"ReleaseDetailsPage.mjs","sources":["../../../admin/src/pages/ReleaseDetailsPage.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {\n  Page,\n  Pagination,\n  Table,\n  BackButton,\n  ConfirmDialog,\n  useTracking,\n  useAPIErrorHandler,\n  useNotification,\n  useQueryParams,\n  useRBAC,\n  isFetchError,\n  useStrapiApp,\n  Layouts,\n} from '@strapi/admin/strapi-admin';\nimport {\n  Button,\n  Flex,\n  Main,\n  Tr,\n  Td,\n  Typography,\n  Badge,\n  SingleSelect,\n  SingleSelectOption,\n  EmptyStateLayout,\n  LinkButton,\n  Dialog,\n  SimpleMenu,\n  Menu,\n} from '@strapi/design-system';\nimport { More, Pencil, Trash } from '@strapi/icons';\nimport { EmptyDocuments } from '@strapi/icons/symbols';\nimport format from 'date-fns/format';\nimport { utcToZonedTime } from 'date-fns-tz';\nimport { useIntl } from 'react-intl';\nimport { useParams, useNavigate, Link as ReactRouterLink, Navigate } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { EntryValidationPopover } from '../components/EntryValidationPopover';\nimport { RelativeTime } from '../components/RelativeTime';\nimport { ReleaseActionMenu } from '../components/ReleaseActionMenu';\nimport { ReleaseActionOptions } from '../components/ReleaseActionOptions';\nimport { ReleaseModal, FormValues } from '../components/ReleaseModal';\nimport { PERMISSIONS } from '../constants';\nimport {\n  GetReleaseActionsQueryParams,\n  useGetReleaseActionsQuery,\n  useGetReleaseQuery,\n  useGetReleaseSettingsQuery,\n  useUpdateReleaseMutation,\n  useUpdateReleaseActionMutation,\n  usePublishReleaseMutation,\n  useDeleteReleaseMutation,\n  releaseApi,\n} from '../services/release';\nimport { useTypedDispatch } from '../store/hooks';\nimport { isBaseQueryError } from '../utils/api';\nimport { getTimezoneOffset } from '../utils/time';\n\nimport { getBadgeProps } from './ReleasesPage';\n\nimport type {\n  ReleaseAction,\n  ReleaseActionGroupBy,\n} from '../../../shared/contracts/release-actions';\n\n/* -------------------------------------------------------------------------------------------------\n * ReleaseDetailsLayout\n * -----------------------------------------------------------------------------------------------*/\nconst ReleaseInfoWrapper = styled(Flex)`\n  align-self: stretch;\n  border-bottom-right-radius: ${({ theme }) => theme.borderRadius};\n  border-bottom-left-radius: ${({ theme }) => theme.borderRadius};\n  border-top: 1px solid ${({ theme }) => theme.colors.neutral150};\n`;\n\ninterface ReleaseDetailsLayoutProps {\n  toggleEditReleaseModal: () => void;\n  toggleWarningSubmit: () => void;\n  children: React.ReactNode;\n}\n\nconst ReleaseDetailsLayout = ({\n  toggleEditReleaseModal,\n  toggleWarningSubmit,\n  children,\n}: ReleaseDetailsLayoutProps) => {\n  const { formatMessage, formatDate, formatTime } = useIntl();\n  const { releaseId } = useParams<{ releaseId: string }>();\n  const {\n    data,\n    isLoading: isLoadingDetails,\n    error,\n  } = useGetReleaseQuery(\n    { id: releaseId! },\n    {\n      skip: !releaseId,\n    }\n  );\n  const [publishRelease, { isLoading: isPublishing }] = usePublishReleaseMutation();\n  const { toggleNotification } = useNotification();\n  const { formatAPIError } = useAPIErrorHandler();\n  const { allowedActions } = useRBAC(PERMISSIONS);\n  const { canUpdate, canDelete, canPublish } = allowedActions;\n  const dispatch = useTypedDispatch();\n  const { trackUsage } = useTracking();\n\n  const release = data?.data;\n\n  const handlePublishRelease = (id: string) => async () => {\n    const response = await publishRelease({ id });\n\n    if ('data' in response) {\n      // When the response returns an object with 'data', handle success\n      toggleNotification({\n        type: 'success',\n        message: formatMessage({\n          id: 'content-releases.pages.ReleaseDetails.publish-notification-success',\n          defaultMessage: 'Release was published successfully.',\n        }),\n      });\n\n      const { totalEntries, totalPublishedEntries, totalUnpublishedEntries } = response.data.meta;\n\n      trackUsage('didPublishRelease', {\n        totalEntries,\n        totalPublishedEntries,\n        totalUnpublishedEntries,\n      });\n    } else if (isFetchError(response.error)) {\n      // When the response returns an object with 'error', handle fetch error\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(response.error),\n      });\n    } else {\n      // Otherwise, the response returns an object with 'error', handle a generic error\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\n      });\n    }\n  };\n\n  const handleRefresh = () => {\n    dispatch(\n      releaseApi.util.invalidateTags([\n        { type: 'ReleaseAction', id: 'LIST' },\n        { type: 'Release', id: releaseId },\n      ])\n    );\n  };\n\n  const getCreatedByUser = () => {\n    if (!release?.createdBy) {\n      return null;\n    }\n\n    // Favor the username\n    if (release.createdBy.username) {\n      return release.createdBy.username;\n    }\n\n    // Firstname may not exist if created with SSO\n    if (release.createdBy.firstname) {\n      return `${release.createdBy.firstname} ${release.createdBy.lastname || ''}`.trim();\n    }\n\n    // All users must have at least an email\n    return release.createdBy.email;\n  };\n\n  if (isLoadingDetails) {\n    return <Page.Loading />;\n  }\n\n  if ((isBaseQueryError(error) && 'code' in error) || !release) {\n    return (\n      <Navigate\n        to=\"..\"\n        state={{\n          errors: [\n            {\n              // @ts-expect-error â€“ TODO: fix this weird error flow\n              code: error?.code,\n            },\n          ],\n        }}\n      />\n    );\n  }\n\n  const totalEntries = release.actions.meta.count || 0;\n  const hasCreatedByUser = Boolean(getCreatedByUser());\n\n  const isScheduled = release.scheduledAt && release.timezone;\n  const numberOfEntriesText = formatMessage(\n    {\n      id: 'content-releases.pages.Details.header-subtitle',\n      defaultMessage: '{number, plural, =0 {No entries} one {# entry} other {# entries}}',\n    },\n    { number: totalEntries }\n  );\n  const scheduledText = isScheduled\n    ? formatMessage(\n        {\n          id: 'content-releases.pages.ReleaseDetails.header-subtitle.scheduled',\n          defaultMessage: 'Scheduled for {date} at {time} ({offset})',\n        },\n        {\n          date: formatDate(new Date(release.scheduledAt!), {\n            weekday: 'long',\n            day: 'numeric',\n            month: 'long',\n            year: 'numeric',\n            timeZone: release.timezone!,\n          }),\n          time: formatTime(new Date(release.scheduledAt!), {\n            timeZone: release.timezone!,\n            hourCycle: 'h23',\n          }),\n          offset: getTimezoneOffset(release.timezone!, new Date(release.scheduledAt!)),\n        }\n      )\n    : '';\n\n  return (\n    <Main aria-busy={isLoadingDetails}>\n      <Layouts.Header\n        title={release.name}\n        subtitle={\n          <Flex gap={2} lineHeight={6}>\n            <Typography textColor=\"neutral600\" variant=\"epsilon\">\n              {numberOfEntriesText + (isScheduled ? ` - ${scheduledText}` : '')}\n            </Typography>\n            <Badge {...getBadgeProps(release.status)}>{release.status}</Badge>\n          </Flex>\n        }\n        navigationAction={<BackButton fallback=\"..\" />}\n        primaryAction={\n          !release.releasedAt && (\n            <Flex gap={2}>\n              <SimpleMenuButton\n                label={<More />}\n                variant=\"tertiary\"\n                endIcon={null}\n                paddingLeft=\"7px\"\n                paddingRight=\"7px\"\n                aria-label={formatMessage({\n                  id: 'content-releases.header.actions.open-release-actions',\n                  defaultMessage: 'Release edit and delete menu',\n                })}\n                popoverPlacement=\"bottom-end\"\n              >\n                <Menu.Item\n                  disabled={!canUpdate}\n                  onSelect={toggleEditReleaseModal}\n                  startIcon={<Pencil />}\n                >\n                  {formatMessage({\n                    id: 'content-releases.header.actions.edit',\n                    defaultMessage: 'Edit',\n                  })}\n                </Menu.Item>\n                <Menu.Item\n                  disabled={!canDelete}\n                  onSelect={toggleWarningSubmit}\n                  variant=\"danger\"\n                  startIcon={<Trash />}\n                >\n                  {formatMessage({\n                    id: 'content-releases.header.actions.delete',\n                    defaultMessage: 'Delete',\n                  })}\n                </Menu.Item>\n                <ReleaseInfoWrapper\n                  direction=\"column\"\n                  justifyContent=\"center\"\n                  alignItems=\"flex-start\"\n                  gap={1}\n                  padding={4}\n                >\n                  <Typography variant=\"pi\" fontWeight=\"bold\">\n                    {formatMessage({\n                      id: 'content-releases.header.actions.created',\n                      defaultMessage: 'Created',\n                    })}\n                  </Typography>\n                  <Typography variant=\"pi\" color=\"neutral300\">\n                    <RelativeTime timestamp={new Date(release.createdAt)} />\n                    {formatMessage(\n                      {\n                        id: 'content-releases.header.actions.created.description',\n                        defaultMessage:\n                          '{hasCreatedByUser, select, true { by {createdBy}} other { by deleted user}}',\n                      },\n                      { createdBy: getCreatedByUser(), hasCreatedByUser }\n                    )}\n                  </Typography>\n                </ReleaseInfoWrapper>\n              </SimpleMenuButton>\n              <Button size=\"S\" variant=\"tertiary\" onClick={handleRefresh}>\n                {formatMessage({\n                  id: 'content-releases.header.actions.refresh',\n                  defaultMessage: 'Refresh',\n                })}\n              </Button>\n              {canPublish ? (\n                <Button\n                  size=\"S\"\n                  variant=\"default\"\n                  onClick={handlePublishRelease(release.id.toString())}\n                  loading={isPublishing}\n                  disabled={release.actions.meta.count === 0}\n                >\n                  {formatMessage({\n                    id: 'content-releases.header.actions.publish',\n                    defaultMessage: 'Publish',\n                  })}\n                </Button>\n              ) : null}\n            </Flex>\n          )\n        }\n      />\n      {children}\n    </Main>\n  );\n};\n\nconst SimpleMenuButton = styled(SimpleMenu)`\n  & > span {\n    display: flex;\n  }\n`;\n\n/* -------------------------------------------------------------------------------------------------\n * ReleaseDetailsBody\n * -----------------------------------------------------------------------------------------------*/\nconst GROUP_BY_OPTIONS = ['contentType', 'locale', 'action'] as const;\nconst GROUP_BY_OPTIONS_NO_LOCALE = ['contentType', 'action'] as const;\nconst getGroupByOptionLabel = (value: (typeof GROUP_BY_OPTIONS)[number]) => {\n  if (value === 'locale') {\n    return {\n      id: 'content-releases.pages.ReleaseDetails.groupBy.option.locales',\n      defaultMessage: 'Locales',\n    };\n  }\n\n  if (value === 'action') {\n    return {\n      id: 'content-releases.pages.ReleaseDetails.groupBy.option.actions',\n      defaultMessage: 'Actions',\n    };\n  }\n\n  return {\n    id: 'content-releases.pages.ReleaseDetails.groupBy.option.content-type',\n    defaultMessage: 'Content-Types',\n  };\n};\n\ninterface ReleaseDetailsBodyProps {\n  releaseId: string;\n}\n\nconst ReleaseDetailsBody = ({ releaseId }: ReleaseDetailsBodyProps) => {\n  const { formatMessage } = useIntl();\n  const [{ query }, setQuery] = useQueryParams<GetReleaseActionsQueryParams>();\n  const { toggleNotification } = useNotification();\n  const { formatAPIError } = useAPIErrorHandler();\n  const {\n    data: releaseData,\n    isLoading: isReleaseLoading,\n    error: releaseError,\n  } = useGetReleaseQuery({ id: releaseId });\n  const {\n    allowedActions: { canUpdate },\n  } = useRBAC(PERMISSIONS);\n  const runHookWaterfall = useStrapiApp('ReleaseDetailsPage', (state) => state.runHookWaterfall);\n\n  // TODO: Migrated displayedHeader to v5\n  const { displayedHeaders, hasI18nEnabled }: { displayedHeaders: any; hasI18nEnabled: boolean } =\n    runHookWaterfall('ContentReleases/pages/ReleaseDetails/add-locale-in-releases', {\n      displayedHeaders: [\n        {\n          label: {\n            id: 'content-releases.page.ReleaseDetails.table.header.label.name',\n            defaultMessage: 'name',\n          },\n          name: 'name',\n        },\n      ],\n      hasI18nEnabled: false,\n    });\n\n  const release = releaseData?.data;\n  const selectedGroupBy = query?.groupBy || 'contentType';\n\n  const {\n    isLoading,\n    isFetching,\n    isError,\n    data,\n    error: releaseActionsError,\n  } = useGetReleaseActionsQuery({\n    ...query,\n    releaseId,\n  });\n\n  const [updateReleaseAction] = useUpdateReleaseActionMutation();\n\n  const handleChangeType = async (\n    e: React.ChangeEvent<HTMLInputElement>,\n    actionId: ReleaseAction['id'],\n    actionPath: [string, number]\n  ) => {\n    const response = await updateReleaseAction({\n      params: {\n        releaseId,\n        actionId,\n      },\n      body: {\n        type: e.target.value as ReleaseAction['type'],\n      },\n      query, // We are passing the query params to make optimistic updates\n      actionPath, // We are passing the action path to found the position in the cache of the action for optimistic updates\n    });\n\n    if ('error' in response) {\n      if (isFetchError(response.error)) {\n        // When the response returns an object with 'error', handle fetch error\n        toggleNotification({\n          type: 'danger',\n          message: formatAPIError(response.error),\n        });\n      } else {\n        // Otherwise, the response returns an object with 'error', handle a generic error\n        toggleNotification({\n          type: 'danger',\n          message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\n        });\n      }\n    }\n  };\n\n  if (isLoading || isReleaseLoading) {\n    return <Page.Loading />;\n  }\n\n  const releaseActions = data?.data;\n  const releaseMeta = data?.meta;\n  const contentTypes = releaseMeta?.contentTypes || {};\n  const components = releaseMeta?.components || {};\n\n  if (isBaseQueryError(releaseError) || !release) {\n    const errorsArray = [];\n    if (releaseError && 'code' in releaseError) {\n      errorsArray.push({\n        code: releaseError.code,\n      });\n    }\n    if (releaseActionsError && 'code' in releaseActionsError) {\n      errorsArray.push({\n        code: releaseActionsError.code,\n      });\n    }\n    return (\n      <Navigate\n        to=\"..\"\n        state={{\n          errors: errorsArray,\n        }}\n      />\n    );\n  }\n\n  if (isError || !releaseActions) {\n    return <Page.Error />;\n  }\n\n  if (Object.keys(releaseActions).length === 0) {\n    return (\n      <Layouts.Content>\n        <EmptyStateLayout\n          action={\n            <LinkButton\n              tag={ReactRouterLink}\n              to={{\n                pathname: '/content-manager',\n              }}\n              style={{ textDecoration: 'none' }}\n              variant=\"secondary\"\n            >\n              {formatMessage({\n                id: 'content-releases.page.Details.button.openContentManager',\n                defaultMessage: 'Open the Content Manager',\n              })}\n            </LinkButton>\n          }\n          icon={<EmptyDocuments width=\"16rem\" />}\n          content={formatMessage({\n            id: 'content-releases.pages.Details.tab.emptyEntries',\n            defaultMessage:\n              'This release is empty. Open the Content Manager, select an entry and add it to the release.',\n          })}\n        />\n      </Layouts.Content>\n    );\n  }\n\n  const groupByLabel = formatMessage({\n    id: 'content-releases.pages.ReleaseDetails.groupBy.aria-label',\n    defaultMessage: 'Group by',\n  });\n  const headers = [\n    ...displayedHeaders,\n    {\n      label: {\n        id: 'content-releases.page.ReleaseDetails.table.header.label.content-type',\n        defaultMessage: 'content-type',\n      },\n      name: 'content-type',\n    },\n    {\n      label: {\n        id: 'content-releases.page.ReleaseDetails.table.header.label.action',\n        defaultMessage: 'action',\n      },\n      name: 'action',\n    },\n    ...(!release.releasedAt\n      ? [\n          {\n            label: {\n              id: 'content-releases.page.ReleaseDetails.table.header.label.status',\n              defaultMessage: 'status',\n            },\n            name: 'status',\n          },\n        ]\n      : []),\n  ];\n\n  const options = hasI18nEnabled ? GROUP_BY_OPTIONS : GROUP_BY_OPTIONS_NO_LOCALE;\n\n  return (\n    <Layouts.Content>\n      <Flex gap={8} direction=\"column\" alignItems=\"stretch\">\n        <Flex>\n          <SingleSelect\n            placeholder={groupByLabel}\n            aria-label={groupByLabel}\n            customizeContent={(value) =>\n              formatMessage(\n                {\n                  id: `content-releases.pages.ReleaseDetails.groupBy.label`,\n                  defaultMessage: `Group by {groupBy}`,\n                },\n                {\n                  groupBy: value,\n                }\n              )\n            }\n            value={formatMessage(getGroupByOptionLabel(selectedGroupBy))}\n            onChange={(value) => setQuery({ groupBy: value as ReleaseActionGroupBy })}\n          >\n            {options.map((option) => (\n              <SingleSelectOption key={option} value={option}>\n                {formatMessage(getGroupByOptionLabel(option))}\n              </SingleSelectOption>\n            ))}\n          </SingleSelect>\n        </Flex>\n        {Object.keys(releaseActions).map((key) => (\n          <Flex key={`releases-group-${key}`} gap={4} direction=\"column\" alignItems=\"stretch\">\n            <Flex role=\"separator\" aria-label={key}>\n              <Badge>{key}</Badge>\n            </Flex>\n            <Table.Root\n              rows={releaseActions[key].map((item) => ({\n                ...item,\n                id: Number(item.entry.id),\n              }))}\n              headers={headers}\n              isLoading={isLoading || isFetching}\n            >\n              <Table.Content>\n                <Table.Head>\n                  {headers.map(({ label, name }) => (\n                    <Table.HeaderCell key={name} label={formatMessage(label)} name={name} />\n                  ))}\n                </Table.Head>\n                <Table.Loading />\n                <Table.Body>\n                  {releaseActions[key].map(\n                    ({ id, contentType, locale, type, entry, status }, actionIndex) => (\n                      <Tr key={id}>\n                        <Td width=\"25%\" maxWidth=\"200px\">\n                          <Typography ellipsis>{`${\n                            contentType.mainFieldValue || entry.id\n                          }`}</Typography>\n                        </Td>\n                        {hasI18nEnabled && (\n                          <Td width=\"10%\">\n                            <Typography>{`${locale?.name ? locale.name : '-'}`}</Typography>\n                          </Td>\n                        )}\n\n                        <Td width=\"10%\">\n                          <Typography>{contentType.displayName || ''}</Typography>\n                        </Td>\n                        <Td width=\"20%\">\n                          {release.releasedAt ? (\n                            <Typography>\n                              {formatMessage(\n                                {\n                                  id: 'content-releases.page.ReleaseDetails.table.action-published',\n                                  defaultMessage:\n                                    'This entry was <b>{isPublish, select, true {published} other {unpublished}}</b>.',\n                                },\n                                {\n                                  isPublish: type === 'publish',\n                                  b: (children: React.ReactNode) => (\n                                    <Typography fontWeight=\"bold\">{children}</Typography>\n                                  ),\n                                }\n                              )}\n                            </Typography>\n                          ) : (\n                            <ReleaseActionOptions\n                              selected={type}\n                              handleChange={(e) => handleChangeType(e, id, [key, actionIndex])}\n                              name={`release-action-${id}-type`}\n                              disabled={!canUpdate}\n                            />\n                          )}\n                        </Td>\n                        {!release.releasedAt && (\n                          <>\n                            <Td width=\"20%\" minWidth=\"200px\">\n                              <EntryValidationPopover\n                                action={type}\n                                schema={contentTypes?.[contentType.uid]}\n                                entry={entry}\n                                status={status}\n                              />\n                            </Td>\n                            <Td>\n                              <Flex justifyContent=\"flex-end\">\n                                <ReleaseActionMenu.Root>\n                                  <ReleaseActionMenu.ReleaseActionEntryLinkItem\n                                    contentTypeUid={contentType.uid}\n                                    documentId={entry.documentId}\n                                    locale={locale?.code}\n                                  />\n                                  <ReleaseActionMenu.DeleteReleaseActionItem\n                                    releaseId={release.id}\n                                    actionId={id}\n                                  />\n                                </ReleaseActionMenu.Root>\n                              </Flex>\n                            </Td>\n                          </>\n                        )}\n                      </Tr>\n                    )\n                  )}\n                </Table.Body>\n              </Table.Content>\n            </Table.Root>\n          </Flex>\n        ))}\n        <Pagination.Root\n          {...releaseMeta?.pagination}\n          defaultPageSize={releaseMeta?.pagination?.pageSize}\n        >\n          <Pagination.PageSize />\n          <Pagination.Links />\n        </Pagination.Root>\n      </Flex>\n    </Layouts.Content>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * ReleaseDetailsPage\n * -----------------------------------------------------------------------------------------------*/\nconst ReleaseDetailsPage = () => {\n  const { formatMessage } = useIntl();\n  const { releaseId } = useParams<{ releaseId: string }>();\n  const { toggleNotification } = useNotification();\n  const { formatAPIError } = useAPIErrorHandler();\n  const navigate = useNavigate();\n  const [releaseModalShown, setReleaseModalShown] = React.useState(false);\n  const [showWarningSubmit, setWarningSubmit] = React.useState(false);\n\n  const {\n    isLoading: isLoadingDetails,\n    data,\n    isSuccess: isSuccessDetails,\n  } = useGetReleaseQuery(\n    { id: releaseId! },\n    {\n      skip: !releaseId,\n    }\n  );\n  const { data: dataTimezone, isLoading: isLoadingTimezone } = useGetReleaseSettingsQuery();\n  const [updateRelease, { isLoading: isSubmittingForm }] = useUpdateReleaseMutation();\n  const [deleteRelease] = useDeleteReleaseMutation();\n\n  const toggleEditReleaseModal = () => {\n    setReleaseModalShown((prev) => !prev);\n  };\n\n  const getTimezoneValue = () => {\n    if (releaseData?.timezone) {\n      return releaseData.timezone;\n    } else {\n      if (dataTimezone?.data.defaultTimezone) {\n        return dataTimezone.data.defaultTimezone;\n      }\n      return null;\n    }\n  };\n\n  const toggleWarningSubmit = () => setWarningSubmit((prevState) => !prevState);\n\n  if (isLoadingDetails || isLoadingTimezone) {\n    return (\n      <ReleaseDetailsLayout\n        toggleEditReleaseModal={toggleEditReleaseModal}\n        toggleWarningSubmit={toggleWarningSubmit}\n      >\n        <Page.Loading />\n      </ReleaseDetailsLayout>\n    );\n  }\n\n  if (!releaseId) {\n    return <Navigate to=\"..\" />;\n  }\n\n  const releaseData = (isSuccessDetails && data?.data) || null;\n\n  const title = releaseData?.name || '';\n  const timezone = getTimezoneValue();\n  const scheduledAt =\n    releaseData?.scheduledAt && timezone ? utcToZonedTime(releaseData.scheduledAt, timezone) : null;\n  // Just get the date and time to display without considering updated timezone time\n  const date = scheduledAt ? format(scheduledAt, 'yyyy-MM-dd') : undefined;\n  const time = scheduledAt ? format(scheduledAt, 'HH:mm') : '';\n\n  const handleEditRelease = async (values: FormValues) => {\n    const response = await updateRelease({\n      id: releaseId,\n      name: values.name,\n      scheduledAt: values.scheduledAt,\n      timezone: values.timezone,\n    });\n\n    if ('data' in response) {\n      // When the response returns an object with 'data', handle success\n      toggleNotification({\n        type: 'success',\n        message: formatMessage({\n          id: 'content-releases.modal.release-updated-notification-success',\n          defaultMessage: 'Release updated.',\n        }),\n      });\n      toggleEditReleaseModal();\n    } else if (isFetchError(response.error)) {\n      // When the response returns an object with 'error', handle fetch error\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(response.error),\n      });\n    } else {\n      // Otherwise, the response returns an object with 'error', handle a generic error\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\n      });\n    }\n  };\n\n  const handleDeleteRelease = async () => {\n    const response = await deleteRelease({\n      id: releaseId,\n    });\n\n    if ('data' in response) {\n      navigate('..');\n    } else if (isFetchError(response.error)) {\n      // When the response returns an object with 'error', handle fetch error\n      toggleNotification({\n        type: 'danger',\n        message: formatAPIError(response.error),\n      });\n    } else {\n      // Otherwise, the response returns an object with 'error', handle a generic error\n      toggleNotification({\n        type: 'danger',\n        message: formatMessage({ id: 'notification.error', defaultMessage: 'An error occurred' }),\n      });\n    }\n  };\n\n  return (\n    <ReleaseDetailsLayout\n      toggleEditReleaseModal={toggleEditReleaseModal}\n      toggleWarningSubmit={toggleWarningSubmit}\n    >\n      <ReleaseDetailsBody releaseId={releaseId} />\n      <ReleaseModal\n        open={releaseModalShown}\n        handleClose={toggleEditReleaseModal}\n        handleSubmit={handleEditRelease}\n        isLoading={isLoadingDetails || isSubmittingForm}\n        initialValues={{\n          name: title || '',\n          scheduledAt,\n          date,\n          time,\n          isScheduled: Boolean(scheduledAt),\n          timezone,\n        }}\n      />\n      <Dialog.Root open={showWarningSubmit} onOpenChange={toggleWarningSubmit}>\n        <ConfirmDialog onConfirm={handleDeleteRelease}>\n          {formatMessage({\n            id: 'content-releases.dialog.confirmation-message',\n            defaultMessage: 'Are you sure you want to delete this release?',\n          })}\n        </ConfirmDialog>\n      </Dialog.Root>\n    </ReleaseDetailsLayout>\n  );\n};\n\nexport { ReleaseDetailsPage };\n"],"names":["ReleaseInfoWrapper","styled","Flex","theme","borderRadius","colors","neutral150","ReleaseDetailsLayout","toggleEditReleaseModal","toggleWarningSubmit","children","formatMessage","formatDate","formatTime","useIntl","releaseId","useParams","data","isLoading","isLoadingDetails","error","useGetReleaseQuery","id","skip","publishRelease","isPublishing","usePublishReleaseMutation","toggleNotification","useNotification","formatAPIError","useAPIErrorHandler","allowedActions","useRBAC","PERMISSIONS","canUpdate","canDelete","canPublish","dispatch","useTypedDispatch","trackUsage","useTracking","release","handlePublishRelease","response","type","message","defaultMessage","totalEntries","totalPublishedEntries","totalUnpublishedEntries","meta","isFetchError","handleRefresh","releaseApi","util","invalidateTags","getCreatedByUser","createdBy","username","firstname","lastname","trim","email","_jsx","Page","Loading","Navigate","to","state","errors","code","actions","count","hasCreatedByUser","Boolean","isScheduled","scheduledAt","timezone","numberOfEntriesText","number","scheduledText","date","Date","weekday","day","month","year","timeZone","time","hourCycle","offset","getTimezoneOffset","_jsxs","Main","aria-busy","Layouts","Header","title","name","subtitle","gap","lineHeight","Typography","textColor","variant","Badge","getBadgeProps","status","navigationAction","BackButton","fallback","primaryAction","releasedAt","SimpleMenuButton","label","More","endIcon","paddingLeft","paddingRight","aria-label","popoverPlacement","Menu","Item","disabled","onSelect","startIcon","Pencil","Trash","direction","justifyContent","alignItems","padding","fontWeight","color","RelativeTime","timestamp","createdAt","Button","size","onClick","toString","loading","SimpleMenu","GROUP_BY_OPTIONS","GROUP_BY_OPTIONS_NO_LOCALE","getGroupByOptionLabel","value","ReleaseDetailsBody","query","setQuery","useQueryParams","releaseData","isReleaseLoading","releaseError","runHookWaterfall","useStrapiApp","displayedHeaders","hasI18nEnabled","selectedGroupBy","groupBy","isFetching","isError","releaseActionsError","useGetReleaseActionsQuery","updateReleaseAction","useUpdateReleaseActionMutation","handleChangeType","e","actionId","actionPath","params","body","target","releaseActions","releaseMeta","contentTypes","components","isBaseQueryError","errorsArray","push","Error","Object","keys","length","Content","EmptyStateLayout","action","LinkButton","tag","ReactRouterLink","pathname","style","textDecoration","icon","EmptyDocuments","width","content","groupByLabel","headers","options","SingleSelect","placeholder","customizeContent","onChange","map","option","SingleSelectOption","key","role","Table","Root","rows","item","Number","entry","Head","HeaderCell","Body","contentType","locale","actionIndex","Tr","Td","maxWidth","ellipsis","mainFieldValue","displayName","isPublish","b","ReleaseActionOptions","selected","handleChange","_Fragment","minWidth","EntryValidationPopover","schema","uid","ReleaseActionMenu","ReleaseActionEntryLinkItem","contentTypeUid","documentId","DeleteReleaseActionItem","Pagination","pagination","defaultPageSize","pageSize","PageSize","Links","ReleaseDetailsPage","navigate","useNavigate","releaseModalShown","setReleaseModalShown","React","useState","showWarningSubmit","setWarningSubmit","isSuccess","isSuccessDetails","dataTimezone","isLoadingTimezone","useGetReleaseSettingsQuery","updateRelease","isSubmittingForm","useUpdateReleaseMutation","deleteRelease","useDeleteReleaseMutation","prev","getTimezoneValue","defaultTimezone","prevState","utcToZonedTime","format","undefined","handleEditRelease","values","handleDeleteRelease","ReleaseModal","open","handleClose","handleSubmit","initialValues","Dialog","onOpenChange","ConfirmDialog","onConfirm"],"mappings":"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"}