{"version":3,"file":"content-type.js","sources":["../../src/plops/content-type.ts"],"sourcesContent":["import { join } from 'path';\nimport type { NodePlopAPI, ActionType } from 'plop';\nimport slugify from '@sindresorhus/slugify';\nimport fs from 'fs-extra';\nimport { strings } from '@strapi/utils';\nimport tsUtils from '@strapi/typescript-utils';\n\nimport getDestinationPrompts from './prompts/get-destination-prompts';\nimport getFilePath from './utils/get-file-path';\nimport ctNamesPrompts from './prompts/ct-names-prompts';\nimport kindPrompts from './prompts/kind-prompts';\nimport getAttributesPrompts from './prompts/get-attributes-prompts';\nimport bootstrapApiPrompts from './prompts/bootstrap-api-prompts';\n\nexport default (plop: NodePlopAPI) => {\n  // Model generator\n  plop.setGenerator('content-type', {\n    description: 'Generate a content type for an API',\n    async prompts(inquirer) {\n      const config = await inquirer.prompt([...ctNamesPrompts, ...kindPrompts]);\n      const attributes = await getAttributesPrompts(inquirer);\n\n      const api = await inquirer.prompt([\n        ...getDestinationPrompts('model', plop.getDestBasePath()),\n        {\n          when: (answers) => answers.destination === 'new',\n          type: 'input',\n          name: 'id',\n          default: config.singularName,\n          message: 'Name of the new API?',\n          async validate(input) {\n            if (!strings.isKebabCase(input)) {\n              return 'Value must be in kebab-case';\n            }\n\n            const apiPath = join(plop.getDestBasePath(), 'api');\n            const exists = await fs.pathExists(apiPath);\n\n            if (!exists) {\n              return true;\n            }\n\n            const apiDir = await fs.readdir(apiPath, { withFileTypes: true });\n            const apiDirContent = apiDir.filter((fd) => fd.isDirectory());\n\n            if (apiDirContent.findIndex((dir) => dir.name === input) !== -1) {\n              throw new Error('This name is already taken.');\n            }\n\n            return true;\n          },\n        },\n        ...bootstrapApiPrompts,\n      ]);\n\n      return {\n        ...config,\n        ...api,\n        attributes,\n      };\n    },\n    actions(answers) {\n      if (!answers) {\n        return [];\n      }\n\n      const attributes = answers.attributes.reduce((object: any, answer: any) => {\n        const val: any = { type: answer.attributeType };\n\n        if (answer.attributeType === 'enumeration') {\n          val.enum = answer.enum.split(',').map((item: string) => item.trim());\n        }\n\n        if (answer.attributeType === 'media') {\n          val.allowedTypes = ['images', 'files', 'videos', 'audios'];\n          val.multiple = answer.multiple;\n        }\n\n        return Object.assign(object, { [answer.attributeName]: val }, {});\n      }, {});\n\n      const filePath = getFilePath(answers.destination);\n      const currentDir = process.cwd();\n      const language = tsUtils.isUsingTypeScriptSync(currentDir) ? 'ts' : 'js';\n\n      const baseActions: Array<ActionType> = [\n        {\n          type: 'add',\n          path: `${filePath}/content-types/{{ singularName }}/schema.json`,\n          templateFile: `templates/${language}/content-type.schema.json.hbs`,\n          data: {\n            collectionName: slugify(answers.pluralName, { separator: '_' }),\n          },\n        },\n      ];\n\n      if (Object.entries(attributes).length > 0) {\n        baseActions.push({\n          type: 'modify',\n          path: `${filePath}/content-types/{{ singularName }}/schema.json`,\n          transform(template: string) {\n            const parsedTemplate = JSON.parse(template);\n            parsedTemplate.attributes = attributes;\n            return JSON.stringify(parsedTemplate, null, 2);\n          },\n        });\n      }\n\n      if (answers.bootstrapApi) {\n        const { singularName } = answers;\n\n        let uid;\n        if (answers.destination === 'new') {\n          uid = `api::${answers.id}.${singularName}`;\n        } else if (answers.api) {\n          uid = `api::${answers.api}.${singularName}`;\n        } else if (answers.plugin) {\n          uid = `plugin::${answers.plugin}.${singularName}`;\n        }\n\n        baseActions.push(\n          {\n            type: 'add',\n            path: `${filePath}/controllers/{{ singularName }}.${language}`,\n            templateFile: `templates/${language}/core-controller.${language}.hbs`,\n            data: { uid },\n          },\n          {\n            type: 'add',\n            path: `${filePath}/services/{{ singularName }}.${language}`,\n            templateFile: `templates/${language}/core-service.${language}.hbs`,\n            data: { uid },\n          },\n          {\n            type: 'add',\n            path: `${filePath}/routes/{{ singularName }}.${language}`,\n            templateFile: `templates/${language}/core-router.${language}.hbs`,\n            data: { uid },\n          }\n        );\n      }\n\n      return baseActions;\n    },\n  });\n};\n"],"names":["plop","setGenerator","description","prompts","inquirer","config","prompt","ctNamesPrompts","kindPrompts","attributes","getAttributesPrompts","api","getDestinationPrompts","getDestBasePath","when","answers","destination","type","name","default","singularName","message","validate","input","strings","isKebabCase","apiPath","join","exists","fs","pathExists","apiDir","readdir","withFileTypes","apiDirContent","filter","fd","isDirectory","findIndex","dir","Error","bootstrapApiPrompts","actions","reduce","object","answer","val","attributeType","enum","split","map","item","trim","allowedTypes","multiple","Object","assign","attributeName","filePath","getFilePath","currentDir","process","cwd","language","tsUtils","isUsingTypeScriptSync","baseActions","path","templateFile","data","collectionName","slugify","pluralName","separator","entries","length","push","transform","template","parsedTemplate","JSON","parse","stringify","bootstrapApi","uid","id","plugin"],"mappings":"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"}