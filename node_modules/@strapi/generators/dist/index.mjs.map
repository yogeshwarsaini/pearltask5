{"version":3,"file":"index.mjs","sources":["../src/index.ts"],"sourcesContent":["import { join, dirname } from 'node:path';\nimport handlebars from 'handlebars';\nimport fs from 'fs-extra';\n\n// Starts the Plop CLI programmatically\nexport const runCLI = async () => {\n  const { Plop, run } = await import('plop');\n\n  Plop.prepare(\n    {\n      configPath: join(__dirname, 'plopfile.js'),\n    },\n    (env) => {\n      const argv = process.argv.slice(2); // Extract command-line arguments\n      Plop.execute(env, argv, (env, argv) => {\n        const options = {\n          ...env,\n          dest: join(process.cwd(), 'src'), // this will make the destination path to be based on the cwd when calling the wrapper\n        };\n        return run(options, argv, true); // Pass the third argument 'true' for passArgsBeforeDashes\n      });\n    }\n  );\n};\n\ntype GenerateOptions = {\n  dir?: string;\n  plopFile?: string;\n};\n\ntype GeneratorAction = {\n  type: 'add' | 'modify';\n  path: string;\n  templateFile?: string;\n  data?: Record<string, any>;\n  transform?: (content: string) => string;\n};\n\nexport const generate = async <T extends Record<string, any>>(\n  generatorName: string,\n  options: T,\n  { dir = process.cwd(), plopFile = 'plopfile.js' }: GenerateOptions = {}\n) => {\n  // Resolve the absolute path to the plopfile (generator definitions)\n  const plopfilePath = join(__dirname, plopFile);\n  // Dynamically require the plopfile module.\n  // Note: This allows loading either CommonJS or transpiled ESM plopfiles.\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  const plopModule = require(plopfilePath);\n\n  // Internal objects to store registered generators and helpers.\n  // These will be populated by the plopfile when it is executed.\n  const generators: Record<string, any> = {};\n  const helpers: Record<string, any> = {};\n\n  // Minimal mock Plop API implementation, exposing only the methods needed by our plopfile.\n  // This allows the plopfile to register generators and helpers as it would in a real Plop environment.\n  const plopApi = {\n    setGenerator(name: string, config: any) {\n      generators[name] = config;\n    },\n    setHelper(name: string, fn: any) {\n      helpers[name] = fn;\n    },\n    getDestBasePath() {\n      return join(dir, 'src');\n    },\n    setWelcomeMessage() {}, // no-op\n  };\n\n  // Execute the plopfile, passing in our API.\n  // This will populate the `generators` and `helpers` objects.\n  // Support both CommonJS and ESM default exports.\n  if (typeof plopModule.default === 'function') {\n    plopModule.default(plopApi);\n  } else {\n    plopModule(plopApi);\n  }\n\n  const generator = generators[generatorName];\n  if (!generator) {\n    throw new Error(`Generator \"${generatorName}\" not found`);\n  }\n\n  registerHandlebarsHelpers(helpers);\n  const actions: GeneratorAction[] =\n    typeof generator.actions === 'function' ? generator.actions(options) : generator.actions || [];\n\n  await executeActions(actions, options, dir);\n\n  return { success: true };\n};\n\nconst registerHandlebarsHelpers = (helpers: Record<string, any>) => {\n  Object.entries(helpers).forEach(([name, fn]) => handlebars.registerHelper(name, fn));\n};\n\n// Executes generator actions: add or modify files as specified\nconst executeActions = async (\n  actions: GeneratorAction[],\n  options: Record<string, any>,\n  dir: string\n) => {\n  for (const action of actions) {\n    const outputPath = handlebars.compile(action.path)(options);\n    const fullPath = join(dir, 'src', outputPath);\n\n    if (action.type === 'add' && action.templateFile) {\n      const templatePath = join(__dirname, action.templateFile);\n      const templateContent = await fs.readFile(templatePath, 'utf8');\n      const compiled = handlebars.compile(templateContent);\n      const output = compiled({ ...options, ...action.data });\n\n      await fs.ensureDir(dirname(fullPath));\n      await fs.writeFile(fullPath, output);\n    }\n\n    if (action.type === 'modify') {\n      if (await fs.pathExists(fullPath)) {\n        const content = await fs.readFile(fullPath, 'utf8');\n        const modified = action.transform ? action.transform(content) : content;\n        await fs.writeFile(fullPath, modified);\n      }\n    }\n  }\n};\n"],"names":["runCLI","Plop","run","prepare","configPath","join","__dirname","env","argv","process","slice","execute","options","dest","cwd","generate","generatorName","dir","plopFile","plopfilePath","plopModule","require","generators","helpers","plopApi","setGenerator","name","config","setHelper","fn","getDestBasePath","setWelcomeMessage","default","generator","Error","registerHandlebarsHelpers","actions","executeActions","success","Object","entries","forEach","handlebars","registerHelper","action","outputPath","compile","path","fullPath","type","templateFile","templatePath","templateContent","fs","readFile","compiled","output","data","ensureDir","dirname","writeFile","pathExists","content","modified","transform"],"mappings":"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"}