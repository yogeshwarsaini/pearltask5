{"version":3,"file":"AllowedTypesSelect.js","sources":["../../../admin/src/components/AllowedTypesSelect.tsx"],"sourcesContent":["import { Field, MultiSelectNested } from '@strapi/design-system';\nimport upperFirst from 'lodash/upperFirst';\nimport { useIntl } from 'react-intl';\n\nimport { IntlLabel } from '../types';\n\ninterface AllowedTypesSelectProps {\n  intlLabel: IntlLabel;\n  name: string;\n  onChange: (value: any) => void;\n  value?: any;\n}\n\nconst options = [\n  {\n    label: 'All',\n    children: [\n      { label: 'images (JPEG, PNG, GIF, SVG, TIFF, ICO, DVU)', value: 'images' },\n      { label: 'videos (MPEG, MP4, Quicktime, WMV, AVI, FLV)', value: 'videos' },\n      { label: 'audios (MP3, WAV, OGG)', value: 'audios' },\n      { label: 'files (CSV, ZIP, PDF, Excel, JSON, ...)', value: 'files' },\n    ],\n  },\n];\n\nexport const AllowedTypesSelect = ({\n  intlLabel,\n  name,\n  onChange,\n  value = null,\n}: AllowedTypesSelectProps) => {\n  const { formatMessage } = useIntl();\n\n  /* eslint-disable indent */\n  const displayedValue =\n    value === null || value?.length === 0\n      ? formatMessage({ id: 'global.none', defaultMessage: 'None' })\n      : [...value]\n          .sort()\n          .map((v) => upperFirst(v))\n          .join(', ');\n\n  /* eslint-enable indent */\n\n  const label = intlLabel.id\n    ? formatMessage({ id: intlLabel.id, defaultMessage: intlLabel.defaultMessage })\n    : name;\n\n  return (\n    <Field.Root name={name}>\n      <Field.Label>{label}</Field.Label>\n      <MultiSelectNested\n        customizeContent={() => displayedValue}\n        onChange={(values: any[]) => {\n          if (values.length > 0) {\n            onChange({ target: { name, value: values, type: 'allowed-types-select' } });\n          } else {\n            onChange({ target: { name, value: null, type: 'allowed-types-select' } });\n          }\n        }}\n        options={options}\n        value={value || []}\n      />\n    </Field.Root>\n  );\n};\n"],"names":["options","label","children","value","AllowedTypesSelect","intlLabel","name","onChange","formatMessage","useIntl","displayedValue","length","id","defaultMessage","sort","map","v","upperFirst","join","_jsxs","Field","Root","_jsx","Label","MultiSelectNested","customizeContent","values","target","type"],"mappings":";;;;;;;AAaA,MAAMA,OAAU,GAAA;AACd,IAAA;QACEC,KAAO,EAAA,KAAA;QACPC,QAAU,EAAA;AACR,YAAA;gBAAED,KAAO,EAAA,8CAAA;gBAAgDE,KAAO,EAAA;AAAS,aAAA;AACzE,YAAA;gBAAEF,KAAO,EAAA,8CAAA;gBAAgDE,KAAO,EAAA;AAAS,aAAA;AACzE,YAAA;gBAAEF,KAAO,EAAA,wBAAA;gBAA0BE,KAAO,EAAA;AAAS,aAAA;AACnD,YAAA;gBAAEF,KAAO,EAAA,yCAAA;gBAA2CE,KAAO,EAAA;AAAQ;AACpE;AACH;AACD,CAAA;AAEYC,MAAAA,kBAAAA,GAAqB,CAAC,EACjCC,SAAS,EACTC,IAAI,EACJC,QAAQ,EACRJ,KAAQ,GAAA,IAAI,EACY,GAAA;IACxB,MAAM,EAAEK,aAAa,EAAE,GAAGC,iBAAAA,EAAAA;gCAG1B,MAAMC,cACJP,GAAAA,KAAAA,KAAU,QAAQA,KAAOQ,EAAAA,MAAAA,KAAW,IAChCH,aAAc,CAAA;QAAEI,EAAI,EAAA,aAAA;QAAeC,cAAgB,EAAA;KACnD,CAAA,GAAA;AAAIV,QAAAA,GAAAA;KAAM,CACPW,IAAI,GACJC,GAAG,CAAC,CAACC,CAAMC,GAAAA,UAAAA,CAAWD,CACtBE,CAAAA,CAAAA,CAAAA,IAAI,CAAC,IAAA,CAAA;AAEd,+BAEA,MAAMjB,KAAAA,GAAQI,SAAUO,CAAAA,EAAE,GACtBJ,aAAc,CAAA;AAAEI,QAAAA,EAAAA,EAAIP,UAAUO,EAAE;AAAEC,QAAAA,cAAAA,EAAgBR,UAAUQ;KAC5DP,CAAAA,GAAAA,IAAAA;IAEJ,qBACEa,eAAA,CAACC,mBAAMC,IAAI,EAAA;QAACf,IAAMA,EAAAA,IAAAA;;AAChB,0BAAAgB,cAAA,CAACF,mBAAMG,KAAK,EAAA;AAAEtB,gBAAAA,QAAAA,EAAAA;;0BACdqB,cAACE,CAAAA,8BAAAA,EAAAA;AACCC,gBAAAA,gBAAAA,EAAkB,IAAMf,cAAAA;AACxBH,gBAAAA,QAAAA,EAAU,CAACmB,MAAAA,GAAAA;oBACT,IAAIA,MAAAA,CAAOf,MAAM,GAAG,CAAG,EAAA;wBACrBJ,QAAS,CAAA;4BAAEoB,MAAQ,EAAA;AAAErB,gCAAAA,IAAAA;gCAAMH,KAAOuB,EAAAA,MAAAA;gCAAQE,IAAM,EAAA;AAAuB;AAAE,yBAAA,CAAA;qBACpE,MAAA;wBACLrB,QAAS,CAAA;4BAAEoB,MAAQ,EAAA;AAAErB,gCAAAA,IAAAA;gCAAMH,KAAO,EAAA,IAAA;gCAAMyB,IAAM,EAAA;AAAuB;AAAE,yBAAA,CAAA;AACzE;AACF,iBAAA;gBACA5B,OAASA,EAAAA,OAAAA;AACTG,gBAAAA,KAAAA,EAAOA,SAAS;;;;AAIxB;;;;"}