{"version":3,"file":"AttributeRow.js","sources":["../../../admin/src/components/AttributeRow.tsx"],"sourcesContent":["import { forwardRef, memo, useState } from 'react';\n\nimport { ConfirmDialog } from '@strapi/admin/strapi-admin';\nimport { Box, Flex, IconButton, Typography, Link, Badge, Dialog } from '@strapi/design-system';\nimport { ChevronDown, Drag, Lock, Pencil, Trash } from '@strapi/icons';\nimport get from 'lodash/get';\nimport upperFirst from 'lodash/upperFirst';\nimport { useIntl } from 'react-intl';\nimport { Link as NavLink } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nimport { Curve } from '../icons/Curve';\nimport { checkDependentRows } from '../utils/conditions';\nimport { getAttributeDisplayedType } from '../utils/getAttributeDisplayedType';\nimport { getRelationType } from '../utils/getRelationType';\nimport { getTrad } from '../utils/getTrad';\n\nimport { AttributeIcon } from './AttributeIcon';\nimport { ComponentList } from './ComponentList';\nimport { useDataManager } from './DataManager/useDataManager';\nimport { DisplayedType } from './DisplayedType';\nimport { DynamicZoneList } from './DynamicZoneList';\nimport { useFormModalNavigation } from './FormModalNavigation/useFormModalNavigation';\nimport { StatusBadge } from './Status';\n\nimport type { AnyAttribute, Component, ContentType } from '../types';\nimport type { DraggableAttributes, DraggableSyntheticListeners } from '@dnd-kit/core';\nimport type { UID } from '@strapi/types';\n\nexport const GridWrapper = styled(Flex)<{ $isOverlay?: boolean; $isDragging?: boolean }>`\n  justify-content: space-between;\n\n  border-top: ${({ theme, $isOverlay }) =>\n    $isOverlay ? 'none' : `1px solid ${theme.colors.neutral150}`};\n\n  padding-top: ${({ theme }) => theme.spaces[4]};\n  padding-bottom: ${({ theme }) => theme.spaces[4]};\n\n  opacity: ${({ $isDragging }) => ($isDragging ? 0 : 1)};\n  align-items: center;\n`;\n\nexport type AttributeRowProps = {\n  item: {\n    id: string;\n    index: number;\n  } & AnyAttribute;\n  firstLoopComponentUid?: UID.Component | null;\n  isFromDynamicZone?: boolean;\n  addComponentToDZ?: () => void;\n  secondLoopComponentUid?: UID.Component | null;\n  type: ContentType | Component;\n  isDragging?: boolean;\n  style?: Record<string, unknown>;\n  listeners?: DraggableSyntheticListeners;\n  attributes?: DraggableAttributes;\n  isOverlay?: boolean;\n  handleRef?: (element: HTMLElement | null) => void;\n};\n\nconst StyledAttributeRow = styled(Box)`\n  list-style: none;\n  list-style-type: none;\n`;\n\nexport const AttributeRow = forwardRef<HTMLLIElement, AttributeRowProps>((props, ref) => {\n  const { style, ...rest } = props;\n\n  return (\n    <StyledAttributeRow\n      tag=\"li\"\n      ref={ref}\n      {...props.attributes}\n      style={style}\n      background=\"neutral0\"\n      shadow={props.isOverlay ? 'filterShadow' : 'none'}\n      aria-label={props.item.name}\n    >\n      <MemoizedRow {...rest} />\n    </StyledAttributeRow>\n  );\n});\n\nconst MemoizedRow = memo((props: Omit<AttributeRowProps, 'style'>) => {\n  const {\n    item,\n    firstLoopComponentUid,\n    isFromDynamicZone,\n    addComponentToDZ,\n    secondLoopComponentUid,\n    type,\n    isDragging,\n    isOverlay,\n    handleRef,\n    listeners,\n  } = props;\n  const shouldHideNestedInfos = isOverlay || isDragging;\n\n  const [isOpen, setIsOpen] = useState<boolean>(true);\n\n  const isTypeDeleted = type.status === 'REMOVED';\n\n  const { contentTypes, removeAttribute, isInDevelopmentMode } = useDataManager();\n  const { onOpenModalEditField, onOpenModalEditCustomField } = useFormModalNavigation();\n\n  const { formatMessage } = useIntl();\n  const [showConfirmDialog, setShowConfirmDialog] = useState(false);\n\n  const isDeleted = item.status === 'REMOVED';\n\n  const isMorph = item.type === 'relation' && item.relation.includes('morph');\n  const ico = ['integer', 'biginteger', 'float', 'decimal'].includes(item.type)\n    ? 'number'\n    : item.type;\n\n  const targetContentType = item.type === 'relation' ? get(contentTypes, item.target) : null;\n  const isPluginContentType = get(targetContentType, 'plugin');\n\n  const src = 'target' in item && item.target ? 'relation' : ico;\n\n  const handleDelete = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    const dependentRows = checkDependentRows(contentTypes, item.name);\n    if (dependentRows.length > 0) {\n      setShowConfirmDialog(true);\n    } else {\n      removeAttribute({\n        forTarget: type.modelType,\n        targetUid: type.uid,\n        attributeToRemoveName: item.name,\n      });\n    }\n  };\n\n  const handleConfirmDelete = () => {\n    removeAttribute({\n      forTarget: type.modelType,\n      targetUid: type.uid,\n      attributeToRemoveName: item.name,\n    });\n    setShowConfirmDialog(false);\n  };\n\n  const handleCancelDelete = () => {\n    setShowConfirmDialog(false);\n  };\n\n  const handleClick = () => {\n    if (isMorph) {\n      return;\n    }\n\n    if (item.configurable !== false) {\n      const editTargetUid = (secondLoopComponentUid || firstLoopComponentUid || type.uid)!;\n\n      const attributeType = getAttributeDisplayedType(item.type);\n      const step = item.type === 'component' ? '2' : null;\n\n      if (item.customField) {\n        onOpenModalEditCustomField({\n          forTarget: type.modelType,\n          targetUid: editTargetUid,\n          attributeName: item.name,\n          attributeType,\n          customFieldUid: item.customField,\n        });\n      } else {\n        onOpenModalEditField({\n          forTarget: type.modelType,\n          targetUid: editTargetUid,\n          attributeName: item.name,\n          attributeType,\n          step,\n        });\n      }\n    }\n  };\n\n  let loopNumber;\n\n  if (secondLoopComponentUid && firstLoopComponentUid) {\n    loopNumber = 2;\n  } else if (firstLoopComponentUid) {\n    loopNumber = 1;\n  } else {\n    loopNumber = 0;\n  }\n\n  const canEdit = !isTypeDeleted && !isDeleted;\n  const canDelete = !isTypeDeleted && !isDeleted;\n\n  const cursor = isTypeDeleted || isDeleted ? 'not-allowed' : 'move';\n\n  const canClick = isInDevelopmentMode && item.configurable !== false && !isMorph && canEdit;\n\n  return (\n    <>\n      <GridWrapper\n        $isOverlay={isOverlay}\n        $isDragging={isDragging}\n        onClick={canClick ? handleClick : undefined}\n        paddingLeft={4}\n        paddingRight={4}\n      >\n        <Flex alignItems=\"center\" overflow=\"hidden\" gap={2}>\n          {loopNumber !== 0 && !isOverlay && (\n            <Curve color={isFromDynamicZone ? 'primary200' : 'neutral150'} />\n          )}\n          {isInDevelopmentMode && (\n            <IconButton\n              cursor={cursor}\n              role=\"Handle\"\n              ref={handleRef}\n              {...listeners}\n              variant=\"ghost\"\n              withTooltip={false}\n              label={`${formatMessage({\n                id: 'app.utils.drag',\n                defaultMessage: 'Drag',\n              })} ${item.name}`}\n              disabled={isTypeDeleted || isDeleted}\n            >\n              <Drag />\n            </IconButton>\n          )}\n          <Flex gap={4}>\n            <Flex gap={4} alignItems=\"center\">\n              <AttributeIcon type={src} customField={item.customField} />\n              <Typography\n                textColor=\"neutral800\"\n                fontWeight=\"bold\"\n                textDecoration={isDeleted ? 'line-through' : 'none'}\n                ellipsis\n                overflow=\"hidden\"\n              >\n                {item.name}\n                {'required' in item && item.required && (\n                  <Typography textColor=\"danger600\">*&nbsp;</Typography>\n                )}\n              </Typography>\n            </Flex>\n            <Flex>\n              <Typography textColor=\"neutral600\">\n                <DisplayedType\n                  type={item.type}\n                  customField={item.customField}\n                  repeatable={'repeatable' in item && item.repeatable}\n                  multiple={'multiple' in item && item.multiple}\n                />\n                {'conditions' in item &&\n                  item.conditions &&\n                  Object.keys(item.conditions).length > 0 && <Badge margin={4}>conditional</Badge>}\n                {item.type === 'relation' && (\n                  <>\n                    &nbsp;({getRelationType(item.relation, item.targetAttribute)})&nbsp;\n                    {targetContentType &&\n                      formatMessage({\n                        id: getTrad('modelPage.attribute.with'),\n                        defaultMessage: 'with',\n                      })}\n                    &nbsp;\n                    {targetContentType && (\n                      <Link\n                        onClick={(e) => e.stopPropagation()}\n                        tag={NavLink}\n                        to={`/plugins/content-type-builder/content-types/${targetContentType.uid}`}\n                      >\n                        {upperFirst(targetContentType.info.displayName)}\n                      </Link>\n                    )}\n                    {isPluginContentType &&\n                      `(${formatMessage({\n                        id: getTrad(`from`),\n                        defaultMessage: 'from',\n                      })}: ${isPluginContentType})`}\n                  </>\n                )}\n                {item.type === 'component' && <ComponentLink uid={item.component} />}\n              </Typography>\n            </Flex>\n          </Flex>\n        </Flex>\n\n        <Box>\n          <Flex justifyContent=\"flex-end\" gap={1} onClick={(e) => e.stopPropagation()}>\n            <>\n              <Box>{item.status && <StatusBadge status={item.status} />}</Box>\n              {['component', 'dynamiczone'].includes(item.type) && (\n                <IconButton\n                  onClick={(e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n\n                    if (isOpen) {\n                      setIsOpen(false);\n                    } else {\n                      setIsOpen(true);\n                    }\n                  }}\n                  aria-expanded={isOpen}\n                  label={formatMessage({\n                    id: 'app.utils.toggle',\n                    defaultMessage: 'Toggle',\n                  })}\n                  variant=\"ghost\"\n                  withTooltip={false}\n                >\n                  <ChevronDown\n                    aria-hidden\n                    fill=\"neutral500\"\n                    style={{\n                      transform: `rotate(${isOpen ? '0deg' : '-90deg'})`,\n                      transition: 'transform 0.5s',\n                    }}\n                  />\n                </IconButton>\n              )}\n              {isInDevelopmentMode && item.configurable !== false ? (\n                <>\n                  {!isMorph && (\n                    <IconButton\n                      onClick={handleClick}\n                      label={`${formatMessage({\n                        id: 'app.utils.edit',\n                        defaultMessage: 'Edit',\n                      })} ${item.name}`}\n                      variant=\"ghost\"\n                      disabled={!canEdit}\n                    >\n                      <Pencil />\n                    </IconButton>\n                  )}\n                  <IconButton\n                    onClick={handleDelete}\n                    label={`${formatMessage({\n                      id: 'global.delete',\n                      defaultMessage: 'Delete',\n                    })} ${item.name}`}\n                    variant=\"ghost\"\n                    disabled={!canDelete}\n                  >\n                    <Trash />\n                  </IconButton>\n                  <Dialog.Root open={showConfirmDialog} onOpenChange={setShowConfirmDialog}>\n                    <ConfirmDialog onConfirm={handleConfirmDelete} onCancel={handleCancelDelete}>\n                      <Box>\n                        <Typography>\n                          {formatMessage({\n                            id: getTrad(\n                              'popUpWarning.bodyMessage.delete-attribute-with-conditions'\n                            ),\n                            defaultMessage:\n                              'The following fields have conditions that depend on this field: ',\n                          })}\n                          <Typography fontWeight=\"bold\">\n                            {checkDependentRows(contentTypes, item.name)\n                              .map(({ attribute }) => attribute)\n                              .join(', ')}\n                          </Typography>\n                          {formatMessage({\n                            id: getTrad(\n                              'popUpWarning.bodyMessage.delete-attribute-with-conditions-end'\n                            ),\n                            defaultMessage: '. Are you sure you want to delete it?',\n                          })}\n                        </Typography>\n                      </Box>\n                    </ConfirmDialog>\n                  </Dialog.Root>\n                </>\n              ) : (\n                <Flex padding={2}>\n                  <Lock fill=\"neutral500\" />\n                </Flex>\n              )}\n            </>\n          </Flex>\n        </Box>\n      </GridWrapper>\n\n      <SubRow $shouldHideNestedInfos={shouldHideNestedInfos} $isOpen={isOpen}>\n        {item.type === 'component' && (\n          <ComponentList\n            {...item}\n            isFromDynamicZone={isFromDynamicZone}\n            firstLoopComponentUid={firstLoopComponentUid}\n          />\n        )}\n\n        {item.type === 'dynamiczone' && (\n          <DynamicZoneList\n            {...item}\n            disabled={isTypeDeleted || item.status === 'REMOVED'}\n            addComponent={addComponentToDZ!}\n            forTarget={type.modelType}\n            targetUid={type.uid}\n          />\n        )}\n      </SubRow>\n    </>\n  );\n});\n\nconst SubRow = styled(Box)<{ $isOpen: boolean; $shouldHideNestedInfos?: boolean }>`\n  display: ${({ $shouldHideNestedInfos }) => ($shouldHideNestedInfos ? 'none' : 'block')};\n  max-height: ${({ $isOpen }) => ($isOpen ? '9999px' : '0px')};\n  overflow: hidden;\n\n  transition: ${({ $isOpen }) =>\n    $isOpen ? 'max-height 1s ease-in-out' : 'max-height 0.5s cubic-bezier(0, 1, 0, 1)'};\n`;\n\nconst ComponentLink = ({ uid }: { uid: UID.Component }) => {\n  const { components } = useDataManager();\n  const type = get(components, uid);\n\n  return (\n    <>\n      &nbsp;(\n      <Link\n        onClick={(e) => e.stopPropagation()}\n        tag={NavLink}\n        to={`/plugins/content-type-builder/component-categories/${type.category}/${type.uid}`}\n      >\n        {upperFirst(type.info.displayName)}\n      </Link>\n      )\n    </>\n  );\n};\n"],"names":["GridWrapper","styled","Flex","theme","$isOverlay","colors","neutral150","spaces","$isDragging","StyledAttributeRow","Box","AttributeRow","forwardRef","props","ref","style","rest","_jsx","tag","attributes","background","shadow","isOverlay","aria-label","item","name","MemoizedRow","memo","firstLoopComponentUid","isFromDynamicZone","addComponentToDZ","secondLoopComponentUid","type","isDragging","handleRef","listeners","shouldHideNestedInfos","isOpen","setIsOpen","useState","isTypeDeleted","status","contentTypes","removeAttribute","isInDevelopmentMode","useDataManager","onOpenModalEditField","onOpenModalEditCustomField","useFormModalNavigation","formatMessage","useIntl","showConfirmDialog","setShowConfirmDialog","isDeleted","isMorph","relation","includes","ico","targetContentType","get","target","isPluginContentType","src","handleDelete","e","stopPropagation","dependentRows","checkDependentRows","length","forTarget","modelType","targetUid","uid","attributeToRemoveName","handleConfirmDelete","handleCancelDelete","handleClick","configurable","editTargetUid","attributeType","getAttributeDisplayedType","step","customField","attributeName","customFieldUid","loopNumber","canEdit","canDelete","cursor","canClick","_jsxs","_Fragment","onClick","undefined","paddingLeft","paddingRight","alignItems","overflow","gap","Curve","color","IconButton","role","variant","withTooltip","label","id","defaultMessage","disabled","Drag","AttributeIcon","Typography","textColor","fontWeight","textDecoration","ellipsis","required","DisplayedType","repeatable","multiple","conditions","Object","keys","Badge","margin","getRelationType","targetAttribute","getTrad","Link","NavLink","to","upperFirst","info","displayName","ComponentLink","component","justifyContent","StatusBadge","preventDefault","aria-expanded","ChevronDown","aria-hidden","fill","transform","transition","Pencil","Trash","Dialog","Root","open","onOpenChange","ConfirmDialog","onConfirm","onCancel","map","attribute","join","padding","Lock","SubRow","$shouldHideNestedInfos","$isOpen","ComponentList","DynamicZoneList","addComponent","components","category"],"mappings":"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"}