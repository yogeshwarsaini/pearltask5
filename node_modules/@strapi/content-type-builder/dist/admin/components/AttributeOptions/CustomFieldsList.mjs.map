{"version":3,"file":"CustomFieldsList.mjs","sources":["../../../../admin/src/components/AttributeOptions/CustomFieldsList.tsx"],"sourcesContent":["import { useStrapiApp } from '@strapi/admin/strapi-admin';\nimport { Flex, Grid, KeyboardNavigable, Link } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { getTrad } from '../../utils';\n\nimport { CustomFieldOption } from './CustomFieldOption';\nimport { EmptyAttributes } from './EmptyAttributes';\n\nexport const CustomFieldsList = () => {\n  const { formatMessage } = useIntl();\n  const getAllCustomFields = useStrapiApp('CustomFieldsList', (state) => state.customFields.getAll);\n  // TODO change this once useCustomFields is typed (helper-plugin types are solved)\n  const registeredCustomFields = Object.entries(getAllCustomFields());\n\n  if (!registeredCustomFields.length) {\n    return <EmptyAttributes />;\n  }\n\n  // Sort the array alphabetically by customField name\n  const sortedCustomFields = registeredCustomFields.sort((a, b) =>\n    a[1].name > b[1].name ? 1 : -1\n  );\n\n  return (\n    <KeyboardNavigable tagName=\"button\">\n      <Flex direction=\"column\" alignItems=\"stretch\" gap={3}>\n        <Grid.Root gap={3}>\n          {sortedCustomFields.map(([uid, customField]) => (\n            <Grid.Item key={uid} col={6} direction=\"column\" alignItems=\"stretch\">\n              <CustomFieldOption key={uid} customFieldUid={uid} customField={customField} />\n            </Grid.Item>\n          ))}\n        </Grid.Root>\n        <Link\n          href=\"https://docs.strapi.io/developer-docs/latest/development/custom-fields.html\"\n          isExternal\n        >\n          {formatMessage({\n            id: getTrad('modalForm.tabs.custom.howToLink'),\n            defaultMessage: 'How to add custom fields',\n          })}\n        </Link>\n      </Flex>\n    </KeyboardNavigable>\n  );\n};\n"],"names":["CustomFieldsList","formatMessage","useIntl","getAllCustomFields","useStrapiApp","state","customFields","getAll","registeredCustomFields","Object","entries","length","_jsx","EmptyAttributes","sortedCustomFields","sort","a","b","name","KeyboardNavigable","tagName","_jsxs","Flex","direction","alignItems","gap","Grid","Root","map","uid","customField","Item","col","CustomFieldOption","customFieldUid","Link","href","isExternal","id","getTrad","defaultMessage"],"mappings":";;;;;;;;MASaA,gBAAmB,GAAA,IAAA;IAC9B,MAAM,EAAEC,aAAa,EAAE,GAAGC,OAAAA,EAAAA;IAC1B,MAAMC,kBAAAA,GAAqBC,aAAa,kBAAoB,EAAA,CAACC,QAAUA,KAAMC,CAAAA,YAAY,CAACC,MAAM,CAAA;;IAEhG,MAAMC,sBAAAA,GAAyBC,MAAOC,CAAAA,OAAO,CAACP,kBAAAA,EAAAA,CAAAA;IAE9C,IAAI,CAACK,sBAAuBG,CAAAA,MAAM,EAAE;AAClC,QAAA,qBAAOC,GAACC,CAAAA,eAAAA,EAAAA,EAAAA,CAAAA;AACV;;IAGA,MAAMC,kBAAAA,GAAqBN,uBAAuBO,IAAI,CAAC,CAACC,CAAGC,EAAAA,CAAAA,GACzDD,CAAC,CAAC,CAAA,CAAE,CAACE,IAAI,GAAGD,CAAC,CAAC,CAAA,CAAE,CAACC,IAAI,GAAG,IAAI,CAAC,CAAA,CAAA;AAG/B,IAAA,qBACEN,GAACO,CAAAA,iBAAAA,EAAAA;QAAkBC,OAAQ,EAAA,QAAA;AACzB,QAAA,QAAA,gBAAAC,IAACC,CAAAA,IAAAA,EAAAA;YAAKC,SAAU,EAAA,QAAA;YAASC,UAAW,EAAA,SAAA;YAAUC,GAAK,EAAA,CAAA;;AACjD,8BAAAb,GAAA,CAACc,KAAKC,IAAI,EAAA;oBAACF,GAAK,EAAA,CAAA;8BACbX,kBAAmBc,CAAAA,GAAG,CAAC,CAAC,CAACC,KAAKC,WAAY,CAAA,iBACzClB,GAACc,CAAAA,IAAAA,CAAKK,IAAI,EAAA;4BAAWC,GAAK,EAAA,CAAA;4BAAGT,SAAU,EAAA,QAAA;4BAASC,UAAW,EAAA,SAAA;AACzD,4BAAA,QAAA,gBAAAZ,GAACqB,CAAAA,iBAAAA,EAAAA;gCAA4BC,cAAgBL,EAAAA,GAAAA;gCAAKC,WAAaA,EAAAA;AAAvCD,6BAAAA,EAAAA,GAAAA;AADVA,yBAAAA,EAAAA,GAAAA,CAAAA;;8BAKpBjB,GAACuB,CAAAA,IAAAA,EAAAA;oBACCC,IAAK,EAAA,6EAAA;oBACLC,UAAU,EAAA,IAAA;8BAETpC,aAAc,CAAA;AACbqC,wBAAAA,EAAAA,EAAIC,OAAQ,CAAA,iCAAA,CAAA;wBACZC,cAAgB,EAAA;AAClB,qBAAA;;;;;AAKV;;;;"}