{"version":3,"file":"AttributeOptions.mjs","sources":["../../../../admin/src/components/AttributeOptions/AttributeOptions.tsx"],"sourcesContent":["/**\n *\n * AttributeOptions\n *\n */\n\nimport { Divider, Flex, Modal, Tabs, Typography } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\n\nimport { getTrad } from '../../utils';\nimport { IconByType } from '../AttributeIcon';\n\nimport { AttributeList } from './AttributeList';\nimport { CustomFieldsList } from './CustomFieldsList';\n\ntype AttributeOptionsProps = {\n  attributes: IconByType[][];\n  forTarget: string;\n  kind: string;\n};\n\nexport const AttributeOptions = ({ attributes, forTarget, kind }: AttributeOptionsProps) => {\n  const { formatMessage } = useIntl();\n\n  const defaultTabId = getTrad('modalForm.tabs.default');\n  const customTabId = getTrad('modalForm.tabs.custom');\n\n  const titleIdSuffix = forTarget.includes('component') ? 'component' : kind;\n  const titleId = getTrad(`modalForm.sub-header.chooseAttribute.${titleIdSuffix}`);\n\n  return (\n    <Modal.Body>\n      <Tabs.Root variant=\"simple\" defaultValue=\"default\">\n        <Flex justifyContent=\"space-between\">\n          <Typography variant=\"beta\" tag=\"h2\">\n            {formatMessage({ id: titleId, defaultMessage: 'Select a field' })}\n          </Typography>\n          <Tabs.List>\n            <Tabs.Trigger value=\"default\">\n              {formatMessage({ id: defaultTabId, defaultMessage: 'Default' })}\n            </Tabs.Trigger>\n            <Tabs.Trigger value=\"custom\">\n              {formatMessage({ id: customTabId, defaultMessage: 'Custom' })}\n            </Tabs.Trigger>\n          </Tabs.List>\n        </Flex>\n        <Divider marginBottom={6} />\n        <Tabs.Content value=\"default\">\n          <AttributeList attributes={attributes} />\n        </Tabs.Content>\n        <Tabs.Content value=\"custom\">\n          <CustomFieldsList />\n        </Tabs.Content>\n      </Tabs.Root>\n    </Modal.Body>\n  );\n};\n"],"names":["AttributeOptions","attributes","forTarget","kind","formatMessage","useIntl","defaultTabId","getTrad","customTabId","titleIdSuffix","includes","titleId","_jsx","Modal","Body","_jsxs","Tabs","Root","variant","defaultValue","Flex","justifyContent","Typography","tag","id","defaultMessage","List","Trigger","value","Divider","marginBottom","Content","AttributeList","CustomFieldsList"],"mappings":";;;;;;;AAqBO,MAAMA,mBAAmB,CAAC,EAAEC,UAAU,EAAEC,SAAS,EAAEC,IAAI,EAAyB,GAAA;IACrF,MAAM,EAAEC,aAAa,EAAE,GAAGC,OAAAA,EAAAA;AAE1B,IAAA,MAAMC,eAAeC,OAAQ,CAAA,wBAAA,CAAA;AAC7B,IAAA,MAAMC,cAAcD,OAAQ,CAAA,uBAAA,CAAA;AAE5B,IAAA,MAAME,aAAgBP,GAAAA,SAAAA,CAAUQ,QAAQ,CAAC,eAAe,WAAcP,GAAAA,IAAAA;AACtE,IAAA,MAAMQ,UAAUJ,OAAQ,CAAA,CAAC,qCAAqC,EAAEE,cAAc,CAAC,CAAA;IAE/E,qBACEG,GAAA,CAACC,MAAMC,IAAI,EAAA;gCACTC,IAAA,CAACC,KAAKC,IAAI,EAAA;YAACC,OAAQ,EAAA,QAAA;YAASC,YAAa,EAAA,SAAA;;8BACvCJ,IAACK,CAAAA,IAAAA,EAAAA;oBAAKC,cAAe,EAAA,eAAA;;sCACnBT,GAACU,CAAAA,UAAAA,EAAAA;4BAAWJ,OAAQ,EAAA,MAAA;4BAAOK,GAAI,EAAA,IAAA;sCAC5BnB,aAAc,CAAA;gCAAEoB,EAAIb,EAAAA,OAAAA;gCAASc,cAAgB,EAAA;AAAiB,6BAAA;;AAEjE,sCAAAV,IAAA,CAACC,KAAKU,IAAI,EAAA;;AACR,8CAAAd,GAAA,CAACI,KAAKW,OAAO,EAAA;oCAACC,KAAM,EAAA,SAAA;8CACjBxB,aAAc,CAAA;wCAAEoB,EAAIlB,EAAAA,YAAAA;wCAAcmB,cAAgB,EAAA;AAAU,qCAAA;;AAE/D,8CAAAb,GAAA,CAACI,KAAKW,OAAO,EAAA;oCAACC,KAAM,EAAA,QAAA;8CACjBxB,aAAc,CAAA;wCAAEoB,EAAIhB,EAAAA,WAAAA;wCAAaiB,cAAgB,EAAA;AAAS,qCAAA;;;;;;8BAIjEb,GAACiB,CAAAA,OAAAA,EAAAA;oBAAQC,YAAc,EAAA;;AACvB,8BAAAlB,GAAA,CAACI,KAAKe,OAAO,EAAA;oBAACH,KAAM,EAAA,SAAA;AAClB,oBAAA,QAAA,gBAAAhB,GAACoB,CAAAA,aAAAA,EAAAA;wBAAc/B,UAAYA,EAAAA;;;AAE7B,8BAAAW,GAAA,CAACI,KAAKe,OAAO,EAAA;oBAACH,KAAM,EAAA,QAAA;AAClB,oBAAA,QAAA,gBAAAhB,GAACqB,CAAAA,gBAAAA,EAAAA,EAAAA;;;;;AAKX;;;;"}