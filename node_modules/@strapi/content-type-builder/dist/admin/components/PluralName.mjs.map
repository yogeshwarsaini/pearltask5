{"version":3,"file":"PluralName.mjs","sources":["../../../admin/src/components/PluralName.tsx"],"sourcesContent":["import { useEffect, useRef } from 'react';\n\nimport { Field, TextInput } from '@strapi/design-system';\nimport pluralize from 'pluralize';\nimport { useIntl } from 'react-intl';\n\nimport { nameToSlug } from '../utils/nameToSlug';\n\nimport type { IntlLabel } from '../types';\n\ninterface Description {\n  id: string;\n  defaultMessage: string;\n  values?: Record<string, any>;\n}\n\ninterface PluralNameProps {\n  description?: Description;\n  error?: string;\n  intlLabel: IntlLabel;\n  modifiedData: Record<string, any>;\n  name: string;\n  onChange: (value: { target: { name: string; value: string } }) => void;\n  value?: string;\n}\n\nexport const PluralName = ({\n  description,\n  error,\n  intlLabel,\n  modifiedData,\n  name,\n  onChange,\n  value,\n}: PluralNameProps) => {\n  const { formatMessage } = useIntl();\n  const onChangeRef = useRef(onChange);\n  const displayName = modifiedData?.displayName || '';\n\n  useEffect(() => {\n    if (displayName) {\n      const value = nameToSlug(displayName);\n\n      try {\n        const plural = pluralize(value, 2);\n        onChangeRef.current({ target: { name, value: plural } });\n      } catch (err) {\n        onChangeRef.current({ target: { name, value } });\n      }\n    } else {\n      onChangeRef.current({ target: { name, value: '' } });\n    }\n  }, [displayName, name]);\n\n  const errorMessage = error ? formatMessage({ id: error, defaultMessage: error }) : '';\n  const hint = description\n    ? formatMessage(\n        { id: description.id, defaultMessage: description.defaultMessage },\n        { ...description.values }\n      )\n    : '';\n  const label = formatMessage(intlLabel);\n\n  return (\n    <Field.Root error={errorMessage} hint={hint} name={name}>\n      <Field.Label>{label}</Field.Label>\n      <TextInput onChange={onChange} value={value || ''} />\n      <Field.Error />\n    </Field.Root>\n  );\n};\n"],"names":["PluralName","description","error","intlLabel","modifiedData","name","onChange","value","formatMessage","useIntl","onChangeRef","useRef","displayName","useEffect","nameToSlug","plural","pluralize","current","target","err","errorMessage","id","defaultMessage","hint","values","label","_jsxs","Field","Root","_jsx","Label","TextInput","Error"],"mappings":";;;;;;;MA0BaA,UAAa,GAAA,CAAC,EACzBC,WAAW,EACXC,KAAK,EACLC,SAAS,EACTC,YAAY,EACZC,IAAI,EACJC,QAAQ,EACRC,KAAK,EACW,GAAA;IAChB,MAAM,EAAEC,aAAa,EAAE,GAAGC,OAAAA,EAAAA;AAC1B,IAAA,MAAMC,cAAcC,MAAOL,CAAAA,QAAAA,CAAAA;IAC3B,MAAMM,WAAAA,GAAcR,cAAcQ,WAAe,IAAA,EAAA;IAEjDC,SAAU,CAAA,IAAA;AACR,QAAA,IAAID,WAAa,EAAA;AACf,YAAA,MAAML,QAAQO,UAAWF,CAAAA,WAAAA,CAAAA;YAEzB,IAAI;gBACF,MAAMG,MAAAA,GAASC,UAAUT,KAAO,EAAA,CAAA,CAAA;AAChCG,gBAAAA,WAAAA,CAAYO,OAAO,CAAC;oBAAEC,MAAQ,EAAA;AAAEb,wBAAAA,IAAAA;wBAAME,KAAOQ,EAAAA;AAAO;AAAE,iBAAA,CAAA;AACxD,aAAA,CAAE,OAAOI,GAAK,EAAA;AACZT,gBAAAA,WAAAA,CAAYO,OAAO,CAAC;oBAAEC,MAAQ,EAAA;AAAEb,wBAAAA,IAAAA;AAAME,wBAAAA;AAAM;AAAE,iBAAA,CAAA;AAChD;SACK,MAAA;AACLG,YAAAA,WAAAA,CAAYO,OAAO,CAAC;gBAAEC,MAAQ,EAAA;AAAEb,oBAAAA,IAAAA;oBAAME,KAAO,EAAA;AAAG;AAAE,aAAA,CAAA;AACpD;KACC,EAAA;AAACK,QAAAA,WAAAA;AAAaP,QAAAA;AAAK,KAAA,CAAA;IAEtB,MAAMe,YAAAA,GAAelB,QAAQM,aAAc,CAAA;QAAEa,EAAInB,EAAAA,KAAAA;QAAOoB,cAAgBpB,EAAAA;KAAW,CAAA,GAAA,EAAA;IACnF,MAAMqB,IAAAA,GAAOtB,cACTO,aACE,CAAA;AAAEa,QAAAA,EAAAA,EAAIpB,YAAYoB,EAAE;AAAEC,QAAAA,cAAAA,EAAgBrB,YAAYqB;KAClD,EAAA;AAAE,QAAA,GAAGrB,YAAYuB;KAEnB,CAAA,GAAA,EAAA;AACJ,IAAA,MAAMC,QAAQjB,aAAcL,CAAAA,SAAAA,CAAAA;IAE5B,qBACEuB,IAAA,CAACC,MAAMC,IAAI,EAAA;QAAC1B,KAAOkB,EAAAA,YAAAA;QAAcG,IAAMA,EAAAA,IAAAA;QAAMlB,IAAMA,EAAAA,IAAAA;;AACjD,0BAAAwB,GAAA,CAACF,MAAMG,KAAK,EAAA;AAAEL,gBAAAA,QAAAA,EAAAA;;0BACdI,GAACE,CAAAA,SAAAA,EAAAA;gBAAUzB,QAAUA,EAAAA,QAAAA;AAAUC,gBAAAA,KAAAA,EAAOA,KAAS,IAAA;;AAC/C,0BAAAsB,GAAA,CAACF,MAAMK,KAAK,EAAA,EAAA;;;AAGlB;;;;"}