{"version":3,"file":"DataManagerContext.mjs","sources":["../../../../admin/src/components/DataManager/DataManagerContext.ts"],"sourcesContent":["/* eslint-disable check-file/filename-naming-convention */\nimport { createContext } from 'react';\n\nimport type { Component, ContentType } from '../../types';\nimport type { Internal, Struct } from '@strapi/types';\n\nexport interface DataManagerContextValue {\n  isLoading: boolean;\n  addAttribute: (opts: {\n    attributeToSet: Record<string, any>;\n    forTarget: Struct.ModelType;\n    targetUid: Internal.UID.Schema;\n  }) => void;\n  editAttribute: (opts: {\n    attributeToSet: Record<string, any>;\n    forTarget: Struct.ModelType;\n    targetUid: Internal.UID.Schema;\n    name: string;\n  }) => void;\n  moveAttribute: (opts: {\n    forTarget: Struct.ModelType;\n    targetUid: Internal.UID.Schema;\n    from: number;\n    to: number;\n  }) => void;\n  addCustomFieldAttribute: (params: {\n    attributeToSet: Record<string, any>;\n    forTarget: Struct.ModelType;\n    targetUid: Internal.UID.Schema;\n  }) => void;\n  editCustomFieldAttribute: (params: {\n    attributeToSet: Record<string, any>;\n    forTarget: Struct.ModelType;\n    targetUid: Internal.UID.Schema;\n    name: string;\n  }) => void;\n  addCreatedComponentToDynamicZone: (opts: {\n    forTarget: Struct.ModelType;\n    targetUid: Internal.UID.Schema;\n    dynamicZoneTarget: string;\n    componentsToAdd: Internal.UID.Component[];\n  }) => void;\n  createComponentSchema: (opts: {\n    data: {\n      icon: string;\n      displayName: string;\n    };\n    componentCategory: string;\n    uid: Internal.UID.Component;\n  }) => void;\n  createSchema: (opts: {\n    data: {\n      displayName: string;\n      singularName: string;\n      pluralName: string;\n      kind: Struct.ContentTypeKind;\n      draftAndPublish: boolean;\n      pluginOptions: Record<string, any>;\n    };\n    uid: Internal.UID.Schema;\n  }) => void;\n  changeDynamicZoneComponents: (opts: {\n    forTarget: Struct.ModelType;\n    targetUid: Internal.UID.Schema;\n    dynamicZoneTarget: string;\n    newComponents: Internal.UID.Component[];\n  }) => void;\n  removeAttribute: (opts: {\n    forTarget: Struct.ModelType;\n    targetUid: Internal.UID.Schema;\n    attributeToRemoveName: string;\n  }) => void;\n  deleteComponent(uid: Internal.UID.Component): void;\n  deleteContentType(uid: Internal.UID.ContentType): void;\n  removeComponentFromDynamicZone: (opts: {\n    forTarget: Struct.ModelType;\n    targetUid: Internal.UID.Schema;\n    dzName: string;\n    componentToRemoveIndex: number;\n  }) => void;\n  sortedContentTypesList: {\n    visible: ContentType['visible'];\n    name: ContentType['uid'];\n    title: ContentType['info']['displayName'];\n    plugin: ContentType['plugin'];\n    uid: ContentType['uid'];\n    to: string;\n    kind: ContentType['kind'];\n    restrictRelationsTo: ContentType['restrictRelationsTo'];\n    status: ContentType['status'];\n  }[];\n  updateComponentSchema: (opts: {\n    data: {\n      icon: string;\n      displayName: string;\n    };\n    componentUID: Internal.UID.Component;\n  }) => void;\n  updateComponentUid: (opts: {\n    newComponentUID: Internal.UID.Component;\n    componentUID: Internal.UID.Component;\n  }) => void;\n  updateSchema: (opts: {\n    data: {\n      displayName: string;\n      kind: Struct.ContentTypeKind;\n      draftAndPublish: boolean;\n      pluginOptions: Record<string, any>;\n    };\n    uid: Internal.UID.ContentType;\n  }) => void;\n  initialComponents: Record<Internal.UID.Component, Component>;\n  components: Record<Internal.UID.Component, Component>;\n  componentsGroupedByCategory: Record<string, Component[]>;\n  componentsThatHaveOtherComponentInTheirAttributes: any[]; // Define the actual type\n  initialContentTypes: Record<Internal.UID.ContentType, ContentType>;\n  contentTypes: Record<Internal.UID.ContentType, ContentType>;\n  isInDevelopmentMode?: boolean;\n  nestedComponents: any[]; // Define the actual type\n  reservedNames: {\n    models: string[];\n    attributes: string[];\n  };\n  allComponentsCategories: any[];\n  saveSchema(): Promise<void>;\n  isModified: boolean;\n  isSaving: boolean;\n  applyChange: (opts: {\n    action: 'add' | 'update' | 'delete';\n    schema: Component | ContentType;\n  }) => void;\n  history: {\n    undo(): void;\n    redo(): void;\n    discardAllChanges(): void;\n    canUndo: boolean;\n    canRedo: boolean;\n    canDiscardAll: boolean;\n  };\n}\n\n// @ts-expect-error need to pass initial value to params\nexport const DataManagerContext = createContext<DataManagerContextValue>();\n"],"names":["DataManagerContext","createContext"],"mappings":";;AA6IA;AACO,MAAMA,qBAAqBC,aAAyC;;;;"}