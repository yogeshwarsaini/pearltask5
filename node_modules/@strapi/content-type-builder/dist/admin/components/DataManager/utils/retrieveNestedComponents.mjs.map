{"version":3,"file":"retrieveNestedComponents.mjs","sources":["../../../../../admin/src/components/DataManager/utils/retrieveNestedComponents.ts"],"sourcesContent":["import type { Components, Component } from '../../../types';\nimport type { UID } from '@strapi/types';\n\nexport type NestedComponent = {\n  component: UID.Component;\n  uidsOfAllParents?: UID.Component[];\n  parentCompoUid?: UID.Component;\n};\n\nexport const retrieveNestedComponents = (appComponents: Components): NestedComponent[] => {\n  const nestedComponents = Object.keys(appComponents).reduce((acc: NestedComponent[], current) => {\n    const componentAttributes = appComponents?.[current]?.attributes ?? [];\n    const currentComponentNestedCompos = getComponentsNestedWithinComponent(\n      componentAttributes,\n      current as UID.Component\n    );\n    return [...acc, ...currentComponentNestedCompos];\n  }, []);\n\n  return mergeComponents(nestedComponents);\n};\n\nconst getComponentsNestedWithinComponent = (\n  componentAttributes: Component['attributes'],\n  parentCompoUid: UID.Component\n) => {\n  return componentAttributes.reduce((acc: NestedComponent[], current) => {\n    const { type } = current;\n\n    if (type === 'component') {\n      acc.push({\n        component: current.component,\n        parentCompoUid,\n      });\n    }\n\n    return acc;\n  }, []);\n};\n\n// Merge duplicate components\nconst mergeComponents = (originalComponents: NestedComponent[]): NestedComponent[] => {\n  const componentMap = new Map();\n  // Populate the map with component and its parents\n  originalComponents.forEach(({ component, parentCompoUid }) => {\n    if (!componentMap.has(component)) {\n      componentMap.set(component, new Set());\n    }\n    componentMap.get(component).add(parentCompoUid);\n  });\n\n  // Convert the map to the desired array format\n  const transformedComponents: NestedComponent[] = Array.from(componentMap.entries()).map(\n    ([component, parentCompoUidSet]) => ({\n      component,\n      uidsOfAllParents: Array.from(parentCompoUidSet),\n    })\n  );\n\n  return transformedComponents;\n};\n"],"names":["retrieveNestedComponents","appComponents","nestedComponents","Object","keys","reduce","acc","current","componentAttributes","attributes","currentComponentNestedCompos","getComponentsNestedWithinComponent","mergeComponents","parentCompoUid","type","push","component","originalComponents","componentMap","Map","forEach","has","set","Set","get","add","transformedComponents","Array","from","entries","map","parentCompoUidSet","uidsOfAllParents"],"mappings":"AASO,MAAMA,2BAA2B,CAACC,aAAAA,GAAAA;IACvC,MAAMC,gBAAAA,GAAmBC,OAAOC,IAAI,CAACH,eAAeI,MAAM,CAAC,CAACC,GAAwBC,EAAAA,OAAAA,GAAAA;AAClF,QAAA,MAAMC,sBAAsBP,aAAe,GAACM,OAAQ,CAAA,EAAEE,cAAc,EAAE;QACtE,MAAMC,4BAAAA,GAA+BC,mCACnCH,mBACAD,EAAAA,OAAAA,CAAAA;QAEF,OAAO;AAAID,YAAAA,GAAAA,GAAAA;AAAQI,YAAAA,GAAAA;AAA6B,SAAA;AAClD,KAAA,EAAG,EAAE,CAAA;AAEL,IAAA,OAAOE,eAAgBV,CAAAA,gBAAAA,CAAAA;AACzB;AAEA,MAAMS,kCAAAA,GAAqC,CACzCH,mBACAK,EAAAA,cAAAA,GAAAA;AAEA,IAAA,OAAOL,mBAAoBH,CAAAA,MAAM,CAAC,CAACC,GAAwBC,EAAAA,OAAAA,GAAAA;QACzD,MAAM,EAAEO,IAAI,EAAE,GAAGP,OAAAA;AAEjB,QAAA,IAAIO,SAAS,WAAa,EAAA;AACxBR,YAAAA,GAAAA,CAAIS,IAAI,CAAC;AACPC,gBAAAA,SAAAA,EAAWT,QAAQS,SAAS;AAC5BH,gBAAAA;AACF,aAAA,CAAA;AACF;QAEA,OAAOP,GAAAA;AACT,KAAA,EAAG,EAAE,CAAA;AACP,CAAA;AAEA;AACA,MAAMM,kBAAkB,CAACK,kBAAAA,GAAAA;AACvB,IAAA,MAAMC,eAAe,IAAIC,GAAAA,EAAAA;;AAEzBF,IAAAA,kBAAAA,CAAmBG,OAAO,CAAC,CAAC,EAAEJ,SAAS,EAAEH,cAAc,EAAE,GAAA;AACvD,QAAA,IAAI,CAACK,YAAAA,CAAaG,GAAG,CAACL,SAAY,CAAA,EAAA;YAChCE,YAAaI,CAAAA,GAAG,CAACN,SAAAA,EAAW,IAAIO,GAAAA,EAAAA,CAAAA;AAClC;AACAL,QAAAA,YAAAA,CAAaM,GAAG,CAACR,SAAWS,CAAAA,CAAAA,GAAG,CAACZ,cAAAA,CAAAA;AAClC,KAAA,CAAA;;AAGA,IAAA,MAAMa,qBAA2CC,GAAAA,KAAAA,CAAMC,IAAI,CAACV,aAAaW,OAAO,EAAA,CAAA,CAAIC,GAAG,CACrF,CAAC,CAACd,SAAWe,EAAAA,iBAAAA,CAAkB,IAAM;AACnCf,YAAAA,SAAAA;YACAgB,gBAAkBL,EAAAA,KAAAA,CAAMC,IAAI,CAACG,iBAAAA;SAC/B,CAAA,CAAA;IAGF,OAAOL,qBAAAA;AACT,CAAA;;;;"}