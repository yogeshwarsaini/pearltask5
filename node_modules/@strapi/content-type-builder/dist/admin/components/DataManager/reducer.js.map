{"version":3,"file":"reducer.js","sources":["../../../../admin/src/components/DataManager/reducer.ts"],"sourcesContent":["import { PayloadAction } from '@reduxjs/toolkit';\nimport merge from 'lodash/merge';\nimport omit from 'lodash/omit';\n\nimport { getRelationType } from '../../utils/getRelationType';\nimport { makeUnique } from '../../utils/makeUnique';\n\nimport { createUndoRedoSlice } from './undoRedo';\nimport { formatSchema } from './utils/formatSchemas';\n\nimport type {\n  Components,\n  ContentTypes,\n  ContentType,\n  Component,\n  Status,\n  AnyAttribute,\n} from '../../types';\nimport type { Internal, Schema, Struct, UID } from '@strapi/types';\n\nexport interface DataManagerStateType {\n  components: Components;\n  initialComponents: Components;\n  contentTypes: ContentTypes;\n  initialContentTypes: ContentTypes;\n  reservedNames: {\n    models: string[];\n    attributes: string[];\n  };\n  isLoading: boolean;\n  [key: string]: any;\n}\n\nconst initialState: DataManagerStateType = {\n  components: {},\n  contentTypes: {},\n  initialComponents: {},\n  initialContentTypes: {},\n  reservedNames: {\n    models: [],\n    attributes: [],\n  },\n  isLoading: true,\n};\n\nconst ONE_SIDE_RELATIONS = ['oneWay', 'manyWay'];\n\nconst getOppositeRelation = (originalRelation?: Schema.Attribute.RelationKind.Any) => {\n  if (originalRelation === 'manyToOne') {\n    return 'oneToMany';\n  }\n\n  if (originalRelation === 'oneToMany') {\n    return 'manyToOne';\n  }\n\n  return originalRelation;\n};\n\nconst findAttributeIndex = (type: any, attributeToFind?: string) => {\n  return type.attributes.findIndex(({ name }: { name: string }) => name === attributeToFind);\n};\n\ntype InitPayload = {\n  components: Record<string, Component>;\n  contentTypes: Record<string, ContentType>;\n  reservedNames: DataManagerStateType['reservedNames'];\n};\n\ntype AddAttributePayload = {\n  attributeToSet: Record<string, any>;\n  forTarget: Struct.ModelType;\n  targetUid: string;\n};\n\ntype AddCreateComponentToDynamicZonePayload = {\n  forTarget: Struct.ModelType;\n  targetUid: string;\n  dynamicZoneTarget: string;\n  componentsToAdd: Internal.UID.Component[];\n};\n\ntype AddCustomFieldAttributePayload = {\n  attributeToSet: Record<string, any>;\n  forTarget: Struct.ModelType;\n  targetUid: string;\n};\n\ntype ChangeDynamicZoneComponentsPayload = {\n  dynamicZoneTarget: string;\n  newComponents: Internal.UID.Component[];\n  forTarget: Struct.ModelType;\n  targetUid: string;\n};\n\ntype CreateComponentSchemaPayload = {\n  uid: string;\n  data: {\n    icon: string;\n    displayName: string;\n  };\n  componentCategory: string;\n};\n\ntype CreateSchemaPayload = {\n  uid: string;\n  data: {\n    displayName: string;\n    singularName: string;\n    pluralName: string;\n    kind: Struct.ContentTypeKind;\n    draftAndPublish: boolean;\n    pluginOptions: Record<string, any>;\n  };\n};\n\ntype EditAttributePayload = {\n  attributeToSet: Record<string, any>;\n  forTarget: Struct.ModelType;\n  targetUid: string;\n  name: string;\n};\n\ntype EditCustomFieldAttributePayload = {\n  attributeToSet: Record<string, any>;\n  forTarget: Struct.ModelType;\n  targetUid: string;\n  name: string;\n};\n\ntype RemoveComponentFromDynamicZonePayload = {\n  forTarget: Struct.ModelType;\n  targetUid: string;\n  dzName: string;\n  componentToRemoveIndex: number;\n};\n\ntype RemoveFieldPayload = {\n  forTarget: Struct.ModelType;\n  targetUid: string;\n  attributeToRemoveName: string;\n};\n\ntype UpdateComponentSchemaPayload = {\n  data: {\n    icon: string;\n    displayName: string;\n  };\n  uid: Internal.UID.Component;\n};\n\ntype UpdateComponentUIDPayload = {\n  uid: Internal.UID.Component;\n  newComponentUID: Internal.UID.Component;\n};\n\ntype UpdateSchemaPayload = {\n  data: {\n    displayName: string;\n    kind: Struct.ContentTypeKind;\n    draftAndPublish: boolean;\n    pluginOptions: Record<string, any>;\n  };\n  uid: string;\n};\n\ntype MoveAttributePayload = {\n  forTarget: Struct.ModelType;\n  targetUid: string;\n  from: number;\n  to: number;\n};\n\nconst getType = (\n  state: DataManagerStateType,\n  {\n    forTarget,\n    targetUid,\n  }: {\n    forTarget: Struct.ModelType;\n    targetUid: string;\n  }\n) => {\n  return forTarget === 'contentType' ? state.contentTypes[targetUid] : state.components[targetUid];\n};\n\n// TODO: use initial state when chnaging back to the initial state without knowing\nconst setStatus = (type: ContentType | Component, status: Status) => {\n  switch (type.status) {\n    case 'NEW':\n    case 'REMOVED': {\n      break;\n    }\n    default: {\n      type.status = status;\n    }\n  }\n};\n\nconst getNewStatus = (oldStatus: Status | undefined, newStatus: Status) => {\n  if (oldStatus === 'NEW' || oldStatus === 'REMOVED') {\n    return oldStatus;\n  }\n\n  return newStatus;\n};\n\nconst setAttributeStatus = (attribute: Record<string, any>, status: Status) => {\n  attribute.status = getNewStatus(attribute.status, status);\n};\n\nconst createAttribute = (properties: Record<string, any>): AnyAttribute => {\n  return {\n    ...properties,\n    status: 'NEW',\n  } as AnyAttribute;\n};\n\nconst setAttributeAt = (type: ContentType | Component, index: number, attribute: AnyAttribute) => {\n  const previousAttribute = type.attributes[index];\n\n  const newStatus = getNewStatus(previousAttribute.status, 'CHANGED');\n\n  type.attributes[index] = {\n    ...attribute,\n    status: newStatus,\n  };\n\n  setStatus(type, 'CHANGED');\n};\n\nconst pushAttribute = (type: ContentType | Component, attribute: AnyAttribute) => {\n  type.attributes.push(attribute);\n  setStatus(type, 'CHANGED');\n};\n\nconst removeAttributeAt = (type: ContentType | Component, index: number) => {\n  const attr = type.attributes[index];\n\n  setStatus(type, 'CHANGED');\n\n  if (attr.status === 'NEW') {\n    type.attributes.splice(index, 1);\n  } else {\n    setAttributeStatus(attr, 'REMOVED');\n  }\n};\n\nconst replaceAttributeAt = (\n  type: ContentType | Component,\n  index: number,\n  attribute: AnyAttribute\n) => {\n  type.attributes[index] = attribute;\n  setStatus(type, 'CHANGED');\n};\n\nconst removeAttributeByName = (type: ContentType | Component, name: string) => {\n  const idx = type.attributes.findIndex((attr) => attr.name === name);\n\n  const attr = type.attributes[idx];\n\n  setStatus(type, 'CHANGED');\n\n  if (attr.status === 'NEW') {\n    type.attributes.splice(idx, 1);\n  } else {\n    setAttributeStatus(attr, 'REMOVED');\n  }\n};\n\nconst updateType = (type: ContentType | Component, data: Record<string, any>) => {\n  merge(type, data);\n  setStatus(type, 'CHANGED');\n};\n\nconst slice = createUndoRedoSlice(\n  {\n    name: 'data-manager',\n    initialState,\n    reducers: {\n      init: (state, action: PayloadAction<InitPayload>) => {\n        const { components, contentTypes, reservedNames } = action.payload;\n\n        state.components = components;\n        state.initialComponents = components;\n        state.initialContentTypes = contentTypes;\n        state.contentTypes = contentTypes;\n        state.reservedNames = reservedNames;\n        state.isLoading = false;\n      },\n      createComponentSchema: (state, action: PayloadAction<CreateComponentSchemaPayload>) => {\n        const { uid, data, componentCategory } = action.payload;\n\n        const newSchema: Component = {\n          uid: uid as Internal.UID.Component,\n          status: 'NEW',\n          category: componentCategory,\n          modelName: data.displayName,\n          globalId: data.displayName,\n          info: {\n            icon: data.icon,\n            displayName: data.displayName,\n          },\n          attributes: [],\n          modelType: 'component',\n        };\n\n        state.components[uid as string] = newSchema;\n      },\n      createSchema: (state, action: PayloadAction<CreateSchemaPayload>) => {\n        const { uid, data } = action.payload;\n\n        const { displayName, singularName, pluralName, kind, draftAndPublish, pluginOptions } =\n          data;\n\n        const newSchema: ContentType = {\n          uid: uid as Internal.UID.ContentType,\n          status: 'NEW',\n          visible: true,\n          modelType: 'contentType',\n          restrictRelationsTo: null,\n          attributes: [],\n          kind,\n          modelName: displayName,\n          globalId: displayName,\n          options: {\n            draftAndPublish,\n          },\n          info: {\n            displayName,\n            singularName,\n            pluralName,\n          },\n          pluginOptions,\n        };\n\n        state.contentTypes[uid] = newSchema;\n      },\n      addAttribute: (state, action: PayloadAction<AddAttributePayload>) => {\n        const { attributeToSet, forTarget, targetUid } = action.payload;\n\n        const type = getType(state, { forTarget, targetUid });\n\n        const attribute = createAttribute(omit(attributeToSet, 'createComponent'));\n\n        if (attribute.type === 'relation') {\n          const target = attribute.target;\n          const targetAttribute = attribute.targetAttribute || null;\n          const relation = attribute.relation;\n          const relationType = getRelationType(relation, targetAttribute);\n\n          const isBidirectionalRelation = !['oneWay', 'manyWay'].includes(relationType);\n\n          if (isBidirectionalRelation) {\n            const oppositeAttribute = createAttribute({\n              name: targetAttribute,\n              relation: getOppositeRelation(relationType),\n              target: type.uid,\n              targetAttribute: attribute.name,\n              type: 'relation',\n              private: attribute.private,\n            });\n\n            const targetType = getType(state, { forTarget, targetUid: target });\n            pushAttribute(targetType, oppositeAttribute);\n          }\n        }\n\n        pushAttribute(type, attribute);\n        setStatus(type, 'CHANGED');\n      },\n      moveAttribute: (state, action: PayloadAction<MoveAttributePayload>) => {\n        const { forTarget, targetUid, from, to } = action.payload;\n\n        const type = getType(state, { forTarget, targetUid });\n\n        const attribute = type.attributes[from];\n        type.attributes.splice(from, 1);\n        type.attributes.splice(to, 0, attribute);\n        setStatus(type, 'CHANGED');\n      },\n      addCustomFieldAttribute: (state, action: PayloadAction<AddCustomFieldAttributePayload>) => {\n        const { attributeToSet, forTarget, targetUid } = action.payload;\n\n        const type = getType(state, { forTarget, targetUid });\n\n        pushAttribute(type, createAttribute(attributeToSet));\n      },\n      addCreatedComponentToDynamicZone: (\n        state,\n        action: PayloadAction<AddCreateComponentToDynamicZonePayload>\n      ) => {\n        const { dynamicZoneTarget, componentsToAdd, forTarget, targetUid } = action.payload;\n\n        const type = getType(state, { forTarget, targetUid });\n\n        const dzAttributeIndex = findAttributeIndex(type, dynamicZoneTarget);\n        const attr = type.attributes[dzAttributeIndex] as Schema.Attribute.DynamicZone;\n\n        componentsToAdd.forEach((componentUid: Internal.UID.Component) => {\n          attr.components.push(componentUid);\n        });\n\n        setAttributeStatus(attr, 'CHANGED');\n        setStatus(type, 'CHANGED');\n      },\n      changeDynamicZoneComponents: (\n        state,\n        action: PayloadAction<ChangeDynamicZoneComponentsPayload>\n      ) => {\n        const { dynamicZoneTarget, newComponents, forTarget, targetUid } = action.payload;\n\n        const type = getType(state, { forTarget, targetUid });\n\n        const dzAttributeIndex = findAttributeIndex(type, dynamicZoneTarget);\n        const attr = type.attributes[dzAttributeIndex] as Schema.Attribute.DynamicZone;\n        const currentDZComponents = attr.components;\n\n        const updatedComponents = makeUnique([...currentDZComponents, ...newComponents]);\n\n        setStatus(type, 'CHANGED');\n        setAttributeStatus(attr, 'CHANGED');\n        attr.components = updatedComponents;\n      },\n      editAttribute: (state, action: PayloadAction<EditAttributePayload>) => {\n        const { name, attributeToSet, forTarget, targetUid } = action.payload;\n\n        const type = getType(state, { forTarget, targetUid });\n\n        const initialAttributeIndex = findAttributeIndex(type, name);\n\n        if (initialAttributeIndex === -1) {\n          return;\n        }\n\n        const previousAttribute = type.attributes[initialAttributeIndex];\n\n        setAttributeAt(type, initialAttributeIndex, attributeToSet as AnyAttribute);\n\n        if (previousAttribute.type !== attributeToSet.type) {\n          return;\n        }\n\n        if (previousAttribute.type !== 'relation' || attributeToSet.type !== 'relation') {\n          return;\n        }\n\n        const previousTarget = getType(state, {\n          forTarget: 'contentType',\n          targetUid: previousAttribute.target,\n        });\n        const newTarget = getType(state, {\n          forTarget: 'contentType',\n          targetUid: attributeToSet.target,\n        });\n\n        const previousTargetAttributeIndex = findAttributeIndex(\n          previousTarget,\n          previousAttribute.targetAttribute ?? ''\n        );\n\n        // remove old targetAttribute\n        if (previousAttribute.targetAttribute) {\n          removeAttributeByName(previousTarget, previousAttribute.targetAttribute);\n        }\n\n        const newRelationType = getRelationType(\n          attributeToSet.relation,\n          attributeToSet.targetAttribute\n        );\n        const isBidirectionnal = !ONE_SIDE_RELATIONS.includes(newRelationType);\n\n        if (isBidirectionnal) {\n          const newTargetAttribute = {\n            name: attributeToSet.targetAttribute,\n            type: 'relation',\n            relation: getOppositeRelation(attributeToSet.relation),\n            targetAttribute: attributeToSet.name,\n            target: type.uid,\n            private: previousAttribute.private ?? attributeToSet.private,\n            pluginOptions: previousAttribute.pluginOptions ?? attributeToSet.pluginOptions,\n            status: 'CHANGED',\n          } as AnyAttribute;\n\n          // create or recreate(at old index) targetAttribute\n          if (previousTargetAttributeIndex !== -1 && previousTarget.uid === newTarget.uid) {\n            // re-create at previousIdx if possible\n            replaceAttributeAt(newTarget, previousTargetAttributeIndex, newTargetAttribute);\n          } else {\n            pushAttribute(newTarget, {\n              ...newTargetAttribute,\n              status: 'NEW',\n            });\n          }\n        }\n      },\n      editCustomFieldAttribute: (state, action: PayloadAction<EditCustomFieldAttributePayload>) => {\n        const { forTarget, targetUid, name, attributeToSet } = action.payload;\n\n        const initialAttributeName = name;\n        const type = getType(state, { forTarget, targetUid });\n\n        const initialAttributeIndex = findAttributeIndex(type, initialAttributeName);\n\n        setAttributeAt(type, initialAttributeIndex, attributeToSet as AnyAttribute);\n      },\n      reloadPlugin: () => {\n        return initialState;\n      },\n      removeComponentFromDynamicZone: (\n        state,\n        action: PayloadAction<RemoveComponentFromDynamicZonePayload>\n      ) => {\n        const { dzName, componentToRemoveIndex, forTarget, targetUid } = action.payload;\n\n        const type =\n          forTarget === 'contentType' ? state.contentTypes[targetUid] : state.components[targetUid];\n\n        if (!type) {\n          return;\n        }\n\n        const dzAttributeIndex = findAttributeIndex(type, dzName);\n        const attr = type.attributes[dzAttributeIndex] as Schema.Attribute.DynamicZone;\n\n        setStatus(type, 'CHANGED');\n        setAttributeStatus(attr, 'CHANGED');\n        attr.components.splice(componentToRemoveIndex, 1);\n      },\n      removeField: (state, action: PayloadAction<RemoveFieldPayload>) => {\n        const { forTarget, targetUid, attributeToRemoveName } = action.payload;\n\n        const type = getType(state, { forTarget, targetUid });\n\n        const attributeToRemoveIndex = findAttributeIndex(type, attributeToRemoveName);\n        const attribute = type.attributes[attributeToRemoveIndex];\n\n        if (attribute.type === 'relation') {\n          const { target, relation, targetAttribute: targetAttributeName } = attribute;\n          const relationType = getRelationType(relation, targetAttributeName);\n\n          const isBidirectionnal = !ONE_SIDE_RELATIONS.includes(relationType!);\n\n          if (isBidirectionnal && targetAttributeName) {\n            const targetContentType = getType(state, { forTarget, targetUid: target });\n            const targetAttributeIndex = findAttributeIndex(targetContentType, targetAttributeName);\n\n            removeAttributeAt(targetContentType, targetAttributeIndex);\n          }\n        }\n\n        // Find all uid fields that have the targetField set to the field we are removing\n        type.attributes.forEach((attribute) => {\n          if (attribute.type === 'uid') {\n            if (attribute.targetField === attributeToRemoveName) {\n              delete attribute.targetField;\n            }\n          }\n        });\n\n        removeAttributeAt(type, attributeToRemoveIndex);\n      },\n      // only edits a component in practice\n      updateComponentSchema: (state, action: PayloadAction<UpdateComponentSchemaPayload>) => {\n        const { data, uid } = action.payload;\n\n        const type = state.components[uid];\n        if (!type) {\n          return;\n        }\n\n        updateType(type, {\n          info: {\n            displayName: data.displayName,\n            icon: data.icon,\n          },\n        });\n      },\n      updateComponentUid: (state, action: PayloadAction<UpdateComponentUIDPayload>) => {\n        const { newComponentUID, uid } = action.payload;\n\n        const type = state.components[uid];\n        if (!type || type.status !== 'NEW') {\n          return;\n        }\n\n        if (newComponentUID !== uid) {\n          const newType = { ...type, uid: newComponentUID };\n          state.components[newComponentUID] = newType;\n          delete state.components[uid];\n\n          // update the uid in the content types\n          Object.keys(state.contentTypes).forEach((contentTypeUid) => {\n            const contentType = state.contentTypes[contentTypeUid];\n\n            contentType.attributes.forEach((attribute) => {\n              if (attribute.type === 'dynamiczone') {\n                const newComponents = attribute.components.map((component: UID.Component) => {\n                  if (component === uid) {\n                    return newComponentUID;\n                  }\n\n                  return component;\n                });\n\n                attribute.components = newComponents;\n              }\n            });\n\n            contentType.attributes.forEach((attribute) => {\n              if (attribute.type === 'component' && attribute.component === uid) {\n                attribute.component = newComponentUID;\n              }\n            });\n          });\n\n          // update the uid in the other components\n          Object.keys(state.components).forEach((componentUid) => {\n            const component = state.components[componentUid];\n\n            component.attributes.forEach((attribute) => {\n              if (attribute.type === 'component' && attribute.component === uid) {\n                attribute.component = newComponentUID;\n              }\n            });\n          });\n        }\n      },\n      updateSchema: (state, action: PayloadAction<UpdateSchemaPayload>) => {\n        const { data, uid } = action.payload;\n\n        const { displayName, kind, draftAndPublish, pluginOptions } = data;\n\n        const type = state.contentTypes[uid];\n        if (!type) {\n          return;\n        }\n\n        updateType(type, {\n          info: {\n            displayName,\n          },\n          kind,\n          options: {\n            draftAndPublish,\n          },\n          pluginOptions,\n        });\n      },\n      deleteComponent: (state, action: PayloadAction<Internal.UID.Component>) => {\n        const uid = action.payload;\n\n        // remove the compo from the components\n        if (state.components[uid].status === 'NEW') {\n          delete state.components[uid];\n        } else {\n          setStatus(state.components[uid], 'REMOVED');\n        }\n\n        // remove the compo from the content types\n        Object.keys(state.contentTypes).forEach((contentTypeUid) => {\n          const contentType = state.contentTypes[contentTypeUid];\n\n          // remove from dynamic zones\n          contentType.attributes.forEach((attribute) => {\n            if (attribute.type === 'dynamiczone') {\n              const newComponents = attribute.components.filter(\n                (component: unknown) => component !== uid\n              );\n\n              attribute.components = newComponents;\n            }\n          });\n\n          contentType.attributes.forEach((attribute) => {\n            if (attribute.type === 'component' && attribute.component === uid) {\n              removeAttributeByName(contentType, attribute.name);\n            }\n          });\n        });\n\n        // remove the compo from other components\n        Object.keys(state.components).forEach((componentUid) => {\n          const component = state.components[componentUid];\n\n          component.attributes.forEach((attribute) => {\n            if (attribute.type === 'component' && attribute.component === uid) {\n              removeAttributeByName(component, attribute.name);\n            }\n          });\n        });\n      },\n      deleteContentType: (state, action: PayloadAction<Internal.UID.ContentType>) => {\n        const uid = action.payload;\n        const type = state.contentTypes[uid];\n\n        // just drop new content types\n        if (type.status === 'NEW') {\n          delete state.contentTypes[uid];\n        } else {\n          setStatus(type, 'REMOVED');\n        }\n\n        // remove the content type from the components\n        Object.keys(state.components).forEach((componentUid) => {\n          const component = state.components[componentUid];\n\n          component.attributes.forEach((attribute) => {\n            if (attribute.type === 'relation' && attribute.target === uid) {\n              removeAttributeByName(component, attribute.name);\n            }\n          });\n        });\n\n        // remove the content type from the content types\n        Object.keys(state.contentTypes).forEach((contentTypeUid) => {\n          const contentType = state.contentTypes[contentTypeUid];\n\n          contentType.attributes.forEach((attribute) => {\n            if (attribute.type === 'relation' && attribute.target === uid) {\n              removeAttributeByName(contentType, attribute.name);\n            }\n          });\n        });\n      },\n\n      applyChange(\n        state,\n        reducerAction: PayloadAction<{\n          action: 'add' | 'update' | 'delete';\n          schema: ContentType | Component;\n        }>\n      ) {\n        const { action, schema } = reducerAction.payload;\n\n        switch (action) {\n          case 'add': {\n            // generate a uid ?\n            const uid = schema.uid;\n\n            if (schema.modelType === 'component') {\n              state.components[uid] = {\n                ...formatSchema(schema),\n                status: 'NEW',\n              };\n            } else {\n              state.contentTypes[uid] = {\n                ...formatSchema(schema),\n                status: 'NEW',\n              };\n            }\n          }\n        }\n      },\n    },\n  },\n  {\n    limit: 50,\n    excludeActionsFromHistory: ['reloadPlugin', 'init'],\n    stateSelector: (state) => {\n      if (!state) {\n        return {};\n      }\n\n      return {\n        components: state.components,\n        contentTypes: state.contentTypes,\n      };\n    },\n    discard: (state) => {\n      state.components = state.initialComponents;\n      state.contentTypes = state.initialContentTypes;\n    },\n  }\n);\n\nexport type State = ReturnType<typeof slice.reducer>;\nexport const { reducer, actions } = slice;\nexport { initialState };\n"],"names":["initialState","components","contentTypes","initialComponents","initialContentTypes","reservedNames","models","attributes","isLoading","ONE_SIDE_RELATIONS","getOppositeRelation","originalRelation","findAttributeIndex","type","attributeToFind","findIndex","name","getType","state","forTarget","targetUid","setStatus","status","getNewStatus","oldStatus","newStatus","setAttributeStatus","attribute","createAttribute","properties","setAttributeAt","index","previousAttribute","pushAttribute","push","removeAttributeAt","attr","splice","replaceAttributeAt","removeAttributeByName","idx","updateType","data","merge","slice","createUndoRedoSlice","reducers","init","action","payload","createComponentSchema","uid","componentCategory","newSchema","category","modelName","displayName","globalId","info","icon","modelType","createSchema","singularName","pluralName","kind","draftAndPublish","pluginOptions","visible","restrictRelationsTo","options","addAttribute","attributeToSet","omit","target","targetAttribute","relation","relationType","getRelationType","isBidirectionalRelation","includes","oppositeAttribute","private","targetType","moveAttribute","from","to","addCustomFieldAttribute","addCreatedComponentToDynamicZone","dynamicZoneTarget","componentsToAdd","dzAttributeIndex","forEach","componentUid","changeDynamicZoneComponents","newComponents","currentDZComponents","updatedComponents","makeUnique","editAttribute","initialAttributeIndex","previousTarget","newTarget","previousTargetAttributeIndex","newRelationType","isBidirectionnal","newTargetAttribute","editCustomFieldAttribute","initialAttributeName","reloadPlugin","removeComponentFromDynamicZone","dzName","componentToRemoveIndex","removeField","attributeToRemoveName","attributeToRemoveIndex","targetAttributeName","targetContentType","targetAttributeIndex","targetField","updateComponentSchema","updateComponentUid","newComponentUID","newType","Object","keys","contentTypeUid","contentType","map","component","updateSchema","deleteComponent","filter","deleteContentType","applyChange","reducerAction","schema","formatSchema","limit","excludeActionsFromHistory","stateSelector","discard","reducer","actions"],"mappings":"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"}