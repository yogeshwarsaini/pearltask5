{"version":3,"file":"undoRedo.js","sources":["../../../../admin/src/components/DataManager/undoRedo.ts"],"sourcesContent":["import {\n  CaseReducer,\n  createSlice,\n  CreateSliceOptions,\n  Draft,\n  original,\n  PayloadAction,\n  SliceCaseReducers,\n} from '@reduxjs/toolkit';\n\nexport type UndoRedoState<T> = {\n  past: Array<Partial<T>>;\n  future: Array<Partial<T>>;\n  current: T;\n};\n\ntype WrappedUndoRedoReducer<TState, TReducers extends SliceCaseReducers<TState>> = {\n  [K in keyof TReducers]: TReducers[K] extends CaseReducer<TState, infer A>\n    ? CaseReducer<UndoRedoState<TState>, A>\n    : never;\n};\n\ntype UndoRedoReducer<TState, TReducers extends SliceCaseReducers<TState>> = WrappedUndoRedoReducer<\n  TState,\n  TReducers\n> & {\n  undo: CaseReducer<UndoRedoState<TState>>;\n  redo: CaseReducer<UndoRedoState<TState>>;\n  discardAll: CaseReducer<UndoRedoState<TState>>;\n  clearHistory: CaseReducer<UndoRedoState<TState>>;\n};\n\ntype Opts<TState> = {\n  limit?: number;\n  excludeActionsFromHistory?: string[];\n  stateSelector?: (state: Draft<TState> | undefined) => Draft<Partial<TState>>;\n  discard?: (state: Draft<TState>) => void;\n};\n\nconst isCallable = (obj: unknown): obj is (...args: unknown[]) => unknown => {\n  return typeof obj === 'function';\n};\n\nexport const createUndoRedoSlice = <State, CaseReducers extends SliceCaseReducers<State>>(\n  sliceOpts: CreateSliceOptions<State, CaseReducers, string>,\n  opts: Opts<State>\n) => {\n  const initialState: UndoRedoState<State> = {\n    past: [],\n    future: [],\n    current: isCallable(sliceOpts.initialState) ? sliceOpts.initialState() : sliceOpts.initialState,\n  };\n\n  const { limit = 10 } = opts ?? {};\n\n  const selector = opts.stateSelector || (<T>(state: Draft<T>): Draft<T> => state);\n\n  const wrappedReducers = Object.keys(sliceOpts.reducers).reduce(\n    (acc, actionName: string) => {\n      const reducer = sliceOpts.reducers[actionName];\n\n      if (!isCallable(reducer)) {\n        throw new Error('Reducer must be a function. prepapre not support in UndoRedo wrapper');\n      }\n\n      acc[actionName] = (state, action) => {\n        const newCurrent = reducer(state.current as Draft<State>, action);\n\n        if (opts.excludeActionsFromHistory?.includes(actionName)) {\n          if (newCurrent !== undefined) {\n            state.current = newCurrent as Draft<State>;\n          }\n\n          return;\n        }\n\n        const originalCurrent = original(state.current);\n\n        state.past.push(selector(originalCurrent)!);\n        if (state.past.length > limit) {\n          state.past.shift();\n        }\n        state.future = [];\n\n        if (newCurrent !== undefined) {\n          state.current = newCurrent as Draft<State>;\n        }\n      };\n\n      return acc;\n    },\n    {} as Record<string, CaseReducer<UndoRedoState<State>, PayloadAction<unknown>>>\n  ) as WrappedUndoRedoReducer<State, CaseReducers>;\n\n  return createSlice<UndoRedoState<State>, UndoRedoReducer<State, CaseReducers>>({\n    name: sliceOpts.name,\n    initialState,\n    // @ts-expect-error - TS doesn't like the fact that we're adding extra reducers\n    reducers: {\n      ...wrappedReducers,\n      undo: (state) => {\n        if (state.past.length === 0) {\n          return;\n        }\n\n        const previous = state.past.pop();\n\n        if (previous !== undefined) {\n          state.future = [state.current, ...state.future];\n          // reapply the previous state partially\n          // @ts-expect-error - TS doesn't like the fact that we're mutating the state\n          state.current = { ...state.current, ...previous };\n        }\n      },\n\n      redo: (state) => {\n        if (state.future.length === 0) {\n          return;\n        }\n\n        const next = state.future.shift();\n        if (next != undefined) {\n          state.past = [...state.past, state.current];\n          // reapply the previous state partially\n          // @ts-expect-error - TS doesn't like the fact that we're mutating the state\n          state.current = { ...state.current, ...next };\n        }\n      },\n\n      discardAll: (state) => {\n        if (opts.discard) {\n          opts.discard(state.current);\n        } else {\n          // @ts-expect-error - TS doesn't like the fact that we're mutating the state\n          state.current = initialState.current;\n        }\n        state.past = [];\n        state.future = [];\n      },\n\n      clearHistory: (state) => {\n        state.past = [];\n        state.future = [];\n      },\n    },\n  });\n};\n"],"names":["isCallable","obj","createUndoRedoSlice","sliceOpts","opts","initialState","past","future","current","limit","selector","stateSelector","state","wrappedReducers","Object","keys","reducers","reduce","acc","actionName","reducer","Error","action","newCurrent","excludeActionsFromHistory","includes","undefined","originalCurrent","original","push","length","shift","createSlice","name","undo","previous","pop","redo","next","discardAll","discard","clearHistory"],"mappings":"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"}