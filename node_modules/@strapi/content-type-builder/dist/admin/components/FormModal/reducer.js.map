{"version":3,"file":"reducer.js","sources":["../../../../admin/src/components/FormModal/reducer.ts"],"sourcesContent":["import { createSlice, type PayloadAction } from '@reduxjs/toolkit';\nimport set from 'lodash/set';\nimport snakeCase from 'lodash/snakeCase';\nimport pluralize from 'pluralize';\n\nimport { getRelationType } from '../../utils/getRelationType';\nimport { nameToSlug } from '../../utils/nameToSlug';\n\nimport { createComponentUid } from './utils/createUid';\nimport { customFieldDefaultOptionsReducer } from './utils/customFieldDefaultOptionsReducer';\nimport { shouldPluralizeName, shouldPluralizeTargetAttribute } from './utils/relations';\n\nimport type { Schema, UID } from '@strapi/types';\n\nexport type State = {\n  formErrors: Record<string, any>;\n  modifiedData: Record<string, any>;\n  initialData: Record<string, any>;\n  componentToCreate: Record<string, any>;\n  isCreatingComponentWhileAddingAField: boolean;\n};\n\nconst initialState: State = {\n  formErrors: {},\n  modifiedData: {},\n  initialData: {},\n  componentToCreate: {},\n  isCreatingComponentWhileAddingAField: false,\n};\n\ntype OnChangePayload = {\n  keys: string[];\n  value: any;\n};\n\ntype OnChangeRelationTargetPayload = {\n  target: {\n    oneThatIsCreatingARelationWithAnother: string;\n    selectedContentTypeFriendlyName: string;\n    targetContentTypeAllowedRelations: Schema.Attribute.RelationKind.Any[] | null;\n    value: string;\n  };\n};\n\ntype OnChangeRelationTypePayload = {\n  target: {\n    oneThatIsCreatingARelationWithAnother: string;\n    value: Schema.Attribute.RelationKind.Any;\n  };\n};\n\ntype ResetPropsAndSetFormForAddingAnExistingCompoPayload = {\n  uid: UID.Schema;\n  options?: Record<string, any>;\n};\n\ntype ResetPropsAndSaveCurrentDataPayload = {\n  uid: UID.Schema;\n  options?: Record<string, any>;\n};\n\ntype SetDataToEditPayload = {\n  data: Record<string, any>;\n};\n\ntype SetAttributeDataSchemaPayload =\n  | {\n      isEditing: true;\n      modifiedDataToSetForEditing: Record<string, any>;\n      uid: UID.Schema;\n    }\n  | {\n      isEditing: false;\n      modifiedDataToSetForEditing: Record<string, any>;\n      attributeType: string;\n      nameToSetForRelation: string;\n      targetUid: string;\n      step: string | null;\n      options?: Record<string, any>;\n      uid: UID.Schema;\n    };\n\ntype SetCustomFieldDataSchemaPayload =\n  | {\n      isEditing: true;\n      modifiedDataToSetForEditing: Record<string, any>;\n      uid: UID.Schema;\n    }\n  | {\n      isEditing: false;\n      modifiedDataToSetForEditing: Record<string, any>;\n      customField: Record<string, any>;\n      options?: Record<string, any>;\n      uid: UID.Schema;\n    };\n\ntype SetDynamicZoneDataSchemaPayload = {\n  attributeToEdit: Record<string, any>;\n};\n\ntype SetErrorsPayload = {\n  errors: Record<string, any>;\n};\n\nconst slice = createSlice({\n  name: 'formModal',\n  initialState,\n  reducers: {\n    onChange: (state, action: PayloadAction<OnChangePayload>) => {\n      const { keys, value } = action.payload;\n      const obj = state.modifiedData;\n      const hasDefaultValue = Boolean(obj.default);\n\n      // There is no need to remove the default key if the default value isn't defined\n      if (hasDefaultValue && keys.length === 1 && keys.includes('type')) {\n        const previousType = obj.type;\n\n        if (previousType && ['date', 'datetime', 'time'].includes(previousType)) {\n          // return obj.updateIn(keys, () => value).remove('default');\n          delete state.modifiedData.default;\n        }\n      }\n\n      set(state, ['modifiedData', ...keys], value);\n    },\n    onChangeRelationTarget: (state, action: PayloadAction<OnChangeRelationTargetPayload>) => {\n      const {\n        target: {\n          oneThatIsCreatingARelationWithAnother,\n          selectedContentTypeFriendlyName,\n          targetContentTypeAllowedRelations,\n          value,\n        },\n      } = action.payload;\n      // Special case for the admin user...\n      let didChangeRelationTypeBecauseOfRestrictedRelation = false;\n      let changedRelationType: Schema.Attribute.RelationKind.Any | null = null;\n\n      set(state, ['modifiedData', 'target'], value);\n\n      const modifiedData = state.modifiedData;\n\n      // Don't change the relation type if the allowed relations are not restricted\n      // TODO: replace with an obj { relation: 'x', bidirctional: true|false } when BE ready\n      if (Array.isArray(targetContentTypeAllowedRelations)) {\n        const currentRelationType = getRelationType(\n          modifiedData.relation,\n          modifiedData.targetAttribute\n        );\n\n        if (\n          currentRelationType &&\n          !targetContentTypeAllowedRelations.includes(currentRelationType)\n        ) {\n          const relationToSet = targetContentTypeAllowedRelations[0];\n          didChangeRelationTypeBecauseOfRestrictedRelation = true;\n          changedRelationType = relationToSet;\n\n          if (relationToSet === 'oneWay') {\n            set(state, ['modifiedData', 'relation'], 'oneToOne');\n          } else if (relationToSet === 'manyWay') {\n            set(state, ['modifiedData', 'relation'], 'oneToMany');\n          } else {\n            set(state, ['modifiedData', 'relation'], relationToSet);\n          }\n        }\n      }\n\n      let nameToSet: string;\n\n      if (didChangeRelationTypeBecauseOfRestrictedRelation && changedRelationType) {\n        nameToSet = pluralize(\n          snakeCase(nameToSlug(selectedContentTypeFriendlyName)),\n          shouldPluralizeName(changedRelationType)\n        );\n      } else {\n        nameToSet = pluralize(\n          snakeCase(nameToSlug(selectedContentTypeFriendlyName)),\n\n          shouldPluralizeName(modifiedData.relation)\n        );\n      }\n\n      set(state, ['modifiedData', 'name'], nameToSet);\n\n      const currentTargetAttribute = state.modifiedData.targetAttribute;\n\n      if (currentTargetAttribute === null) {\n        return;\n      }\n\n      // Changing the target and the relation is either oneWay or manyWay\n      // Case when we need to change the relation to oneWay (ex: admin user)\n      if (\n        didChangeRelationTypeBecauseOfRestrictedRelation &&\n        changedRelationType &&\n        ['oneWay', 'manyWay'].includes(changedRelationType)\n      ) {\n        set(state, ['modifiedData', 'targetAttribute'], null);\n\n        return;\n      }\n\n      const targetAttributeToSet = pluralize(\n        snakeCase(nameToSlug(oneThatIsCreatingARelationWithAnother)),\n        shouldPluralizeTargetAttribute(modifiedData.relation)\n      );\n\n      set(state, ['modifiedData', 'targetAttribute'], targetAttributeToSet);\n    },\n    onChangeRelationType: (state, action: PayloadAction<OnChangeRelationTypePayload>) => {\n      const {\n        target: { oneThatIsCreatingARelationWithAnother, value },\n      } = action.payload;\n\n      const currentName = state.modifiedData.name;\n\n      // Switching from oneWay\n      if (!['oneWay', 'manyWay'].includes(value)) {\n        set(state, ['modifiedData', 'relation'], value);\n        const currentTargetAttribute = state.modifiedData.targetAttribute;\n\n        set(\n          state,\n          ['modifiedData', 'name'],\n          pluralize(snakeCase(nameToSlug(currentName)), shouldPluralizeName(value))\n        );\n\n        set(\n          state,\n          ['modifiedData', 'targetAttribute'],\n          pluralize(\n            currentTargetAttribute || snakeCase(nameToSlug(oneThatIsCreatingARelationWithAnother)),\n            shouldPluralizeTargetAttribute(value)\n          )\n        );\n\n        return;\n      }\n\n      if (value === 'oneWay') {\n        set(state, ['modifiedData', 'relation'], 'oneToOne');\n        set(state, ['modifiedData', 'targetAttribute'], null);\n        set(state, ['modifiedData', 'name'], pluralize(snakeCase(currentName), 1));\n\n        return;\n      }\n\n      // manyWay\n      set(state, ['modifiedData', 'relation'], 'oneToMany');\n      set(state, ['modifiedData', 'targetAttribute'], null);\n      set(state, ['modifiedData', 'name'], pluralize(snakeCase(currentName), 2));\n    },\n    resetProps: () => {\n      return initialState;\n    },\n    resetPropsAndSetFormForAddingAnExistingCompo: (\n      state,\n      action: PayloadAction<ResetPropsAndSetFormForAddingAnExistingCompoPayload>\n    ) => {\n      const { options = {} } = action.payload;\n\n      return {\n        ...initialState,\n        modifiedData: {\n          type: 'component',\n          repeatable: true,\n          ...options,\n        },\n      };\n    },\n    resetPropsAndSaveCurrentData: (\n      state,\n      action: PayloadAction<ResetPropsAndSaveCurrentDataPayload>\n    ) => {\n      const { options = {} } = action.payload;\n      // This is run when the user has created a new component\n      const componentToCreate = state.modifiedData.componentToCreate;\n      const modifiedData = {\n        displayName: componentToCreate.displayName,\n        type: 'component',\n        repeatable: false,\n        ...options,\n        component: createComponentUid(componentToCreate.displayName, componentToCreate.category),\n      };\n\n      return {\n        ...initialState,\n        componentToCreate,\n        modifiedData,\n        isCreatingComponentWhileAddingAField: state.modifiedData.createComponent,\n      };\n    },\n    resetPropsAndSetTheFormForAddingACompoToADz: (state) => {\n      const createdDZ = state.modifiedData;\n      const dataToSet = {\n        ...createdDZ,\n        createComponent: true,\n        componentToCreate: { type: 'component' },\n      };\n\n      return { ...initialState, modifiedData: dataToSet };\n    },\n    setDataToEdit: (state, action: PayloadAction<SetDataToEditPayload>) => {\n      const { data } = action.payload;\n      state.modifiedData = data;\n      state.initialData = data;\n    },\n    setAttributeDataSchema: (state, action: PayloadAction<SetAttributeDataSchemaPayload>) => {\n      const { isEditing } = action.payload;\n\n      if (isEditing === true) {\n        const { modifiedDataToSetForEditing } = action.payload;\n        state.modifiedData = modifiedDataToSetForEditing;\n        state.initialData = modifiedDataToSetForEditing;\n\n        return;\n      }\n\n      const { attributeType, nameToSetForRelation, targetUid, step, options = {} } = action.payload;\n\n      let dataToSet;\n\n      if (attributeType === 'component') {\n        if (step === '1') {\n          dataToSet = {\n            type: 'component',\n            createComponent: true,\n            componentToCreate: { type: 'component' },\n          };\n        } else {\n          dataToSet = {\n            ...options,\n            type: 'component',\n            repeatable: true,\n          };\n        }\n      } else if (attributeType === 'dynamiczone') {\n        dataToSet = {\n          ...options,\n          type: 'dynamiczone',\n          components: [],\n        };\n      } else if (attributeType === 'text') {\n        dataToSet = { ...options, type: 'string' };\n      } else if (attributeType === 'number' || attributeType === 'date') {\n        dataToSet = options;\n      } else if (attributeType === 'media') {\n        dataToSet = {\n          allowedTypes: ['images', 'files', 'videos', 'audios'],\n          type: 'media',\n          multiple: true,\n          ...options,\n        };\n      } else if (attributeType === 'enumeration') {\n        dataToSet = { ...options, type: 'enumeration', enum: [] };\n      } else if (attributeType === 'relation') {\n        dataToSet = {\n          name: snakeCase(nameToSetForRelation),\n          relation: 'oneToOne',\n          targetAttribute: null,\n          target: targetUid,\n          type: 'relation',\n        };\n      } else {\n        dataToSet = { ...options, type: attributeType, default: null };\n      }\n\n      state.modifiedData = dataToSet;\n    },\n    setCustomFieldDataSchema: (state, action: PayloadAction<SetCustomFieldDataSchemaPayload>) => {\n      const { payload } = action;\n\n      if (payload.isEditing === true) {\n        const { modifiedDataToSetForEditing } = action.payload;\n        state.modifiedData = modifiedDataToSetForEditing;\n        state.initialData = modifiedDataToSetForEditing;\n\n        return;\n      }\n\n      const { customField, options = {} } = payload;\n\n      state.modifiedData = { ...options, type: customField.type };\n\n      const allOptions = [\n        ...(customField?.options?.base || []),\n        ...(customField?.options?.advanced || []),\n      ];\n\n      const optionDefaults = allOptions.reduce(customFieldDefaultOptionsReducer, []);\n\n      if (optionDefaults.length) {\n        optionDefaults.forEach(({ name, defaultValue }: { name: string; defaultValue: string }) =>\n          set(state.modifiedData, name, defaultValue)\n        );\n      }\n    },\n    setDynamicZoneDataSchema: (state, action: PayloadAction<SetDynamicZoneDataSchemaPayload>) => {\n      const { attributeToEdit } = action.payload;\n      state.modifiedData = attributeToEdit;\n      state.initialData = attributeToEdit;\n    },\n    setErrors: (state, action: PayloadAction<SetErrorsPayload>) => {\n      state.formErrors = action.payload.errors;\n    },\n  },\n});\n\nexport { initialState };\nexport const { actions, reducer } = slice;\n"],"names":["initialState","formErrors","modifiedData","initialData","componentToCreate","isCreatingComponentWhileAddingAField","slice","createSlice","name","reducers","onChange","state","action","keys","value","payload","obj","hasDefaultValue","Boolean","default","length","includes","previousType","type","set","onChangeRelationTarget","target","oneThatIsCreatingARelationWithAnother","selectedContentTypeFriendlyName","targetContentTypeAllowedRelations","didChangeRelationTypeBecauseOfRestrictedRelation","changedRelationType","Array","isArray","currentRelationType","getRelationType","relation","targetAttribute","relationToSet","nameToSet","pluralize","snakeCase","nameToSlug","shouldPluralizeName","currentTargetAttribute","targetAttributeToSet","shouldPluralizeTargetAttribute","onChangeRelationType","currentName","resetProps","resetPropsAndSetFormForAddingAnExistingCompo","options","repeatable","resetPropsAndSaveCurrentData","displayName","component","createComponentUid","category","createComponent","resetPropsAndSetTheFormForAddingACompoToADz","createdDZ","dataToSet","setDataToEdit","data","setAttributeDataSchema","isEditing","modifiedDataToSetForEditing","attributeType","nameToSetForRelation","targetUid","step","components","allowedTypes","multiple","enum","setCustomFieldDataSchema","customField","allOptions","base","advanced","optionDefaults","reduce","customFieldDefaultOptionsReducer","forEach","defaultValue","setDynamicZoneDataSchema","attributeToEdit","setErrors","errors","actions","reducer"],"mappings":"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"}