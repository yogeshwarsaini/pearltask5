{"version":3,"file":"createComponentSchema.mjs","sources":["../../../../../admin/src/components/FormModal/component/createComponentSchema.ts"],"sourcesContent":["import { translatedErrors as errorsTrads } from '@strapi/admin/strapi-admin';\nimport { snakeCase } from 'lodash/fp';\nimport * as yup from 'yup';\n\nimport { getTrad } from '../../../utils/getTrad';\nimport { createComponentUid } from '../utils/createUid';\n\nconst CATEGORY_NAME_REGEX = /^[A-Za-z][-_0-9A-Za-z]*$/;\n\nexport const createComponentSchema = (\n  usedComponentNames: Array<string>,\n  reservedNames: Array<string>,\n  category: string,\n  takenCollectionNames: Array<string>,\n  currentCollectionName: string\n) => {\n  const shape = {\n    displayName: yup\n      .string()\n      .test({\n        name: 'nameAlreadyUsed',\n        message: errorsTrads.unique.id,\n        test(value) {\n          if (!value) {\n            return false;\n          }\n\n          const name = createComponentUid(value, category);\n\n          const snakeCaseKey = snakeCase(name);\n          const snakeCaseCollectionName = snakeCase(currentCollectionName);\n\n          return (\n            usedComponentNames.every((reserved) => {\n              return snakeCase(reserved) !== snakeCaseKey;\n            }) &&\n            takenCollectionNames.every(\n              (collectionName) => snakeCase(collectionName) !== snakeCaseCollectionName\n            )\n          );\n        },\n      })\n      .test({\n        name: 'nameNotAllowed',\n        message: getTrad('error.contentTypeName.reserved-name'),\n        test(value) {\n          if (!value) {\n            return false;\n          }\n\n          const snakeCaseKey = snakeCase(value);\n          return reservedNames.every((reserved) => {\n            return snakeCase(reserved) !== snakeCaseKey;\n          });\n        },\n      })\n      .required(errorsTrads.required.id),\n    category: yup\n      .string()\n      .matches(CATEGORY_NAME_REGEX, errorsTrads.regex.id)\n      .required(errorsTrads.required.id),\n\n    icon: yup.string(),\n  };\n\n  return yup.object(shape);\n};\n"],"names":["CATEGORY_NAME_REGEX","createComponentSchema","usedComponentNames","reservedNames","category","takenCollectionNames","currentCollectionName","shape","displayName","yup","string","test","name","message","errorsTrads","unique","id","value","createComponentUid","snakeCaseKey","snakeCase","snakeCaseCollectionName","every","reserved","collectionName","getTrad","required","matches","regex","icon","object"],"mappings":";;;;;;AAOA,MAAMA,mBAAsB,GAAA,0BAAA;MAEfC,qBAAwB,GAAA,CACnCC,kBACAC,EAAAA,aAAAA,EACAC,UACAC,oBACAC,EAAAA,qBAAAA,GAAAA;AAEA,IAAA,MAAMC,KAAQ,GAAA;AACZC,QAAAA,WAAAA,EAAaC,GACVC,CAAAA,MAAM,EACNC,CAAAA,IAAI,CAAC;YACJC,IAAM,EAAA,iBAAA;YACNC,OAASC,EAAAA,gBAAAA,CAAYC,MAAM,CAACC,EAAE;AAC9BL,YAAAA,IAAAA,CAAAA,CAAKM,KAAK,EAAA;AACR,gBAAA,IAAI,CAACA,KAAO,EAAA;oBACV,OAAO,KAAA;AACT;gBAEA,MAAML,IAAAA,GAAOM,mBAAmBD,KAAOb,EAAAA,QAAAA,CAAAA;AAEvC,gBAAA,MAAMe,eAAeC,SAAUR,CAAAA,IAAAA,CAAAA;AAC/B,gBAAA,MAAMS,0BAA0BD,SAAUd,CAAAA,qBAAAA,CAAAA;gBAE1C,OACEJ,kBAAAA,CAAmBoB,KAAK,CAAC,CAACC,QAAAA,GAAAA;AACxB,oBAAA,OAAOH,UAAUG,QAAcJ,CAAAA,KAAAA,YAAAA;AACjC,iBAAA,CAAA,IACAd,qBAAqBiB,KAAK,CACxB,CAACE,cAAAA,GAAmBJ,UAAUI,cAAoBH,CAAAA,KAAAA,uBAAAA,CAAAA;AAGxD;AACF,SAAA,CAAA,CACCV,IAAI,CAAC;YACJC,IAAM,EAAA,gBAAA;AACNC,YAAAA,OAAAA,EAASY,OAAQ,CAAA,qCAAA,CAAA;AACjBd,YAAAA,IAAAA,CAAAA,CAAKM,KAAK,EAAA;AACR,gBAAA,IAAI,CAACA,KAAO,EAAA;oBACV,OAAO,KAAA;AACT;AAEA,gBAAA,MAAME,eAAeC,SAAUH,CAAAA,KAAAA,CAAAA;gBAC/B,OAAOd,aAAAA,CAAcmB,KAAK,CAAC,CAACC,QAAAA,GAAAA;AAC1B,oBAAA,OAAOH,UAAUG,QAAcJ,CAAAA,KAAAA,YAAAA;AACjC,iBAAA,CAAA;AACF;AACF,SAAA,CAAA,CACCO,QAAQ,CAACZ,gBAAYY,CAAAA,QAAQ,CAACV,EAAE,CAAA;AACnCZ,QAAAA,QAAAA,EAAUK,IACPC,MAAM,EAAA,CACNiB,OAAO,CAAC3B,qBAAqBc,gBAAYc,CAAAA,KAAK,CAACZ,EAAE,EACjDU,QAAQ,CAACZ,gBAAYY,CAAAA,QAAQ,CAACV,EAAE,CAAA;AAEnCa,QAAAA,IAAAA,EAAMpB,IAAIC,MAAM;AAClB,KAAA;IAEA,OAAOD,GAAAA,CAAIqB,MAAM,CAACvB,KAAAA,CAAAA;AACpB;;;;"}