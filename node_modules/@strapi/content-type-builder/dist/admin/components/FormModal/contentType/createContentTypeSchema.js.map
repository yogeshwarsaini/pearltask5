{"version":3,"file":"createContentTypeSchema.js","sources":["../../../../../admin/src/components/FormModal/contentType/createContentTypeSchema.ts"],"sourcesContent":["import { translatedErrors as errorsTrads } from '@strapi/admin/strapi-admin';\nimport { snakeCase } from 'lodash/fp';\nimport * as yup from 'yup';\n\nimport { getTrad } from '../../../utils/getTrad';\nimport { createUid } from '../utils/createUid';\n\ntype CreateContentTypeSchemaParams = {\n  usedContentTypeNames: Array<string>;\n  reservedModels: Array<string>;\n  singularNames: Array<string>;\n  pluralNames: Array<string>;\n  collectionNames: Array<string>;\n};\n\nexport const createContentTypeSchema = ({\n  usedContentTypeNames = [],\n  reservedModels = [],\n  singularNames = [],\n  pluralNames = [],\n  collectionNames = [],\n}: CreateContentTypeSchemaParams) => {\n  const shape = {\n    displayName: yup\n      .string()\n      .test({\n        name: 'nameAlreadyUsed',\n        message: errorsTrads.unique.id,\n        test(value) {\n          if (!value) {\n            return false;\n          }\n\n          const name = createUid(value);\n\n          const snakeCaseKey = snakeCase(name);\n\n          return !usedContentTypeNames.some((value) => {\n            return snakeCase(value) === snakeCaseKey;\n          });\n        },\n      })\n      .test({\n        name: 'nameNotAllowed',\n        message: getTrad('error.contentTypeName.reserved-name'),\n        test(value) {\n          if (!value) {\n            return false;\n          }\n          const snakeCaseKey = snakeCase(value);\n\n          return !reservedModels.some((key) => {\n            return snakeCase(key) === snakeCaseKey;\n          });\n        },\n      })\n      .required(errorsTrads.required.id),\n    pluralName: yup\n      .string()\n      .test({\n        name: 'pluralNameAlreadyUsed',\n        message: errorsTrads.unique.id,\n        test(value) {\n          if (!value) {\n            return false;\n          }\n\n          const snakeCaseKey = snakeCase(value);\n\n          return !pluralNames.some((key) => {\n            return snakeCase(key) === snakeCaseKey;\n          });\n        },\n      })\n      .test({\n        name: 'pluralNameAlreadyUsedAsSingular',\n        message: getTrad('error.contentType.pluralName-equals-singularName'),\n        test(value) {\n          if (!value) {\n            return false;\n          }\n\n          const snakeCaseKey = snakeCase(value);\n\n          return !singularNames.some((key) => {\n            return snakeCase(key) === snakeCaseKey;\n          });\n        },\n      })\n      .test({\n        name: 'pluralAndSingularAreUnique',\n        message: getTrad('error.contentType.pluralName-used'),\n        test(value, context) {\n          if (!value) {\n            return false;\n          }\n\n          return snakeCase(context.parent.singularName) !== snakeCase(value);\n        },\n      })\n      .test({\n        name: 'pluralNameNotAllowed',\n        message: getTrad('error.contentTypeName.reserved-name'),\n        test(value) {\n          if (!value) {\n            return false;\n          }\n\n          const snakeCaseKey = snakeCase(value);\n\n          return !reservedModels.some((key) => {\n            return snakeCase(key) === snakeCaseKey;\n          });\n        },\n      })\n      .test({\n        name: 'pluralNameNotAlreadyUsedInCollectionName',\n        message: getTrad('error.contentType.pluralName-equals-collectionName'),\n        test(value) {\n          if (!value) {\n            return false;\n          }\n\n          const snakeCaseKey = snakeCase(value);\n\n          return !collectionNames.some((key) => {\n            return snakeCase(key) === snakeCaseKey;\n          });\n        },\n      })\n      .required(errorsTrads.required.id),\n    singularName: yup\n      .string()\n      .test({\n        name: 'singularNameAlreadyUsed',\n        message: errorsTrads.unique.id,\n        test(value) {\n          if (!value) {\n            return false;\n          }\n\n          const snakeCaseKey = snakeCase(value);\n\n          return !singularNames.some((key) => {\n            return snakeCase(key) === snakeCaseKey;\n          });\n        },\n      })\n      .test({\n        name: 'singularNameAlreadyUsedAsPlural',\n        message: getTrad('error.contentType.singularName-equals-pluralName'),\n        test(value) {\n          if (!value) {\n            return false;\n          }\n\n          const snakeCaseKey = snakeCase(value);\n\n          return !pluralNames.some((key) => {\n            return snakeCase(key) === snakeCaseKey;\n          });\n        },\n      })\n      .test({\n        name: 'pluralAndSingularAreUnique',\n        message: getTrad('error.contentType.singularName-used'),\n        test(value, context) {\n          if (!value) {\n            return false;\n          }\n\n          return snakeCase(context.parent.pluralName) !== snakeCase(value);\n        },\n      })\n      .test({\n        name: 'singularNameNotAllowed',\n        message: getTrad('error.contentTypeName.reserved-name'),\n        test(value) {\n          if (!value) {\n            return false;\n          }\n\n          const snakeCaseKey = snakeCase(value);\n\n          return !reservedModels.some((key) => {\n            return snakeCase(key) === snakeCaseKey;\n          });\n        },\n      })\n      .required(errorsTrads.required.id),\n    draftAndPublish: yup.boolean(),\n    kind: yup.string().oneOf(['singleType', 'collectionType']),\n  };\n\n  return yup.object(shape);\n};\n"],"names":["createContentTypeSchema","usedContentTypeNames","reservedModels","singularNames","pluralNames","collectionNames","shape","displayName","yup","string","test","name","message","errorsTrads","unique","id","value","createUid","snakeCaseKey","snakeCase","some","getTrad","key","required","pluralName","context","parent","singularName","draftAndPublish","boolean","kind","oneOf","object"],"mappings":"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"}