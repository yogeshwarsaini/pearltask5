{"version":3,"file":"baseForm.js","sources":["../../../../../admin/src/components/FormModal/attributes/baseForm.ts"],"sourcesContent":["import { getTrad } from '../../../utils/getTrad';\nimport { componentField } from '../component/componentField';\nimport { componentForm } from '../component/componentForm';\n\nimport { nameField } from './nameField';\n\nexport const baseForm = {\n  component(data: { createComponent: boolean }, step: string) {\n    if (step === '1') {\n      const itemsToConcat =\n        data.createComponent === true ? componentForm.base('componentToCreate.') : [];\n\n      return {\n        sections: [{ sectionTitle: null, items: [componentField] }, ...itemsToConcat],\n      };\n    }\n\n    return {\n      sections: [\n        {\n          sectionTitle: null,\n          items: [\n            nameField,\n            {\n              name: 'component',\n              type: 'select-component',\n              intlLabel: {\n                id: getTrad('modalForm.attributes.select-component'),\n                defaultMessage: 'Select a component',\n              },\n              isMultiple: false,\n            },\n          ],\n        },\n        {\n          sectionTitle: null,\n          items: [\n            {\n              intlLabel: {\n                id: 'global.type',\n                defaultMessage: 'Type',\n              },\n              name: 'repeatable',\n              type: 'boolean-radio-group',\n              size: 12,\n              radios: [\n                {\n                  title: {\n                    id: getTrad('form.attribute.component.option.repeatable'),\n                    defaultMessage: 'Repeatable component',\n                  },\n                  description: {\n                    id: getTrad('form.attribute.component.option.repeatable.description'),\n                    defaultMessage:\n                      'Best for multiple instances (array) of ingredients, meta tags, etc..',\n                  },\n                  value: true,\n                },\n                {\n                  title: {\n                    id: getTrad('form.attribute.component.option.single'),\n                    defaultMessage: 'Single component',\n                  },\n                  description: {\n                    id: getTrad('form.attribute.component.option.single.description'),\n                    defaultMessage:\n                      'Best for grouping fields like full address, main information, etc...',\n                  },\n                  value: false,\n                },\n              ],\n            },\n          ],\n        },\n      ],\n    };\n  },\n  date() {\n    return {\n      sections: [\n        {\n          sectionTitle: null,\n          items: [\n            nameField,\n            {\n              intlLabel: {\n                id: 'global.type',\n                defaultMessage: 'Type',\n              },\n              name: 'type',\n              type: 'select-date',\n              options: [\n                {\n                  key: '__null_reset_value__',\n                  value: '',\n                  metadatas: {\n                    intlLabel: {\n                      id: 'components.InputSelect.option.placeholder',\n                      defaultMessage: 'Choose here',\n                    },\n                    hidden: true,\n                  },\n                },\n                {\n                  key: 'date',\n                  value: 'date',\n                  metadatas: {\n                    intlLabel: {\n                      id: getTrad('form.attribute.item.date.type.date'),\n                      defaultMessage: 'date (ex: 01/01/{currentYear})',\n                      values: { currentYear: new Date().getFullYear() },\n                    },\n                  },\n                },\n                {\n                  key: 'datetime',\n                  value: 'datetime',\n                  metadatas: {\n                    intlLabel: {\n                      id: getTrad('form.attribute.item.date.type.datetime'),\n                      defaultMessage: 'datetime (ex: 01/01/{currentYear} 00:00 AM)',\n                      values: { currentYear: new Date().getFullYear() },\n                    },\n                  },\n                },\n                {\n                  key: 'time',\n                  value: 'time',\n                  metadatas: {\n                    intlLabel: {\n                      id: getTrad('form.attribute.item.date.type.time'),\n                      defaultMessage: 'time (ex: 00:00 AM)',\n                    },\n                  },\n                },\n              ],\n            },\n          ],\n        },\n      ],\n    };\n  },\n  enumeration() {\n    return {\n      sections: [\n        { sectionTitle: null, items: [nameField] },\n        {\n          sectionTitle: null,\n          items: [\n            {\n              name: 'enum',\n              type: 'textarea-enum',\n              size: 6,\n              intlLabel: {\n                id: getTrad('form.attribute.item.enumeration.rules'),\n                defaultMessage: 'Values (one line per value)',\n              },\n              placeholder: {\n                id: getTrad('form.attribute.item.enumeration.placeholder'),\n                defaultMessage: 'Ex:\\nmorning\\nnoon\\nevening',\n              },\n              validations: {\n                required: true,\n              },\n            },\n          ],\n        },\n      ],\n    };\n  },\n  media() {\n    return {\n      sections: [\n        { sectionTitle: null, items: [nameField] },\n        {\n          sectionTitle: null,\n          items: [\n            {\n              intlLabel: {\n                id: 'global.type',\n                defaultMessage: 'Type',\n              },\n              name: 'multiple',\n              size: 12,\n              type: 'boolean-radio-group',\n              radios: [\n                {\n                  title: {\n                    id: getTrad('form.attribute.media.option.multiple'),\n                    defaultMessage: 'Multiple media',\n                  },\n                  description: {\n                    id: getTrad('form.attribute.media.option.multiple.description'),\n                    defaultMessage: 'Best for sliders, carousels or multiple files download',\n                  },\n                  value: true,\n                },\n                {\n                  title: {\n                    id: getTrad('form.attribute.media.option.single'),\n                    defaultMessage: 'Single media',\n                  },\n                  description: {\n                    id: getTrad('form.attribute.media.option.single.description'),\n                    defaultMessage: 'Best for avatar, profile picture or cover',\n                  },\n                  value: false,\n                },\n              ],\n            },\n          ],\n        },\n      ],\n    };\n  },\n  number() {\n    return {\n      sections: [\n        {\n          sectionTitle: null,\n          items: [\n            nameField,\n            {\n              intlLabel: {\n                id: getTrad('form.attribute.item.number.type'),\n                defaultMessage: 'Number format',\n              },\n              name: 'type',\n              type: 'select-number',\n              options: [\n                {\n                  key: '__null_reset_value__',\n                  value: '',\n                  metadatas: {\n                    intlLabel: {\n                      id: 'components.InputSelect.option.placeholder',\n                      defaultMessage: 'Choose here',\n                    },\n                    hidden: true,\n                  },\n                },\n                {\n                  key: 'integer',\n                  value: 'integer',\n                  metadatas: {\n                    intlLabel: {\n                      id: getTrad('form.attribute.item.number.type.integer'),\n                      defaultMessage: 'integer (ex: 10)',\n                    },\n                  },\n                },\n                {\n                  key: 'biginteger',\n                  value: 'biginteger',\n                  metadatas: {\n                    intlLabel: {\n                      id: getTrad('form.attribute.item.number.type.biginteger'),\n                      defaultMessage: 'biginteger (ex: 123456789)',\n                    },\n                  },\n                },\n                {\n                  key: 'decimal',\n                  value: 'decimal',\n                  metadatas: {\n                    intlLabel: {\n                      id: getTrad('form.attribute.item.number.type.decimal'),\n                      defaultMessage: 'decimal (ex: 2.22)',\n                    },\n                  },\n                },\n                {\n                  key: 'float',\n                  value: 'float',\n                  metadatas: {\n                    intlLabel: {\n                      id: getTrad('form.attribute.item.number.type.float'),\n                      defaultMessage: 'decimal (ex: 3.3333333)',\n                    },\n                  },\n                },\n              ],\n            },\n          ],\n        },\n      ],\n    };\n  },\n  relation() {\n    return {\n      sections: [\n        {\n          sectionTitle: null,\n          items: [\n            {\n              intlLabel: { id: 'FIXME', defaultMessage: 'FIXME' },\n              name: 'relation',\n              size: 12,\n              type: 'relation',\n            },\n          ],\n        },\n      ],\n    };\n  },\n  string() {\n    return {\n      sections: [\n        { sectionTitle: null, items: [nameField] },\n        {\n          sectionTitle: null,\n          items: [\n            {\n              intlLabel: {\n                id: 'global.type',\n                defaultMessage: 'Type',\n              },\n              name: 'type',\n              size: 12,\n              type: 'radio-group',\n              radios: [\n                {\n                  title: {\n                    id: getTrad('form.attribute.text.option.short-text'),\n                    defaultMessage: 'Sort text',\n                  },\n                  description: {\n                    id: getTrad('form.attribute.text.option.short-text.description'),\n                    defaultMessage:\n                      'Best for titles, names, links (URL). It also enables exact search on the field.',\n                  },\n                  value: 'string',\n                },\n                {\n                  title: {\n                    id: getTrad('form.attribute.text.option.long-text'),\n                    defaultMessage: 'Long text',\n                  },\n                  description: {\n                    id: getTrad('form.attribute.text.option.long-text.description'),\n                    defaultMessage: 'Best for descriptions, biography. Exact search is disabled.',\n                  },\n                  value: 'text',\n                },\n              ],\n            },\n          ],\n        },\n      ],\n    };\n  },\n  text() {\n    return {\n      sections: [\n        { sectionTitle: null, items: [nameField] },\n        {\n          sectionTitle: null,\n          items: [\n            {\n              intlLabel: {\n                id: 'global.type',\n                defaultMessage: 'Type',\n              },\n              name: 'type',\n              size: 12,\n              type: 'radio-group',\n              radios: [\n                {\n                  title: {\n                    id: getTrad('form.attribute.text.option.short-text'),\n                    defaultMessage: 'Sort text',\n                  },\n                  description: {\n                    id: getTrad('form.attribute.text.option.short-text.description'),\n                    defaultMessage:\n                      'Best for titles, names, links (URL). It also enables exact search on the field.',\n                  },\n                  value: 'string',\n                },\n                {\n                  title: {\n                    id: getTrad('form.attribute.text.option.long-text'),\n                    defaultMessage: 'Long text',\n                  },\n                  description: {\n                    id: getTrad('form.attribute.text.option.long-text.description'),\n                    defaultMessage: 'Best for descriptions, biography. Exact search is disabled.',\n                  },\n                  value: 'text',\n                },\n              ],\n            },\n          ],\n        },\n      ],\n    };\n  },\n  uid(_data: unknown, step: string, attributes: Array<{ type: string; name: string }>) {\n    const options = attributes\n      .filter(({ type }) => ['string', 'text'].includes(type))\n      .map(({ name }) => ({\n        key: name,\n        value: name,\n        metadatas: {\n          intlLabel: { id: `${name}.no-override`, defaultMessage: name },\n        },\n      }));\n\n    return {\n      sections: [\n        {\n          sectionTitle: null,\n          items: [\n            {\n              ...nameField,\n              placeholder: {\n                id: getTrad('modalForm.attribute.form.base.name.placeholder'),\n                defaultMessage: 'e.g. slug, seoUrl, canonicalUrl',\n              },\n            },\n            {\n              intlLabel: {\n                id: getTrad('modalForm.attribute.target-field'),\n                defaultMessage: 'Attached field',\n              },\n              name: 'targetField',\n              type: 'select',\n              options: [\n                {\n                  key: '__null_reset_value__',\n                  value: '',\n                  metadatas: { intlLabel: { id: 'global.none', defaultMessage: 'None' } },\n                },\n                ...options,\n              ],\n            },\n          ],\n        },\n      ],\n    };\n  },\n};\n"],"names":["baseForm","component","data","step","itemsToConcat","createComponent","componentForm","base","sections","sectionTitle","items","componentField","nameField","name","type","intlLabel","id","getTrad","defaultMessage","isMultiple","size","radios","title","description","value","date","options","key","metadatas","hidden","values","currentYear","Date","getFullYear","enumeration","placeholder","validations","required","media","number","relation","string","text","uid","_data","attributes","filter","includes","map"],"mappings":"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"}