{"version":3,"file":"ConditionForm.mjs","sources":["../../../../../admin/src/components/FormModal/attributes/ConditionForm.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useState } from 'react';\n\nimport { createRulesEngine, ConfirmDialog, type Condition } from '@strapi/admin/strapi-admin';\nimport {\n  Box,\n  Flex,\n  IconButton,\n  Typography,\n  Field,\n  SingleSelect,\n  SingleSelectOption,\n  Dialog,\n} from '@strapi/design-system';\nimport { Trash } from '@strapi/icons';\nimport { useIntl } from 'react-intl';\nimport { styled } from 'styled-components';\nimport * as yup from 'yup';\n\nimport { AttributeIcon } from '../../../components/AttributeIcon';\nimport { getTrad } from '../../../utils/getTrad';\nimport { ApplyConditionButton } from '../../ApplyConditionButton';\n\nconst SmallAttributeIcon = styled(AttributeIcon)`\n  width: 16px !important;\n  height: 16px !important;\n  svg {\n    width: 16px !important;\n    height: 16px !important;\n  }\n`;\n\ninterface ConditionFormProps {\n  name: string;\n  value: any;\n  onChange: (e: { target: { name: string; value: any } }) => void;\n  onDelete: () => void;\n  attributeName?: string;\n  conditionFields?: Array<{\n    name: string;\n    type: string;\n    enum?: string[];\n  }>;\n  allAttributes?: Array<{\n    name: string;\n    type: string;\n  }>;\n}\n\ninterface JsonLogicValue {\n  visible?: {\n    [key: string]: [{ var: string }, any];\n  };\n}\n\ninterface LocalValue {\n  dependsOn: string;\n  operator: 'is' | 'isNot';\n  value: string | boolean;\n  action: 'show' | 'hide';\n}\n\nconst convertFromJsonLogic = (jsonLogic: JsonLogicValue): LocalValue => {\n  if (!jsonLogic?.visible) {\n    return {\n      dependsOn: '',\n      operator: 'is',\n      value: '',\n      action: 'show',\n    };\n  }\n\n  const [[operator, conditions]] = Object.entries(jsonLogic.visible);\n  const [fieldVar, value] = conditions as [{ var: string }, any];\n\n  return {\n    dependsOn: fieldVar.var,\n    operator: operator === '==' ? 'is' : 'isNot',\n    value: value,\n    action: operator === '==' ? 'show' : 'hide',\n  };\n};\n\nconst convertToJsonLogic = (value: LocalValue): JsonLogicValue | null => {\n  if (!value.dependsOn) {\n    return null;\n  }\n\n  const rulesEngine = createRulesEngine();\n  const condition: Condition = {\n    dependsOn: value.dependsOn,\n    operator: value.operator,\n    value: value.value,\n  };\n\n  try {\n    rulesEngine.validate(condition);\n    const action = value.action === 'show' ? '==' : '!=';\n    return {\n      visible: {\n        [action]: [{ var: value.dependsOn }, value.value],\n      },\n    };\n  } catch (error) {\n    return null;\n  }\n};\n\nexport const ConditionForm = ({\n  name,\n  value,\n  onChange,\n  onDelete,\n  attributeName,\n  conditionFields = [],\n}: ConditionFormProps) => {\n  const { formatMessage } = useIntl();\n  const [localValue, setLocalValue] = React.useState<LocalValue>(convertFromJsonLogic(value));\n  const [showConfirmDialog, setShowConfirmDialog] = useState(false);\n  const hasCondition = Boolean(value?.visible);\n\n  // Add safety check for conditionFields\n  if (!Array.isArray(conditionFields)) {\n    conditionFields = [];\n  }\n\n  const selectedField = conditionFields.find((field) => field.name === localValue.dependsOn);\n  const isEnumField = selectedField?.type === 'enumeration';\n\n  // Helper to update localValue and propagate JSON Logic\n  const updateCondition = (updatedValue: LocalValue) => {\n    setLocalValue(updatedValue);\n    const rulesEngine = createRulesEngine();\n    const condition: Condition = {\n      dependsOn: updatedValue.dependsOn,\n      operator: updatedValue.operator,\n      value: updatedValue.value,\n    };\n    try {\n      rulesEngine.validate(condition);\n      const action = updatedValue.action === 'show' ? '==' : '!=';\n      const jsonLogic = updatedValue.dependsOn\n        ? {\n            visible: {\n              [action]: [{ var: updatedValue.dependsOn }, updatedValue.value],\n            },\n          }\n        : null;\n      if (jsonLogic) {\n        onChange({\n          target: {\n            name,\n            value: jsonLogic,\n          },\n        });\n      }\n    } catch {\n      // Do nothing if invalid\n    }\n  };\n\n  const handleApplyCondition = () => {\n    const initialValue: LocalValue = {\n      dependsOn: '',\n      operator: 'is',\n      value: '',\n      action: 'show',\n    };\n    setLocalValue(initialValue);\n    onChange({\n      target: {\n        name,\n        value: convertToJsonLogic(initialValue),\n      },\n    });\n  };\n\n  const handleDelete = () => {\n    setLocalValue({\n      dependsOn: '',\n      operator: 'is',\n      value: '',\n      action: 'show',\n    });\n    onChange({\n      target: {\n        name,\n        value: null,\n      },\n    });\n    onDelete();\n    setShowConfirmDialog(false);\n  };\n\n  const handleFieldChange = (fieldName: string | number) => {\n    const newValue = fieldName?.toString() || '';\n    const field = conditionFields.find((f) => f.name === newValue);\n    const isNewFieldEnum = field?.type === 'enumeration';\n    const updatedValue: LocalValue = {\n      ...localValue,\n      dependsOn: newValue,\n      value: newValue ? (isNewFieldEnum ? '' : false) : localValue.value,\n    };\n    updateCondition(updatedValue);\n  };\n\n  const handleOperatorChange = (operator: string | number) => {\n    const newValue = operator?.toString() || 'is';\n    const updatedValue: LocalValue = {\n      ...localValue,\n      operator: newValue as 'is' | 'isNot',\n    };\n    updateCondition(updatedValue);\n  };\n\n  const handleValueChange = (newValue: string | number) => {\n    const value = isEnumField ? newValue?.toString() : newValue?.toString() === 'true';\n    const updatedValue: LocalValue = { ...localValue, value };\n    updateCondition(updatedValue);\n  };\n\n  const handleActionChange = (action: string | number) => {\n    const newValue = action?.toString() || 'show';\n    const updatedValue: LocalValue = {\n      ...localValue,\n      action: newValue as 'show' | 'hide',\n    };\n    updateCondition(updatedValue);\n  };\n\n  if (!hasCondition) {\n    return (\n      <Box padding={4} margin={4} hasRadius background=\"neutral0\" borderColor=\"neutral200\">\n        <ApplyConditionButton onClick={handleApplyCondition} />\n      </Box>\n    );\n  }\n\n  return (\n    <Box marginTop={2}>\n      <Box\n        background=\"neutral0\"\n        hasRadius\n        borderColor=\"neutral200\"\n        borderWidth={0.5}\n        borderStyle=\"solid\"\n      >\n        <Flex justifyContent=\"space-between\" alignItems=\"center\" padding={4}>\n          <Typography variant=\"sigma\" textColor=\"neutral800\">\n            {formatMessage(\n              {\n                id: getTrad('form.attribute.condition.title'),\n                defaultMessage: 'Condition for {name}',\n              },\n              {\n                name: <strong>{attributeName}</strong>,\n              }\n            )}\n          </Typography>\n          <Dialog.Root open={showConfirmDialog} onOpenChange={setShowConfirmDialog}>\n            <Dialog.Trigger>\n              <IconButton label=\"Delete\">\n                <Trash />\n              </IconButton>\n            </Dialog.Trigger>\n            <ConfirmDialog onConfirm={handleDelete}>\n              {formatMessage({\n                id: getTrad('popUpWarning.bodyMessage.delete-condition'),\n                defaultMessage: 'Are you sure you want to delete this condition?',\n              })}\n            </ConfirmDialog>\n          </Dialog.Root>\n        </Flex>\n\n        <Box background=\"neutral100\" padding={4}>\n          <Box paddingBottom={2}>\n            <Typography\n              variant=\"sigma\"\n              textColor=\"neutral600\"\n              style={{ textTransform: 'uppercase', letterSpacing: 1 }}\n            >\n              {formatMessage({ id: getTrad('form.attribute.condition.if'), defaultMessage: 'IF' })}\n            </Typography>\n          </Box>\n          <Flex gap={4}>\n            <Box minWidth={0} flex={1}>\n              <Field.Root name={`${name}.field`}>\n                <SingleSelect\n                  value={localValue.dependsOn}\n                  onChange={handleFieldChange}\n                  placeholder={formatMessage({\n                    id: getTrad('form.attribute.condition.field'),\n                    defaultMessage: 'field',\n                  })}\n                >\n                  {conditionFields.map((field) => (\n                    <SingleSelectOption key={field.name} value={field.name}>\n                      <Flex gap={2} alignItems=\"center\">\n                        <SmallAttributeIcon type={field.type} />\n                        <span>{field.name}</span>\n                      </Flex>\n                    </SingleSelectOption>\n                  ))}\n                </SingleSelect>\n              </Field.Root>\n            </Box>\n            <Box minWidth={0} flex={1}>\n              <Field.Root name={`${name}.operator`}>\n                <SingleSelect\n                  value={localValue.operator}\n                  onChange={handleOperatorChange}\n                  disabled={!localValue.dependsOn}\n                  placeholder={formatMessage({\n                    id: getTrad('form.attribute.condition.operator'),\n                    defaultMessage: 'condition',\n                  })}\n                >\n                  <SingleSelectOption value=\"is\">\n                    {formatMessage({\n                      id: getTrad('form.attribute.condition.operator.is'),\n                      defaultMessage: 'is',\n                    })}\n                  </SingleSelectOption>\n                  <SingleSelectOption value=\"isNot\">\n                    {formatMessage({\n                      id: getTrad('form.attribute.condition.operator.isNot'),\n                      defaultMessage: 'is not',\n                    })}\n                  </SingleSelectOption>\n                </SingleSelect>\n              </Field.Root>\n            </Box>\n            <Box minWidth={0} flex={1}>\n              <Field.Root name={`${name}.value`}>\n                <SingleSelect\n                  value={localValue.value?.toString() || ''}\n                  onChange={handleValueChange}\n                  disabled={!localValue.dependsOn}\n                  placeholder={formatMessage({\n                    id: getTrad('form.attribute.condition.value'),\n                    defaultMessage: 'value',\n                  })}\n                >\n                  {isEnumField && selectedField?.enum ? (\n                    selectedField.enum.map((enumValue) => (\n                      <SingleSelectOption key={enumValue} value={enumValue}>\n                        {enumValue}\n                      </SingleSelectOption>\n                    ))\n                  ) : (\n                    <>\n                      <SingleSelectOption value=\"true\">\n                        {formatMessage({\n                          id: getTrad('form.attribute.condition.value.true'),\n                          defaultMessage: 'true',\n                        })}\n                      </SingleSelectOption>\n                      <SingleSelectOption value=\"false\">\n                        {formatMessage({\n                          id: getTrad('form.attribute.condition.value.false'),\n                          defaultMessage: 'false',\n                        })}\n                      </SingleSelectOption>\n                    </>\n                  )}\n                </SingleSelect>\n              </Field.Root>\n            </Box>\n          </Flex>\n        </Box>\n\n        <Box background=\"neutral100\" padding={4}>\n          <Box paddingBottom={4}>\n            <Typography\n              variant=\"sigma\"\n              textColor=\"neutral600\"\n              style={{ textTransform: 'uppercase', letterSpacing: 1 }}\n            >\n              {formatMessage({\n                id: getTrad('form.attribute.condition.then'),\n                defaultMessage: 'THEN',\n              })}\n            </Typography>\n          </Box>\n          <Box paddingBottom={4}>\n            <Field.Root name={`${name}.action`}>\n              <SingleSelect\n                value={localValue.action}\n                onChange={handleActionChange}\n                placeholder={formatMessage({\n                  id: getTrad('form.attribute.condition.action'),\n                  defaultMessage: 'action',\n                })}\n              >\n                <SingleSelectOption value=\"show\">\n                  Show <span style={{ fontWeight: 'bold' }}>{attributeName || name}</span>\n                </SingleSelectOption>\n                <SingleSelectOption value=\"hide\">\n                  Hide <span style={{ fontWeight: 'bold' }}>{attributeName || name}</span>\n                </SingleSelectOption>\n              </SingleSelect>\n            </Field.Root>\n          </Box>\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n"],"names":["SmallAttributeIcon","styled","AttributeIcon","convertFromJsonLogic","jsonLogic","visible","dependsOn","operator","value","action","conditions","Object","entries","fieldVar","var","convertToJsonLogic","rulesEngine","createRulesEngine","condition","validate","error","ConditionForm","name","onChange","onDelete","attributeName","conditionFields","formatMessage","useIntl","localValue","setLocalValue","React","useState","showConfirmDialog","setShowConfirmDialog","hasCondition","Boolean","Array","isArray","selectedField","find","field","isEnumField","type","updateCondition","updatedValue","target","handleApplyCondition","initialValue","handleDelete","handleFieldChange","fieldName","newValue","toString","f","isNewFieldEnum","handleOperatorChange","handleValueChange","handleActionChange","_jsx","Box","padding","margin","hasRadius","background","borderColor","ApplyConditionButton","onClick","marginTop","_jsxs","borderWidth","borderStyle","Flex","justifyContent","alignItems","Typography","variant","textColor","id","getTrad","defaultMessage","strong","Dialog","Root","open","onOpenChange","Trigger","IconButton","label","Trash","ConfirmDialog","onConfirm","paddingBottom","style","textTransform","letterSpacing","gap","minWidth","flex","Field","SingleSelect","placeholder","map","SingleSelectOption","span","disabled","enum","enumValue","_Fragment","fontWeight"],"mappings":"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"}