{"version":3,"file":"common.js","sources":["../../../../../../admin/src/components/FormModal/attributes/validation/common.ts"],"sourcesContent":["import { translatedErrors as errorsTrads } from '@strapi/admin/strapi-admin';\nimport { snakeCase } from 'lodash/fp';\nimport toNumber from 'lodash/toNumber';\nimport * as yup from 'yup';\n\nimport { getTrad } from '../../../../utils/getTrad';\n\nconst NAME_REGEX = /^[A-Za-z][_0-9A-Za-z]*$/;\n\nconst alreadyUsedAttributeNames = (\n  usedNames: Array<string>\n): yup.TestConfig<string | undefined, Record<string, unknown>> => {\n  return {\n    name: 'attributeNameAlreadyUsed',\n    message: errorsTrads.unique.id,\n    test(value: string | undefined) {\n      if (!value) {\n        return false;\n      }\n      const snakeCaseKey = snakeCase(value);\n\n      return !usedNames.some((existingKey) => {\n        return snakeCase(existingKey) === snakeCaseKey;\n      });\n    },\n  };\n};\n\nconst getUsedContentTypeAttributeNames = (\n  ctShema: any,\n  isEdition: boolean,\n  attributeNameToEdit: string\n) => {\n  const attributes = ctShema?.attributes ?? {};\n\n  return Object.keys(attributes).filter((attr) => {\n    if (isEdition) {\n      return attr !== attributeNameToEdit;\n    }\n\n    return true;\n  });\n};\n\nconst isNameAllowed = (\n  reservedNames: Array<string>\n): yup.TestConfig<string | undefined, Record<string, unknown>> => {\n  return {\n    name: 'forbiddenAttributeName',\n    message: getTrad('error.attributeName.reserved-name'),\n    test(value: string | undefined) {\n      if (!value) {\n        return false;\n      }\n      const snakeCaseKey = snakeCase(value);\n\n      return !reservedNames.some((existingKey) => {\n        return snakeCase(existingKey) === snakeCaseKey;\n      });\n    },\n  };\n};\n\nconst validators = {\n  default: () => yup.string().nullable(),\n  max: () => yup.number().integer().nullable(),\n  min: () =>\n    yup\n      .number()\n      .integer()\n      .when('max', (max, schema) => {\n        if (max) {\n          return schema.max(max, getTrad('error.validation.minSupMax'));\n        }\n\n        return schema;\n      })\n      .nullable(),\n  maxLength: () => yup.number().integer().positive(getTrad('error.validation.positive')).nullable(),\n  minLength: () =>\n    yup\n      .number()\n      .integer()\n      .min(1)\n      .when('maxLength', (maxLength, schema) => {\n        if (maxLength) {\n          return schema.max(maxLength, getTrad('error.validation.minSupMax'));\n        }\n\n        return schema;\n      })\n      .nullable(),\n  name(usedNames: Array<string>, reservedNames: Array<string>) {\n    return yup\n      .string()\n      .test(alreadyUsedAttributeNames(usedNames))\n      .test(isNameAllowed(reservedNames))\n      .matches(NAME_REGEX, errorsTrads.regex.id)\n      .required(errorsTrads.required.id);\n  },\n  required: () => yup.boolean(),\n  type: () => yup.string().required(errorsTrads.required.id),\n  unique: () => yup.boolean().nullable(),\n};\n\nconst createTextShape = (usedAttributeNames: Array<string>, reservedNames: Array<string>) => {\n  const shape = {\n    name: validators.name(usedAttributeNames, reservedNames),\n    type: validators.type(),\n    default: validators.default(),\n    unique: validators.unique(),\n    required: validators.required(),\n    maxLength: validators.maxLength(),\n    minLength: validators.minLength(),\n    regex: yup\n      .string()\n      .test({\n        name: 'isValidRegExpPattern',\n        message: getTrad('error.validation.regex'),\n        test(value) {\n          try {\n            return new RegExp(value || '') !== null;\n          } catch (e) {\n            return false;\n          }\n        },\n      })\n      .nullable(),\n  };\n\n  return shape;\n};\n\ntype GenericIsMinSuperiorThanMax<T extends (string | null) | number> = yup.TestConfig<\n  T | undefined,\n  Record<string, unknown>\n>;\n\nconst isMinSuperiorThanMax = <\n  T extends (string | null) | number,\n>(): GenericIsMinSuperiorThanMax<T> => ({\n  name: 'isMinSuperiorThanMax',\n  message: getTrad('error.validation.minSupMax'),\n  test(min: T | undefined) {\n    if (!min) {\n      return true;\n    }\n\n    const { max } = (this as any).parent;\n\n    if (!max) {\n      return true;\n    }\n\n    if (Number.isNaN(toNumber(min))) {\n      return true;\n    }\n\n    return toNumber(max) >= toNumber(min);\n  },\n});\n\nexport {\n  alreadyUsedAttributeNames,\n  createTextShape,\n  getUsedContentTypeAttributeNames,\n  isMinSuperiorThanMax,\n  isNameAllowed,\n  NAME_REGEX,\n  validators,\n};\n"],"names":["NAME_REGEX","alreadyUsedAttributeNames","usedNames","name","message","errorsTrads","unique","id","test","value","snakeCaseKey","snakeCase","some","existingKey","isNameAllowed","reservedNames","getTrad","validators","default","yup","string","nullable","max","number","integer","min","when","schema","maxLength","positive","minLength","matches","regex","required","boolean","type","createTextShape","usedAttributeNames","shape","RegExp","e","isMinSuperiorThanMax","parent","Number","isNaN","toNumber"],"mappings":"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"}