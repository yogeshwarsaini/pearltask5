{"version":3,"file":"types.mjs","sources":["../../../../../admin/src/components/FormModal/attributes/types.ts"],"sourcesContent":["import { translatedErrors as errorsTrads } from '@strapi/admin/strapi-admin';\nimport uniq from 'lodash/uniq';\nimport * as yup from 'yup';\n\nimport { getRelationType } from '../../../utils/getRelationType';\nimport { getTrad } from '../../../utils/getTrad';\nimport { toRegressedEnumValue } from '../../../utils/toRegressedEnumValue';\n\nimport {\n  alreadyUsedAttributeNames,\n  createTextShape,\n  isMinSuperiorThanMax,\n  isNameAllowed,\n  NAME_REGEX,\n  validators,\n} from './validation/common';\n\nimport type { Schema } from '@strapi/types';\n\nexport const attributeTypes = {\n  date(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\n    const shape = {\n      name: validators.name(usedAttributeNames, reservedNames),\n      type: validators.type(),\n    };\n\n    return yup.object(shape);\n  },\n  datetime(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\n    const shape = {\n      name: validators.name(usedAttributeNames, reservedNames),\n      type: validators.type(),\n    };\n\n    return yup.object(shape);\n  },\n  time(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\n    const shape = {\n      name: validators.name(usedAttributeNames, reservedNames),\n      type: validators.type(),\n    };\n\n    return yup.object(shape);\n  },\n  default(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\n    const shape = {\n      name: validators.name(usedAttributeNames, reservedNames),\n      type: validators.type(),\n    };\n\n    return yup.object(shape);\n  },\n  biginteger(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\n    const shape = {\n      name: validators.name(usedAttributeNames, reservedNames),\n      type: validators.type(),\n      default: yup\n        .string()\n        .nullable()\n        .matches(/^-?\\d*$/),\n      unique: validators.unique(),\n      required: validators.required(),\n      max: yup\n        .string()\n        .nullable()\n        .matches(/^-?\\d*$/, errorsTrads.regex.id),\n      min: yup\n        .string()\n        .nullable()\n        .test(isMinSuperiorThanMax<string | null>())\n        .matches(/^-?\\d*$/, errorsTrads.regex.id),\n    };\n\n    return yup.object(shape);\n  },\n  boolean(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\n    const shape = {\n      name: validators.name(usedAttributeNames, reservedNames),\n      default: yup.boolean().nullable(),\n      required: validators.required(),\n      unique: validators.unique(),\n    };\n\n    return yup.object(shape);\n  },\n  component(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\n    const shape = {\n      name: validators.name(usedAttributeNames, reservedNames),\n      type: validators.type(),\n      required: validators.required(),\n      max: validators.max(),\n      min: validators.min(),\n      component: yup.string().required(errorsTrads.required.id),\n    };\n\n    return yup.object(shape);\n  },\n  decimal(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\n    const shape = {\n      name: validators.name(usedAttributeNames, reservedNames),\n      type: validators.type(),\n      default: yup.number(),\n      required: validators.required(),\n      max: yup.number(),\n      min: yup.number().test(isMinSuperiorThanMax<number>()),\n    };\n\n    return yup.object(shape);\n  },\n  dynamiczone(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\n    const shape = {\n      name: validators.name(usedAttributeNames, reservedNames),\n      type: validators.type(),\n      required: validators.required(),\n      max: validators.max(),\n      min: validators.min(),\n    };\n\n    return yup.object(shape);\n  },\n  email(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\n    const shape = {\n      name: validators.name(usedAttributeNames, reservedNames),\n      type: validators.type(),\n      default: yup.string().email().nullable(),\n      unique: validators.unique(),\n      required: validators.required(),\n      maxLength: validators.maxLength(),\n      minLength: validators.minLength(),\n    };\n\n    return yup.object(shape);\n  },\n  enumeration(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\n    /**\n     * For enumerations the least common denomiator is GraphQL, where\n     * values needs to match the secure name regex:\n     * GraphQL Spec https://spec.graphql.org/June2018/#sec-Names\n     *\n     * Therefore we need to make sure our users only use values, which\n     * can be returned by GraphQL, by checking the regressed values\n     * agains the GraphQL regex.\n     *\n     * TODO V5: check if we can avoid this coupling by moving this logic\n     * into the GraphQL plugin.\n     */\n    const GRAPHQL_ENUM_REGEX = /^[_A-Za-z][_0-9A-Za-z]*$/;\n\n    const shape = {\n      name: yup\n        .string()\n        .test(alreadyUsedAttributeNames(usedAttributeNames))\n        .test(isNameAllowed(reservedNames))\n        .matches(GRAPHQL_ENUM_REGEX, errorsTrads.regex.id)\n        .required(errorsTrads.required.id),\n      type: validators.type(),\n      default: validators.default(),\n      unique: validators.unique(),\n      required: validators.required(),\n      enum: yup\n        .array()\n        .of(yup.string())\n        .min(1, errorsTrads.min.id)\n        .test({\n          name: 'areEnumValuesUnique',\n          message: getTrad('error.validation.enum-duplicate'),\n          test(values) {\n            if (!values) {\n              return false;\n            }\n            const duplicates = uniq(\n              values\n                .map(toRegressedEnumValue)\n                .filter((value, index, values) => values.indexOf(value) !== index)\n            );\n\n            return !duplicates.length;\n          },\n        })\n        .test({\n          name: 'doesNotHaveEmptyValues',\n          message: getTrad('error.validation.enum-empty-string'),\n          test: (values) => {\n            if (!values) {\n              return false;\n            }\n            return !values.map(toRegressedEnumValue).some((val) => val === '');\n          },\n        })\n        .test({\n          name: 'doesMatchRegex',\n          message: getTrad('error.validation.enum-regex'),\n          test: (values) => {\n            if (!values) {\n              return false;\n            }\n            return values\n              .map(toRegressedEnumValue)\n              .every((value) => GRAPHQL_ENUM_REGEX.test(value));\n          },\n        }),\n      enumName: yup.string().nullable(),\n    };\n\n    return yup.object(shape);\n  },\n  float(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\n    const shape = {\n      name: validators.name(usedAttributeNames, reservedNames),\n      type: validators.type(),\n      required: validators.required(),\n      default: yup.number(),\n      max: yup.number(),\n      min: yup.number().test(isMinSuperiorThanMax<number>()),\n    };\n\n    return yup.object(shape);\n  },\n  integer(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\n    const shape = {\n      name: validators.name(usedAttributeNames, reservedNames),\n      type: validators.type(),\n      default: yup.number().integer(),\n      unique: validators.unique(),\n      required: validators.required(),\n      max: validators.max(),\n      min: validators.min(),\n    };\n\n    return yup.object(shape);\n  },\n  json(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\n    const shape = {\n      name: validators.name(usedAttributeNames, reservedNames),\n      type: validators.type(),\n      required: validators.required(),\n      unique: validators.unique(),\n    };\n\n    return yup.object(shape);\n  },\n  media(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\n    const shape = {\n      name: validators.name(usedAttributeNames, reservedNames),\n      type: validators.type(),\n      multiple: yup.boolean(),\n      required: validators.required(),\n      allowedTypes: yup\n        .array()\n        .of(yup.string().oneOf(['images', 'videos', 'files', 'audios']))\n        .min(1)\n        .nullable(),\n    };\n\n    return yup.object(shape);\n  },\n  password(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\n    const shape = {\n      name: validators.name(usedAttributeNames, reservedNames),\n      type: validators.type(),\n      default: validators.default(),\n      unique: validators.unique(),\n      required: validators.required(),\n      maxLength: validators.maxLength(),\n      minLength: validators.minLength(),\n    };\n\n    return yup.object(shape);\n  },\n  relation(\n    usedAttributeNames: Array<string>,\n    reservedNames: Array<string>,\n    alreadyTakenTargetAttributes: Array<{ name: string }>,\n    {\n      initialData,\n      modifiedData,\n    }: {\n      initialData: { targetAttribute?: string };\n      modifiedData: {\n        name?: string;\n        relation?: Schema.Attribute.RelationKind.WithTarget;\n        targetAttribute?: string;\n      };\n    }\n  ) {\n    const shape = {\n      name: validators.name(usedAttributeNames, reservedNames),\n      target: yup.string().required(errorsTrads.required.id),\n      relation: yup.string().required(),\n      type: yup.string().required(),\n      targetAttribute: yup.lazy(() => {\n        const relationType = getRelationType(modifiedData.relation!, modifiedData.targetAttribute);\n\n        if (relationType === 'oneWay' || relationType === 'manyWay') {\n          return yup.string().nullable();\n        }\n\n        const schema = yup.string().test(isNameAllowed(reservedNames));\n        const initialForbiddenName = [\n          ...alreadyTakenTargetAttributes.map(({ name }) => name),\n          modifiedData.name,\n        ];\n\n        const forbiddenTargetAttributeName = initialForbiddenName.filter(\n          (val) => val !== initialData.targetAttribute\n        );\n\n        return schema\n          .matches(NAME_REGEX, errorsTrads.regex.id)\n          .test({\n            name: 'forbiddenTargetAttributeName',\n            message: getTrad('error.validation.relation.targetAttribute-taken'),\n            test(value) {\n              if (!value) {\n                return false;\n              }\n\n              return !forbiddenTargetAttributeName.includes(value);\n            },\n          })\n          .required(errorsTrads.required.id);\n      }),\n    };\n\n    return yup.object(shape);\n  },\n  richtext(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\n    const shape = {\n      name: validators.name(usedAttributeNames, reservedNames),\n      type: validators.type(),\n      default: validators.default(),\n      unique: validators.unique(),\n      required: validators.required(),\n      maxLength: validators.maxLength(),\n      minLength: validators.minLength(),\n    };\n\n    return yup.object(shape);\n  },\n  blocks(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\n    const shape = {\n      name: validators.name(usedAttributeNames, reservedNames),\n      type: validators.type(),\n      default: validators.default(),\n      unique: validators.unique(),\n      required: validators.required(),\n      maxLength: validators.maxLength(),\n      minLength: validators.minLength(),\n    };\n\n    return yup.object(shape);\n  },\n  string(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\n    const shape = createTextShape(usedAttributeNames, reservedNames);\n\n    return yup.object(shape);\n  },\n  text(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\n    const shape = createTextShape(usedAttributeNames, reservedNames);\n\n    return yup.object(shape);\n  },\n  uid(usedAttributeNames: Array<string>, reservedNames: Array<string>) {\n    const shape = createTextShape(usedAttributeNames, reservedNames);\n\n    return yup.object(shape);\n  },\n};\n"],"names":["attributeTypes","date","usedAttributeNames","reservedNames","shape","name","validators","type","yup","object","datetime","time","default","biginteger","string","nullable","matches","unique","required","max","errorsTrads","regex","id","min","test","isMinSuperiorThanMax","boolean","component","decimal","number","dynamiczone","email","maxLength","minLength","enumeration","GRAPHQL_ENUM_REGEX","alreadyUsedAttributeNames","isNameAllowed","enum","array","of","message","getTrad","values","duplicates","uniq","map","toRegressedEnumValue","filter","value","index","indexOf","length","some","val","every","enumName","float","integer","json","media","multiple","allowedTypes","oneOf","password","relation","alreadyTakenTargetAttributes","initialData","modifiedData","target","targetAttribute","lazy","relationType","getRelationType","schema","initialForbiddenName","forbiddenTargetAttributeName","NAME_REGEX","includes","richtext","blocks","createTextShape","text","uid"],"mappings":"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"}