{"version":3,"file":"forms.js","sources":["../../../../../admin/src/components/FormModal/forms/forms.ts"],"sourcesContent":["import { getTrad } from '../../../utils';\nimport { commonBaseForm } from '../attributes/commonBaseForm';\nimport { attributesForm } from '../attributes/form';\nimport { nameField } from '../attributes/nameField';\nimport { attributeTypes } from '../attributes/types';\nimport { componentForm } from '../component/componentForm';\nimport { createComponentSchema } from '../component/createComponentSchema';\nimport { contentTypeForm } from '../contentType/contentTypeForm';\nimport { createContentTypeSchema } from '../contentType/createContentTypeSchema';\nimport { dynamiczoneForm } from '../dynamiczoneForm';\n\nimport { addItemsToFormSection, FormTypeOptions } from './utils/addItemsToFormSection';\nimport { createComponentCollectionName } from './utils/createCollectionName';\nimport { Attribute, getUsedAttributeNames, SchemaData } from './utils/getUsedAttributeNames';\n\nimport type { ContentType } from '../../../types';\nimport type { Internal } from '@strapi/types';\n\nexport type SchemaParams = {\n  schemaAttributes: any;\n  attributeType: keyof typeof attributeTypes;\n  customFieldValidator: any;\n  reservedNames: {\n    attributes: Array<string>;\n  };\n  schemaData: any;\n  ctbFormsAPI: any;\n};\n\ntype Base<TAttributesFormType extends 'base' | 'advanced'> = {\n  data: any;\n  type: keyof (typeof attributesForm)[TAttributesFormType];\n  step: string;\n  attributes: any;\n  extensions: any;\n  forTarget: string;\n};\n\nexport const forms = {\n  customField: {\n    schema({\n      schemaAttributes,\n      attributeType,\n      customFieldValidator,\n      reservedNames,\n      schemaData,\n      ctbFormsAPI,\n    }: SchemaParams) {\n      const usedAttributeNames = getUsedAttributeNames(schemaAttributes, schemaData);\n\n      let attributeShape;\n      if (attributeType === 'relation') {\n        attributeShape = attributeTypes[attributeType](\n          usedAttributeNames,\n          reservedNames.attributes,\n          [],\n          { initialData: {}, modifiedData: {} }\n        );\n      } else {\n        attributeShape = attributeTypes[attributeType](\n          usedAttributeNames,\n          reservedNames.attributes\n        );\n      }\n\n      return ctbFormsAPI.makeCustomFieldValidator(\n        attributeShape,\n        customFieldValidator,\n        usedAttributeNames,\n        reservedNames.attributes,\n        schemaData\n      );\n    },\n    form: {\n      base({ customField }: any) {\n        // Default section with required name field\n        const sections: FormTypeOptions = [{ sectionTitle: null, items: [nameField] }];\n\n        if (customField.options?.base) {\n          addItemsToFormSection(customField.options.base, sections);\n        }\n\n        return { sections };\n      },\n      advanced({ customField, data, step, extensions, ...rest }: any) {\n        // Default section with no fields\n        const sections: FormTypeOptions = [{ sectionTitle: null, items: [] }];\n        const injectedInputs = extensions.getAdvancedForm(['attribute', customField.type], {\n          data,\n          type: customField.type,\n          step,\n          ...rest,\n        });\n\n        if (customField.options?.advanced) {\n          addItemsToFormSection(customField.options.advanced, sections);\n        }\n\n        if (injectedInputs) {\n          const extendedSettings = {\n            sectionTitle: {\n              id: getTrad('modalForm.custom-fields.advanced.settings.extended'),\n              defaultMessage: 'Extended settings',\n            },\n            items: injectedInputs,\n          };\n\n          sections.push(extendedSettings);\n        }\n\n        return { sections };\n      },\n    },\n  },\n  attribute: {\n    schema(\n      currentSchema: any,\n      attributeType: keyof typeof attributeTypes,\n      reservedNames: {\n        attributes: Array<string>;\n      },\n      alreadyTakenTargetContentTypeAttributes: Array<Attribute>,\n      options: SchemaData,\n      extensions: {\n        makeValidator: any;\n      }\n    ) {\n      // Get the attributes object on the schema\n      const attributes: Array<Attribute> = currentSchema?.attributes ?? [];\n      const usedAttributeNames = getUsedAttributeNames(attributes, options);\n\n      try {\n        const attributeShape = attributeTypes[attributeType](\n          usedAttributeNames,\n          reservedNames.attributes,\n          alreadyTakenTargetContentTypeAttributes,\n          options\n        );\n\n        return extensions.makeValidator(\n          ['attribute', attributeType],\n          attributeShape,\n          usedAttributeNames,\n          reservedNames.attributes,\n          alreadyTakenTargetContentTypeAttributes,\n          options\n        );\n      } catch (err) {\n        console.error('Error yup build schema', err);\n\n        return attributeTypes.default(usedAttributeNames, reservedNames.attributes);\n      }\n    },\n    form: {\n      advanced({ data, type, step, extensions, ...rest }: Base<'advanced'>) {\n        try {\n          const baseForm = attributesForm.advanced[type](data, step).sections;\n          const itemsToAdd = extensions.getAdvancedForm(['attribute', type], {\n            data,\n            type,\n            step,\n            ...rest,\n          });\n\n          let injected = false;\n\n          const sections = baseForm.reduce((acc: Array<any>, current: any) => {\n            if (current.sectionTitle === null || injected) {\n              acc.push(current);\n            } else {\n              acc.push({ ...current, items: [...current.items, ...itemsToAdd] });\n              injected = true;\n            }\n\n            return acc;\n          }, []);\n          // IF we want a dedicated section for the plugins\n          // const sections = [\n          //   ...baseForm,\n          //   {\n          //     sectionTitle: { id: 'Zone pour plugins', defaultMessage: 'Zone pour plugins' },\n          //     items: itemsToAdd,\n          //   },\n          // ];\n\n          return { sections };\n        } catch (err) {\n          console.error(err);\n\n          return { sections: [] };\n        }\n      },\n      base({ data, type, step, attributes }: Base<'base'>) {\n        try {\n          return attributesForm.base[type](data, step, attributes);\n        } catch (err) {\n          return commonBaseForm;\n        }\n      },\n    },\n  },\n  contentType: {\n    schema(\n      alreadyTakenNames: Array<string>,\n      isEditing: boolean,\n      ctUid: Internal.UID.ContentType,\n      reservedNames: {\n        models: any;\n      },\n      extensions: any,\n      contentTypes: Record<Internal.UID.ContentType, ContentType>\n    ) {\n      const singularNames = Object.values(contentTypes).map((contentType) => {\n        return contentType.info.singularName;\n      });\n\n      const pluralNames = Object.values(contentTypes).map((contentType: any) => {\n        return contentType?.info?.pluralName ?? '';\n      });\n\n      const takenNames = isEditing\n        ? alreadyTakenNames.filter((uid) => uid !== ctUid)\n        : alreadyTakenNames;\n\n      const takenSingularNames = isEditing\n        ? singularNames.filter((singName) => {\n            const { info } = contentTypes[ctUid];\n\n            return info.singularName !== singName;\n          })\n        : singularNames;\n\n      const takenPluralNames = isEditing\n        ? pluralNames.filter((pluralName) => {\n            const { info } = contentTypes[ctUid];\n\n            return info.pluralName !== pluralName;\n          })\n        : pluralNames;\n\n      // return the array of collection names not all normalized\n      const collectionNames = Object.values(contentTypes).map((contentType) => {\n        return contentType?.collectionName ?? '';\n      });\n\n      const takenCollectionNames = isEditing\n        ? collectionNames.filter((collectionName) => {\n            const { collectionName: currentCollectionName } = contentTypes[ctUid];\n\n            return collectionName !== currentCollectionName;\n          })\n        : collectionNames;\n\n      const contentTypeShape = createContentTypeSchema({\n        usedContentTypeNames: takenNames,\n        reservedModels: reservedNames.models,\n        singularNames: takenSingularNames,\n        pluralNames: takenPluralNames,\n        collectionNames: takenCollectionNames,\n      });\n\n      // FIXME\n      return extensions.makeValidator(\n        ['contentType'],\n        contentTypeShape,\n        takenNames,\n        reservedNames.models,\n        takenSingularNames,\n        takenPluralNames\n      );\n    },\n    form: {\n      base({ actionType }: any) {\n        if (actionType === 'create') {\n          return contentTypeForm.base.create();\n        }\n\n        return contentTypeForm.base.edit();\n      },\n      advanced({ extensions }: any) {\n        const baseForm = contentTypeForm.advanced\n          .default()\n          .sections.map((section) => section.items)\n          .flat();\n        const itemsToAdd = extensions.getAdvancedForm(['contentType']);\n\n        return {\n          sections: [\n            {\n              items: [...baseForm, ...itemsToAdd],\n            },\n          ],\n        };\n      },\n    },\n  },\n  component: {\n    schema(\n      alreadyTakenAttributes: Array<Internal.UID.Component>,\n      componentCategory: string,\n      reservedNames: {\n        models: any;\n      },\n      isEditing = false,\n      components: Record<string, any>,\n      componentDisplayName: string,\n      compoUid: Internal.UID.Component | null = null\n    ) {\n      const takenNames = isEditing\n        ? alreadyTakenAttributes.filter((uid: Internal.UID.Component) => uid !== compoUid)\n        : alreadyTakenAttributes;\n      const collectionNames = Object.values(components).map((component: any) => {\n        return component?.collectionName;\n      });\n\n      const currentCollectionName = createComponentCollectionName(\n        componentDisplayName,\n        componentCategory\n      );\n\n      const takenCollectionNames = isEditing\n        ? collectionNames.filter((collectionName) => collectionName !== currentCollectionName)\n        : collectionNames;\n\n      return createComponentSchema(\n        takenNames,\n        reservedNames.models,\n        componentCategory,\n        takenCollectionNames,\n        currentCollectionName\n      );\n    },\n    form: {\n      advanced() {\n        return {\n          sections: componentForm.advanced(),\n        };\n      },\n      base() {\n        return {\n          sections: componentForm.base(),\n        };\n      },\n    },\n  },\n  addComponentToDynamicZone: {\n    form: {\n      advanced() {\n        return dynamiczoneForm.advanced.default();\n      },\n      base({ data }: any) {\n        const isCreatingComponent = data?.createComponent ?? false;\n\n        if (isCreatingComponent) {\n          return dynamiczoneForm.base.createComponent();\n        }\n\n        return dynamiczoneForm.base.default();\n      },\n    },\n  },\n};\n"],"names":["forms","customField","schema","schemaAttributes","attributeType","customFieldValidator","reservedNames","schemaData","ctbFormsAPI","usedAttributeNames","getUsedAttributeNames","attributeShape","attributeTypes","attributes","initialData","modifiedData","makeCustomFieldValidator","form","base","sections","sectionTitle","items","nameField","options","addItemsToFormSection","advanced","data","step","extensions","rest","injectedInputs","getAdvancedForm","type","extendedSettings","id","getTrad","defaultMessage","push","attribute","currentSchema","alreadyTakenTargetContentTypeAttributes","makeValidator","err","console","error","default","baseForm","attributesForm","itemsToAdd","injected","reduce","acc","current","commonBaseForm","contentType","alreadyTakenNames","isEditing","ctUid","contentTypes","singularNames","Object","values","map","info","singularName","pluralNames","pluralName","takenNames","filter","uid","takenSingularNames","singName","takenPluralNames","collectionNames","collectionName","takenCollectionNames","currentCollectionName","contentTypeShape","createContentTypeSchema","usedContentTypeNames","reservedModels","models","actionType","contentTypeForm","create","edit","section","flat","component","alreadyTakenAttributes","componentCategory","components","componentDisplayName","compoUid","createComponentCollectionName","createComponentSchema","componentForm","addComponentToDynamicZone","dynamiczoneForm","isCreatingComponent","createComponent"],"mappings":"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"}