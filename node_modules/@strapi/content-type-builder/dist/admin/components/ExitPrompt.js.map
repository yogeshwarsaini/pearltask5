{"version":3,"file":"ExitPrompt.js","sources":["../../../admin/src/components/ExitPrompt.tsx"],"sourcesContent":["import { useEffect } from 'react';\n\nimport { ConfirmDialog } from '@strapi/admin/strapi-admin';\nimport { Dialog } from '@strapi/design-system';\nimport { useIntl } from 'react-intl';\nimport { useBlocker } from 'react-router-dom';\n\nimport { useDataManager } from '../components/DataManager/useDataManager';\nimport { getTrad } from '../utils/getTrad';\n\nexport const ExitPrompt = () => {\n  const { formatMessage } = useIntl();\n  const { isModified, isSaving } = useDataManager();\n\n  const confirmationMessage = formatMessage({\n    id: getTrad('prompt.unsaved'),\n    defaultMessage: 'Are you sure you want to leave? All your modifications will be lost.',\n  });\n\n  const blocker = useBlocker((ctx) => {\n    return (\n      ctx.currentLocation.pathname.startsWith('/plugins/content-type-builder/') &&\n      !ctx.nextLocation.pathname.startsWith('/plugins/content-type-builder/') &&\n      isModified\n    );\n  });\n\n  useEffect(() => {\n    const handleBeforeUnload = (event: BeforeUnloadEvent) => {\n      if (isModified && !isSaving) {\n        event.preventDefault();\n        event.returnValue = '';\n      }\n    };\n\n    window.addEventListener('beforeunload', handleBeforeUnload);\n    return () => window.removeEventListener('beforeunload', handleBeforeUnload);\n  }, [confirmationMessage, isModified, isSaving]);\n\n  if (blocker.state === 'blocked') {\n    return (\n      <Dialog.Root open onOpenChange={() => blocker.reset()}>\n        <ConfirmDialog onConfirm={() => blocker.proceed()}>{confirmationMessage}</ConfirmDialog>\n      </Dialog.Root>\n    );\n  }\n\n  return null;\n};\n"],"names":["ExitPrompt","formatMessage","useIntl","isModified","isSaving","useDataManager","confirmationMessage","id","getTrad","defaultMessage","blocker","useBlocker","ctx","currentLocation","pathname","startsWith","nextLocation","useEffect","handleBeforeUnload","event","preventDefault","returnValue","window","addEventListener","removeEventListener","state","_jsx","Dialog","Root","open","onOpenChange","reset","ConfirmDialog","onConfirm","proceed"],"mappings":";;;;;;;;;;;MAUaA,UAAa,GAAA,IAAA;IACxB,MAAM,EAAEC,aAAa,EAAE,GAAGC,iBAAAA,EAAAA;AAC1B,IAAA,MAAM,EAAEC,UAAU,EAAEC,QAAQ,EAAE,GAAGC,6BAAAA,EAAAA;AAEjC,IAAA,MAAMC,sBAAsBL,aAAc,CAAA;AACxCM,QAAAA,EAAAA,EAAIC,eAAQ,CAAA,gBAAA,CAAA;QACZC,cAAgB,EAAA;AAClB,KAAA,CAAA;IAEA,MAAMC,OAAAA,GAAUC,0BAAW,CAACC,GAAAA,GAAAA;AAC1B,QAAA,OACEA,IAAIC,eAAe,CAACC,QAAQ,CAACC,UAAU,CAAC,gCAAA,CAAA,IACxC,CAACH,GAAAA,CAAII,YAAY,CAACF,QAAQ,CAACC,UAAU,CAAC,gCACtCZ,CAAAA,IAAAA,UAAAA;AAEJ,KAAA,CAAA;IAEAc,eAAU,CAAA,IAAA;AACR,QAAA,MAAMC,qBAAqB,CAACC,KAAAA,GAAAA;YAC1B,IAAIhB,UAAAA,IAAc,CAACC,QAAU,EAAA;AAC3Be,gBAAAA,KAAAA,CAAMC,cAAc,EAAA;AACpBD,gBAAAA,KAAAA,CAAME,WAAW,GAAG,EAAA;AACtB;AACF,SAAA;QAEAC,MAAOC,CAAAA,gBAAgB,CAAC,cAAgBL,EAAAA,kBAAAA,CAAAA;AACxC,QAAA,OAAO,IAAMI,MAAAA,CAAOE,mBAAmB,CAAC,cAAgBN,EAAAA,kBAAAA,CAAAA;KACvD,EAAA;AAACZ,QAAAA,mBAAAA;AAAqBH,QAAAA,UAAAA;AAAYC,QAAAA;AAAS,KAAA,CAAA;IAE9C,IAAIM,OAAAA,CAAQe,KAAK,KAAK,SAAW,EAAA;QAC/B,qBACEC,cAAA,CAACC,oBAAOC,IAAI,EAAA;YAACC,IAAI,EAAA,IAAA;YAACC,YAAc,EAAA,IAAMpB,QAAQqB,KAAK,EAAA;AACjD,YAAA,QAAA,gBAAAL,cAACM,CAAAA,yBAAAA,EAAAA;gBAAcC,SAAW,EAAA,IAAMvB,QAAQwB,OAAO,EAAA;AAAK5B,gBAAAA,QAAAA,EAAAA;;;AAG1D;IAEA,OAAO,IAAA;AACT;;;;"}