{"version":3,"file":"TabForm.js","sources":["../../../admin/src/components/TabForm.tsx"],"sourcesContent":["import { Box, Grid, Typography, Button, Tooltip } from '@strapi/design-system';\nimport get from 'lodash/get';\nimport { useIntl } from 'react-intl';\n\nimport { formatCondition, getAvailableConditionFields } from '../utils/conditions';\n\nimport { GenericInput } from './GenericInputs';\n\ninterface TabFormProps {\n  form: Array<Record<string, any>>;\n  formErrors: Record<string, any>;\n  genericInputProps: Record<string, any>;\n  modifiedData: Record<string, any>;\n  onChange: (value: any) => void;\n}\n\n/* eslint-disable react/no-array-index-key */\nexport const TabForm = ({\n  form,\n  formErrors,\n  genericInputProps,\n  modifiedData,\n  onChange,\n}: TabFormProps) => {\n  const { formatMessage } = useIntl();\n\n  return (\n    <>\n      {form.map((section, sectionIndex) => {\n        // Don't display an empty section\n        if (section.items.length === 0) {\n          return null;\n        }\n        return (\n          <Box key={sectionIndex}>\n            {section.sectionTitle && (\n              <Box paddingBottom={4}>\n                <Typography variant=\"delta\" tag=\"h3\">\n                  {formatMessage(section.sectionTitle)}\n                </Typography>\n              </Box>\n            )}\n            {section.intlLabel && (\n              <Typography variant=\"pi\" textColor=\"neutral600\">\n                {formatMessage(section.intlLabel)}\n              </Typography>\n            )}\n\n            <Grid.Root gap={4}>\n              {section.items.map((input: any, i: number) => {\n                const key = `${sectionIndex}.${i}`;\n\n                /**\n                 * Use undefined as the default value because not every input wants a string e.g. Date pickers\n                 */\n                const value = get(modifiedData, input.name, undefined);\n\n                // When extending the yup schema of an existing field (like in https://github.com/strapi/strapi/blob/293ff3b8f9559236609d123a2774e3be05ce8274/packages/strapi-plugin-i18n/admin/src/index.js#L52)\n                // and triggering a yup validation error in the UI (missing a required field for example)\n                // We got an object that looks like: formErrors = { \"pluginOptions.i18n.localized\": {...} }\n                // In order to deal with this error, we can't rely on lodash.get to resolve this key\n                // - lodash will try to access {pluginOptions: {i18n: {localized: true}}})\n                // - and we just want to access { \"pluginOptions.i18n.localized\": {...} }\n                // NOTE: this is a hack\n                const pluginOptionError = Object.keys(formErrors).find((key) => key === input.name);\n\n                // Retrieve the error for a specific input\n                const errorId = pluginOptionError\n                  ? formErrors[pluginOptionError].id\n                  : get(\n                      formErrors,\n                      [\n                        ...input.name\n                          .split('.')\n                          // The filter here is used when creating a component\n                          // in the component step 1 modal\n                          // Since the component info is stored in the\n                          // componentToCreate object we can access the error\n                          // By removing the key\n                          .filter((key: string) => key !== 'componentToCreate'),\n                        'id',\n                      ],\n                      null\n                    );\n\n                if (input.type === 'pushRight') {\n                  return (\n                    <Grid.Item\n                      col={input.size || 6}\n                      key={input.name || key}\n                      direction=\"column\"\n                      alignItems=\"stretch\"\n                    >\n                      <div />\n                    </Grid.Item>\n                  );\n                }\n\n                // Special handling for 'condition-form'\n                if (input.type === 'condition-form') {\n                  const currentCondition = get(modifiedData, input.name);\n\n                  // Get all attributes from the content type schema\n                  const contentTypeAttributes =\n                    genericInputProps.contentTypeSchema?.attributes || [];\n\n                  if (!genericInputProps.contentTypeSchema) {\n                    console.warn('contentTypeSchema is undefined, skipping condition form');\n                    return null;\n                  }\n\n                  // Filter for boolean and enumeration fields only, excluding the current field\n                  const availableFields = getAvailableConditionFields(\n                    contentTypeAttributes,\n                    modifiedData.name\n                  );\n\n                  const noFieldsMessage = formatMessage({\n                    id: 'form.attribute.condition.no-fields',\n                    defaultMessage:\n                      'No boolean or enumeration fields available to set conditions on.',\n                  });\n\n                  return (\n                    <Grid.Item\n                      col={input.size || 12}\n                      key={input.name || key}\n                      direction=\"column\"\n                      alignItems=\"stretch\"\n                    >\n                      {!currentCondition || Object.keys(currentCondition).length === 0 ? (\n                        <Box>\n                          {currentCondition && Object.keys(currentCondition).length > 0 && (\n                            <Typography variant=\"sigma\" textColor=\"neutral800\" marginBottom={2}>\n                              {formatCondition(\n                                currentCondition,\n                                availableFields,\n                                genericInputProps.attributeName || modifiedData.name\n                              )}\n                            </Typography>\n                          )}\n                          <Tooltip description={noFieldsMessage}>\n                            <Button\n                              marginTop={\n                                currentCondition && Object.keys(currentCondition).length > 0 ? 0 : 4\n                              }\n                              fullWidth={true}\n                              variant=\"secondary\"\n                              onClick={() => {\n                                onChange({\n                                  target: {\n                                    name: input.name,\n                                    value: { visible: { '==': [{ var: '' }, ''] } },\n                                  },\n                                });\n                              }}\n                              startIcon={<span aria-hidden>ï¼‹</span>}\n                              disabled={availableFields.length === 0}\n                            >\n                              {formatMessage({\n                                id: 'form.attribute.condition.apply',\n                                defaultMessage: 'Apply condition',\n                              })}\n                            </Button>\n                          </Tooltip>\n                        </Box>\n                      ) : (\n                        <GenericInput\n                          {...input}\n                          {...genericInputProps}\n                          error={errorId}\n                          onChange={onChange}\n                          value={value}\n                          autoFocus={i === 0}\n                          attributeName={modifiedData.name}\n                          conditionFields={availableFields}\n                          onDelete={() => {\n                            onChange({\n                              target: {\n                                name: input.name,\n                              },\n                            });\n                          }}\n                        />\n                      )}\n                    </Grid.Item>\n                  );\n                }\n\n                // Default rendering for all other input types\n                return (\n                  <Grid.Item\n                    col={input.size || 6}\n                    key={input.name || key}\n                    direction=\"column\"\n                    alignItems=\"stretch\"\n                  >\n                    <GenericInput\n                      {...input}\n                      {...genericInputProps}\n                      error={errorId}\n                      onChange={onChange}\n                      value={value}\n                      autoFocus={i === 0}\n                    />\n                  </Grid.Item>\n                );\n              })}\n            </Grid.Root>\n          </Box>\n        );\n      })}\n    </>\n  );\n};\n"],"names":["TabForm","form","formErrors","genericInputProps","modifiedData","onChange","formatMessage","useIntl","_jsx","_Fragment","map","section","sectionIndex","items","length","_jsxs","Box","sectionTitle","paddingBottom","Typography","variant","tag","intlLabel","textColor","Grid","Root","gap","input","i","key","value","get","name","undefined","pluginOptionError","Object","keys","find","errorId","id","split","filter","type","Item","col","size","direction","alignItems","div","currentCondition","contentTypeAttributes","contentTypeSchema","attributes","console","warn","availableFields","getAvailableConditionFields","noFieldsMessage","defaultMessage","marginBottom","formatCondition","attributeName","Tooltip","description","Button","marginTop","fullWidth","onClick","target","visible","var","startIcon","span","aria-hidden","disabled","GenericInput","error","autoFocus","conditionFields","onDelete"],"mappings":"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"}