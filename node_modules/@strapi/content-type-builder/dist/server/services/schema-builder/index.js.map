{"version":3,"file":"index.js","sources":["../../../../server/src/services/schema-builder/index.ts"],"sourcesContent":["import { join } from 'path';\nimport _ from 'lodash';\n\nimport { errors } from '@strapi/utils';\nimport createSchemaHandler from './schema-handler';\nimport createComponentBuilder from './component-builder';\nimport createContentTypeBuilder from './content-type-builder';\n\n/**\n * Creates a content type schema builder instance\n */\nexport default function createBuilder() {\n  const components = Object.values(strapi.components).map((componentInput) => ({\n    category: componentInput.category,\n    modelName: componentInput.modelName,\n    plugin: componentInput.modelName,\n    uid: componentInput.uid,\n    filename: componentInput.__filename__,\n    dir: join(strapi.dirs.app.components, componentInput.category),\n    schema: componentInput.__schema__,\n    config: componentInput.config,\n  }));\n\n  const contentTypes = Object.values<any>(strapi.contentTypes).map((contentTypeInput) => {\n    const dir = contentTypeInput.plugin\n      ? join(\n          strapi.dirs.app.extensions,\n          contentTypeInput.plugin,\n          'content-types',\n          contentTypeInput.info.singularName\n        )\n      : join(\n          strapi.dirs.app.api,\n          contentTypeInput.apiName,\n          'content-types',\n          contentTypeInput.info.singularName\n        );\n\n    return {\n      modelName: contentTypeInput.modelName,\n      plugin: contentTypeInput.plugin,\n      uid: contentTypeInput.uid,\n      filename: 'schema.json',\n      dir,\n      schema: contentTypeInput.__schema__,\n      config: contentTypeInput.config,\n    };\n  });\n\n  return createSchemaBuilder({\n    components,\n    contentTypes,\n  });\n}\n\ntype SchemaBuilderOptions = {\n  components: any;\n  contentTypes: any;\n};\n\nfunction createSchemaBuilder({ components, contentTypes }: SchemaBuilderOptions) {\n  const tmpComponents = new Map();\n  const tmpContentTypes = new Map();\n\n  // init temporary ContentTypes\n  Object.keys(contentTypes).forEach((key) => {\n    tmpContentTypes.set(contentTypes[key].uid, createSchemaHandler(contentTypes[key]));\n  });\n\n  // init temporary components\n  Object.keys(components).forEach((key) => {\n    tmpComponents.set(components[key].uid, createSchemaHandler(components[key]));\n  });\n\n  return {\n    get components() {\n      return tmpComponents;\n    },\n    get contentTypes() {\n      return tmpContentTypes;\n    },\n\n    /**\n     * Convert Attributes received from the API to the right syntax\n     */\n    convertAttributes(attributes: any) {\n      return Object.keys(attributes).reduce(\n        (acc, key) => {\n          acc[key] = this.convertAttribute(attributes[key]);\n          return acc;\n        },\n        {} as Record<string, unknown>\n      );\n    },\n\n    convertAttribute(attribute: any) {\n      const { configurable, private: isPrivate, conditions } = attribute;\n\n      const baseProperties = {\n        private: isPrivate === true ? true : undefined,\n        configurable: configurable === false ? false : undefined,\n        // IMPORTANT: Preserve conditions only if they exist and are not undefined/null\n        ...(conditions !== undefined && conditions !== null && { conditions }),\n      };\n\n      if (attribute.type === 'relation') {\n        const { target, relation, targetAttribute, dominant, ...restOfProperties } = attribute;\n\n        const attr = {\n          type: 'relation',\n          relation,\n          target,\n          ...restOfProperties,\n          ...baseProperties,\n        };\n\n        // TODO: uncomment this when we pre-create empty types and targets exists if we create multiple types at once\n        // if (target && !this.contentTypes.has(target)) {\n        //   throw new errors.ApplicationError(`target: ${target} does not exist`);\n        // }\n\n        if (_.isNil(targetAttribute)) {\n          return attr;\n        }\n\n        if (['oneToOne', 'manyToMany'].includes(relation) && dominant === true) {\n          attr.inversedBy = targetAttribute;\n        } else if (['oneToOne', 'manyToMany'].includes(relation) && dominant === false) {\n          attr.mappedBy = targetAttribute;\n        } else if (['oneToOne', 'manyToOne', 'manyToMany'].includes(relation)) {\n          attr.inversedBy = targetAttribute;\n        } else if (['oneToMany'].includes(relation)) {\n          attr.mappedBy = targetAttribute;\n        }\n\n        return attr;\n      }\n\n      return {\n        ...attribute,\n        ...baseProperties,\n      };\n    },\n\n    ...createComponentBuilder(),\n    ...createContentTypeBuilder(),\n\n    /**\n     * Write all type to files\n     */\n    writeFiles() {\n      const schemas = [\n        ...Array.from(tmpComponents.values()),\n        ...Array.from(tmpContentTypes.values()),\n      ];\n\n      return Promise.all(schemas.map((schema) => schema.flush()))\n        .catch((error) => {\n          strapi.log.error('Error writing schema files');\n          strapi.log.error(error);\n          return this.rollback();\n        })\n        .catch((error) => {\n          strapi.log.error(\n            'Error rolling back schema files. You might need to fix your files manually'\n          );\n          strapi.log.error(error);\n\n          throw new errors.ApplicationError('Invalid schema edition');\n        });\n    },\n\n    /**\n     * rollback all files\n     */\n    rollback() {\n      return Promise.all(\n        [...Array.from(tmpComponents.values()), ...Array.from(tmpContentTypes.values())].map(\n          (schema) => schema.rollback()\n        )\n      );\n    },\n  };\n}\n"],"names":["createBuilder","components","Object","values","strapi","map","componentInput","category","modelName","plugin","uid","filename","__filename__","dir","join","dirs","app","schema","__schema__","config","contentTypes","contentTypeInput","extensions","info","singularName","api","apiName","createSchemaBuilder","tmpComponents","Map","tmpContentTypes","keys","forEach","key","set","createSchemaHandler","convertAttributes","attributes","reduce","acc","convertAttribute","attribute","configurable","private","isPrivate","conditions","baseProperties","undefined","type","target","relation","targetAttribute","dominant","restOfProperties","attr","_","isNil","includes","inversedBy","mappedBy","createComponentBuilder","createContentTypeBuilder","writeFiles","schemas","Array","from","Promise","all","flush","catch","error","log","rollback","errors","ApplicationError"],"mappings":"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"}