{"version":3,"file":"schema-handler.mjs","sources":["../../../../server/src/services/schema-builder/schema-handler.ts"],"sourcesContent":["import path from 'path';\nimport type { Internal, Struct } from '@strapi/types';\nimport fse from 'fs-extra';\nimport _ from 'lodash';\n\nimport { isConfigurable } from '../../utils/attributes';\n\nexport type Infos = {\n  category?: string;\n  modelName?: string;\n  plugin?: string;\n  uid?: Internal.UID.ContentType;\n  dir: string;\n  filename: string;\n  schema?: Struct.ContentTypeSchema;\n};\n\nexport default function createSchemaHandler(infos: Infos) {\n  const { category, modelName, plugin, uid, dir, filename, schema } = infos;\n\n  const initialState = {\n    modelName,\n    plugin,\n    category,\n    uid,\n    dir,\n    filename,\n    schema:\n      schema ||\n      ({\n        info: {},\n        options: {},\n        attributes: {},\n      } as Struct.ContentTypeSchema),\n  };\n\n  const state = _.cloneDeep(initialState);\n\n  // always keep it the same to rollback\n  Object.freeze(initialState.schema);\n\n  let modified = false;\n  let deleted = false;\n\n  return {\n    get modelName() {\n      return initialState.modelName;\n    },\n\n    get plugin() {\n      return initialState.plugin;\n    },\n\n    get category() {\n      return initialState.category;\n    },\n\n    get kind() {\n      return _.get(state.schema, 'kind', 'collectionType');\n    },\n\n    get uid() {\n      return state.uid;\n    },\n\n    get writable() {\n      return _.get(state, 'plugin') !== 'admin';\n    },\n\n    setUID(val: Internal.UID.ContentType) {\n      modified = true;\n\n      state.uid = val;\n      return this;\n    },\n\n    setDir(val: string) {\n      modified = true;\n\n      state.dir = val;\n      return this;\n    },\n\n    get schema() {\n      return _.cloneDeep(state.schema);\n    },\n\n    setSchema(val: Struct.ContentTypeSchema) {\n      modified = true;\n\n      state.schema = _.cloneDeep(val);\n      return this;\n    },\n\n    // get a particular path inside the schema\n    get(path: string[]) {\n      return _.get(state.schema, path);\n    },\n\n    // set a particular path inside the schema\n    set(path: string[] | string, val: unknown) {\n      if (!state.schema) return this;\n\n      modified = true;\n\n      const value = _.defaultTo(val, _.get(state.schema, path));\n      _.set(state.schema, path, value);\n\n      return this;\n    },\n\n    // delete a particular path inside the schema\n    unset(path: string[]) {\n      modified = true;\n\n      _.unset(state.schema, path);\n\n      return this;\n    },\n\n    delete() {\n      deleted = true;\n      return this;\n    },\n\n    getAttribute(key: string) {\n      return this.get(['attributes', key]);\n    },\n\n    setAttribute(key: string, attribute: any) {\n      return this.set(['attributes', key], attribute);\n    },\n\n    deleteAttribute(key: string) {\n      return this.unset(['attributes', key]);\n    },\n\n    setAttributes(newAttributes: Struct.SchemaAttributes) {\n      if (!this.schema) return this;\n\n      // delete old configurable attributes\n      for (const key in this.schema.attributes) {\n        if (isConfigurable((this.schema.attributes as any)[key])) {\n          this.deleteAttribute(key);\n        }\n      }\n\n      // set new Attributes\n      for (const key of Object.keys(newAttributes)) {\n        this.setAttribute(key, newAttributes[key as keyof Struct.SchemaAttributes]);\n      }\n\n      return this;\n    },\n\n    removeContentType(uid: Internal.UID.ContentType) {\n      if (!state.schema) return this;\n\n      const attributes = state.schema.attributes as Record<string, any>;\n\n      Object.keys(attributes).forEach((key) => {\n        const attribute = attributes[key];\n\n        if (attribute.target === uid) {\n          this.deleteAttribute(key);\n        }\n      });\n\n      return this;\n    },\n\n    // utils\n    removeComponent(uid: Internal.UID.Component) {\n      if (!state.schema) return this;\n\n      const attributes = state.schema.attributes as Record<string, any>;\n\n      Object.keys(attributes).forEach((key) => {\n        const attr = attributes[key];\n\n        if (attr.type === 'component' && attr.component === uid) {\n          this.deleteAttribute(key);\n        }\n\n        if (\n          attr.type === 'dynamiczone' &&\n          Array.isArray(attr.components) &&\n          attr.components.includes(uid)\n        ) {\n          const updatedComponentList = attributes[key].components.filter(\n            (val: string) => val !== uid\n          );\n          this.set(['attributes', key, 'components'], updatedComponentList);\n        }\n      });\n\n      return this;\n    },\n\n    updateComponent(uid: Internal.UID.Component, newUID: Internal.UID.Component) {\n      if (!state.schema) return this;\n\n      const attributes = state.schema.attributes as Record<string, any>;\n\n      Object.keys(attributes).forEach((key) => {\n        const attr = attributes[key];\n\n        if (attr.type === 'component' && attr.component === uid) {\n          this.set(['attributes', key, 'component'], newUID);\n        }\n\n        if (\n          attr.type === 'dynamiczone' &&\n          Array.isArray(attr.components) &&\n          attr.components.includes(uid)\n        ) {\n          const updatedComponentList = attr.components.map((val: string) =>\n            val === uid ? newUID : val\n          );\n\n          this.set(['attributes', key, 'components'], updatedComponentList);\n        }\n      });\n\n      return this;\n    },\n\n    // save the schema to disk\n    async flush() {\n      if (!this.writable) {\n        return;\n      }\n\n      const initialPath = path.join(initialState.dir, initialState.filename);\n      const filePath = path.join(state.dir, state.filename);\n\n      if (deleted) {\n        await fse.remove(initialPath);\n\n        const list = await fse.readdir(initialState.dir);\n        if (list.length === 0) {\n          await fse.remove(initialState.dir);\n        }\n\n        return;\n      }\n\n      if (modified) {\n        if (!state.schema) return Promise.resolve();\n\n        await fse.ensureFile(filePath);\n\n        await fse.writeJSON(\n          filePath,\n          {\n            kind: state.schema.kind,\n            collectionName: state.schema.collectionName,\n            info: state.schema.info,\n            options: state.schema.options,\n            pluginOptions: state.schema.pluginOptions,\n            attributes: state.schema.attributes,\n            config: (state.schema as any).config,\n          },\n          { spaces: 2 }\n        );\n\n        // remove from oldPath\n        if (initialPath !== filePath) {\n          await fse.remove(initialPath);\n\n          const list = await fse.readdir(initialState.dir);\n          if (list.length === 0) {\n            await fse.remove(initialState.dir);\n          }\n        }\n\n        return;\n      }\n\n      return Promise.resolve();\n    },\n\n    // reset the schema to its initial value\n    async rollback() {\n      if (!this.writable) {\n        return;\n      }\n\n      const initialPath = path.join(initialState.dir, initialState.filename);\n      const filePath = path.join(state.dir, state.filename);\n\n      // it was a creation so it needs to be deleted\n      if (!initialState.uid) {\n        await fse.remove(filePath);\n\n        const list = await fse.readdir(state.dir);\n        if (list.length === 0) {\n          await fse.remove(state.dir);\n        }\n        return;\n      }\n\n      if (modified || deleted) {\n        await fse.ensureFile(initialPath);\n        await fse.writeJSON(initialPath, initialState.schema, { spaces: 2 });\n\n        // remove\n        if (initialPath !== filePath) {\n          await fse.remove(filePath);\n\n          const list = await fse.readdir(state.dir);\n          if (list.length === 0) {\n            await fse.remove(state.dir);\n          }\n        }\n      }\n\n      return Promise.resolve();\n    },\n  };\n}\n"],"names":["createSchemaHandler","infos","category","modelName","plugin","uid","dir","filename","schema","initialState","info","options","attributes","state","_","cloneDeep","Object","freeze","modified","deleted","kind","get","writable","setUID","val","setDir","setSchema","path","set","value","defaultTo","unset","delete","getAttribute","key","setAttribute","attribute","deleteAttribute","setAttributes","newAttributes","isConfigurable","keys","removeContentType","forEach","target","removeComponent","attr","type","component","Array","isArray","components","includes","updatedComponentList","filter","updateComponent","newUID","map","flush","initialPath","join","filePath","fse","remove","list","readdir","length","Promise","resolve","ensureFile","writeJSON","collectionName","pluginOptions","config","spaces","rollback"],"mappings":"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"}