{"version":3,"file":"content-type-builder.js","sources":["../../../../server/src/services/schema-builder/content-type-builder.ts"],"sourcesContent":["import path from 'path';\nimport _ from 'lodash';\n\nimport { strings, errors } from '@strapi/utils';\nimport type { Schema, Internal } from '@strapi/types';\nimport { isRelation, isConfigurable } from '../../utils/attributes';\nimport { typeKinds } from '../constants';\nimport createSchemaHandler from './schema-handler';\nimport { CreateContentTypeInput } from '../../controllers/validation/content-type';\nimport type { InternalRelationAttribute, InternalAttribute } from './types';\n\nconst { ApplicationError } = errors;\n\nconst reuseUnsetPreviousProperties = (\n  newAttribute: Schema.Attribute.AnyAttribute,\n  oldAttribute: Schema.Attribute.AnyAttribute\n) => {\n  _.defaults(\n    newAttribute,\n    _.omit(oldAttribute, [\n      'configurable',\n      'required',\n      'private',\n      'unique',\n      'pluginOptions',\n      'inversedBy',\n      'mappedBy',\n      'conditions', // Don't automatically preserve conditions\n    ])\n  );\n};\n\nexport default function createComponentBuilder() {\n  return {\n    setRelation(\n      this: any,\n      { key, uid, attribute }: { key: string; uid: string; attribute: InternalRelationAttribute }\n    ) {\n      if (!_.has(attribute, 'target')) {\n        return;\n      }\n\n      const targetCT = this.contentTypes.get(attribute.target);\n\n      if (!targetCT) {\n        throw new ApplicationError(`Content type ${attribute.target} not found`);\n      }\n\n      const targetAttribute = targetCT.getAttribute(attribute.targetAttribute);\n\n      if (!attribute.targetAttribute) {\n        return;\n      }\n\n      // When generating the inverse relation, preserve existing conditions if they exist\n      // If the target attribute already exists and has conditions, preserve them\n      const targetAttributeData = targetAttribute || {};\n\n      // If the source doesn't have conditions but the target does, preserve target's conditions\n\n      targetCT.setAttribute(\n        attribute.targetAttribute,\n        generateRelation({ key, attribute, uid, targetAttribute: targetAttributeData })\n      );\n    },\n\n    unsetRelation(\n      this: any,\n      attribute: Schema.Attribute.Relation<Schema.Attribute.RelationKind.Any>\n    ) {\n      if (!('target' in attribute) || !attribute.target) {\n        return;\n      }\n\n      const targetCT = this.contentTypes.get(attribute.target);\n\n      const relationAttribute = attribute as InternalRelationAttribute;\n      const targetAttributeName = relationAttribute.inversedBy || relationAttribute.mappedBy;\n      const targetAttribute = targetCT.getAttribute(targetAttributeName);\n\n      if (!targetAttribute) return;\n\n      return targetCT.deleteAttribute(targetAttributeName);\n    },\n\n    createContentTypeAttributes(\n      this: any,\n      uid: string,\n      attributes: CreateContentTypeInput['attributes']\n    ) {\n      if (!this.contentTypes.has(uid)) {\n        throw new ApplicationError('contentType.notFound');\n      }\n\n      const contentType = this.contentTypes.get(uid);\n\n      // support self referencing content type relation\n      Object.keys(attributes).forEach((key) => {\n        const { target } = attributes[key];\n        if (target === '__self__') {\n          attributes[key].target = uid;\n        }\n      });\n\n      contentType.setAttributes(this.convertAttributes(attributes));\n\n      Object.keys(attributes).forEach((key) => {\n        const attribute = attributes[key] as InternalAttribute;\n\n        if (isRelation(attribute)) {\n          const relationAttribute = attribute as InternalRelationAttribute;\n          if (['manyToMany', 'oneToOne'].includes(relationAttribute.relation)) {\n            if (\n              relationAttribute.target === uid &&\n              relationAttribute.targetAttribute !== undefined\n            ) {\n              // self referencing relation\n              const targetAttribute = attributes[\n                relationAttribute.targetAttribute\n              ] as InternalRelationAttribute;\n\n              if (targetAttribute.dominant === undefined) {\n                relationAttribute.dominant = true;\n              } else {\n                relationAttribute.dominant = false;\n              }\n            } else {\n              relationAttribute.dominant = true;\n            }\n          }\n\n          this.setRelation({\n            key,\n            uid,\n            attribute: relationAttribute,\n          });\n        }\n      });\n\n      return contentType;\n    },\n\n    /**\n     * Creates a content type in memory to be written to files later on\n     */\n    createContentType(this: any, infos: CreateContentTypeInput) {\n      // TODO:: check for unique uid / singularName & pluralName & collectionName\n\n      if (infos.uid && infos.uid !== createContentTypeUID(infos)) {\n        throw new ApplicationError('contentType.invalidUID');\n      }\n\n      const uid = infos.uid ?? createContentTypeUID(infos);\n\n      if (this.contentTypes.has(uid)) {\n        throw new ApplicationError('contentType.alreadyExists');\n      }\n\n      const contentType = createSchemaHandler({\n        modelName: infos.singularName,\n        dir: path.join(\n          strapi.dirs.app.api,\n          infos.singularName,\n          'content-types',\n          infos.singularName\n        ),\n        filename: `schema.json`,\n      });\n\n      this.contentTypes.set(uid, contentType);\n\n      contentType\n        .setUID(uid)\n        .set('kind', infos.kind || typeKinds.COLLECTION_TYPE)\n        .set(\n          'collectionName',\n          infos.collectionName || strings.nameToCollectionName(infos.pluralName)\n        )\n        .set('info', {\n          singularName: infos.singularName,\n          pluralName: infos.pluralName,\n          displayName: infos.displayName,\n          description: infos.description,\n        })\n        .set('options', {\n          ...(infos.options ?? {}),\n          draftAndPublish: infos.draftAndPublish,\n        })\n        .set('pluginOptions', infos.pluginOptions)\n        .set('config', infos.config);\n\n      this.createContentTypeAttributes(uid, infos.attributes);\n\n      return contentType;\n    },\n\n    editContentType(this: any, infos: any) {\n      const { uid } = infos;\n\n      if (!this.contentTypes.has(uid)) {\n        throw new ApplicationError('contentType.notFound');\n      }\n\n      const contentType = this.contentTypes.get(uid);\n\n      const oldAttributes = contentType.schema.attributes;\n\n      const newAttributes = _.omitBy(infos.attributes, (attr, key) => {\n        return _.has(oldAttributes, key) && !isConfigurable(oldAttributes[key]);\n      });\n\n      const newKeys = _.difference(Object.keys(newAttributes), Object.keys(oldAttributes));\n      const deletedKeys = _.difference(Object.keys(oldAttributes), Object.keys(newAttributes));\n      const remainingKeys = _.intersection(Object.keys(oldAttributes), Object.keys(newAttributes));\n\n      // remove old relations\n      deletedKeys.forEach((key) => {\n        const attribute = oldAttributes[key];\n\n        // if the old relation has a target attribute. we need to remove it in the target type\n        if (isConfigurable(attribute) && isRelation(attribute)) {\n          const relationAttribute = attribute as InternalRelationAttribute;\n          const targetAttributeName = relationAttribute.inversedBy || relationAttribute.mappedBy;\n\n          if (targetAttributeName !== null && targetAttributeName !== undefined) {\n            this.unsetRelation(attribute);\n          }\n        }\n      });\n\n      remainingKeys.forEach((key) => {\n        const oldAttribute = oldAttributes[key];\n        const newAttribute = newAttributes[key] as InternalAttribute;\n\n        if (!isRelation(oldAttribute) && isRelation(newAttribute)) {\n          return this.setRelation({\n            key,\n            uid,\n            attribute: newAttribute as InternalRelationAttribute,\n          });\n        }\n\n        if (isRelation(oldAttribute) && !isRelation(newAttribute)) {\n          return this.unsetRelation(oldAttribute);\n        }\n\n        if (isRelation(oldAttribute) && isRelation(newAttribute)) {\n          const relationAttribute = newAttribute as InternalRelationAttribute;\n          const oldRelationAttribute = oldAttribute as InternalRelationAttribute;\n          const oldTargetAttributeName =\n            oldRelationAttribute.inversedBy || oldRelationAttribute.mappedBy;\n\n          const sameRelation = oldAttribute.relation === relationAttribute.relation;\n          const targetAttributeHasChanged =\n            oldTargetAttributeName !== relationAttribute.targetAttribute;\n\n          if (!sameRelation || targetAttributeHasChanged) {\n            this.unsetRelation(oldAttribute);\n          }\n\n          // keep extra options that were set manually on oldAttribute\n          reuseUnsetPreviousProperties(relationAttribute, oldAttribute);\n\n          // Handle conditions explicitly - only preserve if present and not undefined in new attribute\n          const newAttributeFromInfos = newAttributes[key];\n          const hasNewConditions =\n            newAttributeFromInfos.conditions !== undefined &&\n            newAttributeFromInfos.conditions !== null;\n\n          if (oldAttribute.conditions) {\n            if (hasNewConditions) {\n              // Conditions are still present, keep them\n              relationAttribute.conditions = newAttributeFromInfos.conditions;\n            } else {\n              // Conditions were removed (undefined or null), ensure they're not preserved\n              delete relationAttribute.conditions;\n            }\n          } else if (hasNewConditions) {\n            // New conditions added\n            relationAttribute.conditions = newAttributeFromInfos.conditions;\n          }\n\n          if (oldRelationAttribute.inversedBy) {\n            relationAttribute.dominant = true;\n          } else if (oldRelationAttribute.mappedBy) {\n            relationAttribute.dominant = false;\n          }\n\n          return this.setRelation({\n            key,\n            uid,\n            attribute: relationAttribute,\n          });\n        }\n      });\n\n      // add new relations\n      newKeys.forEach((key) => {\n        const attribute = newAttributes[key] as InternalAttribute;\n\n        if (isRelation(attribute)) {\n          const relationAttribute = attribute as InternalRelationAttribute;\n          if (['manyToMany', 'oneToOne'].includes(relationAttribute.relation)) {\n            if (\n              relationAttribute.target === uid &&\n              relationAttribute.targetAttribute !== undefined\n            ) {\n              // self referencing relation\n              const targetAttribute = newAttributes[\n                relationAttribute.targetAttribute\n              ] as InternalRelationAttribute;\n\n              if (targetAttribute.dominant === undefined) {\n                relationAttribute.dominant = true;\n              } else {\n                relationAttribute.dominant = false;\n              }\n            } else {\n              relationAttribute.dominant = true;\n            }\n          }\n\n          this.setRelation({\n            key,\n            uid,\n            attribute: relationAttribute,\n          });\n        }\n      });\n\n      contentType\n        .set('kind', infos.kind || contentType.schema.kind)\n        .set(['info', 'displayName'], infos.displayName)\n        .set(['info', 'description'], infos.description)\n        .set('options', {\n          ...(infos.options ?? {}),\n          draftAndPublish: infos.draftAndPublish,\n        })\n        .set('pluginOptions', infos.pluginOptions)\n        .setAttributes(this.convertAttributes(newAttributes));\n\n      return contentType;\n    },\n\n    deleteContentType(this: any, uid: string) {\n      if (!this.contentTypes.has(uid)) {\n        throw new ApplicationError('contentType.notFound');\n      }\n\n      this.components.forEach((compo: any) => {\n        compo.removeContentType(uid);\n      });\n\n      this.contentTypes.forEach((ct: any) => {\n        ct.removeContentType(uid);\n      });\n\n      return this.contentTypes.get(uid).delete();\n    },\n  };\n}\n\n/**\n * Returns a uid from a content type infos\n *\n * @param {object} options options\n * @param {string} options.singularName content-type singularName\n * @returns {string} uid\n */\nconst createContentTypeUID = ({\n  singularName,\n}: {\n  singularName: string;\n}): Internal.UID.ContentType => `api::${singularName}.${singularName}`;\n\nconst generateRelation = ({\n  key,\n  attribute,\n  uid,\n  targetAttribute = {},\n}: {\n  key: string;\n  attribute: InternalRelationAttribute;\n  uid: string;\n  targetAttribute?: Partial<InternalRelationAttribute>;\n}) => {\n  const opts: any = {\n    type: 'relation',\n    target: uid,\n    private: targetAttribute.private || undefined,\n    pluginOptions: targetAttribute.pluginOptions || undefined,\n    // Preserve conditions from targetAttribute if they exist\n    // This allows each side of the relation to maintain its own conditions\n    ...(targetAttribute.conditions && { conditions: targetAttribute.conditions }),\n  };\n\n  switch (attribute.relation) {\n    case 'oneToOne': {\n      opts.relation = 'oneToOne';\n\n      if (attribute.dominant) {\n        opts.mappedBy = key;\n      } else {\n        opts.inversedBy = key;\n      }\n      break;\n    }\n    case 'oneToMany': {\n      opts.relation = 'manyToOne';\n      opts.inversedBy = key;\n      break;\n    }\n    case 'manyToOne': {\n      opts.relation = 'oneToMany';\n      opts.mappedBy = key;\n      break;\n    }\n    case 'manyToMany': {\n      opts.relation = 'manyToMany';\n\n      if (attribute.dominant) {\n        opts.mappedBy = key;\n      } else {\n        opts.inversedBy = key;\n      }\n\n      break;\n    }\n    default:\n  }\n\n  // we do this just to make sure we have the same key order when writing to files\n  const { type, relation, target, ...restOptions } = opts;\n\n  const result = {\n    type,\n    relation,\n    target,\n    ...restOptions,\n  };\n\n  return result;\n};\n"],"names":["ApplicationError","errors","reuseUnsetPreviousProperties","newAttribute","oldAttribute","_","defaults","omit","createComponentBuilder","setRelation","key","uid","attribute","has","targetCT","contentTypes","get","target","targetAttribute","getAttribute","targetAttributeData","setAttribute","generateRelation","unsetRelation","relationAttribute","targetAttributeName","inversedBy","mappedBy","deleteAttribute","createContentTypeAttributes","attributes","contentType","Object","keys","forEach","setAttributes","convertAttributes","isRelation","includes","relation","undefined","dominant","createContentType","infos","createContentTypeUID","createSchemaHandler","modelName","singularName","dir","path","join","strapi","dirs","app","api","filename","set","setUID","kind","typeKinds","COLLECTION_TYPE","collectionName","strings","nameToCollectionName","pluralName","displayName","description","options","draftAndPublish","pluginOptions","config","editContentType","oldAttributes","schema","newAttributes","omitBy","attr","isConfigurable","newKeys","difference","deletedKeys","remainingKeys","intersection","oldRelationAttribute","oldTargetAttributeName","sameRelation","targetAttributeHasChanged","newAttributeFromInfos","hasNewConditions","conditions","deleteContentType","components","compo","removeContentType","ct","delete","opts","type","private","restOptions","result"],"mappings":";;;;;;;;;AAWA,MAAM,EAAEA,gBAAgB,EAAE,GAAGC,YAAAA;AAE7B,MAAMC,4BAAAA,GAA+B,CACnCC,YACAC,EAAAA,YAAAA,GAAAA;AAEAC,IAAAA,CAAAA,CAAEC,QAAQ,CACRH,YAAAA,EACAE,CAAEE,CAAAA,IAAI,CAACH,YAAc,EAAA;AACnB,QAAA,cAAA;AACA,QAAA,UAAA;AACA,QAAA,SAAA;AACA,QAAA,QAAA;AACA,QAAA,eAAA;AACA,QAAA,YAAA;AACA,QAAA,UAAA;AACA,QAAA;AACD,KAAA,CAAA,CAAA;AAEL,CAAA;AAEe,SAASI,sBAAAA,GAAAA;IACtB,OAAO;AACLC,QAAAA,WAAAA,CAAAA,CAEE,EAAEC,GAAG,EAAEC,GAAG,EAAEC,SAAS,EAAsE,EAAA;AAE3F,YAAA,IAAI,CAACP,CAAAA,CAAEQ,GAAG,CAACD,WAAW,QAAW,CAAA,EAAA;AAC/B,gBAAA;AACF;YAEA,MAAME,QAAAA,GAAW,IAAI,CAACC,YAAY,CAACC,GAAG,CAACJ,UAAUK,MAAM,CAAA;AAEvD,YAAA,IAAI,CAACH,QAAU,EAAA;gBACb,MAAM,IAAId,iBAAiB,CAAC,aAAa,EAAEY,SAAUK,CAAAA,MAAM,CAAC,UAAU,CAAC,CAAA;AACzE;AAEA,YAAA,MAAMC,eAAkBJ,GAAAA,QAAAA,CAASK,YAAY,CAACP,UAAUM,eAAe,CAAA;YAEvE,IAAI,CAACN,SAAUM,CAAAA,eAAe,EAAE;AAC9B,gBAAA;AACF;;;YAIA,MAAME,mBAAAA,GAAsBF,mBAAmB,EAAC;;AAIhDJ,YAAAA,QAAAA,CAASO,YAAY,CACnBT,SAAUM,CAAAA,eAAe,EACzBI,gBAAiB,CAAA;AAAEZ,gBAAAA,GAAAA;AAAKE,gBAAAA,SAAAA;AAAWD,gBAAAA,GAAAA;gBAAKO,eAAiBE,EAAAA;AAAoB,aAAA,CAAA,CAAA;AAEjF,SAAA;AAEAG,QAAAA,aAAAA,CAAAA,CAEEX,SAAuE,EAAA;YAEvE,IAAI,EAAE,QAAYA,IAAAA,SAAQ,KAAM,CAACA,SAAAA,CAAUK,MAAM,EAAE;AACjD,gBAAA;AACF;YAEA,MAAMH,QAAAA,GAAW,IAAI,CAACC,YAAY,CAACC,GAAG,CAACJ,UAAUK,MAAM,CAAA;AAEvD,YAAA,MAAMO,iBAAoBZ,GAAAA,SAAAA;AAC1B,YAAA,MAAMa,mBAAsBD,GAAAA,iBAAAA,CAAkBE,UAAU,IAAIF,kBAAkBG,QAAQ;YACtF,MAAMT,eAAAA,GAAkBJ,QAASK,CAAAA,YAAY,CAACM,mBAAAA,CAAAA;AAE9C,YAAA,IAAI,CAACP,eAAiB,EAAA;YAEtB,OAAOJ,QAAAA,CAASc,eAAe,CAACH,mBAAAA,CAAAA;AAClC,SAAA;QAEAI,2BAEElB,CAAAA,CAAAA,GAAW,EACXmB,YAAgD,EAAA;AAEhD,YAAA,IAAI,CAAC,IAAI,CAACf,YAAY,CAACF,GAAG,CAACF,GAAM,CAAA,EAAA;AAC/B,gBAAA,MAAM,IAAIX,gBAAiB,CAAA,sBAAA,CAAA;AAC7B;AAEA,YAAA,MAAM+B,cAAc,IAAI,CAAChB,YAAY,CAACC,GAAG,CAACL,GAAAA,CAAAA;;AAG1CqB,YAAAA,MAAAA,CAAOC,IAAI,CAACH,YAAYI,CAAAA,CAAAA,OAAO,CAAC,CAACxB,GAAAA,GAAAA;AAC/B,gBAAA,MAAM,EAAEO,MAAM,EAAE,GAAGa,YAAU,CAACpB,GAAI,CAAA;AAClC,gBAAA,IAAIO,WAAW,UAAY,EAAA;AACzBa,oBAAAA,YAAU,CAACpB,GAAAA,CAAI,CAACO,MAAM,GAAGN,GAAAA;AAC3B;AACF,aAAA,CAAA;AAEAoB,YAAAA,WAAAA,CAAYI,aAAa,CAAC,IAAI,CAACC,iBAAiB,CAACN,YAAAA,CAAAA,CAAAA;AAEjDE,YAAAA,MAAAA,CAAOC,IAAI,CAACH,YAAYI,CAAAA,CAAAA,OAAO,CAAC,CAACxB,GAAAA,GAAAA;gBAC/B,MAAME,SAAAA,GAAYkB,YAAU,CAACpB,GAAI,CAAA;AAEjC,gBAAA,IAAI2B,sBAAWzB,SAAY,CAAA,EAAA;AACzB,oBAAA,MAAMY,iBAAoBZ,GAAAA,SAAAA;oBAC1B,IAAI;AAAC,wBAAA,YAAA;AAAc,wBAAA;AAAW,qBAAA,CAAC0B,QAAQ,CAACd,iBAAkBe,CAAAA,QAAQ,CAAG,EAAA;AACnE,wBAAA,IACEf,kBAAkBP,MAAM,KAAKN,OAC7Ba,iBAAkBN,CAAAA,eAAe,KAAKsB,SACtC,EAAA;;AAEA,4BAAA,MAAMtB,eAAkBY,GAAAA,YAAU,CAChCN,iBAAAA,CAAkBN,eAAe,CAClC;4BAED,IAAIA,eAAAA,CAAgBuB,QAAQ,KAAKD,SAAW,EAAA;AAC1ChB,gCAAAA,iBAAAA,CAAkBiB,QAAQ,GAAG,IAAA;6BACxB,MAAA;AACLjB,gCAAAA,iBAAAA,CAAkBiB,QAAQ,GAAG,KAAA;AAC/B;yBACK,MAAA;AACLjB,4BAAAA,iBAAAA,CAAkBiB,QAAQ,GAAG,IAAA;AAC/B;AACF;oBAEA,IAAI,CAAChC,WAAW,CAAC;AACfC,wBAAAA,GAAAA;AACAC,wBAAAA,GAAAA;wBACAC,SAAWY,EAAAA;AACb,qBAAA,CAAA;AACF;AACF,aAAA,CAAA;YAEA,OAAOO,WAAAA;AACT,SAAA;AAEA;;AAEC,QACDW,mBAA6BC,KAA6B,EAAA;;AAGxD,YAAA,IAAIA,MAAMhC,GAAG,IAAIgC,MAAMhC,GAAG,KAAKiC,qBAAqBD,KAAQ,CAAA,EAAA;AAC1D,gBAAA,MAAM,IAAI3C,gBAAiB,CAAA,wBAAA,CAAA;AAC7B;AAEA,YAAA,MAAMW,GAAMgC,GAAAA,KAAAA,CAAMhC,GAAG,IAAIiC,oBAAqBD,CAAAA,KAAAA,CAAAA;AAE9C,YAAA,IAAI,IAAI,CAAC5B,YAAY,CAACF,GAAG,CAACF,GAAM,CAAA,EAAA;AAC9B,gBAAA,MAAM,IAAIX,gBAAiB,CAAA,2BAAA,CAAA;AAC7B;AAEA,YAAA,MAAM+B,cAAcc,aAAoB,CAAA;AACtCC,gBAAAA,SAAAA,EAAWH,MAAMI,YAAY;AAC7BC,gBAAAA,GAAAA,EAAKC,IAAKC,CAAAA,IAAI,CACZC,MAAAA,CAAOC,IAAI,CAACC,GAAG,CAACC,GAAG,EACnBX,KAAMI,CAAAA,YAAY,EAClB,eAAA,EACAJ,MAAMI,YAAY,CAAA;gBAEpBQ,QAAU,EAAA,CAAC,WAAW;AACxB,aAAA,CAAA;AAEA,YAAA,IAAI,CAACxC,YAAY,CAACyC,GAAG,CAAC7C,GAAKoB,EAAAA,WAAAA,CAAAA;YAE3BA,WACG0B,CAAAA,MAAM,CAAC9C,GAAAA,CAAAA,CACP6C,GAAG,CAAC,MAAQb,EAAAA,KAAAA,CAAMe,IAAI,IAAIC,mBAAUC,CAAAA,eAAe,CACnDJ,CAAAA,GAAG,CACF,gBACAb,EAAAA,KAAAA,CAAMkB,cAAc,IAAIC,aAAQC,CAAAA,oBAAoB,CAACpB,KAAAA,CAAMqB,UAAU,CAAA,CAAA,CAEtER,GAAG,CAAC,MAAQ,EAAA;AACXT,gBAAAA,YAAAA,EAAcJ,MAAMI,YAAY;AAChCiB,gBAAAA,UAAAA,EAAYrB,MAAMqB,UAAU;AAC5BC,gBAAAA,WAAAA,EAAatB,MAAMsB,WAAW;AAC9BC,gBAAAA,WAAAA,EAAavB,MAAMuB;aAEpBV,CAAAA,CAAAA,GAAG,CAAC,SAAW,EAAA;AACd,gBAAA,GAAIb,KAAMwB,CAAAA,OAAO,IAAI,EAAE;AACvBC,gBAAAA,eAAAA,EAAiBzB,MAAMyB;aAExBZ,CAAAA,CAAAA,GAAG,CAAC,eAAA,EAAiBb,KAAM0B,CAAAA,aAAa,EACxCb,GAAG,CAAC,QAAUb,EAAAA,KAAAA,CAAM2B,MAAM,CAAA;AAE7B,YAAA,IAAI,CAACzC,2BAA2B,CAAClB,GAAAA,EAAKgC,MAAMb,UAAU,CAAA;YAEtD,OAAOC,WAAAA;AACT,SAAA;AAEAwC,QAAAA,eAAAA,CAAAA,CAA2B5B,KAAU,EAAA;YACnC,MAAM,EAAEhC,GAAG,EAAE,GAAGgC,KAAAA;AAEhB,YAAA,IAAI,CAAC,IAAI,CAAC5B,YAAY,CAACF,GAAG,CAACF,GAAM,CAAA,EAAA;AAC/B,gBAAA,MAAM,IAAIX,gBAAiB,CAAA,sBAAA,CAAA;AAC7B;AAEA,YAAA,MAAM+B,cAAc,IAAI,CAAChB,YAAY,CAACC,GAAG,CAACL,GAAAA,CAAAA;AAE1C,YAAA,MAAM6D,aAAgBzC,GAAAA,WAAAA,CAAY0C,MAAM,CAAC3C,UAAU;YAEnD,MAAM4C,aAAAA,GAAgBrE,EAAEsE,MAAM,CAAChC,MAAMb,UAAU,EAAE,CAAC8C,IAAMlE,EAAAA,GAAAA,GAAAA;gBACtD,OAAOL,CAAAA,CAAEQ,GAAG,CAAC2D,aAAAA,EAAe9D,QAAQ,CAACmE,yBAAAA,CAAeL,aAAa,CAAC9D,GAAI,CAAA,CAAA;AACxE,aAAA,CAAA;YAEA,MAAMoE,OAAAA,GAAUzE,CAAE0E,CAAAA,UAAU,CAAC/C,MAAAA,CAAOC,IAAI,CAACyC,aAAAA,CAAAA,EAAgB1C,MAAOC,CAAAA,IAAI,CAACuC,aAAAA,CAAAA,CAAAA;YACrE,MAAMQ,WAAAA,GAAc3E,CAAE0E,CAAAA,UAAU,CAAC/C,MAAAA,CAAOC,IAAI,CAACuC,aAAAA,CAAAA,EAAgBxC,MAAOC,CAAAA,IAAI,CAACyC,aAAAA,CAAAA,CAAAA;YACzE,MAAMO,aAAAA,GAAgB5E,CAAE6E,CAAAA,YAAY,CAAClD,MAAAA,CAAOC,IAAI,CAACuC,aAAAA,CAAAA,EAAgBxC,MAAOC,CAAAA,IAAI,CAACyC,aAAAA,CAAAA,CAAAA;;YAG7EM,WAAY9C,CAAAA,OAAO,CAAC,CAACxB,GAAAA,GAAAA;gBACnB,MAAME,SAAAA,GAAY4D,aAAa,CAAC9D,GAAI,CAAA;;gBAGpC,IAAImE,yBAAAA,CAAejE,SAAcyB,CAAAA,IAAAA,qBAAAA,CAAWzB,SAAY,CAAA,EAAA;AACtD,oBAAA,MAAMY,iBAAoBZ,GAAAA,SAAAA;AAC1B,oBAAA,MAAMa,mBAAsBD,GAAAA,iBAAAA,CAAkBE,UAAU,IAAIF,kBAAkBG,QAAQ;oBAEtF,IAAIF,mBAAAA,KAAwB,IAAQA,IAAAA,mBAAAA,KAAwBe,SAAW,EAAA;wBACrE,IAAI,CAACjB,aAAa,CAACX,SAAAA,CAAAA;AACrB;AACF;AACF,aAAA,CAAA;YAEAqE,aAAc/C,CAAAA,OAAO,CAAC,CAACxB,GAAAA,GAAAA;gBACrB,MAAMN,YAAAA,GAAeoE,aAAa,CAAC9D,GAAI,CAAA;gBACvC,MAAMP,YAAAA,GAAeuE,aAAa,CAAChE,GAAI,CAAA;AAEvC,gBAAA,IAAI,CAAC2B,qBAAAA,CAAWjC,YAAiBiC,CAAAA,IAAAA,qBAAAA,CAAWlC,YAAe,CAAA,EAAA;oBACzD,OAAO,IAAI,CAACM,WAAW,CAAC;AACtBC,wBAAAA,GAAAA;AACAC,wBAAAA,GAAAA;wBACAC,SAAWT,EAAAA;AACb,qBAAA,CAAA;AACF;AAEA,gBAAA,IAAIkC,qBAAWjC,CAAAA,YAAAA,CAAAA,IAAiB,CAACiC,qBAAAA,CAAWlC,YAAe,CAAA,EAAA;oBACzD,OAAO,IAAI,CAACoB,aAAa,CAACnB,YAAAA,CAAAA;AAC5B;gBAEA,IAAIiC,qBAAAA,CAAWjC,YAAiBiC,CAAAA,IAAAA,qBAAAA,CAAWlC,YAAe,CAAA,EAAA;AACxD,oBAAA,MAAMqB,iBAAoBrB,GAAAA,YAAAA;AAC1B,oBAAA,MAAMgF,oBAAuB/E,GAAAA,YAAAA;AAC7B,oBAAA,MAAMgF,sBACJD,GAAAA,oBAAAA,CAAqBzD,UAAU,IAAIyD,qBAAqBxD,QAAQ;AAElE,oBAAA,MAAM0D,YAAejF,GAAAA,YAAAA,CAAamC,QAAQ,KAAKf,kBAAkBe,QAAQ;oBACzE,MAAM+C,yBAAAA,GACJF,sBAA2B5D,KAAAA,iBAAAA,CAAkBN,eAAe;oBAE9D,IAAI,CAACmE,gBAAgBC,yBAA2B,EAAA;wBAC9C,IAAI,CAAC/D,aAAa,CAACnB,YAAAA,CAAAA;AACrB;;AAGAF,oBAAAA,4BAAAA,CAA6BsB,iBAAmBpB,EAAAA,YAAAA,CAAAA;;oBAGhD,MAAMmF,qBAAAA,GAAwBb,aAAa,CAAChE,GAAI,CAAA;AAChD,oBAAA,MAAM8E,mBACJD,qBAAsBE,CAAAA,UAAU,KAAKjD,SACrC+C,IAAAA,qBAAAA,CAAsBE,UAAU,KAAK,IAAA;oBAEvC,IAAIrF,YAAAA,CAAaqF,UAAU,EAAE;AAC3B,wBAAA,IAAID,gBAAkB,EAAA;;4BAEpBhE,iBAAkBiE,CAAAA,UAAU,GAAGF,qBAAAA,CAAsBE,UAAU;yBAC1D,MAAA;;AAEL,4BAAA,OAAOjE,kBAAkBiE,UAAU;AACrC;AACF,qBAAA,MAAO,IAAID,gBAAkB,EAAA;;wBAE3BhE,iBAAkBiE,CAAAA,UAAU,GAAGF,qBAAAA,CAAsBE,UAAU;AACjE;oBAEA,IAAIN,oBAAAA,CAAqBzD,UAAU,EAAE;AACnCF,wBAAAA,iBAAAA,CAAkBiB,QAAQ,GAAG,IAAA;qBACxB,MAAA,IAAI0C,oBAAqBxD,CAAAA,QAAQ,EAAE;AACxCH,wBAAAA,iBAAAA,CAAkBiB,QAAQ,GAAG,KAAA;AAC/B;oBAEA,OAAO,IAAI,CAAChC,WAAW,CAAC;AACtBC,wBAAAA,GAAAA;AACAC,wBAAAA,GAAAA;wBACAC,SAAWY,EAAAA;AACb,qBAAA,CAAA;AACF;AACF,aAAA,CAAA;;YAGAsD,OAAQ5C,CAAAA,OAAO,CAAC,CAACxB,GAAAA,GAAAA;gBACf,MAAME,SAAAA,GAAY8D,aAAa,CAAChE,GAAI,CAAA;AAEpC,gBAAA,IAAI2B,sBAAWzB,SAAY,CAAA,EAAA;AACzB,oBAAA,MAAMY,iBAAoBZ,GAAAA,SAAAA;oBAC1B,IAAI;AAAC,wBAAA,YAAA;AAAc,wBAAA;AAAW,qBAAA,CAAC0B,QAAQ,CAACd,iBAAkBe,CAAAA,QAAQ,CAAG,EAAA;AACnE,wBAAA,IACEf,kBAAkBP,MAAM,KAAKN,OAC7Ba,iBAAkBN,CAAAA,eAAe,KAAKsB,SACtC,EAAA;;AAEA,4BAAA,MAAMtB,eAAkBwD,GAAAA,aAAa,CACnClD,iBAAAA,CAAkBN,eAAe,CAClC;4BAED,IAAIA,eAAAA,CAAgBuB,QAAQ,KAAKD,SAAW,EAAA;AAC1ChB,gCAAAA,iBAAAA,CAAkBiB,QAAQ,GAAG,IAAA;6BACxB,MAAA;AACLjB,gCAAAA,iBAAAA,CAAkBiB,QAAQ,GAAG,KAAA;AAC/B;yBACK,MAAA;AACLjB,4BAAAA,iBAAAA,CAAkBiB,QAAQ,GAAG,IAAA;AAC/B;AACF;oBAEA,IAAI,CAAChC,WAAW,CAAC;AACfC,wBAAAA,GAAAA;AACAC,wBAAAA,GAAAA;wBACAC,SAAWY,EAAAA;AACb,qBAAA,CAAA;AACF;AACF,aAAA,CAAA;AAEAO,YAAAA,WAAAA,CACGyB,GAAG,CAAC,MAAQb,EAAAA,KAAAA,CAAMe,IAAI,IAAI3B,WAAY0C,CAAAA,MAAM,CAACf,IAAI,CACjDF,CAAAA,GAAG,CAAC;AAAC,gBAAA,MAAA;AAAQ,gBAAA;AAAc,aAAA,EAAEb,KAAMsB,CAAAA,WAAW,CAC9CT,CAAAA,GAAG,CAAC;AAAC,gBAAA,MAAA;AAAQ,gBAAA;AAAc,aAAA,EAAEb,KAAMuB,CAAAA,WAAW,CAC9CV,CAAAA,GAAG,CAAC,SAAW,EAAA;AACd,gBAAA,GAAIb,KAAMwB,CAAAA,OAAO,IAAI,EAAE;AACvBC,gBAAAA,eAAAA,EAAiBzB,MAAMyB;aAExBZ,CAAAA,CAAAA,GAAG,CAAC,eAAA,EAAiBb,KAAM0B,CAAAA,aAAa,CACxClC,CAAAA,aAAa,CAAC,IAAI,CAACC,iBAAiB,CAACsC,aAAAA,CAAAA,CAAAA;YAExC,OAAO3C,WAAAA;AACT,SAAA;AAEA2D,QAAAA,iBAAAA,CAAAA,CAA6B/E,GAAW,EAAA;AACtC,YAAA,IAAI,CAAC,IAAI,CAACI,YAAY,CAACF,GAAG,CAACF,GAAM,CAAA,EAAA;AAC/B,gBAAA,MAAM,IAAIX,gBAAiB,CAAA,sBAAA,CAAA;AAC7B;AAEA,YAAA,IAAI,CAAC2F,UAAU,CAACzD,OAAO,CAAC,CAAC0D,KAAAA,GAAAA;AACvBA,gBAAAA,KAAAA,CAAMC,iBAAiB,CAAClF,GAAAA,CAAAA;AAC1B,aAAA,CAAA;AAEA,YAAA,IAAI,CAACI,YAAY,CAACmB,OAAO,CAAC,CAAC4D,EAAAA,GAAAA;AACzBA,gBAAAA,EAAAA,CAAGD,iBAAiB,CAAClF,GAAAA,CAAAA;AACvB,aAAA,CAAA;AAEA,YAAA,OAAO,IAAI,CAACI,YAAY,CAACC,GAAG,CAACL,KAAKoF,MAAM,EAAA;AAC1C;AACF,KAAA;AACF;AAEA;;;;;;AAMC,IACD,MAAMnD,oBAAAA,GAAuB,CAAC,EAC5BG,YAAY,EAGb,GAA+B,CAAC,KAAK,EAAEA,YAAAA,CAAa,CAAC,EAAEA,aAAa,CAAC;AAEtE,MAAMzB,gBAAmB,GAAA,CAAC,EACxBZ,GAAG,EACHE,SAAS,EACTD,GAAG,EACHO,eAAAA,GAAkB,EAAE,EAMrB,GAAA;AACC,IAAA,MAAM8E,IAAY,GAAA;QAChBC,IAAM,EAAA,UAAA;QACNhF,MAAQN,EAAAA,GAAAA;QACRuF,OAAShF,EAAAA,eAAAA,CAAgBgF,OAAO,IAAI1D,SAAAA;QACpC6B,aAAenD,EAAAA,eAAAA,CAAgBmD,aAAa,IAAI7B,SAAAA;;;QAGhD,GAAItB,eAAAA,CAAgBuE,UAAU,IAAI;AAAEA,YAAAA,UAAAA,EAAYvE,gBAAgBuE;;AAClE,KAAA;AAEA,IAAA,OAAQ7E,UAAU2B,QAAQ;QACxB,KAAK,UAAA;AAAY,YAAA;AACfyD,gBAAAA,IAAAA,CAAKzD,QAAQ,GAAG,UAAA;gBAEhB,IAAI3B,SAAAA,CAAU6B,QAAQ,EAAE;AACtBuD,oBAAAA,IAAAA,CAAKrE,QAAQ,GAAGjB,GAAAA;iBACX,MAAA;AACLsF,oBAAAA,IAAAA,CAAKtE,UAAU,GAAGhB,GAAAA;AACpB;AACA,gBAAA;AACF;QACA,KAAK,WAAA;AAAa,YAAA;AAChBsF,gBAAAA,IAAAA,CAAKzD,QAAQ,GAAG,WAAA;AAChByD,gBAAAA,IAAAA,CAAKtE,UAAU,GAAGhB,GAAAA;AAClB,gBAAA;AACF;QACA,KAAK,WAAA;AAAa,YAAA;AAChBsF,gBAAAA,IAAAA,CAAKzD,QAAQ,GAAG,WAAA;AAChByD,gBAAAA,IAAAA,CAAKrE,QAAQ,GAAGjB,GAAAA;AAChB,gBAAA;AACF;QACA,KAAK,YAAA;AAAc,YAAA;AACjBsF,gBAAAA,IAAAA,CAAKzD,QAAQ,GAAG,YAAA;gBAEhB,IAAI3B,SAAAA,CAAU6B,QAAQ,EAAE;AACtBuD,oBAAAA,IAAAA,CAAKrE,QAAQ,GAAGjB,GAAAA;iBACX,MAAA;AACLsF,oBAAAA,IAAAA,CAAKtE,UAAU,GAAGhB,GAAAA;AACpB;AAEA,gBAAA;AACF;AAEF;;IAGA,MAAM,EAAEuF,IAAI,EAAE1D,QAAQ,EAAEtB,MAAM,EAAE,GAAGkF,WAAAA,EAAa,GAAGH,IAAAA;AAEnD,IAAA,MAAMI,MAAS,GAAA;AACbH,QAAAA,IAAAA;AACA1D,QAAAA,QAAAA;AACAtB,QAAAA,MAAAA;AACA,QAAA,GAAGkF;AACL,KAAA;IAEA,OAAOC,MAAAA;AACT,CAAA;;;;"}