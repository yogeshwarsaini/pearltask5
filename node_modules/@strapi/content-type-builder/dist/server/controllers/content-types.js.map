{"version":3,"file":"content-types.js","sources":["../../../server/src/controllers/content-types.ts"],"sourcesContent":["import _ from 'lodash';\nimport type { Context } from 'koa';\nimport type {} from 'koa-body';\nimport type { Internal } from '@strapi/types';\nimport { getService } from '../utils';\nimport {\n  validateContentTypeInput,\n  validateUpdateContentTypeInput,\n  validateKind,\n} from './validation/content-type';\n\nexport default {\n  async getContentTypes(ctx: Context) {\n    const { kind } = ctx.query;\n\n    try {\n      await validateKind(kind);\n    } catch (error) {\n      return ctx.send({ error }, 400);\n    }\n\n    const contentTypeService = getService('content-types');\n\n    const contentTypes = Object.keys(strapi.contentTypes)\n      .filter(\n        (uid) =>\n          !kind ||\n          _.get(strapi.contentTypes[uid as Internal.UID.ContentType], 'kind', 'collectionType') ===\n            kind\n      )\n      .map((uid) =>\n        contentTypeService.formatContentType(strapi.contentTypes[uid as Internal.UID.ContentType])\n      );\n\n    ctx.send({\n      data: contentTypes,\n    });\n  },\n\n  getContentType(ctx: Context) {\n    const { uid } = ctx.params;\n\n    const contentType = strapi.contentTypes[uid];\n\n    if (!contentType) {\n      return ctx.send({ error: 'contentType.notFound' }, 404);\n    }\n\n    const contentTypeService = getService('content-types');\n\n    ctx.send({ data: contentTypeService.formatContentType(contentType) });\n  },\n\n  async createContentType(ctx: Context) {\n    const body = ctx.request.body as any;\n\n    try {\n      await validateContentTypeInput(body);\n    } catch (error) {\n      return ctx.send({ error }, 400);\n    }\n\n    try {\n      strapi.reload.isWatching = false;\n\n      const contentTypeService = getService('content-types');\n\n      const contentType = await contentTypeService.createContentType({\n        contentType: body.contentType,\n        components: body.components,\n      });\n\n      const metricsPayload = {\n        eventProperties: {\n          kind: contentType.kind,\n        },\n      };\n\n      if (_.isEmpty(strapi.apis)) {\n        await strapi.telemetry.send('didCreateFirstContentType', metricsPayload);\n      } else {\n        await strapi.telemetry.send('didCreateContentType', metricsPayload);\n      }\n\n      setImmediate(() => strapi.reload());\n\n      ctx.send({ data: { uid: contentType.uid } }, 201);\n    } catch (err) {\n      strapi.log.error(err);\n      await strapi.telemetry.send('didNotCreateContentType', {\n        eventProperties: { error: (err as Error).message || err },\n      });\n      ctx.send({ error: (err as Error).message || 'Unknown error' }, 400);\n    }\n  },\n\n  async updateContentType(ctx: Context) {\n    const { uid } = ctx.params;\n    const body = ctx.request.body as any;\n\n    if (!_.has(strapi.contentTypes, uid)) {\n      return ctx.send({ error: 'contentType.notFound' }, 404);\n    }\n\n    try {\n      await validateUpdateContentTypeInput(body);\n    } catch (error) {\n      return ctx.send({ error }, 400);\n    }\n\n    try {\n      strapi.reload.isWatching = false;\n\n      const contentTypeService = getService('content-types');\n\n      const component = await contentTypeService.editContentType(uid, {\n        contentType: body.contentType,\n        components: body.components,\n      });\n\n      setImmediate(() => strapi.reload());\n\n      ctx.send({ data: { uid: component.uid } }, 201);\n    } catch (error) {\n      strapi.log.error(error);\n      ctx.send({ error: (error as Error)?.message || 'Unknown error' }, 400);\n    }\n  },\n\n  async deleteContentType(ctx: Context) {\n    const { uid } = ctx.params;\n\n    if (!_.has(strapi.contentTypes, uid)) {\n      return ctx.send({ error: 'contentType.notFound' }, 404);\n    }\n\n    try {\n      strapi.reload.isWatching = false;\n\n      const contentTypeService = getService('content-types');\n\n      const component = await contentTypeService.deleteContentType(uid);\n\n      setImmediate(() => strapi.reload());\n\n      ctx.send({ data: { uid: component.uid } });\n    } catch (error) {\n      strapi.log.error(error);\n      ctx.send({ error: (error as Error)?.message || 'Unknown error' }, 400);\n    }\n  },\n};\n"],"names":["getContentTypes","ctx","kind","query","validateKind","error","send","contentTypeService","getService","contentTypes","Object","keys","strapi","filter","uid","_","get","map","formatContentType","data","getContentType","params","contentType","createContentType","body","request","validateContentTypeInput","reload","isWatching","components","metricsPayload","eventProperties","isEmpty","apis","telemetry","setImmediate","err","log","message","updateContentType","has","validateUpdateContentTypeInput","component","editContentType","deleteContentType"],"mappings":";;;;;;AAWA,mBAAe;AACb,IAAA,MAAMA,iBAAgBC,GAAY,EAAA;AAChC,QAAA,MAAM,EAAEC,IAAI,EAAE,GAAGD,IAAIE,KAAK;QAE1B,IAAI;AACF,YAAA,MAAMC,wBAAaF,CAAAA,IAAAA,CAAAA;AACrB,SAAA,CAAE,OAAOG,KAAO,EAAA;YACd,OAAOJ,GAAAA,CAAIK,IAAI,CAAC;AAAED,gBAAAA;aAAS,EAAA,GAAA,CAAA;AAC7B;AAEA,QAAA,MAAME,qBAAqBC,gBAAW,CAAA,eAAA,CAAA;AAEtC,QAAA,MAAMC,YAAeC,GAAAA,MAAAA,CAAOC,IAAI,CAACC,OAAOH,YAAY,CAAA,CACjDI,MAAM,CACL,CAACC,GACC,GAAA,CAACZ,IACDa,IAAAA,CAAAA,CAAEC,GAAG,CAACJ,MAAAA,CAAOH,YAAY,CAACK,GAAgC,CAAA,EAAE,MAAQ,EAAA,gBAAA,CAAA,KAClEZ,MAELe,GAAG,CAAC,CAACH,GAAAA,GACJP,mBAAmBW,iBAAiB,CAACN,MAAOH,CAAAA,YAAY,CAACK,GAAgC,CAAA,CAAA,CAAA;AAG7Fb,QAAAA,GAAAA,CAAIK,IAAI,CAAC;YACPa,IAAMV,EAAAA;AACR,SAAA,CAAA;AACF,KAAA;AAEAW,IAAAA,cAAAA,CAAAA,CAAenB,GAAY,EAAA;AACzB,QAAA,MAAM,EAAEa,GAAG,EAAE,GAAGb,IAAIoB,MAAM;AAE1B,QAAA,MAAMC,WAAcV,GAAAA,MAAAA,CAAOH,YAAY,CAACK,GAAI,CAAA;AAE5C,QAAA,IAAI,CAACQ,WAAa,EAAA;YAChB,OAAOrB,GAAAA,CAAIK,IAAI,CAAC;gBAAED,KAAO,EAAA;aAA0B,EAAA,GAAA,CAAA;AACrD;AAEA,QAAA,MAAME,qBAAqBC,gBAAW,CAAA,eAAA,CAAA;AAEtCP,QAAAA,GAAAA,CAAIK,IAAI,CAAC;YAAEa,IAAMZ,EAAAA,kBAAAA,CAAmBW,iBAAiB,CAACI,WAAAA;AAAa,SAAA,CAAA;AACrE,KAAA;AAEA,IAAA,MAAMC,mBAAkBtB,GAAY,EAAA;AAClC,QAAA,MAAMuB,IAAOvB,GAAAA,GAAAA,CAAIwB,OAAO,CAACD,IAAI;QAE7B,IAAI;AACF,YAAA,MAAME,oCAAyBF,CAAAA,IAAAA,CAAAA;AACjC,SAAA,CAAE,OAAOnB,KAAO,EAAA;YACd,OAAOJ,GAAAA,CAAIK,IAAI,CAAC;AAAED,gBAAAA;aAAS,EAAA,GAAA,CAAA;AAC7B;QAEA,IAAI;YACFO,MAAOe,CAAAA,MAAM,CAACC,UAAU,GAAG,KAAA;AAE3B,YAAA,MAAMrB,qBAAqBC,gBAAW,CAAA,eAAA,CAAA;AAEtC,YAAA,MAAMc,WAAc,GAAA,MAAMf,kBAAmBgB,CAAAA,iBAAiB,CAAC;AAC7DD,gBAAAA,WAAAA,EAAaE,KAAKF,WAAW;AAC7BO,gBAAAA,UAAAA,EAAYL,KAAKK;AACnB,aAAA,CAAA;AAEA,YAAA,MAAMC,cAAiB,GAAA;gBACrBC,eAAiB,EAAA;AACf7B,oBAAAA,IAAAA,EAAMoB,YAAYpB;AACpB;AACF,aAAA;AAEA,YAAA,IAAIa,CAAEiB,CAAAA,OAAO,CAACpB,MAAAA,CAAOqB,IAAI,CAAG,EAAA;AAC1B,gBAAA,MAAMrB,MAAOsB,CAAAA,SAAS,CAAC5B,IAAI,CAAC,2BAA6BwB,EAAAA,cAAAA,CAAAA;aACpD,MAAA;AACL,gBAAA,MAAMlB,MAAOsB,CAAAA,SAAS,CAAC5B,IAAI,CAAC,sBAAwBwB,EAAAA,cAAAA,CAAAA;AACtD;YAEAK,YAAa,CAAA,IAAMvB,OAAOe,MAAM,EAAA,CAAA;AAEhC1B,YAAAA,GAAAA,CAAIK,IAAI,CAAC;gBAAEa,IAAM,EAAA;AAAEL,oBAAAA,GAAAA,EAAKQ,YAAYR;AAAI;aAAK,EAAA,GAAA,CAAA;AAC/C,SAAA,CAAE,OAAOsB,GAAK,EAAA;YACZxB,MAAOyB,CAAAA,GAAG,CAAChC,KAAK,CAAC+B,GAAAA,CAAAA;AACjB,YAAA,MAAMxB,MAAOsB,CAAAA,SAAS,CAAC5B,IAAI,CAAC,yBAA2B,EAAA;gBACrDyB,eAAiB,EAAA;oBAAE1B,KAAO,EAAC+B,GAAcE,CAAAA,OAAO,IAAIF;AAAI;AAC1D,aAAA,CAAA;AACAnC,YAAAA,GAAAA,CAAIK,IAAI,CAAC;gBAAED,KAAO,EAAC+B,GAAcE,CAAAA,OAAO,IAAI;aAAmB,EAAA,GAAA,CAAA;AACjE;AACF,KAAA;AAEA,IAAA,MAAMC,mBAAkBtC,GAAY,EAAA;AAClC,QAAA,MAAM,EAAEa,GAAG,EAAE,GAAGb,IAAIoB,MAAM;AAC1B,QAAA,MAAMG,IAAOvB,GAAAA,GAAAA,CAAIwB,OAAO,CAACD,IAAI;AAE7B,QAAA,IAAI,CAACT,CAAEyB,CAAAA,GAAG,CAAC5B,MAAOH,CAAAA,YAAY,EAAEK,GAAM,CAAA,EAAA;YACpC,OAAOb,GAAAA,CAAIK,IAAI,CAAC;gBAAED,KAAO,EAAA;aAA0B,EAAA,GAAA,CAAA;AACrD;QAEA,IAAI;AACF,YAAA,MAAMoC,0CAA+BjB,CAAAA,IAAAA,CAAAA;AACvC,SAAA,CAAE,OAAOnB,KAAO,EAAA;YACd,OAAOJ,GAAAA,CAAIK,IAAI,CAAC;AAAED,gBAAAA;aAAS,EAAA,GAAA,CAAA;AAC7B;QAEA,IAAI;YACFO,MAAOe,CAAAA,MAAM,CAACC,UAAU,GAAG,KAAA;AAE3B,YAAA,MAAMrB,qBAAqBC,gBAAW,CAAA,eAAA,CAAA;AAEtC,YAAA,MAAMkC,SAAY,GAAA,MAAMnC,kBAAmBoC,CAAAA,eAAe,CAAC7B,GAAK,EAAA;AAC9DQ,gBAAAA,WAAAA,EAAaE,KAAKF,WAAW;AAC7BO,gBAAAA,UAAAA,EAAYL,KAAKK;AACnB,aAAA,CAAA;YAEAM,YAAa,CAAA,IAAMvB,OAAOe,MAAM,EAAA,CAAA;AAEhC1B,YAAAA,GAAAA,CAAIK,IAAI,CAAC;gBAAEa,IAAM,EAAA;AAAEL,oBAAAA,GAAAA,EAAK4B,UAAU5B;AAAI;aAAK,EAAA,GAAA,CAAA;AAC7C,SAAA,CAAE,OAAOT,KAAO,EAAA;YACdO,MAAOyB,CAAAA,GAAG,CAAChC,KAAK,CAACA,KAAAA,CAAAA;AACjBJ,YAAAA,GAAAA,CAAIK,IAAI,CAAC;gBAAED,KAAO,EAACA,OAAiBiC,OAAW,IAAA;aAAmB,EAAA,GAAA,CAAA;AACpE;AACF,KAAA;AAEA,IAAA,MAAMM,mBAAkB3C,GAAY,EAAA;AAClC,QAAA,MAAM,EAAEa,GAAG,EAAE,GAAGb,IAAIoB,MAAM;AAE1B,QAAA,IAAI,CAACN,CAAEyB,CAAAA,GAAG,CAAC5B,MAAOH,CAAAA,YAAY,EAAEK,GAAM,CAAA,EAAA;YACpC,OAAOb,GAAAA,CAAIK,IAAI,CAAC;gBAAED,KAAO,EAAA;aAA0B,EAAA,GAAA,CAAA;AACrD;QAEA,IAAI;YACFO,MAAOe,CAAAA,MAAM,CAACC,UAAU,GAAG,KAAA;AAE3B,YAAA,MAAMrB,qBAAqBC,gBAAW,CAAA,eAAA,CAAA;AAEtC,YAAA,MAAMkC,SAAY,GAAA,MAAMnC,kBAAmBqC,CAAAA,iBAAiB,CAAC9B,GAAAA,CAAAA;YAE7DqB,YAAa,CAAA,IAAMvB,OAAOe,MAAM,EAAA,CAAA;AAEhC1B,YAAAA,GAAAA,CAAIK,IAAI,CAAC;gBAAEa,IAAM,EAAA;AAAEL,oBAAAA,GAAAA,EAAK4B,UAAU5B;AAAI;AAAE,aAAA,CAAA;AAC1C,SAAA,CAAE,OAAOT,KAAO,EAAA;YACdO,MAAOyB,CAAAA,GAAG,CAAChC,KAAK,CAACA,KAAAA,CAAAA;AACjBJ,YAAAA,GAAAA,CAAIK,IAAI,CAAC;gBAAED,KAAO,EAACA,OAAiBiC,OAAW,IAAA;aAAmB,EAAA,GAAA,CAAA;AACpE;AACF;AACF,CAAE;;;;"}