{"version":3,"file":"schema.js","sources":["../../../server/src/controllers/schema.ts"],"sourcesContent":["import type { Context } from 'koa';\nimport { isEmpty } from 'lodash/fp';\n\nimport { getService } from '../utils';\nimport { validateUpdateSchema } from './validation/schema';\n\nexport default () => {\n  const internals = {\n    isUpdating: false,\n  };\n\n  return {\n    async getSchema(ctx: Context) {\n      const schema = await getService('schema').getSchema();\n\n      ctx.send({ data: schema });\n    },\n\n    async updateSchema(ctx: Context) {\n      if (internals.isUpdating === true) {\n        return ctx.conflict('Schema update is already in progress.');\n      }\n\n      try {\n        const { data } = await validateUpdateSchema(ctx.request.body);\n\n        if (isEmpty(data.components) && isEmpty(data.contentTypes)) {\n          ctx.body = {};\n          return;\n        }\n\n        internals.isUpdating = true;\n        strapi.reload.isWatching = false;\n\n        await getService('schema').updateSchema(data);\n\n        // NOTE: we do not set isUpdating to false here.\n        // We want to wait for the server to restart to get the isUpdate = false only\n        setImmediate(() => {\n          strapi.reload();\n        });\n\n        ctx.body = {};\n      } catch (error) {\n        internals.isUpdating = false;\n        const errorMessage = error instanceof Error ? error.message : String(error);\n        return ctx.send({ error: errorMessage }, 400);\n      }\n    },\n\n    async getUpdateSchemaStatus(ctx: Context) {\n      ctx.send({ data: { isUpdating: internals.isUpdating } });\n    },\n  };\n};\n"],"names":["internals","isUpdating","getSchema","ctx","schema","getService","send","data","updateSchema","conflict","validateUpdateSchema","request","body","isEmpty","components","contentTypes","strapi","reload","isWatching","setImmediate","error","errorMessage","Error","message","String","getUpdateSchemaStatus"],"mappings":";;;;;;AAMA,aAAe,CAAA,IAAA;AACb,IAAA,MAAMA,SAAY,GAAA;QAChBC,UAAY,EAAA;AACd,KAAA;IAEA,OAAO;AACL,QAAA,MAAMC,WAAUC,GAAY,EAAA;AAC1B,YAAA,MAAMC,MAAS,GAAA,MAAMC,gBAAW,CAAA,QAAA,CAAA,CAAUH,SAAS,EAAA;AAEnDC,YAAAA,GAAAA,CAAIG,IAAI,CAAC;gBAAEC,IAAMH,EAAAA;AAAO,aAAA,CAAA;AAC1B,SAAA;AAEA,QAAA,MAAMI,cAAaL,GAAY,EAAA;YAC7B,IAAIH,SAAAA,CAAUC,UAAU,KAAK,IAAM,EAAA;gBACjC,OAAOE,GAAAA,CAAIM,QAAQ,CAAC,uCAAA,CAAA;AACtB;YAEA,IAAI;gBACF,MAAM,EAAEF,IAAI,EAAE,GAAG,MAAMG,6BAAqBP,CAAAA,GAAAA,CAAIQ,OAAO,CAACC,IAAI,CAAA;AAE5D,gBAAA,IAAIC,WAAQN,IAAKO,CAAAA,UAAU,KAAKD,UAAQN,CAAAA,IAAAA,CAAKQ,YAAY,CAAG,EAAA;oBAC1DZ,GAAIS,CAAAA,IAAI,GAAG,EAAC;AACZ,oBAAA;AACF;AAEAZ,gBAAAA,SAAAA,CAAUC,UAAU,GAAG,IAAA;gBACvBe,MAAOC,CAAAA,MAAM,CAACC,UAAU,GAAG,KAAA;gBAE3B,MAAMb,gBAAAA,CAAW,QAAUG,CAAAA,CAAAA,YAAY,CAACD,IAAAA,CAAAA;;;gBAIxCY,YAAa,CAAA,IAAA;AACXH,oBAAAA,MAAAA,CAAOC,MAAM,EAAA;AACf,iBAAA,CAAA;gBAEAd,GAAIS,CAAAA,IAAI,GAAG,EAAC;AACd,aAAA,CAAE,OAAOQ,KAAO,EAAA;AACdpB,gBAAAA,SAAAA,CAAUC,UAAU,GAAG,KAAA;AACvB,gBAAA,MAAMoB,eAAeD,KAAiBE,YAAAA,KAAAA,GAAQF,KAAMG,CAAAA,OAAO,GAAGC,MAAOJ,CAAAA,KAAAA,CAAAA;gBACrE,OAAOjB,GAAAA,CAAIG,IAAI,CAAC;oBAAEc,KAAOC,EAAAA;iBAAgB,EAAA,GAAA,CAAA;AAC3C;AACF,SAAA;AAEA,QAAA,MAAMI,uBAAsBtB,GAAY,EAAA;AACtCA,YAAAA,GAAAA,CAAIG,IAAI,CAAC;gBAAEC,IAAM,EAAA;AAAEN,oBAAAA,UAAAA,EAAYD,UAAUC;AAAW;AAAE,aAAA,CAAA;AACxD;AACF,KAAA;AACF,CAAA;;;;"}