{"version":3,"file":"relations.mjs","sources":["../../../../server/src/controllers/validation/relations.ts"],"sourcesContent":["import { isUndefined } from 'lodash/fp';\nimport { yup } from '@strapi/utils';\nimport type { TestContext, TestFunction } from 'yup';\nimport type { Schema, UID } from '@strapi/types';\nimport { typeKinds, coreUids } from '../../services/constants';\nimport { isValidName } from './common';\n\nconst STRAPI_USER_RELATIONS = ['oneToOne', 'oneToMany'];\n\nconst isValidRelation = (validNatures: ReadonlyArray<string>): TestFunction<string | undefined> =>\n  function (this: TestContext, value) {\n    // NOTE: In case of an undefined value, delegate the check to .required()\n    if (value === undefined) {\n      return true;\n    }\n\n    if (this.parent.target === coreUids.STRAPI_USER) {\n      if (!validNatures.includes(value) || !isUndefined(this.parent.targetAttribute)) {\n        return this.createError({\n          path: this.path,\n          message: `must be one of the following values: ${STRAPI_USER_RELATIONS.join(', ')}`,\n        });\n      }\n    }\n\n    return validNatures.includes(value)\n      ? true\n      : this.createError({\n          path: this.path,\n          message: `must be one of the following values: ${validNatures.join(', ')}`,\n        });\n  };\n\nexport const getRelationValidator = (\n  attribute: Schema.Attribute.Relation,\n  allowedRelations: ReadonlyArray<string>\n) => {\n  const contentTypesUIDs = Object.keys(strapi.contentTypes)\n    .filter((key) => strapi.contentTypes[key as UID.ContentType].kind === typeKinds.COLLECTION_TYPE)\n    .filter((key) => !key.startsWith(coreUids.PREFIX) || key === coreUids.STRAPI_USER)\n    .concat(['__self__', '__contentType__']);\n\n  const base = {\n    type: yup.string().oneOf(['relation']).required(),\n    relation: yup.string().test('isValidRelation', isValidRelation(allowedRelations)).required(),\n    configurable: yup.boolean().nullable(),\n    private: yup.boolean().nullable(),\n    pluginOptions: yup.object(),\n  };\n\n  switch (attribute.relation) {\n    case 'oneToOne':\n    case 'oneToMany':\n    case 'manyToOne':\n    case 'manyToMany':\n    case 'morphOne':\n    case 'morphMany': {\n      return yup.object({\n        ...base,\n        target: yup.string().oneOf(contentTypesUIDs).required(),\n        targetAttribute: yup.string().test(isValidName).nullable(),\n      });\n    }\n    case 'morphToOne':\n    case 'morphToMany':\n    default: {\n      return yup.object({ ...base });\n    }\n  }\n};\n"],"names":["STRAPI_USER_RELATIONS","isValidRelation","validNatures","value","undefined","parent","target","coreUids","STRAPI_USER","includes","isUndefined","targetAttribute","createError","path","message","join","getRelationValidator","attribute","allowedRelations","contentTypesUIDs","Object","keys","strapi","contentTypes","filter","key","kind","typeKinds","COLLECTION_TYPE","startsWith","PREFIX","concat","base","type","yup","string","oneOf","required","relation","test","configurable","boolean","nullable","private","pluginOptions","object","isValidName"],"mappings":"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"}