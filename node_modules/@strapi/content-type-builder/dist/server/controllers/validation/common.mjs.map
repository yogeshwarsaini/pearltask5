{"version":3,"file":"common.mjs","sources":["../../../../server/src/controllers/validation/common.ts"],"sourcesContent":["/* eslint-disable no-template-curly-in-string */\nimport { yup, strings } from '@strapi/utils';\nimport _ from 'lodash';\nimport { TestConfig } from 'yup';\n\nexport const validators = {\n  required: yup.boolean(),\n  unique: yup.boolean(),\n  minLength: yup.number().integer().positive(),\n  maxLength: yup.number().integer().positive(),\n};\n\nexport const NAME_REGEX = /^[A-Za-z][_0-9A-Za-z]*$/;\nexport const COLLECTION_NAME_REGEX = /^[A-Za-z][-_0-9A-Za-z]*$/;\nexport const CATEGORY_NAME_REGEX = /^[A-Za-z][-_0-9A-Za-z]*$/;\nexport const ICON_REGEX = /^[A-Za-z0-9][-A-Za-z0-9]*$/;\nexport const UID_REGEX = /^[A-Za-z0-9-_.~]*$/;\nexport const KEBAB_BASE_REGEX = /^[a-z0-9]+(?:-[a-z0-9]+)*$/;\n\nexport type CommonTestConfig = TestConfig<unknown | undefined, Record<string, unknown>>;\n\nexport const isValidName: CommonTestConfig = {\n  name: 'isValidName',\n  message: `\\${path} must match the following regex: ${NAME_REGEX}`,\n  test: (val: unknown) => val === '' || NAME_REGEX.test(val as string),\n};\n\nexport const isValidIcon: CommonTestConfig = {\n  name: 'isValidIcon',\n  message: `\\${path} is not a valid icon name. Make sure your icon name starts with an alphanumeric character and only includes alphanumeric characters or dashes.`,\n  test: (val) => val === '' || ICON_REGEX.test(val as string),\n};\n\nexport const isValidUID: CommonTestConfig = {\n  name: 'isValidUID',\n  message: `\\${path} must match the following regex: ${UID_REGEX}`,\n  test: (val) => val === '' || UID_REGEX.test(val as string),\n};\n\nexport const isValidCategoryName: CommonTestConfig = {\n  name: 'isValidCategoryName',\n  message: `\\${path} must match the following regex: ${CATEGORY_NAME_REGEX}`,\n  test: (val) => val === '' || CATEGORY_NAME_REGEX.test(val as string),\n};\n\nexport const isValidCollectionName: CommonTestConfig = {\n  name: 'isValidCollectionName',\n  message: `\\${path} must match the following regex: ${COLLECTION_NAME_REGEX}`,\n  test: (val) => val === '' || COLLECTION_NAME_REGEX.test(val as string),\n};\n\nexport const isValidKey = (key: string): CommonTestConfig => ({\n  name: 'isValidKey',\n  message: `Attribute name '${key}' must match the following regex: ${NAME_REGEX}`,\n  test: () => NAME_REGEX.test(key),\n});\n\nexport const isValidEnum: CommonTestConfig = {\n  name: 'isValidEnum',\n  message: '${path} should not start with number',\n  test: (val) => val === '' || !strings.startsWithANumber(val as string),\n};\n\nexport const areEnumValuesUnique: CommonTestConfig = {\n  name: 'areEnumValuesUnique',\n  message: '${path} cannot contain duplicate values',\n  test(values) {\n    const filtered = [...new Set(values as string[])];\n\n    return filtered.length === (values as string[]).length;\n  },\n};\n\nexport const isValidRegExpPattern: CommonTestConfig = {\n  name: 'isValidRegExpPattern',\n  message: '${path} must be a valid RexExp pattern string',\n  test: (val) => val === '' || !!new RegExp(val as string),\n};\n\nexport const isValidDefaultJSON: CommonTestConfig = {\n  name: 'isValidDefaultJSON',\n  message: '${path} is not a valid JSON',\n  test(val) {\n    if (val === undefined) {\n      return true;\n    }\n\n    if (_.isNumber(val) || _.isNull(val) || _.isObject(val) || _.isArray(val)) {\n      return true;\n    }\n\n    try {\n      JSON.parse(val as string);\n\n      return true;\n    } catch (err) {\n      return false;\n    }\n  },\n};\n"],"names":["validators","required","yup","boolean","unique","minLength","number","integer","positive","maxLength","NAME_REGEX","COLLECTION_NAME_REGEX","CATEGORY_NAME_REGEX","ICON_REGEX","UID_REGEX","KEBAB_BASE_REGEX","isValidName","name","message","test","val","isValidIcon","isValidCategoryName","isValidCollectionName","isValidKey","key","isValidEnum","strings","startsWithANumber","areEnumValuesUnique","values","filtered","Set","length","isValidRegExpPattern","RegExp","isValidDefaultJSON","undefined","_","isNumber","isNull","isObject","isArray","JSON","parse","err"],"mappings":"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"}