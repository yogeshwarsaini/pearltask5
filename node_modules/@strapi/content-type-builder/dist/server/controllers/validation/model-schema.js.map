{"version":3,"file":"model-schema.js","sources":["../../../../server/src/controllers/validation/model-schema.ts"],"sourcesContent":["import { yup } from '@strapi/utils';\nimport _ from 'lodash';\nimport { snakeCase } from 'lodash/fp';\nimport { modelTypes, typeKinds } from '../../services/constants';\nimport { getService } from '../../utils';\nimport { isValidKey, isValidCollectionName } from './common';\nimport { getTypeValidator } from './types';\nimport { getRelationValidator } from './relations';\n\ntype ModelTypeInput = (typeof modelTypes)[keyof typeof modelTypes];\n\ntype CreateAttributesInput = {\n  types: ReadonlyArray<string>;\n  relations: ReadonlyArray<string>;\n  modelType?: ModelTypeInput;\n};\n\nexport const createSchema = (\n  types: CreateAttributesInput['types'],\n  relations: CreateAttributesInput['relations'],\n  { modelType }: { modelType?: ModelTypeInput } = {}\n) => {\n  const shape = {\n    description: yup.string(),\n    options: yup.object(),\n    pluginOptions: yup.object(),\n    collectionName: yup.string().nullable().test(isValidCollectionName),\n    attributes: createAttributesValidator({ types, relations, modelType }),\n    draftAndPublish: yup.boolean(),\n  } as any;\n\n  if (modelType === modelTypes.CONTENT_TYPE) {\n    shape.kind = yup.string().oneOf([typeKinds.SINGLE_TYPE, typeKinds.COLLECTION_TYPE]).nullable();\n  }\n\n  return yup.object(shape).noUnknown();\n};\n\nconst createAttributesValidator = ({ types, modelType, relations }: CreateAttributesInput) => {\n  return yup.lazy((attributes) => {\n    return yup\n      .object()\n      .shape(\n        _.mapValues(attributes, (attribute, key) => {\n          if (isForbiddenKey(key)) {\n            return forbiddenValidator();\n          }\n\n          if (isConflictingKey(key, attributes)) {\n            return conflictingKeysValidator(key);\n          }\n\n          if (attribute.type === 'relation') {\n            return getRelationValidator(attribute, relations).test(isValidKey(key));\n          }\n\n          if (_.has(attribute, 'type')) {\n            return getTypeValidator(attribute, { types, modelType, attributes }).test(\n              isValidKey(key)\n            );\n          }\n\n          return typeOrRelationValidator;\n        })\n      )\n      .required('attributes.required');\n  });\n};\n\nconst isConflictingKey = (key: string, attributes: Record<string, any>) => {\n  const snakeCaseKey = snakeCase(key);\n\n  return Object.keys(attributes).some((existingKey) => {\n    if (existingKey === key) return false; // don't compare against itself\n    return snakeCase(existingKey) === snakeCaseKey;\n  });\n};\n\nconst isForbiddenKey = (key: string) => {\n  return getService('builder').isReservedAttributeName(key);\n};\n\nconst forbiddenValidator = () => {\n  const reservedNames = [...getService('builder').getReservedNames().attributes];\n\n  return yup.mixed().test({\n    name: 'forbiddenKeys',\n    message: `Attribute keys cannot be one of ${reservedNames.join(', ')}`,\n    test: () => false,\n  });\n};\n\nconst conflictingKeysValidator = (key: string) => {\n  return yup.mixed().test({\n    name: 'conflictingKeys',\n    message: `Attribute ${key} conflicts with an existing key`,\n    test: () => false,\n  });\n};\n\nconst typeOrRelationValidator = yup.object().test({\n  name: 'mustHaveTypeOrTarget',\n  message: 'Attribute must have either a type or a target',\n  test: () => false,\n});\n"],"names":["createSchema","types","relations","modelType","shape","description","yup","string","options","object","pluginOptions","collectionName","nullable","test","isValidCollectionName","attributes","createAttributesValidator","draftAndPublish","boolean","modelTypes","CONTENT_TYPE","kind","oneOf","typeKinds","SINGLE_TYPE","COLLECTION_TYPE","noUnknown","lazy","_","mapValues","attribute","key","isForbiddenKey","forbiddenValidator","isConflictingKey","conflictingKeysValidator","type","getRelationValidator","isValidKey","has","getTypeValidator","typeOrRelationValidator","required","snakeCaseKey","snakeCase","Object","keys","some","existingKey","getService","isReservedAttributeName","reservedNames","getReservedNames","mixed","name","message","join"],"mappings":"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"}