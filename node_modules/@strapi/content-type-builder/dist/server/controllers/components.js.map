{"version":3,"file":"components.js","sources":["../../../server/src/controllers/components.ts"],"sourcesContent":["import _ from 'lodash';\nimport type { Context } from 'koa';\nimport type { UID } from '@strapi/types';\nimport { getService } from '../utils';\nimport { validateComponentInput, validateUpdateComponentInput } from './validation/component';\n\n/**\n * Components controller\n */\n\nexport default {\n  /**\n   * GET /components handler\n   * Returns a list of available components\n   * @param {Object} ctx - koa context\n   */\n  async getComponents(ctx: Context) {\n    const componentService = getService('components');\n    const componentUIDs = Object.keys(strapi.components) as UID.Component[];\n\n    const data = componentUIDs.map((uid) => {\n      return componentService.formatComponent(strapi.components[uid]);\n    });\n\n    ctx.send({ data });\n  },\n\n  /**\n   * GET /components/:uid\n   * Returns a specific component\n   * @param {Object} ctx - koa context\n   */\n  async getComponent(ctx: Context) {\n    const { uid } = ctx.params;\n\n    const component = strapi.components[uid];\n\n    if (!component) {\n      return ctx.send({ error: 'component.notFound' }, 404);\n    }\n\n    const componentService = getService('components');\n\n    ctx.send({ data: componentService.formatComponent(component) });\n  },\n\n  /**\n   * POST /components\n   * Creates a component and returns its infos\n   * @param {Object} ctx - koa context\n   */\n  async createComponent(ctx: Context) {\n    const body = ctx.request.body as any;\n\n    try {\n      await validateComponentInput(body);\n    } catch (error) {\n      return ctx.send({ error }, 400);\n    }\n\n    try {\n      strapi.reload.isWatching = false;\n\n      const componentService = getService('components');\n\n      const component = await componentService.createComponent({\n        component: body.component,\n        components: body.components,\n      });\n\n      setImmediate(() => strapi.reload());\n\n      ctx.send({ data: { uid: component.uid } }, 201);\n    } catch (error) {\n      strapi.log.error(error);\n      ctx.send({ error: (error as any)?.message || 'Unknown error' }, 400);\n    }\n  },\n\n  /**\n   * PUT /components/:uid\n   * Updates a component and return its infos\n   * @param {Object} ctx - koa context - enhanced koa context\n   */\n  async updateComponent(ctx: Context) {\n    const { uid } = ctx.params;\n    const body = ctx.request.body as any;\n\n    if (!_.has(strapi.components, uid)) {\n      return ctx.send({ error: 'component.notFound' }, 404);\n    }\n\n    try {\n      await validateUpdateComponentInput(body);\n    } catch (error) {\n      return ctx.send({ error }, 400);\n    }\n\n    try {\n      strapi.reload.isWatching = false;\n\n      const componentService = getService('components');\n\n      const component = (await componentService.editComponent(uid, {\n        component: body.component,\n        components: body.components,\n      })) as any;\n\n      setImmediate(() => strapi.reload());\n\n      ctx.send({ data: { uid: component.uid } });\n    } catch (error) {\n      strapi.log.error(error);\n\n      ctx.send({ error: (error as any)?.message || 'Unknown error' }, 400);\n    }\n  },\n\n  /**\n   * DELETE /components/:uid\n   * Deletes a components and returns its old infos\n   * @param {Object} ctx - koa context\n   */\n  async deleteComponent(ctx: Context) {\n    const { uid } = ctx.params;\n\n    if (!_.has(strapi.components, uid)) {\n      return ctx.send({ error: 'component.notFound' }, 404);\n    }\n\n    try {\n      strapi.reload.isWatching = false;\n\n      const componentService = getService('components');\n\n      const component = await componentService.deleteComponent(uid);\n\n      setImmediate(() => strapi.reload());\n\n      ctx.send({ data: { uid: component.uid } });\n    } catch (error) {\n      strapi.log.error(error);\n      ctx.send({ error: (error as any)?.message || 'Unknown error' }, 400);\n    }\n  },\n};\n"],"names":["getComponents","ctx","componentService","getService","componentUIDs","Object","keys","strapi","components","data","map","uid","formatComponent","send","getComponent","params","component","error","createComponent","body","request","validateComponentInput","reload","isWatching","setImmediate","log","message","updateComponent","_","has","validateUpdateComponentInput","editComponent","deleteComponent"],"mappings":"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"}